{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":2716,\"strength\":2,\"defense\":2,\"dexterity\":2,\"agility\":1,\"charisma\":2,\"intelligence\":0},\"exp\":{\"hacking\":1795484192.9984665,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":2.3062404239438625,\"hacking_speed\":2.3635640482650913,\"hacking_money\":6.6475198270900195,\"hacking_grow\":4.038723616091325,\"hacking\":5.637502343419949,\"hacking_exp\":5.3441184561930575,\"strength\":2.5478576412370417,\"strength_exp\":2.335536171133955,\"defense\":2.215528383684384,\"defense_exp\":2.335536171133955,\"dexterity\":2.9427755756287817,\"dexterity_exp\":2.335536171133955,\"agility\":1.9385873357238355,\"agility_exp\":2.335536171133955,\"charisma\":2.626442433006328,\"charisma_exp\":2.5170073316310635,\"hacknet_node_money\":1.84627365307032,\"hacknet_node_purchase_cost\":0.5416315172656104,\"hacknet_node_ram_cost\":0.5416315172656104,\"hacknet_node_core_cost\":0.5416315172656104,\"hacknet_node_level_cost\":0.5416315172656104,\"company_rep\":3.3224496777530033,\"faction_rep\":2.517007331631063,\"work_money\":3.608911109656555,\"crime_success\":1.9897291159138841,\"crime_money\":1.9897291159138841,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":40,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"PCMatrix\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":41,\"name\":\"NeuroFlux Governor\"},{\"level\":42,\"name\":\"NeuroFlux Governor\"},{\"level\":43,\"name\":\"NeuroFlux Governor\"},{\"level\":44,\"name\":\"NeuroFlux Governor\"},{\"level\":45,\"name\":\"NeuroFlux Governor\"},{\"level\":46,\"name\":\"NeuroFlux Governor\"},{\"level\":47,\"name\":\"NeuroFlux Governor\"},{\"level\":48,\"name\":\"NeuroFlux Governor\"},{\"level\":49,\"name\":\"NeuroFlux Governor\"},{\"level\":50,\"name\":\"NeuroFlux Governor\"},{\"level\":51,\"name\":\"NeuroFlux Governor\"},{\"level\":52,\"name\":\"NeuroFlux Governor\"},{\"level\":53,\"name\":\"NeuroFlux Governor\"},{\"level\":54,\"name\":\"NeuroFlux Governor\"},{\"level\":55,\"name\":\"NeuroFlux Governor\"},{\"level\":56,\"name\":\"NeuroFlux Governor\"},{\"level\":57,\"name\":\"NeuroFlux Governor\"},{\"level\":58,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Daedalus\",\"BitRunners\",\"NiteSec\",\"Volhaven\",\"Tian Di Hui\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"The Black Hand\",\"CyberSec\"]},\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-2084.767499999984,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":233798026308540.3,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":900000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":715462494032531.8,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":2135013856633.136,\"total\":233798025308540.3,\"work\":0,\"servers\":-317194240000,\"other\":-505313400000,\"augmentations\":-482977874940651.4}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1144.8000000000002,\"codingcontract\":2812500000,\"corporation\":0,\"crime\":42054600,\"gang\":0,\"hacking\":1399835789783684.8,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":962203563708.3942,\"total\":550719545105245.56,\"work\":0,\"servers\":-175746468006187.6,\"other\":-526574200000,\"augmentations\":-673808260589366.9}},\"playtimeSinceLastAug\":12404000,\"playtimeSinceLastBitnode\":94254800,\"lastAugReset\":1709555603871,\"lastNodeReset\":1709473752249,\"purchasedServers\":[\"daemon-grow\",\"daemon-grow-0\",\"daemon-grow-1\",\"daemon-hack\",\"daemon-weak\",\"daemon-grow-2\"],\"scriptProdSinceLastAug\":718154982416257.8,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,2]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1708793459067},{\"ID\":\"FROZE\",\"unlockedOn\":1708804573260},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1708819127725},{\"ID\":\"TOR\",\"unlockedOn\":1708819187737},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1708819727725},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1708823028666},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1708823028668},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1708823328667},{\"ID\":\"NITESEC\",\"unlockedOn\":1708889793992},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1708898400757},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1708942188632},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1708946531579},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1708946951570},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1708947071581},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1708979204993},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1709031428692},{\"ID\":\"TRAVEL\",\"unlockedOn\":1709139381830},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1709150990586},{\"ID\":\"4S\",\"unlockedOn\":1709151830586},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1709154050587},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1709215419160},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1709218179165},{\"ID\":\"DONATION\",\"unlockedOn\":1709244468432},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1709295506626},{\"ID\":\"SF1.1\",\"unlockedOn\":1709322955281},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1709473001825},{\"ID\":\"FAST_BN\",\"unlockedOn\":1709473329024},{\"ID\":\"WORKOUT\",\"unlockedOn\":1709496302063},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1709547847094}],\"terminalCommandHistory\":[\"run relaySMTP.exe \",\"run HTTPWorm.exe \",\"run SQLInject.exe \",\"run NUKE.exe \",\"baci\",\"backdoor \",\"scan-analyze 10\",\"home\",\"scan-analyze 10\",\"backdoor \",\"home\",\"run serverStats.js \",\"run sm.js -k daemon-hack \",\"run sm.js -k daemon-hack-0\",\"run hackingDeamon.js \",\"run serverStats.js \",\"run CodingContracts/manager.js \",\"scan-analyze 10\",\"analyze \",\"home\",\"run hackingDeamon.js \",\"run serverStats.js \",\"ls\",\"run CodingContracts/manager.js \",\"run bestServer.js \",\"run CodingContracts/manager.js \",\"free\",\"run hackingDeamon.js \",\"run serverStats.js \",\"connect darkweb \",\"buy -a\",\"home\",\"scan-analyze 10\",\"backdoor \",\"scan-analyze 10\",\"backdoor \",\"homw\",\"home\",\"run CodingContracts/manager.js \",\"run hackingDeamon.js \",\"run serverStats.js \",\"run hackingDeamon.js \",\"run serverStats.js \",\"run hackingDeamon.js \",\"run serverStats.js \",\"run bestServer.js e\",\"run hackingDeamon.js the-hub\",\"run hackingDeamon.js phantasy\",\"run fl1ght.exe \",\"run CodingContracts/manager.js \"],\"lastUpdate\":1709568008099,\"lastSave\":1709567966111,\"totalPlaytime\":774607000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":39731,\"factionWorkType\":\"hacking\",\"factionName\":\"Daedalus\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1a1ebb4b422ad0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"87.8.7.3\",\"isConnectedTo\":true,\"maxRam\":1048576,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"parallel/growingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  growServer(ns, \\\"foodnstuff\\\", 0);\\n}\\nexport function growServer(ns, target, batchId, delay = 0) {\\n  const serverMaxMoney = ns.getServerMaxMoney(target);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(target);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  const totalGrowThreadsNeeded = Math.ceil(ns.growthAnalyze(target, moneyMultiplier));\\n  ns.print(\\\"Actual grow threads needed: \\\" + totalGrowThreadsNeeded);\\n  if (totalGrowThreadsNeeded < 1) {\\n    ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const growingScriptRam = 1.75;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n    if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n      ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n  const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to grow \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to grow \\\" + target);\\n  }\\n  ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3dpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBncm93U2VydmVyKG5zLCBcImZvb2Ruc3R1ZmZcIiwgMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBncm93U2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGJhdGNoSWQ6IG51bWJlciwgZGVsYXkgPSAwKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcbiAgICBjb25zdCBzZXJ2ZXJDdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpO1xyXG4gICAgbGV0IG1vbmV5TXVsdGlwbGllciA9IHNlcnZlck1heE1vbmV5IC8gc2VydmVyQ3VycmVudE1vbmV5O1xyXG4gICAgaWYgKGlzTmFOKG1vbmV5TXVsdGlwbGllcikgfHwgbW9uZXlNdWx0aXBsaWVyID09IEluZmluaXR5KSBtb25leU11bHRpcGxpZXIgPSAxO1xyXG4gICAgY29uc3QgdG90YWxHcm93VGhyZWFkc05lZWRlZCA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgbW9uZXlNdWx0aXBsaWVyKSk7XHJcblxyXG4gICAgbnMucHJpbnQoXCJBY3R1YWwgZ3JvdyB0aHJlYWRzIG5lZWRlZDogXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKTtcclxuXHJcbiAgICBpZiAodG90YWxHcm93VGhyZWFkc05lZWRlZCA8IDEpIHtcclxuICAgICAgICBucy5wcmludChcIk5vIGdyb3cgdGhyZWFkcyBuZWVkZWQsIHNraXBwaW5nIGdyb3d0aCBwcm9jZXNzXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjIGdyb3cuanMgd2l0aCBudW0gb2YgdGhyZWFkc1xyXG4gICAgY29uc3QgYWxsSG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcclxuICAgIGNvbnN0IGdyb3dpbmdTY3JpcHRSYW0gPSAxLjc1O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gZ3Jvd2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQpIHtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImdyb3cuanNcIiwgaG9zdC5uYW1lLCB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIk5vIGF2YWlsYWJsZSBob3N0IHRvIGdyb3cgXCIgKyB0YXJnZXQgKyBcIi4gQXR0ZW1wdGluZyB0byB1cGdyYWRlL2J1eSBzZXJ2ZXIuLi5cIik7XHJcblxyXG4gICAgY29uc3QgbmVlZGVkR3Jvd1JhbSA9IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKiBncm93aW5nU2NyaXB0UmFtO1xyXG4gICAgY29uc3Qgc2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIG5lZWRlZEdyb3dSYW0sIENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICBpZiAoc2VydmVyID09PSBcIlwiKSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGdyb3cgXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byBncm93IFwiICsgdGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBucy5leGVjKFwiZ3Jvdy5qc1wiLCBzZXJ2ZXIsIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsY0FBYztBQUV2QixTQUFTLHFCQUFxQjtBQUU5QixzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLGFBQVcsSUFBSSxjQUFjLENBQUM7QUFDbEM7QUFFTyxnQkFBUyxXQUFXLElBQVEsUUFBZ0IsU0FBaUIsUUFBUSxHQUFZO0FBQ3BGLFFBQU0saUJBQWlCLEdBQUcsa0JBQWtCLE1BQU07QUFDbEQsUUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsTUFBTTtBQUM1RCxNQUFJLGtCQUFrQixpQkFBaUI7QUFDdkMsTUFBSSxNQUFNLGVBQWUsS0FBSyxtQkFBbUI7QUFBVSxzQkFBa0I7QUFDN0UsUUFBTSx5QkFBeUIsS0FBSyxLQUFLLEdBQUcsY0FBYyxRQUFRLGVBQWUsQ0FBQztBQUVsRixLQUFHLE1BQU0saUNBQWlDLHNCQUFzQjtBQUVoRSxNQUFJLHlCQUF5QixHQUFHO0FBQzVCLE9BQUcsTUFBTSxpREFBaUQ7QUFDMUQsV0FBTztBQUFBLEVBQ1g7QUFHQSxRQUFNLFdBQVcsMEJBQTBCLEVBQUU7QUFDN0MsUUFBTSxtQkFBbUI7QUFFekIsV0FBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFVBQU0sbUJBQW1CLEtBQUssTUFBTSxLQUFLLGVBQWUsZ0JBQWdCO0FBRXhFLFFBQUksb0JBQW9CLHdCQUF3QjtBQUM1QyxTQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sd0JBQXdCLFFBQVEsS0FBSztBQUNuRSxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFFQSxLQUFHLE1BQU0sT0FBTyxTQUFTLCtCQUErQixTQUFTLHVDQUF1QztBQUV4RyxRQUFNLGdCQUFnQix5QkFBeUI7QUFDL0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksZUFBZSxPQUFPLGdCQUFnQjtBQUUxRixNQUFJLFdBQVcsSUFBSTtBQUNmLE9BQUcsT0FBTyx5Q0FBeUMsTUFBTTtBQUN6RCxVQUFNLElBQUksTUFBTSx5Q0FBeUMsTUFBTTtBQUFBLEVBQ25FO0FBRUEsS0FBRyxLQUFLLFdBQVcsUUFBUSx3QkFBd0IsUUFBUSxLQUFLO0FBRWhFLFNBQU87QUFDWDsiLCJuYW1lcyI6W119\",\"filename\":\"parallel/growingAlgo.js\",\"server\":\"home\"}}],[\"parallel/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  hackServer(ns, \\\"silver-helix\\\", 0.8, 0);\\n}\\nexport function hackServer(ns, target, threshold, batchId, delay = 0) {\\n  const totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n  ns.print(\\\"actual hack threads needed: \\\" + totalHackThreadsNeeded);\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const hackingScriptRam = 1.7;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n    if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n      ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Buying server...\\\");\\n  const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to hack \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to hack \\\" + target);\\n  }\\n  ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBoYWNrU2VydmVyKG5zLCBcInNpbHZlci1oZWxpeFwiLCAwLjgsIDApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlciwgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApIHtcclxuICAgIGNvbnN0IHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSBNYXRoLmNlaWwodGhyZXNob2xkIC8gbnMuaGFja0FuYWx5emUodGFyZ2V0KSk7XHJcbiAgICBucy5wcmludChcImFjdHVhbCBoYWNrIHRocmVhZHMgbmVlZGVkOiBcIiArIHRvdGFsSGFja1RocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICBjb25zdCBoYWNraW5nU2NyaXB0UmFtID0gMS43O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHRvdGFsSGFja1RocmVhZHNOZWVkZWQpIHtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImhhY2suanNcIiwgaG9zdC5uYW1lLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIk5vIGF2YWlsYWJsZSBob3N0IHRvIGdyb3cgXCIgKyB0YXJnZXQgKyBcIi4gQnV5aW5nIHNlcnZlci4uLlwiKTtcclxuXHJcbiAgICBjb25zdCBuZWVkZWRHcm93UmFtID0gdG90YWxIYWNrVGhyZWFkc05lZWRlZCAqIGhhY2tpbmdTY3JpcHRSYW07XHJcbiAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkR3Jvd1JhbSwgQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpO1xyXG5cclxuICAgIGlmIChzZXJ2ZXIgPT09IFwiXCIpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gaGFjayBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGhhY2sgXCIgKyB0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIG5zLmV4ZWMoXCJoYWNrLmpzXCIsIHNlcnZlciwgdG90YWxIYWNrVGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxpQ0FBaUM7QUFDMUMsU0FBUyxjQUFjO0FBRXZCLFNBQVMscUJBQXFCO0FBRTlCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsYUFBVyxJQUFJLGdCQUFnQixLQUFLLENBQUM7QUFDekM7QUFFTyxnQkFBUyxXQUFXLElBQVEsUUFBZ0IsV0FBbUIsU0FBaUIsUUFBUSxHQUFHO0FBQzlGLFFBQU0seUJBQXlCLEtBQUssS0FBSyxZQUFZLEdBQUcsWUFBWSxNQUFNLENBQUM7QUFDM0UsS0FBRyxNQUFNLGlDQUFpQyxzQkFBc0I7QUFFaEUsUUFBTSxXQUFXLDBCQUEwQixFQUFFO0FBQzdDLFFBQU0sbUJBQW1CO0FBRXpCLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDdEMsVUFBTSxPQUFPLFNBQVMsQ0FBQztBQUV2QixVQUFNLG1CQUFtQixLQUFLLE1BQU0sS0FBSyxlQUFlLGdCQUFnQjtBQUV4RSxRQUFJLG9CQUFvQix3QkFBd0I7QUFDNUMsU0FBRyxLQUFLLFdBQVcsS0FBSyxNQUFNLHdCQUF3QixRQUFRLEtBQUs7QUFDbkUsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBRUEsS0FBRyxNQUFNLE9BQU8sU0FBUywrQkFBK0IsU0FBUyxvQkFBb0I7QUFFckYsUUFBTSxnQkFBZ0IseUJBQXlCO0FBQy9DLFFBQU0sU0FBUyxjQUFjLG1CQUFtQixJQUFJLGVBQWUsT0FBTyxnQkFBZ0I7QUFFMUYsTUFBSSxXQUFXLElBQUk7QUFDZixPQUFHLE9BQU8seUNBQXlDLE1BQU07QUFDekQsVUFBTSxJQUFJLE1BQU0seUNBQXlDLE1BQU07QUFBQSxFQUNuRTtBQUVBLEtBQUcsS0FBSyxXQUFXLFFBQVEsd0JBQXdCLFFBQVEsS0FBSztBQUVoRSxTQUFPO0FBQ1g7IiwibmFtZXMiOltdfQ==\",\"filename\":\"parallel/hackingAlgo.js\",\"server\":\"home\"}}],[\"parallel/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestServer } from \\\"/bestServer.js\\\";\\nimport { Colors, getTimeH } from \\\"/lib.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { growServer } from \\\"/parallel/growingAlgo.js\\\";\\nimport { hackServer } from \\\"/parallel/hackingAlgo.js\\\";\\nimport { weakenServer } from \\\"/parallel/weakenAlgo.js\\\";\\nconst DELAY_MARGIN_MS = Config.DELAY_MARGIN_MS;\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServer(ns);\\n    await parallelCycle(ns, target, 0.8);\\n  }\\n}\\nexport async function parallelCycle(ns, target, hackThreshold = 0.8, num_batches = 1) {\\n  const weakTime = ns.getWeakenTime(target);\\n  const growTime = ns.getGrowTime(target);\\n  const hackTime = ns.getHackTime(target);\\n  if (num_batches > 1) {\\n    ns.print(Colors.CYAN + \\\"------------ MULTI BATCH MODE ------------\\\");\\n    num_batches = Math.floor((Math.floor(weakTime) - Config.LOOP_SAFETY_MARGIN_MS) / (4 * DELAY_MARGIN_MS));\\n    ns.tprint(Colors.E_ORANGE + \\\"num_batches: \\\" + num_batches);\\n    for (let batchId = 0; batchId < num_batches; batchId++) {\\n      ns.print(Colors.CYAN + \\\"------------ BATCH \\\" + batchId + \\\" ------------\\\");\\n      const pids = [];\\n      const hackDelay = weakTime - hackTime - DELAY_MARGIN_MS;\\n      const hackPid = WGHAlgorithms.hackServer(ns, target, hackThreshold, true, hackDelay);\\n      pids.push(hackPid);\\n      const weak1Pid = WGHAlgorithms.weakenServer(ns, target, 1, true);\\n      pids.push(weak1Pid);\\n      const growDelay = weakTime - growTime + DELAY_MARGIN_MS;\\n      const growPid = WGHAlgorithms.growServer(ns, target, true, growDelay);\\n      pids.push(growPid);\\n      let isLastWeaken = false;\\n      if (batchId === num_batches - 1)\\n        isLastWeaken = true;\\n      const weak2delay = 2 * DELAY_MARGIN_MS;\\n      const weak2Pid = WGHAlgorithms.weakenServer(ns, target, 2, true, weak2delay, isLastWeaken);\\n      pids.push(weak2Pid);\\n      if (weak1Pid == 0 || weak2Pid == 0 || growPid == 0 || hackPid == 0) {\\n        ns.print(Colors.RED + \\\"could not start all processes, killing batch \\\" + batchId);\\n        for (const pid of pids) {\\n          ns.kill(pid);\\n        }\\n        break;\\n      }\\n      pids.length = 0;\\n      ns.print(Colors.GREEN + \\\"Cycle done. Beginning new cycle..\\\" + Colors.RESET);\\n      const before = Date.now();\\n      await ns.sleep(4 * DELAY_MARGIN_MS);\\n      const after = Date.now();\\n      ns.print(\\\"sleep took: \\\" + (after - before) + \\\"ms\\\");\\n    }\\n    ns.print(\\\"Waiting for all processes to finish..\\\");\\n    const port = ns.getPortHandle(2);\\n    await port.nextWrite();\\n    const data = port.read();\\n    if (data !== \\\"done\\\")\\n      throw new Error(\\\"Invalid data from port 2 received: \\\" + data);\\n    ns.print(\\\"All processes finished, beginning new cycle.. \\\" + data);\\n  } else {\\n    ns.print(Colors.CYAN + \\\"------------ SINGLE BATCH MODE ------------\\\");\\n    const weakTime2 = ns.getWeakenTime(target);\\n    const growTime2 = ns.getGrowTime(target);\\n    const hackTime2 = ns.getHackTime(target);\\n    ns.print(\\\"Attempting to start Weak I at \\\" + getTimeH());\\n    const weak1Dispatched = weakenServer(ns, target, 1, 0);\\n    let weak2StartTime = 0;\\n    if (weak1Dispatched == true) {\\n      weak2StartTime = 2 * DELAY_MARGIN_MS;\\n      await ns.sleep(weak2StartTime);\\n    }\\n    ns.print(\\\"Attempting to start Weak II at \\\" + getTimeH());\\n    const weak2Dispatched = weakenServer(ns, target, 2, 0);\\n    let growStartTime = 0;\\n    if (weak2Dispatched == true) {\\n      growStartTime = weakTime2 + DELAY_MARGIN_MS - growTime2;\\n      const growDelay = growStartTime - weak2StartTime;\\n      await ns.sleep(growDelay);\\n    }\\n    ns.print(\\\"Attempting to start Grow at \\\" + getTimeH());\\n    const growDispatched = growServer(ns, target, 0);\\n    if (weak1Dispatched == true && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 2 was skipped. Did the last hack attempt fail?\\\\nHacking is about to start earlier than planned.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(Colors.YELLOW + \\\"Weak 1 and Weak 2 were skipped? Hacking now. \\\" + getTimeH() + Colors.RESET);\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == true && growDispatched == true && weak2Dispatched == true) {\\n      ns.print(Colors.GREEN + \\\"Hack is about to start as expected\\\" + Colors.RESET);\\n      const hackStartTime = weakTime2 + 3 * DELAY_MARGIN_MS - hackTime2;\\n      const hackDelayDiff = hackStartTime - growStartTime;\\n      await ns.sleep(hackDelayDiff);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == true && growDispatched == true) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 1 was skipped. Perhaps the server is already at the min sec lvl.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + 2 * DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime - growStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else {\\n      ns.print(Colors.RED + \\\"could not start hack!\\\" + Colors.RESET);\\n      ns.print(\\n        \\\"weak1Dispatched: \\\" + weak1Dispatched + \\\" | weak2Dispatched: \\\" + weak2Dispatched + \\\" | growDispatched: \\\" + growDispatched\\n      );\\n      printServerStats(ns, target, hackThreshold);\\n      return;\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiQC9Db25maWcvQ29uZmlnLmpzXCI7XHJcbmltcG9ydCB7IGdldEJlc3RTZXJ2ZXIgfSBmcm9tIFwiLi4vYmVzdFNlcnZlci5qc1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldFRpbWVIIH0gZnJvbSBcIi4uL2xpYi5qc1wiO1xyXG5pbXBvcnQgeyBwcmludFNlcnZlclN0YXRzIH0gZnJvbSBcIi4uL3NlcnZlclN0YXRzLmpzXCI7XHJcbmltcG9ydCB7IFdHSEFsZ29yaXRobXMgfSBmcm9tIFwiLi9XR0hBbGdvcml0aG1zLmpzXCI7XHJcbmltcG9ydCB7IGdyb3dTZXJ2ZXIgfSBmcm9tIFwiLi9ncm93aW5nQWxnby5qc1wiO1xyXG5pbXBvcnQgeyBoYWNrU2VydmVyIH0gZnJvbSBcIi4vaGFja2luZ0FsZ28uanNcIjtcclxuaW1wb3J0IHsgd2Vha2VuU2VydmVyIH0gZnJvbSBcIi4vd2Vha2VuQWxnby5qc1wiO1xyXG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIkAvVGltZS5qc1wiO1xyXG5cclxuY29uc3QgREVMQVlfTUFSR0lOX01TID0gQ29uZmlnLkRFTEFZX01BUkdJTl9NUztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICAvLyB0aW1pbmcgb3JkZXIgKGFsd2F5cyBzYW1lKTogd2Vha2VuID4gZ3JvdyA+IGhhY2tcclxuICAgIC8vIGZvciBub3csIGVhY2ggaGFzIG93biBzZXJ2ZXI6ICAgIGF3cy0wICAgYXdzLSAgICBhd3MtMiAgIGF3cy0zXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWFrICAgIHdlYWsgICAgZ3JvdyAgICBoYWNrXHJcblxyXG4gICAgLy8gc3RlcHM6IFdHV0gtV0dXSC0uLlxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRCZXN0U2VydmVyKG5zKTtcclxuICAgICAgICBhd2FpdCBwYXJhbGxlbEN5Y2xlKG5zLCB0YXJnZXQsIDAuOCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJhbGxlbEN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQgPSAwLjgsIG51bV9iYXRjaGVzID0gMSkge1xyXG4gICAgLy8gY29uc3QgdGltZSA9IFRpbWUuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBjb25zdCB3ZWFrVGltZSA9IG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KTtcclxuICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcclxuICAgIGNvbnN0IGhhY2tUaW1lID0gbnMuZ2V0SGFja1RpbWUodGFyZ2V0KTtcclxuXHJcbiAgICBpZiAobnVtX2JhdGNoZXMgPiAxKSB7XHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLSBNVUxUSSBCQVRDSCBNT0RFIC0tLS0tLS0tLS0tLVwiKTtcclxuXHJcbiAgICAgICAgbnVtX2JhdGNoZXMgPSBNYXRoLmZsb29yKChNYXRoLmZsb29yKHdlYWtUaW1lKSAtIENvbmZpZy5MT09QX1NBRkVUWV9NQVJHSU5fTVMpIC8gKDQgKiBERUxBWV9NQVJHSU5fTVMpKTtcclxuXHJcbiAgICAgICAgbnMudHByaW50KENvbG9ycy5FX09SQU5HRSArIFwibnVtX2JhdGNoZXM6IFwiICsgbnVtX2JhdGNoZXMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBiYXRjaElkID0gMDsgYmF0Y2hJZCA8IG51bV9iYXRjaGVzOyBiYXRjaElkKyspIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLSBCQVRDSCBcIiArIGJhdGNoSWQgKyBcIiAtLS0tLS0tLS0tLS1cIik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwaWRzID0gW107XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIGhhY2tpbmdcclxuICAgICAgICAgICAgY29uc3QgaGFja0RlbGF5ID0gd2Vha1RpbWUgLSBoYWNrVGltZSAtIERFTEFZX01BUkdJTl9NUztcclxuICAgICAgICAgICAgY29uc3QgaGFja1BpZCA9IFdHSEFsZ29yaXRobXMuaGFja1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCB0cnVlLCBoYWNrRGVsYXkpO1xyXG4gICAgICAgICAgICBwaWRzLnB1c2goaGFja1BpZCk7XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyB3ZWFrIElcclxuICAgICAgICAgICAgY29uc3Qgd2VhazFQaWQgPSBXR0hBbGdvcml0aG1zLndlYWtlblNlcnZlcihucywgdGFyZ2V0LCAxLCB0cnVlKTtcclxuICAgICAgICAgICAgcGlkcy5wdXNoKHdlYWsxUGlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIGdyb3dcclxuICAgICAgICAgICAgY29uc3QgZ3Jvd0RlbGF5ID0gd2Vha1RpbWUgLSBncm93VGltZSArIERFTEFZX01BUkdJTl9NUztcclxuICAgICAgICAgICAgY29uc3QgZ3Jvd1BpZCA9IFdHSEFsZ29yaXRobXMuZ3Jvd1NlcnZlcihucywgdGFyZ2V0LCB0cnVlLCBncm93RGVsYXkpO1xyXG4gICAgICAgICAgICBwaWRzLnB1c2goZ3Jvd1BpZCk7XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyB3ZWFrIElJXHJcbiAgICAgICAgICAgIGxldCBpc0xhc3RXZWFrZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKGJhdGNoSWQgPT09IG51bV9iYXRjaGVzIC0gMSkgaXNMYXN0V2Vha2VuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHdlYWsyZGVsYXkgPSAyICogREVMQVlfTUFSR0lOX01TO1xyXG4gICAgICAgICAgICBjb25zdCB3ZWFrMlBpZCA9IFdHSEFsZ29yaXRobXMud2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDIsIHRydWUsIHdlYWsyZGVsYXksIGlzTGFzdFdlYWtlbik7XHJcbiAgICAgICAgICAgIHBpZHMucHVzaCh3ZWFrMlBpZCk7XHJcblxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBhbGwgcHJvY2Vzc2VzIHdlcmUgZGlzcGF0Y2hlZCwga2lsbCB0aGVtIGlmIG5vdFxyXG4gICAgICAgICAgICBpZiAod2VhazFQaWQgPT0gMCB8fCB3ZWFrMlBpZCA9PSAwIHx8IGdyb3dQaWQgPT0gMCB8fCBoYWNrUGlkID09IDApIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcImNvdWxkIG5vdCBzdGFydCBhbGwgcHJvY2Vzc2VzLCBraWxsaW5nIGJhdGNoIFwiICsgYmF0Y2hJZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwaWQgb2YgcGlkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLmtpbGwocGlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwaWRzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIkN5Y2xlIGRvbmUuIEJlZ2lubmluZyBuZXcgY3ljbGUuLlwiICsgQ29sb3JzLlJFU0VUKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDQgKiBERUxBWV9NQVJHSU5fTVMpO1xyXG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFwic2xlZXAgdG9vazogXCIgKyAoYWZ0ZXIgLSBiZWZvcmUpICsgXCJtc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGF3YWl0IG5zLnNsZWVwKHdlYWtUaW1lICsgQ29uZmlnLkRFTEFZX01BUkdJTl9NUyk7XHJcbiAgICAgICAgbnMucHJpbnQoXCJXYWl0aW5nIGZvciBhbGwgcHJvY2Vzc2VzIHRvIGZpbmlzaC4uXCIpO1xyXG4gICAgICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKDIpO1xyXG4gICAgICAgIGF3YWl0IHBvcnQubmV4dFdyaXRlKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHBvcnQucmVhZCgpO1xyXG4gICAgICAgIGlmIChkYXRhICE9PSBcImRvbmVcIikgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkYXRhIGZyb20gcG9ydCAyIHJlY2VpdmVkOiBcIiArIGRhdGEpO1xyXG4gICAgICAgIG5zLnByaW50KFwiQWxsIHByb2Nlc3NlcyBmaW5pc2hlZCwgYmVnaW5uaW5nIG5ldyBjeWNsZS4uIFwiICsgZGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0gU0lOR0xFIEJBVENIIE1PREUgLS0tLS0tLS0tLS0tXCIpO1xyXG4gICAgICAgIGNvbnN0IHdlYWtUaW1lID0gbnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBoYWNrVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgLy8gd2VhayBJXHJcbiAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IFdlYWsgSSBhdCBcIiArIGdldFRpbWVIKCkpO1xyXG4gICAgICAgIGNvbnN0IHdlYWsxRGlzcGF0Y2hlZCA9IHdlYWtlblNlcnZlcihucywgdGFyZ2V0LCAxLCAwKTtcclxuXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAvLyB3ZWFrIElJIGRlbGF5XHJcblxyXG4gICAgICAgIC8vIGlmIHdlYWsgSSBza2lwLCBzdGFydCBJSSBpbW1lZGlhdGVseVxyXG4gICAgICAgIGxldCB3ZWFrMlN0YXJ0VGltZSA9IDA7XHJcbiAgICAgICAgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vIHdlYWsyU3RhcnRUaW1lID0gd2Vha1RpbWUgKyAyICogREVMQVlfTUFSR0lOX01TIC0gd2Vha1RpbWU7XHJcbiAgICAgICAgICAgIHdlYWsyU3RhcnRUaW1lID0gMiAqIERFTEFZX01BUkdJTl9NUztcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAod2VhazJTdGFydFRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZWFrIElJXHJcbiAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IFdlYWsgSUkgYXQgXCIgKyBnZXRUaW1lSCgpKTtcclxuICAgICAgICBjb25zdCB3ZWFrMkRpc3BhdGNoZWQgPSB3ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMiwgMCk7XHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gZ3JvdyBkZWxheVxyXG5cclxuICAgICAgICBsZXQgZ3Jvd1N0YXJ0VGltZSA9IDA7XHJcbiAgICAgICAgaWYgKHdlYWsyRGlzcGF0Y2hlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGdyb3dTdGFydFRpbWUgPSB3ZWFrVGltZSArIERFTEFZX01BUkdJTl9NUyAtIGdyb3dUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBncm93RGVsYXkgPSBncm93U3RhcnRUaW1lIC0gd2VhazJTdGFydFRpbWU7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGdyb3dEZWxheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBncm93XHJcbiAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IEdyb3cgYXQgXCIgKyBnZXRUaW1lSCgpKTtcclxuICAgICAgICBjb25zdCBncm93RGlzcGF0Y2hlZCA9IGdyb3dTZXJ2ZXIobnMsIHRhcmdldCwgMCk7XHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gaGFja2luZ1xyXG5cclxuICAgICAgICAvLyBoYWNraW5nIHN0YXJ0IGxvZ2ljLCBmb3IgZnVydGhlciB0aW1lIG9wdGltaXphdGlvbnNcclxuICAgICAgICAvLyBub3RlOiB3aGVuIHdlYWsyIGZhaWxzLCB0aGUgZ3JvdyBtdXN0IGFsc28gZmFpbCAoYW5kIHZpY2UgdmVyc2E6IHdoZW4gZ3JvdyBmYWlscywgd2VhazIgc2hvdWxkIG5vdCBoYXZlIHN0YXJ0ZWQpXHJcbiAgICAgICAgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSB0cnVlICYmIHdlYWsyRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiBncm93RGlzcGF0Y2hlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAvLyBzY2VuYXJpbzogd2VhazEgd29ya3MsIHJlc3Qgc2tpcFxyXG4gICAgICAgICAgICAvLyBoYWNrIGZpbmlzaGVzIDEgbWFyZ2luIHVuaXQgYWZ0ZXIgd2VhazEgZW5kc1xyXG4gICAgICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiV2VhayAyIHdhcyBza2lwcGVkLiBEaWQgdGhlIGxhc3QgaGFjayBhdHRlbXB0IGZhaWw/XFxuSGFja2luZyBpcyBhYm91dCB0byBzdGFydCBlYXJsaWVyIHRoYW4gcGxhbm5lZC5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgQ29sb3JzLlJFU0VULFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrU3RhcnRUaW1lID0gd2Vha1RpbWUgKyBERUxBWV9NQVJHSU5fTVMgLSBoYWNrVGltZTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja1N0YXJ0VGltZSk7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBIYWNrIGF0IFwiICsgZ2V0VGltZUgoKSk7XHJcbiAgICAgICAgICAgIGhhY2tTZXJ2ZXIobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCwgMCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiB3ZWFrMkRpc3BhdGNoZWQgPT0gZmFsc2UgJiYgZ3Jvd0Rpc3BhdGNoZWQgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gc2NlbmFyaW86IHdlYWsxIGFuZCB3ZWFrMiBza2lwcGVkXHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIldlYWsgMSBhbmQgV2VhayAyIHdlcmUgc2tpcHBlZD8gSGFja2luZyBub3cuIFwiICsgZ2V0VGltZUgoKSArIENvbG9ycy5SRVNFVCk7XHJcbiAgICAgICAgICAgIGhhY2tTZXJ2ZXIobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCwgMCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSB0cnVlICYmIGdyb3dEaXNwYXRjaGVkID09IHRydWUgJiYgd2VhazJEaXNwYXRjaGVkID09IHRydWUpIHtcclxuICAgICAgICAgICAgLy8gaGFjayBub3JtYWxcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJIYWNrIGlzIGFib3V0IHRvIHN0YXJ0IGFzIGV4cGVjdGVkXCIgKyBDb2xvcnMuUkVTRVQpO1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrU3RhcnRUaW1lID0gd2Vha1RpbWUgKyAzICogREVMQVlfTUFSR0lOX01TIC0gaGFja1RpbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhY2tEZWxheURpZmYgPSBoYWNrU3RhcnRUaW1lIC0gZ3Jvd1N0YXJ0VGltZTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja0RlbGF5RGlmZik7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBIYWNrIGF0IFwiICsgZ2V0VGltZUgoKSk7XHJcbiAgICAgICAgICAgIGhhY2tTZXJ2ZXIobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCwgMCk7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiB3ZWFrMkRpc3BhdGNoZWQgPT0gdHJ1ZSAmJiBncm93RGlzcGF0Y2hlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vIGNhc2Ugd2VhazEgd2FzIHNraXBwZWQsIGJ1dCB3ZWFrMiBhbmQgZ3JvdyB3ZXJlIGRpc3BhdGNoZWRcclxuXHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgQ29sb3JzLllFTExPVyArIFwiV2VhayAxIHdhcyBza2lwcGVkLiBQZXJoYXBzIHRoZSBzZXJ2ZXIgaXMgYWxyZWFkeSBhdCB0aGUgbWluIHNlYyBsdmwuXCIgKyBDb2xvcnMuUkVTRVQsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhY2tTdGFydFRpbWUgPSB3ZWFrVGltZSArIDIgKiBERUxBWV9NQVJHSU5fTVMgLSBoYWNrVGltZTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja1N0YXJ0VGltZSAtIGdyb3dTdGFydFRpbWUpO1xyXG4gICAgICAgICAgICBucy5wcmludChcIkF0dGVtcHRpbmcgdG8gc3RhcnQgSGFjayBhdCBcIiArIGdldFRpbWVIKCkpO1xyXG4gICAgICAgICAgICBoYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIDApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLlJFRCArIFwiY291bGQgbm90IHN0YXJ0IGhhY2shXCIgKyBDb2xvcnMuUkVTRVQpO1xyXG4gICAgICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgICAgIFwid2VhazFEaXNwYXRjaGVkOiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgd2VhazFEaXNwYXRjaGVkICtcclxuICAgICAgICAgICAgICAgICAgICBcIiB8IHdlYWsyRGlzcGF0Y2hlZDogXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdlYWsyRGlzcGF0Y2hlZCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgfCBncm93RGlzcGF0Y2hlZDogXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3dEaXNwYXRjaGVkLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBwcmludFNlcnZlclN0YXRzKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuIG5vdGVzOlxyXG4gd2Vha2VuIHJlbW92ZXMgMC4wNSBzZWMgbHZsXHJcbiBncm93IGFkZHMgMC4wMDQgc2VjIGx2bFxyXG5cclxuIGdyb3cgYWRkcyBtb25leTpcclxuXHJcbiAqL1xyXG4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsY0FBYztBQUN2QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLFFBQVEsZ0JBQWdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsb0JBQW9CO0FBRzdCLE1BQU0sa0JBQWtCLE9BQU87QUFFL0Isc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQU9uQixTQUFPLE1BQU07QUFDVCxVQUFNLFNBQVMsY0FBYyxFQUFFO0FBQy9CLFVBQU0sY0FBYyxJQUFJLFFBQVEsR0FBRztBQUFBLEVBQ3ZDO0FBQ0o7QUFFQSxzQkFBc0IsY0FBYyxJQUFRLFFBQWdCLGdCQUFnQixLQUFLLGNBQWMsR0FBRztBQUc5RixRQUFNLFdBQVcsR0FBRyxjQUFjLE1BQU07QUFDeEMsUUFBTSxXQUFXLEdBQUcsWUFBWSxNQUFNO0FBQ3RDLFFBQU0sV0FBVyxHQUFHLFlBQVksTUFBTTtBQUV0QyxNQUFJLGNBQWMsR0FBRztBQUNqQixPQUFHLE1BQU0sT0FBTyxPQUFPLDRDQUE0QztBQUVuRSxrQkFBYyxLQUFLLE9BQU8sS0FBSyxNQUFNLFFBQVEsSUFBSSxPQUFPLDBCQUEwQixJQUFJLGdCQUFnQjtBQUV0RyxPQUFHLE9BQU8sT0FBTyxXQUFXLGtCQUFrQixXQUFXO0FBRXpELGFBQVMsVUFBVSxHQUFHLFVBQVUsYUFBYSxXQUFXO0FBQ3BELFNBQUcsTUFBTSxPQUFPLE9BQU8sd0JBQXdCLFVBQVUsZUFBZTtBQUV4RSxZQUFNLE9B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\",\"filename\":\"parallel/manager.js\",\"server\":\"home\"}}],[\"parallel/weakenAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  weakenServer(ns, \\\"foodnstuff\\\", 1, 0);\\n}\\nexport function weakenServer(ns, target, order, batchId, delay = 0) {\\n  let totalWeakenThreadsNeeded = 0;\\n  if (order == 1) {\\n    totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    ns.print(\\\"Actual weaken1 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else if (order == 2) {\\n    const growThreads = getGrowThreads(ns, target);\\n    const secIncrease = ns.growthAnalyzeSecurity(growThreads, target);\\n    totalWeakenThreadsNeeded = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    ns.print(\\\"Actual weaken2 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else {\\n    throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n  }\\n  if (totalWeakenThreadsNeeded < 1) {\\n    ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const weakenScriptRam = 1.75;\\n  let threadsDispatched = 0;\\n  let threadsRemaining = totalWeakenThreadsNeeded;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    if (threadsDispatched >= totalWeakenThreadsNeeded)\\n      break;\\n    const host = allHosts[i];\\n    const freeRam = host.availableRam;\\n    if (freeRam < weakenScriptRam)\\n      continue;\\n    const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n    const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n    ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay);\\n    threadsRemaining -= threadsToDispatch;\\n    threadsDispatched += threadsToDispatch;\\n  }\\n  if (threadsRemaining <= 0) {\\n    ns.print(\\\"Done deploying weaken\\\" + order + \\\"!\\\");\\n    return true;\\n  }\\n  ns.print(\\n    Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n  );\\n  const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to weak \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to weak \\\" + target);\\n  }\\n  ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbkFsZ28udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIH0gZnJvbSBcIkAvYmVzdFNlcnZlclwiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldEdyb3dUaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICB3ZWFrZW5TZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAxLCAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICogVGhlIG51bWJlciBvZiB0aHJlYWRzIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHdlYWtlbmluZyBhbmQgdGhlIHRhcmdldCBzZXJ2ZXIncyBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0QVBJIG9iamVjdC5cclxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICogQHBhcmFtIGhvc3QgLSBUaGUgbmFtZSBvZiB0aGUgY3VycmVudCBzZXJ2ZXIgaG9zdGluZyB0aGUgd2Vha2VuIHNjcmlwdC5cclxuICogQHBhcmFtIG9yZGVyIC0gVGhlIG9yZGVyIG9mIHdlYWtlbmluZy4gQ2FuIG9ubHkgYmUgZWl0aGVyIDEgb3IgMi5cclxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgd2Vha2VuIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC5cclxuICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgd2Vha2VuIG9yZGVyIGlzIG5vdCAxIG9yIDIsIG9yIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggZnJlZSBSQU0gdG8gZXhlY3V0ZSB0aGUgd2Vha2VuIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3ZWFrZW5TZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgb3JkZXI6IG51bWJlciwgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApOiBib29sZWFuIHtcclxuICAgIGxldCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgLy8gY2FsY3VsYXRlIHdlYWtlbmluZyB0aHJlYWRzIGJhc2VkIG9uIHRoZSBvcmRlclxyXG5cclxuICAgIGlmIChvcmRlciA9PSAxKSB7XHJcbiAgICAgICAgLy8gZmlyc3Qgd2VhayBoYXMgdG8gd2Vha2VuIHNlcnZlciB0byBtaW4gZnJvbSB1bmtub3duIHNlYyBsdmxcclxuICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjEgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMikge1xyXG4gICAgICAgIC8vIHNlY29uZCB3ZWFrIG9ubHkgaGFzIHRvIHJlbW92ZSB0aGUgc2VjIGluY3JlYXNlIGZyb20gdGhlIGdyb3cgYmVmb3JlIChtb3JlIHJhbSBlZmZpY2llbnQpXHJcbiAgICAgICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBzZWNJbmNyZWFzZSA9IG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eShncm93VGhyZWFkcywgdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gTWF0aC5jZWlsKHNlY0luY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjIgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2Vha2VuIG9yZGVyIGNhbiBvbmx5IGJlIGVpdGhlciAxIG9yIDIhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPCAxKSB7XHJcbiAgICAgICAgbnMucHJpbnQoXCJXZWFrZW50aHJlYWRzIGFyZSAwLCBza2lwcGluZyB3ZWFrIFwiICsgb3JkZXIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgY29uc3Qgd2Vha2VuU2NyaXB0UmFtID0gMS43NTtcclxuXHJcbiAgICBsZXQgdGhyZWFkc0Rpc3BhdGNoZWQgPSAwO1xyXG4gICAgbGV0IHRocmVhZHNSZW1haW5pbmcgPSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQ7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XHJcbiAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG5cclxuICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgaWYgKGZyZWVSYW0gPCB3ZWFrZW5TY3JpcHRSYW0pIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHRocmVhZFNwYWNlID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gd2Vha2VuU2NyaXB0UmFtKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgdGhyZWFkU3BhY2UpO1xyXG5cclxuICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgKz0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPD0gMCkge1xyXG4gICAgICAgIG5zLnByaW50KFwiRG9uZSBkZXBsb3lpbmcgd2Vha2VuXCIgKyBvcmRlciArIFwiIVwiKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIG5zLnByaW50KFxyXG4gICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICBcIlRoZXJlIGFyZSBcIiArXHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgK1xyXG4gICAgICAgICAgICBcIiB0aHJlYWRzIHJlbWFpbmluZyBhZnRlciBkaXNwYXRjaGluZyBhbGwgdGhyZWFkcywgYXR0ZW1wdGluZyB0byBkaXNwYXRjaCByZW1haW5pbmcgdGhyZWFkcyBvbiBwdXJjaGFzZWQgc2VydmVyXCIsXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG5lZWRlZFdlYWtlblJhbSA9IHRocmVhZHNSZW1haW5pbmcgKiB3ZWFrZW5TY3JpcHRSYW07XHJcbiAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkV2Vha2VuUmFtLCBDb25maWcuV0VBS19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgaWYgKHNlcnZlciA9PT0gXCJcIikge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byB3ZWFrIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gd2VhayBcIiArIHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbnMuZXhlYyhcIndlYWtlbi5qc1wiLCBzZXJ2ZXIsIHRocmVhZHNSZW1haW5pbmcsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsUUFBUSxnQkFBZ0Isd0JBQXdCO0FBRXpELFNBQVMscUJBQXFCO0FBRTlCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsZUFBYSxJQUFJLGNBQWMsR0FBRyxDQUFDO0FBQ3ZDO0FBYU8sZ0JBQVMsYUFBYSxJQUFRLFFBQWdCLE9BQWUsU0FBaUIsUUFBUSxHQUFZO0FBQ3JHLE1BQUksMkJBQTJCO0FBRy9CLE1BQUksU0FBUyxHQUFHO0FBRVosK0JBQTJCLGlCQUFpQixJQUFJLE1BQU07QUFDdEQsT0FBRyxNQUFNLG9DQUFvQyx3QkFBd0I7QUFBQSxFQUN6RSxXQUFXLFNBQVMsR0FBRztBQUVuQixVQUFNLGNBQWMsZUFBZSxJQUFJLE1BQU07QUFDN0MsVUFBTSxjQUFjLEdBQUcsc0JBQXNCLGFBQWEsTUFBTTtBQUVoRSwrQkFBMkIsS0FBSyxLQUFLLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUV0RSxPQUFHLE1BQU0sb0NBQW9DLHdCQUF3QjtBQUFBLEVBQ3pFLE9BQU87QUFDSCxVQUFNLElBQUksTUFBTSx5Q0FBeUM7QUFBQSxFQUM3RDtBQUVBLE1BQUksMkJBQTJCLEdBQUc7QUFDOUIsT0FBRyxNQUFNLHdDQUF3QyxLQUFLO0FBQ3RELFdBQU87QUFBQSxFQUNYO0FBR0EsUUFBTSxXQUFXLDBCQUEwQixFQUFFO0FBQzdDLFFBQU0sa0JBQWtCO0FBRXhCLE1BQUksb0JBQW9CO0FBQ3hCLE1BQUksbUJBQW1CO0FBQ3ZCLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDdEMsUUFBSSxxQkFBcUI7QUFBMEI7QUFDbkQsVUFBTSxPQUFPLFNBQVMsQ0FBQztBQUV2QixVQUFNLFVBQVUsS0FBSztBQUNyQixRQUFJLFVBQVU7QUFBaUI7QUFDL0IsVUFBTSxjQUFjLEtBQUssTUFBTSxVQUFVLGVBQWU7QUFHeEQsVUFBTSxvQkFBb0IsS0FBSyxJQUFJLGtCQUFrQixXQUFXO0FBRWhFLE9BQUcsS0FBSyxhQUFhLEtBQUssTUFBTSxtQkFBbUIsUUFBUSxLQUFLO0FBQ2hFLHdCQUFvQjtBQUNwQix5QkFBcUI7QUFBQSxFQUN6QjtBQUVBLE1BQUksb0JBQW9CLEdBQUc7QUFDdkIsT0FBRyxNQUFNLDBCQUEwQixRQUFRLEdBQUc7QUFDOUMsV0FBTztBQUFBLEVBQ1g7QUFDQSxLQUFHO0FBQUEsSUFDQyxPQUFPLFNBQ0gsZUFDQSxtQkFDQTtBQUFBLEVBQ1I7QUFFQSxRQUFNLGtCQUFrQixtQkFBbUI7QUFDM0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksaUJBQWlCLE9BQU8sZ0JBQWdCO0FBRTVGLE1BQUksV0FBVyxJQUFJO0FBQ2YsT0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFVBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsRUFDbkU7QUFFQSxLQUFHLEtBQUssYUFBYSxRQUFRLGtCQUFrQixRQUFRLEtBQUs7QUFFNUQsU0FBTztBQUNYOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/weakenAlgo.js\",\"server\":\"home\"}}],[\"serverStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors } from \\\"/lib.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Config } from \\\"/Config/Config.js\\\";\\nconst BORDER_COLOR = Colors.CYAN;\\nlet maxMoney = 0;\\nlet curMoney = 0;\\nlet hackingChance = 0;\\nlet minSec = 0;\\nlet curSec = 0;\\nlet maxRam = 0;\\nlet useRam = 0;\\nlet freeRam = 0;\\nlet moneyMultiplier = 0;\\nlet growingThreads = 0;\\nlet serverWeakenThreadsCur = 0;\\nlet hackThreads = 0;\\nlet headerString = \\\"\\\";\\nlet footerString = \\\"\\\";\\nlet hackingPercent = 0;\\nexport function printServerStats(ns, server, hackThreshold) {\\n  setStats(ns, server, hackThreshold);\\n  ns.print(BORDER_COLOR + headerString + Colors.RESET);\\n  printStatLine(ns, \\\"Money:\\\", false);\\n  printStatLine(ns, \\\"Max Money: \\\" + ns.formatNumber(maxMoney) + \\\" | Current Money: \\\" + ns.formatNumber(curMoney));\\n  printStatLine(\\n    ns,\\n    \\\"Percent: \\\" + ns.formatNumber(curMoney / maxMoney) + \\\" | Hack Chance: \\\" + ns.formatNumber(hackingChance)\\n  );\\n  printStatLine(ns, \\\"Security:\\\", false);\\n  printStatLine(ns, \\\"Min Seclvl: \\\" + minSec + \\\" | Current Seclvl: \\\" + ns.formatNumber(curSec));\\n  printStatLine(ns, \\\"Ram:\\\", false);\\n  printStatLine(ns, \\\"Server Max Ram: \\\" + maxRam);\\n  printStatLine(ns, \\\"Used Ram: \\\" + useRam + \\\" | free Ram: \\\" + freeRam);\\n  printStatLine(ns, \\\"Threads:\\\", false);\\n  printStatLine(ns, \\\"Grow Threads: \\\" + growingThreads);\\n  printStatLine(ns, \\\"Weaken Threads \\\" + serverWeakenThreadsCur);\\n  printStatLine(ns, \\\"Hack Threads: \\\" + hackThreads + \\\" | Hack percent: \\\" + ns.formatNumber(hackingPercent, 5));\\n  ns.print(BORDER_COLOR + footerString + Colors.RESET);\\n  return footerString.length;\\n}\\nexport function printServerStatsConsole() {\\n}\\nfunction setStats(ns, server, hackThreshold) {\\n  maxMoney = ns.getServerMaxMoney(server);\\n  curMoney = ns.getServerMoneyAvailable(server);\\n  hackingChance = ns.hackAnalyzeChance(server);\\n  minSec = ns.getServerMinSecurityLevel(server);\\n  curSec = ns.getServerSecurityLevel(server);\\n  maxRam = ns.getServerMaxRam(server);\\n  useRam = ns.getServerUsedRam(server);\\n  freeRam = maxRam - useRam;\\n  moneyMultiplier = maxMoney / curMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  growingThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier));\\n  serverWeakenThreadsCur = Math.ceil((curSec - ns.getServerMinSecurityLevel(server)) / 0.05);\\n  hackingPercent = ns.hackAnalyze(server);\\n  hackThreads = Math.ceil(hackThreshold / hackingPercent);\\n  if (isNaN(hackThreads) || hackThreads == Infinity)\\n    hackThreads = 0;\\n  if (isNaN(hackingPercent) || hackingPercent == Infinity)\\n    hackingPercent = 0;\\n  headerString = \\\"┌───────────────── stats for \\\" + server + \\\" ─────────────────┐\\\";\\n  footerString = \\\"└\\\" + \\\"─\\\".repeat(headerString.length - 2) + \\\"┘\\\";\\n}\\nfunction printStatLine(ns, value, indent = true) {\\n  if (indent)\\n    value = \\\"\\t\\\" + value;\\n  const offset = indent ? 8 : 3;\\n  ns.print(\\n    BORDER_COLOR + \\\"│ \\\" + Colors.RESET + value + \\\" \\\".repeat(headerString.length - value.length - offset) + BORDER_COLOR + \\\"│\\\" + Colors.RESET\\n  );\\n}\\nexport function getNumThreadsActive(ns) {\\n  const hosts = getBestHostByRamOptimized(ns);\\n  let totalThreads = 0;\\n  for (let i = 0; i < hosts.length; i++) {\\n    const host = hosts[i];\\n    const processes = ns.ps(host.name);\\n    processes.forEach((process) => {\\n      totalThreads += process.threads;\\n    });\\n  }\\n  return totalThreads;\\n}\\nexport function autocomplete(data) {\\n  return [...data.servers];\\n}\\nexport async function main(ns) {\\n  ns.clearLog();\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  if (ns.args.length == 1) {\\n    while (true) {\\n      ns.clearLog();\\n      const width = printServerStats(ns, ns.args[0].toString(), 0.9);\\n      ns.resizeTail((width - 1) * 10, 375);\\n      await ns.sleep(100);\\n    }\\n  } else {\\n    while (true) {\\n      ns.clearLog();\\n      const server = ns.peek(1);\\n      if (server === \\\"NULL PORT DATA\\\") {\\n        ns.print(\\\"No server found, waiting for data...\\\");\\n        await ns.getPortHandle(1).nextWrite();\\n        continue;\\n      }\\n      const width = printServerStats(ns, server.toString(), 0.9);\\n      ns.resizeTail((width - 1) * 10, 375);\\n      await ns.sleep(Config.DELAY_MARGIN_MS);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlclN0YXRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tIFwiLi9saWJcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCIuL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vQ29uZmlnL0NvbmZpZ1wiO1xyXG5cclxuY29uc3QgQk9SREVSX0NPTE9SID0gQ29sb3JzLkNZQU47XHJcblxyXG5sZXQgbWF4TW9uZXkgPSAwO1xyXG5sZXQgY3VyTW9uZXkgPSAwO1xyXG5sZXQgaGFja2luZ0NoYW5jZSA9IDA7XHJcbmxldCBtaW5TZWMgPSAwO1xyXG5sZXQgY3VyU2VjID0gMDtcclxubGV0IG1heFJhbSA9IDA7XHJcbmxldCB1c2VSYW0gPSAwO1xyXG5sZXQgZnJlZVJhbSA9IDA7XHJcbmxldCBtb25leU11bHRpcGxpZXIgPSAwO1xyXG5sZXQgZ3Jvd2luZ1RocmVhZHMgPSAwO1xyXG5sZXQgc2VydmVyV2Vha2VuVGhyZWFkc0N1ciA9IDA7XHJcbmxldCBoYWNrVGhyZWFkcyA9IDA7XHJcbmxldCBoZWFkZXJTdHJpbmcgPSBcIlwiO1xyXG5sZXQgZm9vdGVyU3RyaW5nID0gXCJcIjtcclxubGV0IGhhY2tpbmdQZXJjZW50ID0gMDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFNlcnZlclN0YXRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgc2V0U3RhdHMobnMsIHNlcnZlciwgaGFja1RocmVzaG9sZCk7XHJcblxyXG4gICAgbnMucHJpbnQoQk9SREVSX0NPTE9SICsgaGVhZGVyU3RyaW5nICsgQ29sb3JzLlJFU0VUKTtcclxuXHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIk1vbmV5OlwiLCBmYWxzZSk7XHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIk1heCBNb25leTogXCIgKyBucy5mb3JtYXROdW1iZXIobWF4TW9uZXkpICsgXCIgfCBDdXJyZW50IE1vbmV5OiBcIiArIG5zLmZvcm1hdE51bWJlcihjdXJNb25leSkpO1xyXG4gICAgcHJpbnRTdGF0TGluZShcclxuICAgICAgICBucyxcclxuICAgICAgICBcIlBlcmNlbnQ6IFwiICsgbnMuZm9ybWF0TnVtYmVyKGN1ck1vbmV5IC8gbWF4TW9uZXkpICsgXCIgfCBIYWNrIENoYW5jZTogXCIgKyBucy5mb3JtYXROdW1iZXIoaGFja2luZ0NoYW5jZSksXHJcbiAgICApO1xyXG5cclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiU2VjdXJpdHk6XCIsIGZhbHNlKTtcclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiTWluIFNlY2x2bDogXCIgKyBtaW5TZWMgKyBcIiB8IEN1cnJlbnQgU2VjbHZsOiBcIiArIG5zLmZvcm1hdE51bWJlcihjdXJTZWMpKTtcclxuXHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIlJhbTpcIiwgZmFsc2UpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJTZXJ2ZXIgTWF4IFJhbTogXCIgKyBtYXhSYW0pO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJVc2VkIFJhbTogXCIgKyB1c2VSYW0gKyBcIiB8IGZyZWUgUmFtOiBcIiArIGZyZWVSYW0pO1xyXG5cclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiVGhyZWFkczpcIiwgZmFsc2UpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJHcm93IFRocmVhZHM6IFwiICsgZ3Jvd2luZ1RocmVhZHMpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJXZWFrZW4gVGhyZWFkcyBcIiArIHNlcnZlcldlYWtlblRocmVhZHNDdXIpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJIYWNrIFRocmVhZHM6IFwiICsgaGFja1RocmVhZHMgKyBcIiB8IEhhY2sgcGVyY2VudDogXCIgKyBucy5mb3JtYXROdW1iZXIoaGFja2luZ1BlcmNlbnQsIDUpKTtcclxuXHJcbiAgICBucy5wcmludChCT1JERVJfQ09MT1IgKyBmb290ZXJTdHJpbmcgKyBDb2xvcnMuUkVTRVQpO1xyXG5cclxuICAgIHJldHVybiBmb290ZXJTdHJpbmcubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTZXJ2ZXJTdGF0c0NvbnNvbGUoKSB7XHJcbiAgICAvLyB0b2RvXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFN0YXRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgLy8gbW9uZXlcclxuICAgIG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyKTtcclxuICAgIGN1ck1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKTtcclxuICAgIGhhY2tpbmdDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZShzZXJ2ZXIpO1xyXG4gICAgLy8gc2VjIGx2bFxyXG4gICAgbWluU2VjID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xyXG4gICAgY3VyU2VjID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xyXG4gICAgLy8gcmFtXHJcbiAgICBtYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcclxuICAgIHVzZVJhbSA9IG5zLmdldFNlcnZlclVzZWRSYW0oc2VydmVyKTtcclxuICAgIGZyZWVSYW0gPSBtYXhSYW0gLSB1c2VSYW07XHJcbiAgICAvLyB0aHJlYWRzXHJcblxyXG4gICAgbW9uZXlNdWx0aXBsaWVyID0gbWF4TW9uZXkgLyBjdXJNb25leTtcclxuICAgIGlmIChpc05hTihtb25leU11bHRpcGxpZXIpIHx8IG1vbmV5TXVsdGlwbGllciA9PSBJbmZpbml0eSkgbW9uZXlNdWx0aXBsaWVyID0gMTtcclxuXHJcbiAgICBncm93aW5nVGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHNlcnZlciwgbW9uZXlNdWx0aXBsaWVyKSk7XHJcblxyXG4gICAgc2VydmVyV2Vha2VuVGhyZWFkc0N1ciA9IE1hdGguY2VpbCgoY3VyU2VjIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIpKSAvIDAuMDUpO1xyXG5cclxuICAgIGhhY2tpbmdQZXJjZW50ID0gbnMuaGFja0FuYWx5emUoc2VydmVyKTtcclxuICAgIGhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKGhhY2tUaHJlc2hvbGQgLyBoYWNraW5nUGVyY2VudCk7XHJcbiAgICBpZiAoaXNOYU4oaGFja1RocmVhZHMpIHx8IGhhY2tUaHJlYWRzID09IEluZmluaXR5KSBoYWNrVGhyZWFkcyA9IDA7XHJcbiAgICBpZiAoaXNOYU4oaGFja2luZ1BlcmNlbnQpIHx8IGhhY2tpbmdQZXJjZW50ID09IEluZmluaXR5KSBoYWNraW5nUGVyY2VudCA9IDA7XHJcblxyXG4gICAgaGVhZGVyU3RyaW5nID0gXCLilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc3RhdHMgZm9yIFwiICsgc2VydmVyICsgXCIg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXCI7XHJcbiAgICBmb290ZXJTdHJpbmcgPSBcIuKUlFwiICsgXCLilIBcIi5yZXBlYXQoaGVhZGVyU3RyaW5nLmxlbmd0aCAtIDIpICsgXCLilJhcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJpbnRTdGF0TGluZShuczogTlMsIHZhbHVlOiBzdHJpbmcsIGluZGVudCA9IHRydWUpIHtcclxuICAgIGlmIChpbmRlbnQpIHZhbHVlID0gXCJcXHRcIiArIHZhbHVlO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gaW5kZW50ID8gOCA6IDM7IC8vIHRoZSBvZmZzZXQgdG8gc3VidHJhY3QgdGhlIGJvcmRlciBhbmQgaW5kZW50XHJcbiAgICBucy5wcmludChcclxuICAgICAgICBCT1JERVJfQ09MT1IgK1xyXG4gICAgICAgICAgICBcIuKUgiBcIiArXHJcbiAgICAgICAgICAgIENvbG9ycy5SRVNFVCArXHJcbiAgICAgICAgICAgIHZhbHVlICtcclxuICAgICAgICAgICAgXCIgXCIucmVwZWF0KGhlYWRlclN0cmluZy5sZW5ndGggLSB2YWx1ZS5sZW5ndGggLSBvZmZzZXQpICtcclxuICAgICAgICAgICAgQk9SREVSX0NPTE9SICtcclxuICAgICAgICAgICAgXCLilIJcIiArXHJcbiAgICAgICAgICAgIENvbG9ycy5SRVNFVCxcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROdW1UaHJlYWRzQWN0aXZlKG5zOiBOUykge1xyXG4gICAgY29uc3QgaG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcclxuXHJcbiAgICBsZXQgdG90YWxUaHJlYWRzID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gaG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlcyA9IG5zLnBzKGhvc3QubmFtZSk7XHJcblxyXG4gICAgICAgIHByb2Nlc3Nlcy5mb3JFYWNoKChwcm9jZXNzKSA9PiB7XHJcbiAgICAgICAgICAgIHRvdGFsVGhyZWFkcyArPSBwcm9jZXNzLnRocmVhZHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWxUaHJlYWRzO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQXV0b2NvbXBsZXRlRGF0YSB7XHJcbiAgICBzZXJ2ZXJzOiBzdHJpbmdbXTtcclxuICAgIHR4dHM6IHN0cmluZ1tdO1xyXG4gICAgc2NyaXB0czogc3RyaW5nW107XHJcbiAgICBmbGFnczogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogQXV0b2NvbXBsZXRlRGF0YSkge1xyXG4gICAgcmV0dXJuIFsuLi5kYXRhLnNlcnZlcnNdO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLmNsZWFyTG9nKCk7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgLy8gd2hpbGUgKHRydWUpIHtcclxuICAgIC8vICAgICBucy5jbGVhckxvZygpO1xyXG4gICAgLy8gICAgIG5zLnByaW50KGdldE51bVRocmVhZHNBY3RpdmUobnMpKTtcclxuICAgIC8vICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgIC8vIH1cclxuICAgIGlmIChucy5hcmdzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgbnMuY2xlYXJMb2coKTtcclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwcmludFNlcnZlclN0YXRzKG5zLCBucy5hcmdzWzBdLnRvU3RyaW5nKCksIDAuOSk7XHJcbiAgICAgICAgICAgIG5zLnJlc2l6ZVRhaWwoKHdpZHRoIC0gMSkgKiAxMCwgMzc1KTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIG5zLmNsZWFyTG9nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IG5zLnBlZWsoMSk7XHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiTlVMTCBQT1JUIERBVEFcIikge1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJObyBzZXJ2ZXIgZm91bmQsIHdhaXRpbmcgZm9yIGRhdGEuLi5cIik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBucy5nZXRQb3J0SGFuZGxlKDEpLm5leHRXcml0ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwcmludFNlcnZlclN0YXRzKG5zLCBzZXJ2ZXIudG9TdHJpbmcoKSwgMC45KTtcclxuICAgICAgICAgICAgbnMucmVzaXplVGFpbCgod2lkdGggLSAxKSAqIDEwLCAzNzUpO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChDb25maWcuREVMQVlfTUFSR0lOX01TKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxpQ0FBaUM7QUFDMUMsU0FBUyxjQUFjO0FBRXZCLE1BQU0sZUFBZSxPQUFPO0FBRTVCLElBQUksV0FBVztBQUNmLElBQUksV0FBVztBQUNmLElBQUksZ0JBQWdCO0FBQ3BCLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksVUFBVTtBQUNkLElBQUksa0JBQWtCO0FBQ3RCLElBQUksaUJBQWlCO0FBQ3JCLElBQUkseUJBQXlCO0FBQzdCLElBQUksY0FBYztBQUNsQixJQUFJLGVBQWU7QUFDbkIsSUFBSSxlQUFlO0FBQ25CLElBQUksaUJBQWlCO0FBRWQsZ0JBQVMsaUJBQWlCLElBQVEsUUFBZ0IsZUFBdUI7QUFDNUUsV0FBUyxJQUFJLFFBQVEsYUFBYTtBQUVsQyxLQUFHLE1BQU0sZUFBZSxlQUFlLE9BQU8sS0FBSztBQUVuRCxnQkFBYyxJQUFJLFVBQVUsS0FBSztBQUNqQyxnQkFBYyxJQUFJLGdCQUFnQixHQUFHLGFBQWEsUUFBUSxJQUFJLHVCQUF1QixHQUFHLGFBQWEsUUFBUSxDQUFDO0FBQzlHO0FBQUEsSUFDSTtBQUFBLElBQ0EsY0FBYyxHQUFHLGFBQWEsV0FBVyxRQUFRLElBQUkscUJBQXFCLEdBQUcsYUFBYSxhQUFhO0FBQUEsRUFDM0c7QUFFQSxnQkFBYyxJQUFJLGFBQWEsS0FBSztBQUNwQyxnQkFBYyxJQUFJLGlCQUFpQixT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\",\"filename\":\"serverStats.js\",\"server\":\"home\"}}],[\"bestServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { isHackable, nukeServer, serverScanner } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  getBestServerList(ns, true);\\n}\\nexport function getBestServerList(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName) && !ns.hasRootAccess(serverName))\\n      continue;\\n    nukeServer(ns, serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const hackingChance = ns.hackAnalyzeChance(serverName);\\n    let weakeningTime = ns.getWeakenTime(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverName) > ns.getHackingLevel())\\n      continue;\\n    let score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    if (ns.fileExists(\\\"formulas.exe\\\", \\\"home\\\")) {\\n      const server2 = ns.getServer(serverName);\\n      const player = ns.getPlayer();\\n      server2.hackDifficulty = server2.minDifficulty;\\n      const maxMoney2 = server2.moneyMax == void 0 ? 0 : server2.moneyMax;\\n      weakeningTime = ns.formulas.hacking.weakenTime(server2, player);\\n      score = maxMoney2 / weakeningTime * ns.formulas.hacking.hackChance(server2, player) / 1e3;\\n    } else {\\n      const serverLvl = ns.getServerRequiredHackingLevel(serverName);\\n      const playerLvl = ns.getHackingLevel();\\n      if (playerLvl / serverLvl < 2)\\n        score = 0;\\n    }\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      hackingChance,\\n      weakeningTime,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function getBestServer(ns) {\\n  const best = getBestServerList(ns, false)[0].name;\\n  if (Config.TARGET !== \\\"\\\")\\n    return Config.TARGET;\\n  return best;\\n}\\nexport function getBestHostByRamOptimized(ns) {\\n  const allHosts = [];\\n  const allServers = serverScanner(ns);\\n  let homeIdx = -1;\\n  let home = void 0;\\n  for (let i = 0; i < allServers.length; i++) {\\n    const server = ns.getServer(allServers[i]);\\n    if (server.maxRam - server.ramUsed < 2)\\n      continue;\\n    if (!server.hasAdminRights)\\n      continue;\\n    const serverObj = {\\n      name: server.hostname,\\n      maxRam: server.maxRam,\\n      availableRam: server.maxRam - server.ramUsed,\\n      score: 0\\n    };\\n    if (serverObj.name === \\\"home\\\") {\\n      serverObj.availableRam -= Config.HOME_FREE_RAM;\\n      homeIdx = i;\\n      home = serverObj;\\n    }\\n    allHosts.push(serverObj);\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  if (home !== void 0 && homeIdx !== -1) {\\n    allHosts.splice(homeIdx, 1);\\n    allHosts.unshift(home);\\n  }\\n  return allHosts;\\n}\\nexport function getBestHostByRam(ns) {\\n  const allHosts = getBestServerListCheap(ns, false).filter((server) => {\\n    return server.availableRam > 2;\\n  });\\n  const home = {\\n    name: \\\"home\\\",\\n    maxRam: ns.getServerMaxRam(\\\"home\\\") - Config.HOME_FREE_RAM,\\n    availableRam: ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") - Config.HOME_FREE_RAM,\\n    score: 0\\n  };\\n  allHosts.push(home);\\n  const purchasedServers = ns.getPurchasedServers();\\n  for (let i = 0; i < purchasedServers.length; i++) {\\n    const server = {\\n      name: purchasedServers[i],\\n      maxRam: ns.getServerMaxRam(purchasedServers[i]),\\n      availableRam: ns.getServerMaxRam(purchasedServers[i]) - ns.getServerUsedRam(purchasedServers[i]),\\n      score: 0\\n    };\\n    if (server.maxRam > 2) {\\n      allHosts.push(server);\\n    }\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  return allHosts;\\n}\\nexport function getBestServerListCheap(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName))\\n      continue;\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverList[i]) > ns.getHackingLevel())\\n      continue;\\n    const score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function printTable(ns, array) {\\n  const tableArray = [];\\n  for (let i = 0; i < array.length; i++) {\\n    if (array[i].maxMoney === void 0)\\n      array[i].maxMoney = 0;\\n    if (array[i].hackingChance === void 0)\\n      array[i].hackingChance = 0;\\n    if (array[i].weakeningTime === void 0)\\n      array[i].weakeningTime = 0;\\n    const server = {\\n      name: array[i].name,\\n      maxMoney: ns.formatNumber(Number(array[i].maxMoney)),\\n      hackingChance: ns.formatNumber(Number(array[i].hackingChance)),\\n      weakeningTime: ns.formatNumber(Number(array[i].weakeningTime) / 1e3),\\n      //ns.formatNumber(Number(array[i].weakeningTime), 4),\\n      score: ns.formatNumber(Number(array[i].score))\\n    };\\n    tableArray.push(server);\\n  }\\n  ns.print(\\\"╔════════════════════╦══════════╦════════╦═══════════╦═════════╗\\\");\\n  ns.print(\\\"║       server       ║   Max $  ║ chance ║ Weak time ║  score  ║\\\");\\n  ns.print(\\\"╠════════════════════╬══════════╬════════╬═══════════╬═════════╣\\\");\\n  for (let i = 0; i < tableArray.length; i++) {\\n    ns.print(\\n      \\\"║ \\\" + tableArray[i].name + space(tableArray[i].name.length, 0) + \\\"║ \\\" + tableArray[i].maxMoney + space(tableArray[i].maxMoney.length, 1) + \\\"║ \\\" + tableArray[i].hackingChance + space(tableArray[i].hackingChance.length, 2) + \\\"║ \\\" + tableArray[i].weakeningTime + space(tableArray[i].weakeningTime.length, 3) + \\\"║ \\\" + tableArray[i].score + space(tableArray[i].score.length, 4) + \\\"║\\\"\\n    );\\n  }\\n  ns.print(\\\"╚════════════════════╩══════════╩════════╩═══════════╩═════════╝\\\");\\n}\\nfunction space(len, colIndex) {\\n  const colLen = [19, 9, 7, 10, 8];\\n  const real = colLen[colIndex] - len;\\n  let str = \\\"\\\";\\n  for (let i = 0; i < real; i++) {\\n    str += \\\" \\\";\\n  }\\n  return str;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9Db25maWcvQ29uZmlnLmpzXCI7XHJcbmltcG9ydCB7IGlzSGFja2FibGUsIG51a2VTZXJ2ZXIsIHNlcnZlclNjYW5uZXIgfSBmcm9tIFwiLi9saWIuanNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG1heE1vbmV5PzogbnVtYmVyO1xyXG4gICAgaGFja2luZ0NoYW5jZT86IG51bWJlcjtcclxuICAgIHdlYWtlbmluZ1RpbWU/OiBudW1iZXI7XHJcbiAgICBtYXhSYW06IG51bWJlcjtcclxuICAgIGF2YWlsYWJsZVJhbTogbnVtYmVyO1xyXG4gICAgc2NvcmU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgZ2V0QmVzdFNlcnZlckxpc3QobnMsIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFNlcnZlckxpc3QobnM6IE5TLCBzaG91bGRQcmludDogYm9vbGVhbikge1xyXG4gICAgY29uc3Qgc2VydmVyTGlzdCA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcnM6IFNlcnZlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyTmFtZSA9IHNlcnZlckxpc3RbaV07XHJcbiAgICAgICAgaWYgKCFpc0hhY2thYmxlKG5zLCBzZXJ2ZXJOYW1lKSAmJiAhbnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXJOYW1lKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIG51a2VTZXJ2ZXIobnMsIHNlcnZlck5hbWUpOyAvLyA1MCBtcyBmb3IgNTAwIGl0dGVyYXRpb25zXHJcblxyXG4gICAgICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgaGFja2luZ0NoYW5jZSA9IG5zLmhhY2tBbmFseXplQ2hhbmNlKHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGxldCB3ZWFrZW5pbmdUaW1lID0gbnMuZ2V0V2Vha2VuVGltZShzZXJ2ZXJOYW1lKTtcclxuICAgICAgICBjb25zdCBtYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyTmFtZSk7XHJcblxyXG4gICAgICAgIC8vIGZpbHRlciBzZXJ2ZXIgd2l0aCBubyBtb25leSBvciB0aGUgaGFja2luZyBsZXZlbCBhYm92ZSBwbGF5ZXJzIGhhY2tpbmcgbGV2ZWxcclxuICAgICAgICBpZiAobWF4TW9uZXkgPCAxIHx8IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlck5hbWUpID4gbnMuZ2V0SGFja2luZ0xldmVsKCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBzY29yZSA9IChtYXhNb25leSAvICh3ZWFrZW5pbmdUaW1lICsgMykpICogaGFja2luZ0NoYW5jZSAqICgxIC8gd2Vha2VuaW5nVGltZSlcclxuICAgICAgICAvLyBjb25zdCBzY29yZSA9IG5zLmZvcm1hdE51bWJlcigoKG1heE1vbmV5IC8gKHdlYWtlbmluZ1RpbWUpKSAqIGhhY2tpbmdDaGFuY2UpIC8gMTAwMClcclxuXHJcbiAgICAgICAgbGV0IHNjb3JlID0gbWF4TW9uZXkgLyBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlck5hbWUpIC8gMTAwMDAwMDtcclxuXHJcbiAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJmb3JtdWxhcy5leGVcIiwgXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IG5zLmdldFNlcnZlcihzZXJ2ZXJOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcbiAgICAgICAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IHNlcnZlci5taW5EaWZmaWN1bHR5O1xyXG4gICAgICAgICAgICBjb25zdCBtYXhNb25leSA9IHNlcnZlci5tb25leU1heCA9PSB1bmRlZmluZWQgPyAwIDogc2VydmVyLm1vbmV5TWF4O1xyXG4gICAgICAgICAgICB3ZWFrZW5pbmdUaW1lID0gbnMuZm9ybXVsYXMuaGFja2luZy53ZWFrZW5UaW1lKHNlcnZlciwgcGxheWVyKTtcclxuICAgICAgICAgICAgc2NvcmUgPSAoKG1heE1vbmV5IC8gd2Vha2VuaW5nVGltZSkgKiBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tDaGFuY2Uoc2VydmVyLCBwbGF5ZXIpKSAvIDEwMDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VydmVyTHZsID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllckx2bCA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG4gICAgICAgICAgICBpZiAocGxheWVyTHZsIC8gc2VydmVyTHZsIDwgMikgc2NvcmUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlck5hbWUsXHJcbiAgICAgICAgICAgIG1heE1vbmV5OiBtYXhNb25leSxcclxuICAgICAgICAgICAgaGFja2luZ0NoYW5jZTogaGFja2luZ0NoYW5jZSxcclxuICAgICAgICAgICAgd2Vha2VuaW5nVGltZTogd2Vha2VuaW5nVGltZSxcclxuICAgICAgICAgICAgbWF4UmFtOiBtYXhSYW0sXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVJhbTogbWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXJOYW1lKSxcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlcnZlcnMucHVzaChzZXJ2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcnZlcnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoYi5zY29yZSB8fCAwKSAtIChhLnNjb3JlIHx8IDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHNob3VsZFByaW50KSBwcmludFRhYmxlKG5zLCBzZXJ2ZXJzKTtcclxuXHJcbiAgICByZXR1cm4gc2VydmVycztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RTZXJ2ZXIobnM6IE5TKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGJlc3QgPSBnZXRCZXN0U2VydmVyTGlzdChucywgZmFsc2UpWzBdLm5hbWU7XHJcbiAgICBpZiAoQ29uZmlnLlRBUkdFVCAhPT0gXCJcIikgcmV0dXJuIENvbmZpZy5UQVJHRVQ7XHJcbiAgICByZXR1cm4gYmVzdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnM6IE5TKTogU2VydmVyW10ge1xyXG4gICAgY29uc3QgYWxsSG9zdHM6IFNlcnZlcltdID0gW107XHJcbiAgICBjb25zdCBhbGxTZXJ2ZXJzID0gc2VydmVyU2Nhbm5lcihucyk7XHJcbiAgICBsZXQgaG9tZUlkeCA9IC0xO1xyXG4gICAgbGV0IGhvbWU6IFNlcnZlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBucy5nZXRTZXJ2ZXIoYWxsU2VydmVyc1tpXSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQgPCAyKSBjb250aW51ZTtcclxuICAgICAgICBpZiAoIXNlcnZlci5oYXNBZG1pblJpZ2h0cykgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlck9iajogU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBzZXJ2ZXIuaG9zdG5hbWUsXHJcbiAgICAgICAgICAgIG1heFJhbTogc2VydmVyLm1heFJhbSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQsXHJcbiAgICAgICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHNlcnZlck9iai5uYW1lID09PSBcImhvbWVcIikge1xyXG4gICAgICAgICAgICBzZXJ2ZXJPYmouYXZhaWxhYmxlUmFtIC09IENvbmZpZy5IT01FX0ZSRUVfUkFNO1xyXG4gICAgICAgICAgICBob21lSWR4ID0gaTtcclxuICAgICAgICAgICAgaG9tZSA9IHNlcnZlck9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWxsSG9zdHMucHVzaChzZXJ2ZXJPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnQgYnkgcmFtIGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgYWxsSG9zdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmF2YWlsYWJsZVJhbSAtIGIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKGhvbWUgIT09IHVuZGVmaW5lZCAmJiBob21lSWR4ICE9PSAtMSkge1xyXG4gICAgICAgIGFsbEhvc3RzLnNwbGljZShob21lSWR4LCAxKTtcclxuICAgICAgICBhbGxIb3N0cy51bnNoaWZ0KGhvbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGxIb3N0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHVzZSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIGluc3RlYWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0SG9zdEJ5UmFtKG5zOiBOUyk6IFNlcnZlcltdIHtcclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdFNlcnZlckxpc3RDaGVhcChucywgZmFsc2UpLmZpbHRlcigoc2VydmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZlci5hdmFpbGFibGVSYW0gPiAyO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaG9tZTogU2VydmVyID0ge1xyXG4gICAgICAgIG5hbWU6IFwiaG9tZVwiLFxyXG4gICAgICAgIG1heFJhbTogbnMuZ2V0U2VydmVyTWF4UmFtKFwiaG9tZVwiKSAtIENvbmZpZy5IT01FX0ZSRUVfUkFNLFxyXG4gICAgICAgIGF2YWlsYWJsZVJhbTogbnMuZ2V0U2VydmVyTWF4UmFtKFwiaG9tZVwiKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oXCJob21lXCIpIC0gQ29uZmlnLkhPTUVfRlJFRV9SQU0sXHJcbiAgICAgICAgc2NvcmU6IDAsXHJcbiAgICB9OyAvLyAxMCBzb21lIHNhZmV0eSBtYXJnaW5cclxuICAgIGFsbEhvc3RzLnB1c2goaG9tZSk7XHJcblxyXG4gICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHVyY2hhc2VkU2VydmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlcjogU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBwdXJjaGFzZWRTZXJ2ZXJzW2ldLFxyXG4gICAgICAgICAgICBtYXhSYW06IG5zLmdldFNlcnZlck1heFJhbShwdXJjaGFzZWRTZXJ2ZXJzW2ldKSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBucy5nZXRTZXJ2ZXJNYXhSYW0ocHVyY2hhc2VkU2VydmVyc1tpXSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKHB1cmNoYXNlZFNlcnZlcnNbaV0pLFxyXG4gICAgICAgICAgICBzY29yZTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChzZXJ2ZXIubWF4UmFtID4gMikge1xyXG4gICAgICAgICAgICBhbGxIb3N0cy5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnQgYnkgcmFtIGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgYWxsSG9zdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmF2YWlsYWJsZVJhbSAtIGIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbEhvc3RzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFNlcnZlckxpc3RDaGVhcChuczogTlMsIHNob3VsZFByaW50OiBib29sZWFuKTogU2VydmVyW10ge1xyXG4gICAgY29uc3Qgc2VydmVyTGlzdCA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcnM6IFNlcnZlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyTmFtZSA9IHNlcnZlckxpc3RbaV07XHJcbiAgICAgICAgLy8gY29uc3Qgc28gPSBucy5nZXRTZXJ2ZXIoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgLy8gY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcblxyXG4gICAgICAgIGlmICghaXNIYWNrYWJsZShucywgc2VydmVyTmFtZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBjYW5PcGVuUG9ydHMgPSBzby5udW1PcGVuUG9ydHNSZXF1aXJlZCA8PSBnZXROdW1IYWNrcyhucyk7XHJcbiAgICAgICAgLy8gY29uc3QgY2FuSGFjayA9IHNvLnJlcXVpcmVkSGFja2luZ1NraWxsIDw9IHBsYXllci5za2lsbHMuaGFja2luZztcclxuICAgICAgICAvLyBpZiAoIShjYW5PcGVuUG9ydHMgJiYgY2FuSGFjaykpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGNvbnN0IG1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXJOYW1lKTtcclxuXHJcbiAgICAgICAgLy8gZmlsdGVyIHNlcnZlciB3aXRoIG5vIG1vbmV5IG9yIHRoZSBoYWNraW5nIGxldmVsIGFib3ZlIHBsYXllcnMgaGFja2luZyBsZXZlbFxyXG4gICAgICAgIGlmIChtYXhNb25leSA8IDEgfHwgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyTGlzdFtpXSkgPiBucy5nZXRIYWNraW5nTGV2ZWwoKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjb3JlID0gbWF4TW9uZXkgLyBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlck5hbWUpIC8gMTAwMDAwMDtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlck5hbWUsXHJcbiAgICAgICAgICAgIG1heE1vbmV5OiBtYXhNb25leSxcclxuICAgICAgICAgICAgbWF4UmFtOiBtYXhSYW0sXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVJhbTogbWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXJOYW1lKSxcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VydmVycy5wdXNoKHNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgc2VydmVycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChiLnNjb3JlIHx8IDApIC0gKGEuc2NvcmUgfHwgMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoc2hvdWxkUHJpbnQpIHByaW50VGFibGUobnMsIHNlcnZlcnMpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRUYWJsZShuczogTlMsIGFycmF5OiBTZXJ2ZXJbXSkge1xyXG4gICAgLy8gc2FuaXR5IGNoZWNrICsgbnVtYmVyIGZvcm1hdHRpbmdcclxuICAgIGludGVyZmFjZSBUYWJsZVNlcnZlciB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIG1heE1vbmV5OiBzdHJpbmc7XHJcbiAgICAgICAgaGFja2luZ0NoYW5jZTogc3RyaW5nO1xyXG4gICAgICAgIHdlYWtlbmluZ1RpbWU6IHN0cmluZztcclxuICAgICAgICBzY29yZTogc3RyaW5nO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdGFibGVBcnJheTogVGFibGVTZXJ2ZXJbXSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0ubWF4TW9uZXkgPT09IHVuZGVmaW5lZCkgYXJyYXlbaV0ubWF4TW9uZXkgPSAwO1xyXG4gICAgICAgIGlmIChhcnJheVtpXS5oYWNraW5nQ2hhbmNlID09PSB1bmRlZmluZWQpIGFycmF5W2ldLmhhY2tpbmdDaGFuY2UgPSAwO1xyXG4gICAgICAgIGlmIChhcnJheVtpXS53ZWFrZW5pbmdUaW1lID09PSB1bmRlZmluZWQpIGFycmF5W2ldLndlYWtlbmluZ1RpbWUgPSAwO1xyXG5cclxuICAgICAgICBjb25zdCBzZXJ2ZXI6IFRhYmxlU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBhcnJheVtpXS5uYW1lLFxyXG4gICAgICAgICAgICBtYXhNb25leTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS5tYXhNb25leSkpLFxyXG4gICAgICAgICAgICBoYWNraW5nQ2hhbmNlOiBucy5mb3JtYXROdW1iZXIoTnVtYmVyKGFycmF5W2ldLmhhY2tpbmdDaGFuY2UpKSxcclxuICAgICAgICAgICAgd2Vha2VuaW5nVGltZTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS53ZWFrZW5pbmdUaW1lKSAvIDEwMDApLCAvL25zLmZvcm1hdE51bWJlcihOdW1iZXIoYXJyYXlbaV0ud2Vha2VuaW5nVGltZSksIDQpLFxyXG4gICAgICAgICAgICBzY29yZTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS5zY29yZSkpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGFibGVBcnJheS5wdXNoKHNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCLilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZdcIik7XHJcbiAgICBucy5wcmludChcIuKVkSAgICAgICBzZXJ2ZXIgICAgICAg4pWRICAgTWF4ICQgIOKVkSBjaGFuY2Ug4pWRIFdlYWsgdGltZSDilZEgIHNjb3JlICDilZFcIik7XHJcbiAgICBucy5wcmludChcIuKVoOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVo1wiKTtcclxuICAgIC8vIHBvbGx1dGluZyB0YWJsZSB3aXRoIGRhdGFcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgc3BhY2UodGFibGVBcnJheVtpXS5uYW1lLmxlbmd0aCwgMCkgK1xyXG4gICAgICAgICAgICAgICAgXCLilZEgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGFibGVBcnJheVtpXS5tYXhNb25leSArXHJcbiAgICAgICAgICAgICAgICBzcGFjZSh0YWJsZUFycmF5W2ldLm1heE1vbmV5Lmxlbmd0aCwgMSkgK1xyXG4gICAgICAgICAgICAgICAgXCLilZEgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGFibGVBcnJheVtpXS5oYWNraW5nQ2hhbmNlICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0uaGFja2luZ0NoYW5jZS5sZW5ndGgsIDIpICtcclxuICAgICAgICAgICAgICAgIFwi4pWRIFwiICtcclxuICAgICAgICAgICAgICAgIHRhYmxlQXJyYXlbaV0ud2Vha2VuaW5nVGltZSArXHJcbiAgICAgICAgICAgICAgICBzcGFjZSh0YWJsZUFycmF5W2ldLndlYWtlbmluZ1RpbWUubGVuZ3RoLCAzKSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLnNjb3JlICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0uc2NvcmUubGVuZ3RoLCA0KSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkVwiLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCLilZrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZ1cIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwYWNlKGxlbjogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKSB7XHJcbiAgICAvLyB3aXRoIG9mIHRoZSBjZWxsIGNvbnRlbnRcclxuICAgIGNvbnN0IGNvbExlbiA9IFsxOSwgOSwgNywgMTAsIDhdO1xyXG4gICAgY29uc3QgcmVhbCA9IGNvbExlbltjb2xJbmRleF0gLSBsZW47XHJcbiAgICBsZXQgc3RyID0gXCJcIjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVhbDsgaSsrKSB7XHJcbiAgICAgICAgc3RyICs9IFwiIFwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsY0FBYztBQUN2QixTQUFTLFlBQVksWUFBWSxxQkFBcUI7QUFZdEQsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUNuQixvQkFBa0IsSUFBSSxJQUFJO0FBQzlCO0FBRU8sZ0JBQVMsa0JBQWtCLElBQVEsYUFBc0I7QUFDNUQsUUFBTSxhQUFhLGNBQWMsRUFBRTtBQUVuQyxRQUFNLFVBQW9CLENBQUM7QUFFM0IsV0FBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxVQUFNLGFBQWEsV0FBVyxDQUFDO0FBQy9CLFFBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxLQUFLLENBQUMsR0FBRyxjQUFjLFVBQVU7QUFBRztBQUVsRSxlQUFXLElBQUksVUFBVTtBQUV6QixVQUFNLFdBQVcsR0FBRyxrQkFBa0IsVUFBVTtBQUNoRCxVQUFNLGdCQUFnQixHQUFHLGtCQUFrQixVQUFVO0FBQ3JELFFBQUksZ0JBQWdCLEdBQUcsY0FBYyxVQUFVO0FBQy9DLFVBQU0sU0FBUyxHQUFHLGdCQUFnQixVQUFVO0FBRzVDLFFBQUksV0FBVyxLQUFLLEdBQUcsOEJBQThCLFVBQVUsSUFBSSxHQUFHLGdCQUFnQjtBQUFHO0FBS3pGLFFBQUksUUFBUSxXQUFXLEdBQUcsMEJBQTBCLFVBQVUsSUFBSTtBQUVsRSxRQUFJLEdBQUcsV0FBVyxnQkFBZ0IsTUFBTSxHQUFHO0FBQ3ZDLFlBQU1BLFVBQVMsR0FBRyxVQUFVLFVBQVU7QUFDdEMsWUFBTSxTQUFTLEdBQUcsVUFBVTtBQUM1QixNQUFBQSxRQUFPLGlCQUFpQkEsUUFBTztBQUMvQixZQUFNQyxZQUFXRCxRQUFPLFlBQVksU0FBWSxJQUFJQSxRQUFPO0FBQzNELHNCQUFnQixHQUFHLFNBQVMsUUFBUSxXQUFXQSxTQUFRLE1BQU07QUFDN0QsY0FBVUMsWUFBVyxnQkFBaUIsR0FBRyxTQUFTLFFBQVEsV0FBV0QsU0FBUSxNQUFNLElBQUs7QUFBQSxJQUM1RixPQUFPO0FBQ0gsWUFBTSxZQUFZLEdBQUcsOEJBQThCLFVBQVU7QUFDN0QsWUFBTSxZQUFZLEdBQUcsZ0JBQWdCO0FBQ3JDLFVBQUksWUFBWSxZQUFZO0FBQUcsZ0JBQVE7QUFBQSxJQUMzQztBQUVBLFVBQU0sU0FBaUI7QUFBQSxNQUNuQixNQUFNO0FBQUEsTUFDTjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsY0FBYyxTQUFTLEdBQUcsaUJBQWlCLFVBQVU7QUFBQSxNQUNyRDtBQUFBLElBQ0o7QUFFQSxZQUFRLEtBQUssTUFBTTtBQUFBLEVBQ3ZCO0FBRUEsVUFBUSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ25CLFlBQVEsRUFBRSxTQUFTLE1BQU0sRUFBRSxTQUFTO0FBQUEsRUFDeEMsQ0FBQztBQUVELE1BQUk7QUFBYSxlQUFXLElBQUksT0FBTztBQUV2QyxTQUFPO0FBQ1g7QUFFTyxnQkFBUyxjQUFjLElBQWdCO0FBQzFDLFFBQU0sT0FBTyxrQkFBa0IsSUFBSSxLQUFLLEVBQUUsQ0FBQyxFQUFFO0FBQzdDLE1BQUksT0FBTyxXQUFXO0FBQUksV0FBTyxPQUFPO0FBQ3hDLFNBQU87QUFDWDtBQUVPLGdCQUFTLDBCQUEwQixJQUFrQjtBQUN4RCxRQUFNLFdBQXFCLENBQUM7QUFDNUIsUUFBTSxhQUFhLGNBQWMsRUFBRTtBQUNuQyxNQUFJLFVBQVU7QUFDZCxNQUFJLE9BQTJCO0FBRS9CLFdBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsVUFBTSxTQUFTLEdBQUcsVUFBVSxXQUFXLENBQUMsQ0FBQztBQUV6QyxRQUFJLE9BQU8sU0FBUyxPQUFPLFVBQVU7QUFBRztBQUN4QyxRQUFJLENBQUMsT0FBTztBQUFnQjtBQUU1QixVQUFNLFlBQW9CO0FBQUEsTUFDdEIsTUFBTSxPQUFPO0FBQUEsTUFDYixRQUFRLE9BQU87QUFBQSxNQUNmLGNBQWMsT0FBTyxTQUFTLE9BQU87QUFBQSxNQUNyQyxPQUFPO0FBQUEsSUFDWDtBQUNBLFFBQUksVUFBVSxTQUFTLFFBQVE7QUFDM0IsZ0JBQVUsZ0JBQWdCLE9BQU87QUFDakMsZ0JBQVU7QUFDVixhQUFPO0FBQUEsSUFDWDtBQUNBLGFBQVMsS0FBSyxTQUFTO0FBQUEsRUFDM0I7QUFHQSxXQUFTLEtBQUssQ0FBQyxHQUFHLE1BQU07QUFDcEIsV0FBTyxFQUFFLGVBQWUsRUFBRTtBQUFBLEVBQzlCLENBQUM7QUFFRCxNQUFJLFNBQVMsVUFBYSxZQUFZLElBQUk7QUFDdEMsYUFBUyxPQUFPLFNBQVMsQ0FBQztBQUMxQixhQUFTLFFBQVEsSUFBSTtBQUFBLEVBQ3pCO0FBRUEsU0FBTztBQUNYO0FBS08sZ0JBQVMsaUJBQWlCLElBQWtCO0FBQy9DLFFBQU0sV0FBVyx1QkFBdUIsSUFBSSxLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVc7QUFDbEUsV0FBTyxPQUFPLGVBQWU7QUFBQSxFQUNqQyxDQUFDO0FBRUQsUUFBTSxPQUFlO0FBQUEsSUFDakIsTUFBTTtBQUFBLElBQ04sUUFBUSxHQUFHLGdCQUFnQixNQUFNLElBQUksT0FBTztBQUFBLElBQzVDLGNBQWMsR0FBRyxnQkFBZ0IsTUFBTSxJQUFJLEdBQUcsaUJBQWlCLE1BQU0sSUFBSSxPQUFPO0FBQUEsSUFDaEYsT0FBTztBQUFBLEVBQ1g7QUFDQSxXQUFTLEtBQUssSUFBSTtBQUVsQixRQUFNLG1CQUFtQixHQUFHLG9CQUFvQjtBQUNoRCxXQUFTLElBQUksR0FBRyxJQUFJLGlCQUFpQixRQUFRLEtBQUs7QUFDOUMsVUFBTSxTQUFpQjtBQUFBLE1BQ25CLE1BQU0saUJBQWlCLENBQUM7QUFBQSxNQUN4QixRQUFRLEdBQUcsZ0JBQWdCLGlCQUFpQixDQUFDLENBQUM7QUFBQSxNQUM5QyxjQUFjLEdBQUcsZ0JBQWdCLGlCQUFpQixDQUFDLENBQUMsSUFBSSxHQUFHLGlCQUFpQixpQkFBaUIsQ0FBQyxDQUFDO0FBQUEsTUFDL0YsT0FBTztBQUFBLElBQ1g7QUFDQSxRQUFJLE9BQU8sU0FBUyxHQUFHO0FBQ25CLGVBQVMsS0FBSyxNQUFNO0FBQUEsSUFDeEI7QUFBQSxFQUNKO0FBR0EsV0FBUyxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ3BCLFdBQU8sRUFBRSxlQUFlLEVBQUU7QUFBQSxFQUM5QixDQUFDO0FBRUQsU0FBTztBQUNYO0FBRU8sZ0JBQVMsdUJBQXVCLElBQVEsYUFBZ0M7QUFDM0UsUUFBTSxhQUFhLGNBQWMsRUFBRTtBQUVuQyxRQUFNLFVBQW9CLENBQUM7QUFFM0IsV0FBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxVQUFNLGFBQWEsV0FBVyxDQUFDO0FBSS9CLFFBQUksQ0FBQyxXQUFXLElBQUksVUFBVTtBQUFHO0FBTWpDLFVBQU0sV0FBVyxHQUFHLGtCQUFrQixVQUFVO0FBQ2hELFVBQU0sU0FBUyxHQUFHLGdCQUFnQixVQUFVO0FBRzVDLFFBQUksV0FBVyxLQUFLLEdBQUcsOEJBQThCLFdBQVcsQ0FBQyxDQUFDLElBQUksR0FBRyxnQkFBZ0I7QUFBRztBQUU1RixVQUFNLFFBQVEsV0FBVyxHQUFHLDBCQUEwQixVQUFVLElBQUk7QUFFcEUsVUFBTSxTQUFpQjtBQUFBLE1BQ25CLE1BQU07QUFBQSxNQUNOO0FBQUEsTUFDQTtBQUFBLE1BQ0EsY0FBYyxTQUFTLEdBQUcsaUJBQWlCLFVBQVU7QUFBQSxNQUNyRDtBQUFBLElBQ0o7QUFDQSxZQUFRLEtBQUssTUFBTTtBQUFBLEVBQ3ZCO0FBRUEsVUFBUSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQ25CLFlBQVEsRUFBRSxTQUFTLE1BQU0sRUFBRSxTQUFTO0FBQUEsRUFDeEMsQ0FBQztBQUVELE1BQUk7QUFBYSxlQUFXLElBQUksT0FBTztBQUV2QyxTQUFPO0FBQ1g7QUFFTyxnQkFBUyxXQUFXLElBQVEsT0FBaUI7QUFTaEQsUUFBTSxhQUE0QixDQUFDO0FBRW5DLFdBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDbkMsUUFBSSxNQUFNLENBQUMsRUFBRSxhQUFhO0FBQVcsWUFBTSxDQUFDLEVBQUUsV0FBVztBQUN6RCxRQUFJLE1BQU0sQ0FBQyxFQUFFLGtCQUFrQjtBQUFXLFlBQU0sQ0FBQyxFQUFFLGdCQUFnQjtBQUNuRSxRQUFJLE1BQU0sQ0FBQyxFQUFFLGtCQUFrQjtBQUFXLFlBQU0sQ0FBQyxFQUFFLGdCQUFnQjtBQUVuRSxVQUFNLFNBQXNCO0FBQUEsTUFDeEIsTUFBTSxNQUFNLENBQUMsRUFBRTtBQUFBLE1BQ2YsVUFBVSxHQUFHLGFBQWEsT0FBTyxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUM7QUFBQSxNQUNuRCxlQUFlLEdBQUcsYUFBYSxPQUFPLE1BQU0sQ0FBQyxFQUFFLGFBQWEsQ0FBQztBQUFBLE1BQzdELGVBQWUsR0FBRyxhQUFhLE9BQU8sTUFBTSxDQUFDLEVBQUUsYUFBYSxJQUFJLEdBQUk7QUFBQTtBQUFBLE1BQ3BFLE9BQU8sR0FBRyxhQUFhLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDO0FBQUEsSUFDakQ7QUFDQSxlQUFXLEtBQUssTUFBTTtBQUFBLEVBQzFCO0FBRUEsS0FBRyxNQUFNLGtFQUFrRTtBQUMzRSxLQUFHLE1BQU0sa0VBQWtFO0FBQzNFLEtBQUcsTUFBTSxrRUFBa0U7QUFFM0UsV0FBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxPQUFHO0FBQUEsTUFDQyxPQUNJLFdBQVcsQ0FBQyxFQUFFLE9BQ2QsTUFBTSxXQUFXLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxJQUNsQyxPQUNBLFdBQVcsQ0FBQyxFQUFFLFdBQ2QsTUFBTSxXQUFXLENBQUMsRUFBRSxTQUFTLFFBQVEsQ0FBQyxJQUN0QyxPQUNBLFdBQVcsQ0FBQyxFQUFFLGdCQUNkLE1BQU0sV0FBVyxDQUFDLEVBQUUsY0FBYyxRQUFRLENBQUMsSUFDM0MsT0FDQSxXQUFXLENBQUMsRUFBRSxnQkFDZCxNQUFNLFdBQVcsQ0FBQyxFQUFFLGNBQWMsUUFBUSxDQUFDLElBQzNDLE9BQ0EsV0FBVyxDQUFDLEVBQUUsUUFDZCxNQUFNLFdBQVcsQ0FBQyxFQUFFLE1BQU0sUUFBUSxDQUFDLElBQ25DO0FBQUEsSUFDUjtBQUFBLEVBQ0o7QUFFQSxLQUFHLE1BQU0sa0VBQWtFO0FBQy9FO0FBRUEsU0FBUyxNQUFNLEtBQWEsVUFBa0I7QUFFMUMsUUFBTSxTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO0FBQy9CLFFBQU0sT0FBTyxPQUFPLFFBQVEsSUFBSTtBQUNoQyxNQUFJLE1BQU07QUFDVixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sS0FBSztBQUMzQixXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU87QUFDWDsiLCJuYW1lcyI6WyJzZXJ2ZXIiLCJtYXhNb25leSJdfQ==\",\"filename\":\"bestServer.js\",\"server\":\"home\"}}],[\"loop/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { getHackThreads } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await hackServer(ns, \\\"foodnstuff\\\", 0.8);\\n}\\nexport async function hackServer(ns, target, threshold) {\\n  const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n  const targetHackThreads = getHackThreads(ns, target, threshold);\\n  const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n  ns.print(\\n    \\\"total hack threads needed: \\\" + targetHackThreads + \\\" money available: \\\" + ns.getServerMoneyAvailable(target)\\n  );\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const totalMaxRam = allHosts.reduce((acc, server) => {\\n    return acc + server.maxRam;\\n  }, 0);\\n  const numRuns = Math.ceil(targetHackThreads / totalMaxRam);\\n  ns.print(\\\"total RAM: \\\" + totalMaxRam + \\\" numRuns: \\\" + numRuns + \\\"\\\\nthreads to finish: \\\" + targetHackThreads);\\n  let sumThreadsDone = 0;\\n  while (sumThreadsDone < targetHackThreads) {\\n    const hackingTime = ns.getHackTime(target);\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (sumThreadsDone >= targetHackThreads)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n      const numThreadsOnHost = Math.floor(freeRam / hackingScriptRam);\\n      ns.exec(\\\"hack.js\\\", host.name, numThreadsOnHost, target, 0);\\n      sumThreadsDone += numThreadsOnHost;\\n    }\\n    await ns.sleep(hackingTime + safetyMarginMs);\\n    ns.print(\\\"done with \\\" + sumThreadsDone + \\\"/\\\" + targetHackThreads + \\\" hacks\\\");\\n  }\\n  ns.print(\\\"Done hacking!\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgZ2V0SGFja1RocmVhZHMgfSBmcm9tIFwiQC9saWJcIjtcclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIGF3YWl0IGhhY2tTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAwLjgpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgY29uc3Qgc2FmZXR5TWFyZ2luTXMgPSBDb25maWcuREVMQVlfTUFSR0lOX01TO1xyXG5cclxuICAgIC8vY29uc3QgaGFja0NoYW5jZSA9IG5zLmhhY2tBbmFseXplQ2hhbmNlKHRhcmdldCkgLy8gdG9kb1xyXG4gICAgY29uc3QgdGFyZ2V0SGFja1RocmVhZHMgPSBnZXRIYWNrVGhyZWFkcyhucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xyXG4gICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XHJcblxyXG4gICAgbnMucHJpbnQoXHJcbiAgICAgICAgXCJ0b3RhbCBoYWNrIHRocmVhZHMgbmVlZGVkOiBcIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgbW9uZXkgYXZhaWxhYmxlOiBcIiArIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCksXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcblxyXG4gICAgY29uc3QgdG90YWxNYXhSYW0gPSBhbGxIb3N0cy5yZWR1Y2UoKGFjYywgc2VydmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFjYyArIHNlcnZlci5tYXhSYW07XHJcbiAgICB9LCAwKTtcclxuICAgIGNvbnN0IG51bVJ1bnMgPSBNYXRoLmNlaWwodGFyZ2V0SGFja1RocmVhZHMgLyB0b3RhbE1heFJhbSk7XHJcblxyXG4gICAgbnMucHJpbnQoXCJ0b3RhbCBSQU06IFwiICsgdG90YWxNYXhSYW0gKyBcIiBudW1SdW5zOiBcIiArIG51bVJ1bnMgKyBcIlxcbnRocmVhZHMgdG8gZmluaXNoOiBcIiArIHRhcmdldEhhY2tUaHJlYWRzKTtcclxuXHJcbiAgICBsZXQgc3VtVGhyZWFkc0RvbmUgPSAwO1xyXG4gICAgd2hpbGUgKHN1bVRocmVhZHNEb25lIDwgdGFyZ2V0SGFja1RocmVhZHMpIHtcclxuICAgICAgICBjb25zdCBoYWNraW5nVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3VtVGhyZWFkc0RvbmUgPj0gdGFyZ2V0SGFja1RocmVhZHMpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5tYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3QubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBudW1UaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgICAgICBucy5leGVjKFwiaGFjay5qc1wiLCBob3N0Lm5hbWUsIG51bVRocmVhZHNPbkhvc3QsIHRhcmdldCwgMCk7XHJcbiAgICAgICAgICAgIHN1bVRocmVhZHNEb25lICs9IG51bVRocmVhZHNPbkhvc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tpbmdUaW1lICsgc2FmZXR5TWFyZ2luTXMpO1xyXG4gICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgc3VtVGhyZWFkc0RvbmUgKyBcIi9cIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgaGFja3NcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCJEb25lIGhhY2tpbmchXCIpO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsc0JBQXNCO0FBRy9CLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsUUFBTSxXQUFXLElBQUksY0FBYyxHQUFHO0FBQzFDO0FBRUEsc0JBQXNCLFdBQVcsSUFBUSxRQUFnQixXQUFtQjtBQUN4RSxRQUFNLGlCQUFpQixPQUFPO0FBRzlCLFFBQU0sb0JBQW9CLGVBQWUsSUFBSSxRQUFRLFNBQVM7QUFDOUQsUUFBTSxtQkFBbUIsT0FBTztBQUVoQyxLQUFHO0FBQUEsSUFDQyxnQ0FBZ0Msb0JBQW9CLHVCQUF1QixHQUFHLHdCQUF3QixNQUFNO0FBQUEsRUFDaEg7QUFFQSxRQUFNLFdBQVcsMEJBQTBCLEVBQUU7QUFFN0MsUUFBTSxjQUFjLFNBQVMsT0FBTyxDQUFDLEtBQUssV0FBVztBQUNqRCxXQUFPLE1BQU0sT0FBTztBQUFBLEVBQ3hCLEdBQUcsQ0FBQztBQUNKLFFBQU0sVUFBVSxLQUFLLEtBQUssb0JBQW9CLFdBQVc7QUFFekQsS0FBRyxNQUFNLGdCQUFnQixjQUFjLGVBQWUsVUFBVSwwQkFBMEIsaUJBQWlCO0FBRTNHLE1BQUksaUJBQWlCO0FBQ3JCLFNBQU8saUJBQWlCLG1CQUFtQjtBQUN2QyxVQUFNLGNBQWMsR0FBRyxZQUFZLE1BQU07QUFDekMsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFJLGtCQUFrQjtBQUFtQjtBQUV6QyxZQUFNLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLFlBQU0sVUFBVSxLQUFLLFNBQVMsR0FBRyxpQkFBaUIsS0FBSyxJQUFJO0FBRTNELFlBQU0sbUJBQW1CLEtBQUssTUFBTSxVQUFVLGdCQUFnQjtBQUU5RCxTQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sa0JBQWtCLFFBQVEsQ0FBQztBQUN6RCx3QkFBa0I7QUFBQSxJQUN0QjtBQUNBLFVBQU0sR0FBRyxNQUFNLGNBQWMsY0FBYztBQUMzQyxPQUFHLE1BQU0sZUFBZSxpQkFBaUIsTUFBTSxvQkFBb0IsUUFBUTtBQUFBLEVBQy9FO0FBRUEsS0FBRyxNQUFNLGVBQWU7QUFDNUI7IiwibmFtZXMiOltdfQ==\",\"filename\":\"loop/hackingAlgo.js\",\"server\":\"home\"}}],[\"loop/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getBestServerListCheap } from \\\"/bestServer.js\\\";\\nimport { Colors, nukeAll } from \\\"/lib.js\\\";\\nimport { hackServer } from \\\"/loop/hackingAlgo.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nlet lastTarget = \\\"\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServerListCheap(ns, true)[0].name;\\n    if (lastTarget != target) {\\n      nukeAll(ns);\\n      ns.print(\\\"found new best Server: \\\" + target);\\n    }\\n    lastTarget = target;\\n    await loopCycle(ns, target, 0.8);\\n  }\\n}\\nexport async function loopCycle(ns, target, threshold) {\\n  ns.print(Colors.CYAN + \\\"------------ PREPARING ------------\\\" + Colors.RESET);\\n  await prepareServer(ns, target, threshold);\\n  ns.print(Colors.CYAN + \\\"------------- HACKING -------------\\\" + Colors.RESET);\\n  await hackServer(ns, target, threshold);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBnZXRCZXN0U2VydmVyTGlzdENoZWFwIH0gZnJvbSBcIi4uL2Jlc3RTZXJ2ZXIuanNcIjtcclxuaW1wb3J0IHsgQ29sb3JzLCBudWtlQWxsIH0gZnJvbSBcIi4uL2xpYi5qc1wiO1xyXG5pbXBvcnQgeyBoYWNrU2VydmVyIH0gZnJvbSBcIi4vaGFja2luZ0FsZ28uanNcIjtcclxuaW1wb3J0IHsgcHJlcGFyZVNlcnZlciB9IGZyb20gXCIuL3ByZXBhcmVTZXJ2ZXIuanNcIjtcclxuXHJcbmxldCBsYXN0VGFyZ2V0ID0gXCJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICAvLyBzdGVwczogV0dXSC1XR1dILS4uXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldEJlc3RTZXJ2ZXJMaXN0Q2hlYXAobnMsIHRydWUpWzBdLm5hbWU7XHJcbiAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIG51a2VBbGwobnMpO1xyXG4gICAgICAgICAgICBucy5wcmludChcImZvdW5kIG5ldyBiZXN0IFNlcnZlcjogXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0VGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIGF3YWl0IGxvb3BDeWNsZShucywgdGFyZ2V0LCAwLjgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9vcEN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIHRocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tIFBSRVBBUklORyAtLS0tLS0tLS0tLS1cIiArIENvbG9ycy5SRVNFVCk7XHJcbiAgICBhd2FpdCBwcmVwYXJlU2VydmVyKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XHJcblxyXG4gICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLS0gSEFDS0lORyAtLS0tLS0tLS0tLS0tXCIgKyBDb2xvcnMuUkVTRVQpO1xyXG4gICAgYXdhaXQgaGFja1NlcnZlcihucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xyXG59XHJcblxyXG4vKipcclxuIG5vdGVzOlxyXG4gd2Vha2VuIHJlbW92ZXMgMC4wNSBzZWMgbHZsXHJcbiBncm93IGFkZHMgMC4wMDQgc2VjIGx2bFxyXG5cclxuICovXHJcbiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyw4QkFBOEI7QUFDdkMsU0FBUyxRQUFRLGVBQWU7QUFDaEMsU0FBUyxrQkFBa0I7QUFDM0IsU0FBUyxxQkFBcUI7QUFFOUIsSUFBSSxhQUFhO0FBRWpCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFHbkIsU0FBTyxNQUFNO0FBQ1QsVUFBTSxTQUFTLHVCQUF1QixJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDbkQsUUFBSSxjQUFjLFFBQVE7QUFDdEIsY0FBUSxFQUFFO0FBQ1YsU0FBRyxNQUFNLDRCQUE0QixNQUFNO0FBQUEsSUFDL0M7QUFDQSxpQkFBYTtBQUNiLFVBQU0sVUFBVSxJQUFJLFFBQVEsR0FBRztBQUFBLEVBQ25DO0FBQ0o7QUFFQSxzQkFBc0IsVUFBVSxJQUFRLFFBQWdCLFdBQW1CO0FBQ3ZFLEtBQUcsTUFBTSxPQUFPLE9BQU8sd0NBQXdDLE9BQU8sS0FBSztBQUMzRSxRQUFNLGNBQWMsSUFBSSxRQUFRLFNBQVM7QUFFekMsS0FBRyxNQUFNLE9BQU8sT0FBTyx3Q0FBd0MsT0FBTyxLQUFLO0FBQzNFLFFBQU0sV0FBVyxJQUFJLFFBQVEsU0FBUztBQUMxQzsiLCJuYW1lcyI6W119\",\"filename\":\"loop/manager.js\",\"server\":\"home\"}}],[\"lib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nexport var Colors = /* @__PURE__ */ ((Colors2) => {\\n  Colors2[\\\"RESET\\\"] = \\\"\\\\x1B[0m\\\";\\n  Colors2[\\\"BLACK\\\"] = \\\"\\\\x1B[30m\\\";\\n  Colors2[\\\"RED\\\"] = \\\"\\\\x1B[31m\\\";\\n  Colors2[\\\"GREEN\\\"] = \\\"\\\\x1B[32m\\\";\\n  Colors2[\\\"YELLOW\\\"] = \\\"\\\\x1B[33m\\\";\\n  Colors2[\\\"BLUE\\\"] = \\\"\\\\x1B[34m\\\";\\n  Colors2[\\\"MAGENTA\\\"] = \\\"\\\\x1B[35m\\\";\\n  Colors2[\\\"CYAN\\\"] = \\\"\\\\x1B[36m\\\";\\n  Colors2[\\\"WHITE\\\"] = \\\"\\\\x1B[37m\\\";\\n  Colors2[\\\"E_ORANGE\\\"] = \\\"\\\\x1B[38;5;178m\\\";\\n  return Colors2;\\n})(Colors || {});\\nexport function serverScanner(ns) {\\n  const uncheckedHosts = [\\\"home\\\"];\\n  const checkedHosts = [];\\n  for (let i = 0; i < uncheckedHosts.length; i++) {\\n    const newHosts = ns.scan(uncheckedHosts[i]);\\n    checkedHosts.push(uncheckedHosts[i]);\\n    for (let n = 0; n < newHosts.length; n++) {\\n      if (checkedHosts.includes(newHosts[n]) == false || uncheckedHosts.includes(newHosts[n]) == false) {\\n        uncheckedHosts.push(newHosts[n]);\\n      }\\n    }\\n  }\\n  return checkedHosts.sort();\\n}\\nexport function isHackable(ns, server) {\\n  if (ns.getServerNumPortsRequired(server) <= getNumHacks(ns) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel())\\n    return true;\\n  else\\n    return false;\\n}\\nexport function getNumHacks(ns) {\\n  let i = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    i++;\\n  return i;\\n}\\nexport function nukeAll(ns) {\\n  const hosts = serverScanner(ns);\\n  for (let i = 0; i < hosts.length; i++) {\\n    if (isHackable(ns, hosts[i]) || ns.getPurchasedServers().includes(hosts[i])) {\\n      openPorts(ns, hosts[i]);\\n      ns.nuke(hosts[i]);\\n      ns.scp(\\\"hack.js\\\", hosts[i]);\\n      ns.scp(\\\"grow.js\\\", hosts[i]);\\n      ns.scp(\\\"weaken.js\\\", hosts[i]);\\n    } else {\\n      continue;\\n    }\\n  }\\n}\\nexport function nukeServer(ns, server) {\\n  openPorts(ns, server);\\n  ns.nuke(server);\\n  ns.scp(\\\"hack.js\\\", server);\\n  ns.scp(\\\"grow.js\\\", server);\\n  ns.scp(\\\"weaken.js\\\", server);\\n}\\nexport function openPorts(ns, target) {\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    ns.brutessh(target);\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    ns.ftpcrack(target);\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    ns.httpworm(target);\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    ns.sqlinject(target);\\n}\\nexport function getTimeH(timestamp) {\\n  if (timestamp == void 0 || timestamp == null)\\n    timestamp = Date.now();\\n  const date = new Date(timestamp);\\n  date.setUTCHours(date.getUTCHours() + 1);\\n  const hours = date.getUTCHours().toString().padStart(2, \\\"0\\\");\\n  const minutes = date.getUTCMinutes().toString().padStart(2, \\\"0\\\");\\n  const seconds = date.getUTCSeconds().toString().padStart(2, \\\"0\\\");\\n  const milliseconds = date.getUTCMilliseconds().toString().padStart(3, \\\"0\\\");\\n  const formattedTime = `${hours}:${minutes}:${seconds}:${milliseconds}`;\\n  return formattedTime;\\n}\\nexport function getGrowThreads(ns, server) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(server);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = serverMaxMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier) * 1.01);\\n  return serverGrowThreads;\\n}\\nexport function getGrowThreadsThreshold(ns, server, threshold) {\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const minMoney = maxMoney * (1 - threshold);\\n  const moneyMultiplier = maxMoney / minMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier) * 1.01);\\n  ns.print(serverGrowThreads + \\\" grows needed\\\");\\n  return serverGrowThreads;\\n}\\nexport function getWeakenThreadsAfterHack(ns, numHackThreads) {\\n  const hackSecLvlIncrease = ns.hackAnalyzeSecurity(numHackThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreadsAfterGrow(ns, numGrowThreads) {\\n  const hackSecLvlIncrease = ns.growthAnalyzeSecurity(numGrowThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreads(ns, server) {\\n  const serverSecLvl = ns.getServerSecurityLevel(server);\\n  const serverWeakenThreads = Math.ceil((serverSecLvl - ns.getServerMinSecurityLevel(server)) / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getHackThreads(ns, server, moneyHackThreshold) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const lowerMoneyBound = serverMaxMoney * (1 - moneyHackThreshold);\\n  const hackAmount = serverMaxMoney - lowerMoneyBound;\\n  const serverHackThreads = Math.floor(ns.hackAnalyzeThreads(server, hackAmount));\\n  return serverHackThreads;\\n}\\nexport function getGrowThreadsFormulas(ns, server, hackThreads) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = PlayerManager.getInstance(ns).getPlayer();\\n  if (serverObject.moneyMax == void 0)\\n    return 0;\\n  serverObject.moneyAvailable = serverObject.moneyMax;\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  const percentPerHack = ns.formulas.hacking.hackPercent(serverObject, playerObject);\\n  const hackPercent = percentPerHack * hackThreads;\\n  serverObject.moneyAvailable = serverObject.moneyMax * (1 - hackPercent);\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  return Math.ceil(ns.formulas.hacking.growThreads(serverObject, playerObject, serverObject.moneyMax) * 1.01);\\n}\\nexport function getHackThreadsFormulas(ns, server, hackThreshold) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = PlayerManager.getInstance(ns).getPlayer();\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  serverObject.moneyAvailable = serverObject.moneyMax;\\n  return Math.floor(hackThreshold / ns.formulas.hacking.hackPercent(serverObject, playerObject));\\n}\\nexport function writeToPort(ns, port, data) {\\n  const currentData = ns.peek(port);\\n  if (currentData == \\\"NULL PORT DATA\\\") {\\n    ns.writePort(port, data);\\n  } else {\\n    ns.writePort(port, data);\\n    ns.readPort(port);\\n  }\\n}\\nexport function isPreparationNeeded(ns, target) {\\n  if (ns.getServerMaxMoney(target) != parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) != ns.getServerMinSecurityLevel(target)) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgUGxheWVyTWFuYWdlciB9IGZyb20gXCIuL3BhcmFsbGVsL1BsYXllck1hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBlbnVtIENvbG9ycyB7XHJcbiAgICBSRVNFVCA9IFwiXFx4MWJbMG1cIixcclxuICAgIEJMQUNLID0gXCJcXHgxYlszMG1cIixcclxuICAgIFJFRCA9IFwiXFx4MWJbMzFtXCIsXHJcbiAgICBHUkVFTiA9IFwiXFx4MWJbMzJtXCIsXHJcbiAgICBZRUxMT1cgPSBcIlxceDFiWzMzbVwiLFxyXG4gICAgQkxVRSA9IFwiXFx4MWJbMzRtXCIsXHJcbiAgICBNQUdFTlRBID0gXCJcXHgxYlszNW1cIixcclxuICAgIENZQU4gPSBcIlxceDFiWzM2bVwiLFxyXG4gICAgV0hJVEUgPSBcIlxceDFiWzM3bVwiLFxyXG4gICAgRV9PUkFOR0UgPSBcIlxceDFiWzM4OzU7MTc4bVwiLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VydmVyU2Nhbm5lcihuczogTlMpIHtcclxuICAgIGNvbnN0IHVuY2hlY2tlZEhvc3RzID0gW1wiaG9tZVwiXTtcclxuICAgIGNvbnN0IGNoZWNrZWRIb3N0cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW5jaGVja2VkSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBuZXdIb3N0cyA9IG5zLnNjYW4odW5jaGVja2VkSG9zdHNbaV0pO1xyXG4gICAgICAgIGNoZWNrZWRIb3N0cy5wdXNoKHVuY2hlY2tlZEhvc3RzW2ldKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBuZXdIb3N0cy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZEhvc3RzLmluY2x1ZGVzKG5ld0hvc3RzW25dKSA9PSBmYWxzZSB8fCB1bmNoZWNrZWRIb3N0cy5pbmNsdWRlcyhuZXdIb3N0c1tuXSkgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHVuY2hlY2tlZEhvc3RzLnB1c2gobmV3SG9zdHNbbl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaGVja2VkSG9zdHMuc29ydCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNIYWNrYWJsZShuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzZXJ2ZXIpIDw9IGdldE51bUhhY2tzKG5zKSAmJlxyXG4gICAgICAgIG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcikgPD0gbnMuZ2V0SGFja2luZ0xldmVsKClcclxuICAgIClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnVtSGFja3MobnM6IE5TKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiKSkgaSsrO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGVFBDcmFjay5leGVcIikpIGkrKztcclxuICAgIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIpKSBpKys7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIikpIGkrKztcclxuICAgIHJldHVybiBpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnVrZUFsbChuczogTlMpIHtcclxuICAgIGNvbnN0IGhvc3RzID0gc2VydmVyU2Nhbm5lcihucyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGhvc3QgaXMgaGFja2FibGVcclxuICAgICAgICBpZiAoaXNIYWNrYWJsZShucywgaG9zdHNbaV0pIHx8IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5pbmNsdWRlcyhob3N0c1tpXSkpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogZ2V0UHVyY2hhc2VkU2VydmVycygpIGlzIG5vdCBuZWVkZWRcclxuICAgICAgICAgICAgb3BlblBvcnRzKG5zLCBob3N0c1tpXSk7XHJcbiAgICAgICAgICAgIG5zLm51a2UoaG9zdHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY29weSBhbGwgc2NyaXB0cyB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgIG5zLnNjcChcImhhY2suanNcIiwgaG9zdHNbaV0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJncm93LmpzXCIsIGhvc3RzW2ldKTtcclxuICAgICAgICAgICAgbnMuc2NwKFwid2Vha2VuLmpzXCIsIGhvc3RzW2ldKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBudWtlU2VydmVyKG5zOiBOUywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIG9wZW5Qb3J0cyhucywgc2VydmVyKTtcclxuICAgIG5zLm51a2Uoc2VydmVyKTtcclxuXHJcbiAgICBucy5zY3AoXCJoYWNrLmpzXCIsIHNlcnZlcik7XHJcbiAgICBucy5zY3AoXCJncm93LmpzXCIsIHNlcnZlcik7XHJcbiAgICBucy5zY3AoXCJ3ZWFrZW4uanNcIiwgc2VydmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5Qb3J0cyhuczogTlMsIHRhcmdldDogc3RyaW5nKSB7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiKSkgbnMuYnJ1dGVzc2godGFyZ2V0KTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKFwiRlRQQ3JhY2suZXhlXCIpKSBucy5mdHBjcmFjayh0YXJnZXQpO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJIVFRQV29ybS5leGVcIikpIG5zLmh0dHB3b3JtKHRhcmdldCk7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIikpIG5zLnNxbGluamVjdCh0YXJnZXQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZUgodGltZXN0YW1wPzogbnVtYmVyKSB7XHJcbiAgICBpZiAodGltZXN0YW1wID09IHVuZGVmaW5lZCB8fCB0aW1lc3RhbXAgPT0gbnVsbCkgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuICAgIGRhdGUuc2V0VVRDSG91cnMoZGF0ZS5nZXRVVENIb3VycygpICsgMSk7XHJcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgzLCBcIjBcIik7XHJcbiAgICBjb25zdCBmb3JtYXR0ZWRUaW1lID0gYCR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfToke21pbGxpc2Vjb25kc31gO1xyXG4gICAgcmV0dXJuIGZvcm1hdHRlZFRpbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcm93VGhyZWFkcyhuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XHJcbiAgICBjb25zdCBzZXJ2ZXJDdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIpO1xyXG4gICAgbGV0IG1vbmV5TXVsdGlwbGllciA9IHNlcnZlck1heE1vbmV5IC8gc2VydmVyQ3VycmVudE1vbmV5O1xyXG4gICAgaWYgKGlzTmFOKG1vbmV5TXVsdGlwbGllcikgfHwgbW9uZXlNdWx0aXBsaWVyID09IEluZmluaXR5KSBtb25leU11bHRpcGxpZXIgPSBzZXJ2ZXJNYXhNb25leTtcclxuICAgIGNvbnN0IHNlcnZlckdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUoc2VydmVyLCBtb25leU11bHRpcGxpZXIpICogMS4wMSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlckdyb3dUaHJlYWRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jvd1RocmVhZHNUaHJlc2hvbGQobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgdGhyZXNob2xkOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyKTtcclxuICAgIGNvbnN0IG1pbk1vbmV5ID0gbWF4TW9uZXkgKiAoMSAtIHRocmVzaG9sZCk7XHJcbiAgICBjb25zdCBtb25leU11bHRpcGxpZXIgPSBtYXhNb25leSAvIG1pbk1vbmV5O1xyXG4gICAgY29uc3Qgc2VydmVyR3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZShzZXJ2ZXIsIG1vbmV5TXVsdGlwbGllcikgKiAxLjAxKTtcclxuICAgIG5zLnByaW50KHNlcnZlckdyb3dUaHJlYWRzICsgXCIgZ3Jvd3MgbmVlZGVkXCIpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJHcm93VGhyZWFkcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2sobnM6IE5TLCBudW1IYWNrVGhyZWFkczogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGhhY2tTZWNMdmxJbmNyZWFzZSA9IG5zLmhhY2tBbmFseXplU2VjdXJpdHkobnVtSGFja1RocmVhZHMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcldlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoaGFja1NlY0x2bEluY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlcldlYWtlblRocmVhZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zOiBOUywgbnVtR3Jvd1RocmVhZHM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBoYWNrU2VjTHZsSW5jcmVhc2UgPSBucy5ncm93dGhBbmFseXplU2VjdXJpdHkobnVtR3Jvd1RocmVhZHMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcldlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoaGFja1NlY0x2bEluY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlcldlYWtlblRocmVhZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWFrZW5UaHJlYWRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHNlcnZlclNlY0x2bCA9IG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwoc2VydmVyKTtcclxuICAgIGNvbnN0IHNlcnZlcldlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKHNlcnZlclNlY0x2bCAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyKSkgLyBucy53ZWFrZW5BbmFseXplKDEpKTtcclxuXHJcbiAgICByZXR1cm4gc2VydmVyV2Vha2VuVGhyZWFkcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEhhY2tUaHJlYWRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIG1vbmV5SGFja1RocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XHJcbiAgICBjb25zdCBsb3dlck1vbmV5Qm91bmQgPSBzZXJ2ZXJNYXhNb25leSAqICgxIC0gbW9uZXlIYWNrVGhyZXNob2xkKTtcclxuICAgIGNvbnN0IGhhY2tBbW91bnQgPSBzZXJ2ZXJNYXhNb25leSAtIGxvd2VyTW9uZXlCb3VuZDtcclxuICAgIGNvbnN0IHNlcnZlckhhY2tUaHJlYWRzID0gTWF0aC5mbG9vcihucy5oYWNrQW5hbHl6ZVRocmVhZHMoc2VydmVyLCBoYWNrQW1vdW50KSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlckhhY2tUaHJlYWRzO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBGb3JtdWxhc0FQSSAtLS0tLS0tLS0tLS0tLS0tLVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyhuczogTlMsIHNlcnZlcjogc3RyaW5nLCBoYWNrVGhyZWFkczogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBzZXJ2ZXJPYmplY3QgPSBucy5nZXRTZXJ2ZXIoc2VydmVyKTtcclxuICAgIGNvbnN0IHBsYXllck9iamVjdCA9IFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpLmdldFBsYXllcigpO1xyXG5cclxuICAgIGlmIChzZXJ2ZXJPYmplY3QubW9uZXlNYXggPT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuXHJcbiAgICBzZXJ2ZXJPYmplY3QubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXJPYmplY3QubW9uZXlNYXg7XHJcbiAgICBzZXJ2ZXJPYmplY3QuYmFzZURpZmZpY3VsdHkgPSBzZXJ2ZXJPYmplY3QubWluRGlmZmljdWx0eTtcclxuXHJcbiAgICBjb25zdCBwZXJjZW50UGVySGFjayA9IG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja1BlcmNlbnQoc2VydmVyT2JqZWN0LCBwbGF5ZXJPYmplY3QpO1xyXG4gICAgY29uc3QgaGFja1BlcmNlbnQgPSBwZXJjZW50UGVySGFjayAqIGhhY2tUaHJlYWRzO1xyXG5cclxuICAgIHNlcnZlck9iamVjdC5tb25leUF2YWlsYWJsZSA9IHNlcnZlck9iamVjdC5tb25leU1heCAqICgxIC0gaGFja1BlcmNlbnQpO1xyXG4gICAgc2VydmVyT2JqZWN0LmJhc2VEaWZmaWN1bHR5ID0gc2VydmVyT2JqZWN0Lm1pbkRpZmZpY3VsdHk7XHJcblxyXG4gICAgcmV0dXJuIE1hdGguY2VpbChucy5mb3JtdWxhcy5oYWNraW5nLmdyb3dUaHJlYWRzKHNlcnZlck9iamVjdCwgcGxheWVyT2JqZWN0LCBzZXJ2ZXJPYmplY3QubW9uZXlNYXgpICogMS4wMSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYWNrVGhyZWFkc0Zvcm11bGFzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgY29uc3Qgc2VydmVyT2JqZWN0ID0gbnMuZ2V0U2VydmVyKHNlcnZlcik7XHJcbiAgICBjb25zdCBwbGF5ZXJPYmplY3QgPSBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKS5nZXRQbGF5ZXIoKTtcclxuXHJcbiAgICBzZXJ2ZXJPYmplY3QuYmFzZURpZmZpY3VsdHkgPSBzZXJ2ZXJPYmplY3QubWluRGlmZmljdWx0eTtcclxuICAgIHNlcnZlck9iamVjdC5tb25leUF2YWlsYWJsZSA9IHNlcnZlck9iamVjdC5tb25leU1heDtcclxuXHJcbiAgICAvLyB0aHJlYWRzICogcGVyY2VudCA9PSBoYWNrVGhyZXNob2xkID0+IHRocmVhZHMgPT0gaGFja1RocmVzaG9sZCAvIHBlcmNlbnRcclxuICAgIHJldHVybiBNYXRoLmZsb29yKGhhY2tUaHJlc2hvbGQgLyBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tQZXJjZW50KHNlcnZlck9iamVjdCwgcGxheWVyT2JqZWN0KSk7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tIFBvcnRzIC0tLS0tLS0tLS0tLS0tLS0tXHJcbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVRvUG9ydChuczogTlMsIHBvcnQ6IG51bWJlciwgZGF0YTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjdXJyZW50RGF0YSA9IG5zLnBlZWsocG9ydCk7XHJcbiAgICBpZiAoY3VycmVudERhdGEgPT0gXCJOVUxMIFBPUlQgREFUQVwiKSB7XHJcbiAgICAgICAgbnMud3JpdGVQb3J0KHBvcnQsIGRhdGEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBucy53cml0ZVBvcnQocG9ydCwgZGF0YSk7XHJcbiAgICAgICAgbnMucmVhZFBvcnQocG9ydCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXBhcmF0aW9uTmVlZGVkKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpIHtcclxuICAgIGlmIChcclxuICAgICAgICBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpICE9IHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KS50b0ZpeGVkKDUpKSB8fFxyXG4gICAgICAgIHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpLnRvRml4ZWQoNSkpICE9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxxQkFBcUI7QUFFdkIsV0FBSyxTQUFMLGtCQUFLQSxZQUFMO0FBQ0gsRUFBQUEsUUFBQSxXQUFR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\",\"filename\":\"lib.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"hackingDeamon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized, getBestServer } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreadsFormulas,\\n  getGrowThreadsThreshold,\\n  getHackThreadsFormulas,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack,\\n  isPreparationNeeded,\\n  writeToPort\\n} from \\\"/lib.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nimport { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nimport { parallelCycle } from \\\"/parallel/manager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  ns.getPortHandle(2).clear();\\n  let hackThreshold = 0.5;\\n  let lastTarget = \\\"\\\";\\n  while (true) {\\n    const stockManagerRunning = ns.ps().find((p) => p.filename === \\\"Stock/manager.js\\\") !== void 0;\\n    if (ns.stock.hasWSEAccount() && ns.stock.has4SData() && ns.stock.has4SDataTIXAPI() && ns.stock.hasTIXAPIAccess() && ns.getServerMoneyAvailable(\\\"home\\\") > Config.STOCK_MARKET_MIN_HOME_MONEY && !stockManagerRunning)\\n      ns.exec(\\\"Stock/manager.js\\\", \\\"home\\\");\\n    PlayerManager.getInstance(ns).resetPlayer(ns);\\n    const target = ns.args[0] === void 0 ? getBestServer(ns) : ns.args[0].toString();\\n    writeToPort(ns, 1, target);\\n    ns.print(\\\"lastTarget: \\\" + lastTarget + \\\" target: \\\" + target);\\n    if (ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      if (lastTarget !== target || isPreparationNeeded(ns, target)) {\\n        hackThreshold = await prepare(ns, target, hackThreshold);\\n        lastTarget = target;\\n      }\\n      PlayerManager.getInstance(ns).resetPlayer(ns);\\n      await parallelCycle(ns, target, hackThreshold, Config.LOOP_BATCH_COUNT);\\n    } else {\\n      if (lastTarget !== target) {\\n        hackThreshold = await prepare(ns, target, hackThreshold);\\n        lastTarget = target;\\n      }\\n      await parallelCycle(ns, target, hackThreshold);\\n    }\\n  }\\n}\\nfunction getHackThreshold(ns, target) {\\n  const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n  const weakenScriptRam = Config.WEAKEN_SCRIPT_RAM;\\n  const growingScriptRam = Config.GROW_SCRIPT_RAM;\\n  const THRESHOLD_STEP = Config.THRESHOLD_STEP;\\n  let hackThreshold = 0.9;\\n  if (hackThreshold < Config.MIN_HACK_THRESHOLD)\\n    throw new Error(\\\"Hack threshold is too low\\\");\\n  ns.print(Colors.E_ORANGE + \\\"Starting hack threshold: \\\" + hackThreshold);\\n  while (true) {\\n    let serverHackThreads = 0;\\n    let serverGrowThreads = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      serverHackThreads = getHackThreadsFormulas(ns, target, hackThreshold);\\n      serverGrowThreads = getGrowThreadsFormulas(ns, target, serverHackThreads);\\n    } else {\\n      const hackAmount = ns.getServerMaxMoney(target) * hackThreshold;\\n      serverHackThreads = Math.ceil(ns.hackAnalyzeThreads(target, hackAmount));\\n      serverGrowThreads = getGrowThreadsThreshold(ns, target, hackThreshold + THRESHOLD_STEP);\\n    }\\n    const firstWeakenThreads = getWeakenThreadsAfterHack(ns, serverHackThreads);\\n    const secondWeakenThreads = getWeakenThreadsAfterGrow(ns, serverGrowThreads);\\n    const allHosts = getBestHostByRamOptimized(ns);\\n    let hackDeployed = false;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      if (host.name.includes(Config.WEAK_SERVER_NAME) || host.name.includes(Config.GROW_SERVER_NAME))\\n        continue;\\n      const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n      if (maxThreadsOnHost >= serverHackThreads) {\\n        host.availableRam -= serverHackThreads * hackingScriptRam;\\n        hackDeployed = true;\\n        break;\\n      }\\n    }\\n    if (!hackDeployed) {\\n      hackThreshold -= THRESHOLD_STEP;\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    let threadsDispatched = 0;\\n    let threadsRemaining = firstWeakenThreads;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= firstWeakenThreads)\\n        break;\\n      const host = allHosts[i];\\n      if (host.name.includes(Config.GROW_SERVER_NAME) || host.name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const freeRam = host.availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      host.availableRam -= threadsToDispatch * weakenScriptRam;\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining > 0) {\\n      hackThreshold -= THRESHOLD_STEP;\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    let growDeployed = false;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      if (host.name.includes(Config.WEAK_SERVER_NAME) || host.name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n      if (maxThreadsOnHost >= serverGrowThreads) {\\n        host.availableRam -= serverGrowThreads * growingScriptRam;\\n        growDeployed = true;\\n      }\\n    }\\n    if (!growDeployed) {\\n      hackThreshold -= THRESHOLD_STEP;\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    threadsDispatched = 0;\\n    threadsRemaining = secondWeakenThreads;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= secondWeakenThreads)\\n        break;\\n      const host = allHosts[i];\\n      if (host.name.includes(Config.GROW_SERVER_NAME) || host.name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const freeRam = host.availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      host.availableRam -= threadsToDispatch * weakenScriptRam;\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining > 0) {\\n      hackThreshold -= THRESHOLD_STEP;\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    ns.print(Colors.GREEN + \\\"All simulations passed, hackThreshold: \\\" + hackThreshold);\\n    return hackThreshold;\\n  }\\n}\\nexport async function prepare(ns, target, hackThreshold) {\\n  if (isPreparationNeeded(ns, target)) {\\n    await prepareServer(ns, target);\\n  }\\n  hackThreshold = getHackThreshold(ns, target);\\n  ns.tprint(Colors.E_ORANGE + \\\"hackThreshold: \\\" + hackThreshold);\\n  if (ns.getServerMaxMoney(target) == parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) == ns.getServerMinSecurityLevel(target)) {\\n    ns.print(Colors.GREEN + \\\"Preparation finished, starting parallel mode\\\");\\n  } else {\\n    ns.tprint(Colors.RED + \\\"Preparation failed\\\");\\n    throw new Error(\\\"Preparation failed\\\");\\n  }\\n  return hackThreshold;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdEZWFtb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi9UaW1lXCI7XHJcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQsIGdldEJlc3RTZXJ2ZXIgfSBmcm9tIFwiLi9iZXN0U2VydmVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBDb2xvcnMsXHJcbiAgICBnZXRHcm93VGhyZWFkc0Zvcm11bGFzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNUaHJlc2hvbGQsXHJcbiAgICBnZXRIYWNrVGhyZWFkc0Zvcm11bGFzLFxyXG4gICAgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2ssXHJcbiAgICBpc1ByZXBhcmF0aW9uTmVlZGVkLFxyXG4gICAgd3JpdGVUb1BvcnQsXHJcbn0gZnJvbSBcIi4vbGliXCI7XHJcbmltcG9ydCB7IHByZXBhcmVTZXJ2ZXIgfSBmcm9tIFwiLi9sb29wL3ByZXBhcmVTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgUGxheWVyTWFuYWdlciB9IGZyb20gXCIuL3BhcmFsbGVsL1BsYXllck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgcGFyYWxsZWxDeWNsZSB9IGZyb20gXCIuL3BhcmFsbGVsL21hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICBucy5nZXRQb3J0SGFuZGxlKDIpLmNsZWFyKCk7XHJcblxyXG4gICAgbGV0IGhhY2tUaHJlc2hvbGQgPSAwLjU7XHJcbiAgICBsZXQgbGFzdFRhcmdldCA9IFwiXCI7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAvLyBzdGFydCBzdG9jayBtYW5hZ2VyIGlmIHBsYXllciBoYXMgV1NFIGFjY291bnRcclxuICAgICAgICBjb25zdCBzdG9ja01hbmFnZXJSdW5uaW5nOiBib29sZWFuID0gbnMucHMoKS5maW5kKChwKSA9PiBwLmZpbGVuYW1lID09PSBcIlN0b2NrL21hbmFnZXIuanNcIikgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIG5zLnN0b2NrLmhhc1dTRUFjY291bnQoKSAmJlxyXG4gICAgICAgICAgICBucy5zdG9jay5oYXM0U0RhdGEoKSAmJlxyXG4gICAgICAgICAgICBucy5zdG9jay5oYXM0U0RhdGFUSVhBUEkoKSAmJlxyXG4gICAgICAgICAgICBucy5zdG9jay5oYXNUSVhBUElBY2Nlc3MoKSAmJlxyXG4gICAgICAgICAgICBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIikgPiBDb25maWcuU1RPQ0tfTUFSS0VUX01JTl9IT01FX01PTkVZICYmXHJcbiAgICAgICAgICAgICFzdG9ja01hbmFnZXJSdW5uaW5nXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgICBucy5leGVjKFwiU3RvY2svbWFuYWdlci5qc1wiLCBcImhvbWVcIik7XHJcblxyXG4gICAgICAgIFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpLnJlc2V0UGxheWVyKG5zKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gbnMuYXJnc1swXSA9PT0gdW5kZWZpbmVkID8gZ2V0QmVzdFNlcnZlcihucykgOiBucy5hcmdzWzBdLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIHdyaXRlVG9Qb3J0KG5zLCAxLCB0YXJnZXQpO1xyXG4gICAgICAgIG5zLnByaW50KFwibGFzdFRhcmdldDogXCIgKyBsYXN0VGFyZ2V0ICsgXCIgdGFyZ2V0OiBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGb3JtdWxhcy5leGVcIiwgXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQgfHwgaXNQcmVwYXJhdGlvbk5lZWRlZChucywgdGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gUFJFUEFSRSBTRVJWRVIgLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgPSBhd2FpdCBwcmVwYXJlKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gQ0hFQ0sgV0hJQ0ggTU9ERSBUTyBVU0UgLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucykucmVzZXRQbGF5ZXIobnMpO1xyXG4gICAgICAgICAgICBhd2FpdCBwYXJhbGxlbEN5Y2xlKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIENvbmZpZy5MT09QX0JBVENIX0NPVU5UKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobGFzdFRhcmdldCAhPT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBQUkVQQVJFIFNFUlZFUiAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgPSBhd2FpdCBwcmVwYXJlKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBDSEVDSyBXSElDSCBNT0RFIFRPIFVTRSAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgcGFyYWxsZWxDeWNsZShucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEhhY2tUaHJlc2hvbGQobnM6IE5TLCB0YXJnZXQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XHJcbiAgICBjb25zdCB3ZWFrZW5TY3JpcHRSYW0gPSBDb25maWcuV0VBS0VOX1NDUklQVF9SQU07XHJcbiAgICBjb25zdCBncm93aW5nU2NyaXB0UmFtID0gQ29uZmlnLkdST1dfU0NSSVBUX1JBTTtcclxuXHJcbiAgICBjb25zdCBUSFJFU0hPTERfU1RFUCA9IENvbmZpZy5USFJFU0hPTERfU1RFUDtcclxuICAgIGxldCBoYWNrVGhyZXNob2xkID0gMC45O1xyXG5cclxuICAgIGlmIChoYWNrVGhyZXNob2xkIDwgQ29uZmlnLk1JTl9IQUNLX1RIUkVTSE9MRCkgdGhyb3cgbmV3IEVycm9yKFwiSGFjayB0aHJlc2hvbGQgaXMgdG9vIGxvd1wiKTtcclxuXHJcbiAgICBucy5wcmludChDb2xvcnMuRV9PUkFOR0UgKyBcIlN0YXJ0aW5nIGhhY2sgdGhyZXNob2xkOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG5cclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgbGV0IHNlcnZlckhhY2tUaHJlYWRzID0gMDtcclxuICAgICAgICBsZXQgc2VydmVyR3Jvd1RocmVhZHMgPSAwO1xyXG4gICAgICAgIGlmIChucy5maWxlRXhpc3RzKFwiRm9ybXVsYXMuZXhlXCIsIFwiaG9tZVwiKSkge1xyXG4gICAgICAgICAgICBzZXJ2ZXJIYWNrVGhyZWFkcyA9IGdldEhhY2tUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCk7XHJcblxyXG4gICAgICAgICAgICBzZXJ2ZXJHcm93VGhyZWFkcyA9IGdldEdyb3dUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgc2VydmVySGFja1RocmVhZHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhY2tBbW91bnQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpICogaGFja1RocmVzaG9sZDtcclxuICAgICAgICAgICAgc2VydmVySGFja1RocmVhZHMgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVUaHJlYWRzKHRhcmdldCwgaGFja0Ftb3VudCkpO1xyXG5cclxuICAgICAgICAgICAgc2VydmVyR3Jvd1RocmVhZHMgPSBnZXRHcm93VGhyZWFkc1RocmVzaG9sZChucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkICsgVEhSRVNIT0xEX1NURVApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaXJzdFdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJIYWNrKG5zLCBzZXJ2ZXJIYWNrVGhyZWFkcyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlY29uZFdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zLCBzZXJ2ZXJHcm93VGhyZWFkcyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gU2ltdWxhdGUgaGFjayAtLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIGxldCBoYWNrRGVwbG95ZWQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBhbGxIb3N0c1tpXTtcclxuICAgICAgICAgICAgaWYgKGhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuV0VBS19TRVJWRVJfTkFNRSkgfHwgaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihob3N0LmF2YWlsYWJsZVJhbSAvIGhhY2tpbmdTY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFRocmVhZHNPbkhvc3QgPj0gc2VydmVySGFja1RocmVhZHMpIHtcclxuICAgICAgICAgICAgICAgIGhvc3QuYXZhaWxhYmxlUmFtIC09IHNlcnZlckhhY2tUaHJlYWRzICogaGFja2luZ1NjcmlwdFJhbTtcclxuICAgICAgICAgICAgICAgIGhhY2tEZXBsb3llZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFoYWNrRGVwbG95ZWQpIHtcclxuICAgICAgICAgICAgaGFja1RocmVzaG9sZCAtPSBUSFJFU0hPTERfU1RFUDtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJUaHJlc2hvbGQgdG9vIGhpZ2gsIGRlY3JlYXNpbmcgdG86IFwiICsgaGFja1RocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gU2ltdWxhdGUgd2VhazEgLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgbGV0IHRocmVhZHNEaXNwYXRjaGVkID0gMDtcclxuICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IGZpcnN0V2Vha2VuVGhyZWFkcztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSBmaXJzdFdlYWtlblRocmVhZHMpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgIGlmIChob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLkdST1dfU0VSVkVSX05BTUUpIHx8IGhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuSEFDS19TRVJWRVJfTkFNRSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZnJlZVJhbSA9IGhvc3QuYXZhaWxhYmxlUmFtO1xyXG4gICAgICAgICAgICBpZiAoZnJlZVJhbSA8IHdlYWtlblNjcmlwdFJhbSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRocmVhZFNwYWNlID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gd2Vha2VuU2NyaXB0UmFtKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgdGhyZWFkU3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2ltdWxhdGUgd2Vha2VuXHJcbiAgICAgICAgICAgIGhvc3QuYXZhaWxhYmxlUmFtIC09IHRocmVhZHNUb0Rpc3BhdGNoICogd2Vha2VuU2NyaXB0UmFtO1xyXG4gICAgICAgICAgICB0aHJlYWRzUmVtYWluaW5nIC09IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgICAgICB0aHJlYWRzRGlzcGF0Y2hlZCArPSB0aHJlYWRzVG9EaXNwYXRjaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aHJlYWRzUmVtYWluaW5nID4gMCkge1xyXG4gICAgICAgICAgICBoYWNrVGhyZXNob2xkIC09IFRIUkVTSE9MRF9TVEVQO1xyXG4gICAgICAgICAgICBucy5wcmludChcIlRocmVzaG9sZCB0b28gaGlnaCwgZGVjcmVhc2luZyB0bzogXCIgKyBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBTaW11bGF0ZSBncm93IC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgbGV0IGdyb3dEZXBsb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBpZiAoaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKSB8fCBob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gZ3Jvd2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4VGhyZWFkc09uSG9zdCA+PSBzZXJ2ZXJHcm93VGhyZWFkcykge1xyXG4gICAgICAgICAgICAgICAgaG9zdC5hdmFpbGFibGVSYW0gLT0gc2VydmVyR3Jvd1RocmVhZHMgKiBncm93aW5nU2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgZ3Jvd0RlcGxveWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFncm93RGVwbG95ZWQpIHtcclxuICAgICAgICAgICAgaGFja1RocmVzaG9sZCAtPSBUSFJFU0hPTERfU1RFUDtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJUaHJlc2hvbGQgdG9vIGhpZ2gsIGRlY3JlYXNpbmcgdG86IFwiICsgaGFja1RocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBTaW11bGF0ZSB3ZWFrMiAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICB0aHJlYWRzRGlzcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgdGhyZWFkc1JlbWFpbmluZyA9IHNlY29uZFdlYWtlblRocmVhZHM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhyZWFkc0Rpc3BhdGNoZWQgPj0gc2Vjb25kV2Vha2VuVGhyZWFkcykgYnJlYWs7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBhbGxIb3N0c1tpXTtcclxuICAgICAgICAgICAgaWYgKGhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSkgfHwgaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5IQUNLX1NFUlZFUl9OQU1FKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgd2Vha2VuU2NyaXB0UmFtKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkU3BhY2UgPSBNYXRoLmZsb29yKGZyZWVSYW0gLyB3ZWFrZW5TY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkc1RvRGlzcGF0Y2ggPSBNYXRoLm1pbih0aHJlYWRzUmVtYWluaW5nLCB0aHJlYWRTcGFjZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzaW11bGF0ZSB3ZWFrZW5cclxuICAgICAgICAgICAgaG9zdC5hdmFpbGFibGVSYW0gLT0gdGhyZWFkc1RvRGlzcGF0Y2ggKiB3ZWFrZW5TY3JpcHRSYW07XHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPiAwKSB7XHJcbiAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgLT0gVEhSRVNIT0xEX1NURVA7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFwiVGhyZXNob2xkIHRvbyBoaWdoLCBkZWNyZWFzaW5nIHRvOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5HUkVFTiArIFwiQWxsIHNpbXVsYXRpb25zIHBhc3NlZCwgaGFja1RocmVzaG9sZDogXCIgKyBoYWNrVGhyZXNob2xkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhhY2tUaHJlc2hvbGQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgaWYgKGlzUHJlcGFyYXRpb25OZWVkZWQobnMsIHRhcmdldCkpIHtcclxuICAgICAgICBhd2FpdCBwcmVwYXJlU2VydmVyKG5zLCB0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgaGFja1RocmVzaG9sZCA9IGdldEhhY2tUaHJlc2hvbGQobnMsIHRhcmdldCk7XHJcbiAgICBucy50cHJpbnQoQ29sb3JzLkVfT1JBTkdFICsgXCJoYWNrVGhyZXNob2xkOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgICBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpID09IHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KS50b0ZpeGVkKDUpKSB8fFxyXG4gICAgICAgIHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpLnRvRml4ZWQoNSkpID09IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgKSB7XHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJQcmVwYXJhdGlvbiBmaW5pc2hlZCwgc3RhcnRpbmcgcGFyYWxsZWwgbW9kZVwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbnMudHByaW50KENvbG9ycy5SRUQgKyBcIlByZXBhcmF0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmVwYXJhdGlvbiBmYWlsZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhhY2tUaHJlc2hvbGQ7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLGNBQWM7QUFFdkIsU0FBUywyQkFBMkIscUJBQXFCO0FBQ3pEO0FBQUEsRUFDSTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNHO0FBQ1AsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFFOUIsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUVuQixLQUFHLGNBQWMsQ0FBQyxFQUFFLE1BQU07QUFFMUIsTUFBSSxnQkFBZ0I7QUFDcEIsTUFBSSxhQUFhO0FBRWpCLFNBQU8sTUFBTTtBQUVULFVBQU0sc0JBQStCLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsYUFBYSxrQkFBa0IsTUFBTTtBQUNoRyxRQUNJLEdBQUcsTUFBTSxjQUFjLEtBQ3ZCLEdBQUcsTUFBTSxVQUFVLEtBQ25CLEdBQUcsTUFBTSxnQkFBZ0IsS0FDekIsR0FBRyxNQUFNLGdCQUFnQixLQUN6QixHQUFHLHdCQUF3QixNQUFNLElBQUksT0FBTywrQkFDNUMsQ0FBQztBQUVELFNBQUcsS0FBSyxvQkFBb0IsTUFBTTtBQUV0QyxrQkFBYyxZQUFZLEVBQUUsRUFBRSxZQUFZLEVBQUU7QUFFNUMsVUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sU0FBWSxjQUFjLEVBQUUsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLFNBQVM7QUFFbEYsZ0JBQVksSUFBSSxHQUFHLE1BQU07QUFDekIsT0FBRyxNQUFN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\",\"filename\":\"hackingDeamon.js\",\"server\":\"home\"}}],[\"loop/prepareServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads, getWeakenThreadsAfterGrow, nukeAll } from \\\"/lib.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await prepareServer(ns, \\\"foodnstuff\\\");\\n}\\nexport async function prepareServer(ns, target, threshold = 0.8) {\\n  let allHosts = getBestHostByRamOptimized(ns);\\n  const sumAvailableRam = allHosts.reduce((acc, server) => {\\n    return acc + server.availableRam;\\n  }, 0);\\n  const weakenThreads = getWeakenThreads(ns, target);\\n  const growThreads = getGrowThreads(ns, target);\\n  const weakenAfterGrowThreads = getWeakenThreadsAfterGrow(ns, growThreads);\\n  const totalRamNeeded = weakenThreads * Config.WEAKEN_SCRIPT_RAM + growThreads * Config.GROW_SCRIPT_RAM + weakenAfterGrowThreads * Config.WEAKEN_SCRIPT_RAM;\\n  ns.print(\\n    \\\"needs \\\" + totalRamNeeded + \\\"GB of RAM and got \\\" + sumAvailableRam + \\\" to running parallel mode on \\\" + target\\n  );\\n  if (totalRamNeeded === 0) {\\n    ns.print(\\\"No preparation needed\\\");\\n    return;\\n  }\\n  if (totalRamNeeded < sumAvailableRam) {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in parallel mode\\\");\\n    const weakTime = ns.getWeakenTime(target);\\n    const growTime = ns.getGrowTime(target);\\n    WGHAlgorithms.weakenServer(ns, target, 1, false, 0, false);\\n    const growDelay = weakTime - growTime + Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.growServer(ns, target, false, growDelay, false);\\n    const weak2delay = 2 * Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.weakenServer(ns, target, 2, false, weak2delay, false);\\n    await ns.sleep(weakTime + 4 * Config.DELAY_MARGIN_MS);\\n  } else {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in loop mode\\\");\\n    const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n    let weakenMandatory = false;\\n    while (true) {\\n      const totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n      nukeAll(ns);\\n      allHosts = getBestHostByRamOptimized(ns);\\n      if (totalWeakenThreadsNeeded > 50 || weakenMandatory) {\\n        ns.print(Colors.CYAN + \\\"------------ WEAKENING ------------\\\");\\n        ns.print(\\\"total weaken threads needed: \\\" + totalWeakenThreadsNeeded);\\n        let threadsDispatched2 = 0;\\n        let threadsRemaining = totalWeakenThreadsNeeded;\\n        while (threadsDispatched2 < totalWeakenThreadsNeeded) {\\n          const weakenTime = ns.getWeakenTime(target);\\n          for (let i = 0; i < allHosts.length; i++) {\\n            if (threadsDispatched2 >= totalWeakenThreadsNeeded)\\n              break;\\n            const host = allHosts[i];\\n            const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n            if (freeRam < Config.WEAKEN_SCRIPT_RAM)\\n              continue;\\n            const numThreadsOnHost = Math.floor(freeRam / Config.WEAKEN_SCRIPT_RAM);\\n            const threadsToDispatch = Math.min(threadsRemaining, numThreadsOnHost);\\n            ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, 0);\\n            threadsRemaining -= threadsToDispatch;\\n            threadsDispatched2 += threadsToDispatch;\\n          }\\n          ns.print(\\\"dispatched \\\" + threadsDispatched2 + \\\" weaken threads\\\");\\n          await ns.sleep(weakenTime + safetyMarginMs + 1e3);\\n          ns.print(\\\"done with \\\" + threadsDispatched2 + \\\"/\\\" + totalWeakenThreadsNeeded + \\\" weakens\\\");\\n        }\\n        printServerStats(ns, target, threshold);\\n        if (weakenMandatory) {\\n          break;\\n        }\\n      }\\n      ns.print(Colors.CYAN + \\\"------------- GROWING -------------\\\");\\n      const totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n      if (totalGrowThreadsNeeded === 0) {\\n        ns.print(\\\"No growth needed\\\");\\n        weakenMandatory = true;\\n        continue;\\n      }\\n      ns.print(\\\"total growing threads needed: \\\" + totalGrowThreadsNeeded);\\n      const growingTime = ns.getGrowTime(target);\\n      let threadsDispatched = 0;\\n      for (let i = 0; i < allHosts.length; i++) {\\n        const host = allHosts[i];\\n        const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n        if (freeRam < Config.GROW_SCRIPT_RAM)\\n          continue;\\n        const numThreadsOnHost = Math.floor(freeRam / Config.GROW_SCRIPT_RAM);\\n        ns.exec(\\\"grow.js\\\", host.name, numThreadsOnHost, target, 0);\\n        threadsDispatched += numThreadsOnHost;\\n      }\\n      ns.print(\\\"dispatched \\\" + threadsDispatched + \\\" grow threads\\\");\\n      await ns.sleep(growingTime + safetyMarginMs);\\n      ns.print(\\\"done with \\\" + threadsDispatched + \\\"/\\\" + totalGrowThreadsNeeded + \\\" grows\\\");\\n      printServerStats(ns, target, threshold);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmVTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldEdyb3dUaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93LCBudWtlQWxsIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IFdHSEFsZ29yaXRobXMgfSBmcm9tIFwiQC9wYXJhbGxlbC9XR0hBbGdvcml0aG1zXCI7XHJcbmltcG9ydCB7IHByaW50U2VydmVyU3RhdHMgfSBmcm9tIFwiQC9zZXJ2ZXJTdGF0c1wiO1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCIuLi9iZXN0U2VydmVyXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIGF3YWl0IHByZXBhcmVTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVTZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZXNob2xkID0gMC44KSB7XHJcbiAgICAvLyBlaXRoZXIgcHJlcGFyZSBpbiBsb29wIG9yIHBhcmFsbGVsIG1vZGVcclxuICAgIGxldCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgY29uc3Qgc3VtQXZhaWxhYmxlUmFtID0gYWxsSG9zdHMucmVkdWNlKChhY2MsIHNlcnZlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhY2MgKyBzZXJ2ZXIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSwgMCk7XHJcblxyXG4gICAgLy8gaG93IG11Y2ggdGhyZWFkcyBhcmUgbmVlZGVkOiB3ZWFrZW4gZnJvbSB1bmtub3duIHRvIG1pbiArIGdyb3cgZnJvbSB1bmtub3duIHRvIG1heCArIHdlYWtlbiBncm93IGVmZmVjdFxyXG4gICAgY29uc3Qgd2Vha2VuVGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHMobnMsIHRhcmdldCk7XHJcbiAgICBjb25zdCBncm93VGhyZWFkcyA9IGdldEdyb3dUaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgY29uc3Qgd2Vha2VuQWZ0ZXJHcm93VGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnMsIGdyb3dUaHJlYWRzKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbFJhbU5lZWRlZCA9XHJcbiAgICAgICAgd2Vha2VuVGhyZWFkcyAqIENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTSArXHJcbiAgICAgICAgZ3Jvd1RocmVhZHMgKiBDb25maWcuR1JPV19TQ1JJUFRfUkFNICtcclxuICAgICAgICB3ZWFrZW5BZnRlckdyb3dUaHJlYWRzICogQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNO1xyXG5cclxuICAgIG5zLnByaW50KFxyXG4gICAgICAgIFwibmVlZHMgXCIgKyB0b3RhbFJhbU5lZWRlZCArIFwiR0Igb2YgUkFNIGFuZCBnb3QgXCIgKyBzdW1BdmFpbGFibGVSYW0gKyBcIiB0byBydW5uaW5nIHBhcmFsbGVsIG1vZGUgb24gXCIgKyB0YXJnZXQsXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0b3RhbFJhbU5lZWRlZCA9PT0gMCkge1xyXG4gICAgICAgIG5zLnByaW50KFwiTm8gcHJlcGFyYXRpb24gbmVlZGVkXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG90YWxSYW1OZWVkZWQgPCBzdW1BdmFpbGFibGVSYW0pIHtcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQQVJBTExFTCBNT0RFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIlByZXBhcmluZyBcIiArIHRhcmdldCArIFwiIGluIHBhcmFsbGVsIG1vZGVcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IHdlYWtUaW1lID0gbnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgV0dIQWxnb3JpdGhtcy53ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMSwgZmFsc2UsIDAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3Jvd0RlbGF5ID0gd2Vha1RpbWUgLSBncm93VGltZSArIENvbmZpZy5ERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgV0dIQWxnb3JpdGhtcy5ncm93U2VydmVyKG5zLCB0YXJnZXQsIGZhbHNlLCBncm93RGVsYXksIGZhbHNlKTtcclxuXHJcbiAgICAgICAgY29uc3Qgd2VhazJkZWxheSA9IDIgKiBDb25maWcuREVMQVlfTUFSR0lOX01TO1xyXG4gICAgICAgIFdHSEFsZ29yaXRobXMud2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDIsIGZhbHNlLCB3ZWFrMmRlbGF5LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIHdhaXQgZm9yIHByZXAgdG8gZmluaXNoXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAod2Vha1RpbWUgKyA0ICogQ29uZmlnLkRFTEFZX01BUkdJTl9NUyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTE9PUCBNT0RFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiUHJlcGFyaW5nIFwiICsgdGFyZ2V0ICsgXCIgaW4gbG9vcCBtb2RlXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBzYWZldHlNYXJnaW5NcyA9IENvbmZpZy5ERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgbGV0IHdlYWtlbk1hbmRhdG9yeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiB1c2Ugc2ltaWxhciBtZXRob2QgYXMgaW4gcGFyYWxsZWwvbWFuYWdlci50cyB0byBsZXQgdGhlIGdyb3cgZmluaXNoIHJpZ2h0IGFmdGVyIHRoZSB3ZWFrZW5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgbnVrZUFsbChucyk7XHJcbiAgICAgICAgICAgIGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICAgICAgICAgIGlmICh0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPiA1MCB8fCB3ZWFrZW5NYW5kYXRvcnkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0gV0VBS0VOSU5HIC0tLS0tLS0tLS0tLVwiKTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwidG90YWwgd2Vha2VuIHRocmVhZHMgbmVlZGVkOiBcIiArIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCk7XHJcbiAgICAgICAgICAgICAgICAvLyB3ZWFrZW4gdG8gbWluIHNlYyBsdmxcclxuICAgICAgICAgICAgICAgIGxldCB0aHJlYWRzRGlzcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZDtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0aHJlYWRzRGlzcGF0Y2hlZCA8IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWVSYW0gPSBob3N0Lm1heFJhbSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZWVSYW0gPCBDb25maWcuV0VBS0VOX1NDUklQVF9SQU0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1UaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgbnVtVGhyZWFkc09uSG9zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChcImRpc3BhdGNoZWQgXCIgKyB0aHJlYWRzRGlzcGF0Y2hlZCArIFwiIHdlYWtlbiB0aHJlYWRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKHdlYWtlblRpbWUgKyBzYWZldHlNYXJnaW5NcyArIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgdGhyZWFkc0Rpc3BhdGNoZWQgKyBcIi9cIiArIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCArIFwiIHdlYWtlbnNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmludFNlcnZlclN0YXRzKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdlYWtlbk1hbmRhdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tLSBHUk9XSU5HIC0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZ3JvdyBpcyBuZWVkZWRcclxuICAgICAgICAgICAgaWYgKHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiTm8gZ3Jvd3RoIG5lZWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHdlYWtlbk1hbmRhdG9yeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBucy5wcmludChcInRvdGFsIGdyb3dpbmcgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxHcm93VGhyZWFkc05lZWRlZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBncm93IG9uZSBiYXRjaFxyXG4gICAgICAgICAgICBjb25zdCBncm93aW5nVGltZSA9IG5zLmdldEdyb3dUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGxldCB0aHJlYWRzRGlzcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5tYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3QubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJlZVJhbSA8IENvbmZpZy5HUk9XX1NDUklQVF9SQU0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtVGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoZnJlZVJhbSAvIENvbmZpZy5HUk9XX1NDUklQVF9SQU0pO1xyXG5cclxuICAgICAgICAgICAgICAgIG5zLmV4ZWMoXCJncm93LmpzXCIsIGhvc3QubmFtZSwgbnVtVGhyZWFkc09uSG9zdCwgdGFyZ2V0LCAwKTtcclxuICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IG51bVRocmVhZHNPbkhvc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbnMucHJpbnQoXCJkaXNwYXRjaGVkIFwiICsgdGhyZWFkc0Rpc3BhdGNoZWQgKyBcIiBncm93IHRocmVhZHNcIik7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGdyb3dpbmdUaW1lICsgc2FmZXR5TWFyZ2luTXMpO1xyXG4gICAgICAgICAgICBucy5wcmludChcImRvbmUgd2l0aCBcIiArIHRocmVhZHNEaXNwYXRjaGVkICsgXCIvXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkICsgXCIgZ3Jvd3NcIik7XHJcbiAgICAgICAgICAgIHByaW50U2VydmVyU3RhdHMobnMsIHRhcmdldCwgdGhyZXNob2xkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxRQUFRLGdCQUFnQixrQkFBa0IsMkJBQTJCLGVBQWU7QUFDN0YsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyx3QkFBd0I7QUFFakMsU0FBUyxpQ0FBaUM7QUFFMUMsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixRQUFNLGNBQWMsSUFBSSxZQUFZO0FBQ3hDO0FBRUEsc0JBQXNCLGNBQWMsSUFBUSxRQUFnQixZQUFZLEtBQUs7QUFFekUsTUFBSSxXQUFXLDBCQUEwQixFQUFFO0FBQzNDLFFBQU0sa0JBQWtCLFNBQVMsT0FBTyxDQUFDLEtBQUssV0FBVztBQUNyRCxXQUFPLE1BQU0sT0FBTztBQUFBLEVBQ3hCLEdBQUcsQ0FBQztBQUdKLFFBQU0sZ0JBQWdCLGlCQUFpQixJQUFJLE1BQU07QUFDakQsUUFBTSxjQUFjLGVBQWUsSUFBSSxNQUFNO0FBQzdDLFFBQU0seUJBQXlCLDBCQUEwQixJQUFJLFdBQVc7QUFFeEUsUUFBTSxpQkFDRixnQkFBZ0IsT0FBTyxvQkFDdkIsY0FBYyxPQUFPLGtCQUNyQix5QkFBeUIsT0FBTztBQUVwQyxLQUFHO0FBQUEsSUFDQyxXQUFXLGlCQUFpQix1QkFBdUIsa0JBQWtCLGtDQUFrQztBQUFBLEVBQzNHO0FBRUEsTUFBSSxtQkFBbUIsR0FBRztBQUN0QixPQUFHLE1BQU0sdUJBQXVCO0FBQ2hDO0FBQUEsRUFDSjtBQUVBLE1BQUksaUJBQWlCLGlCQUFpQjtBQUVsQyxPQUFHLE1BQU0sT0FBTyxPQUFPLGVBQWUsU0FBUyxtQkFBbUI7QUFFbEUsVUFBTSxXQUFXLEdBQUcsY0FBYyxNQUFNO0FBQ3hD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\",\"filename\":\"loop/prepareServer.js\",\"server\":\"home\"}}],[\"sm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export function autocomplete(data) {\\n  return [...data.servers];\\n}\\nexport async function main(ns) {\\n  let primaryName = \\\"\\\";\\n  let isUpgrade = false;\\n  let upgradeRam = 0;\\n  let upgradeUnit = \\\"\\\";\\n  let isBuy = false;\\n  let buyRam = 0;\\n  let buyUnit = \\\"\\\";\\n  let isRename = false;\\n  let newName = \\\"\\\";\\n  let isDelete = false;\\n  let isKill = false;\\n  let isOverview = false;\\n  if (ns.args.length > 0) {\\n    if (ns.args[0] == \\\"-u\\\" && ns.args.length == 3) {\\n      isUpgrade = true;\\n      primaryName = ns.args[1].toString();\\n      upgradeRam = Number(String(ns.args[2]).slice(0, -1));\\n      upgradeUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-b\\\" && ns.args.length == 3) {\\n      isBuy = true;\\n      primaryName = ns.args[1].toString();\\n      buyRam = Number(String(ns.args[2]).slice(0, -1));\\n      buyUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-r\\\" && ns.args.length == 3) {\\n      isRename = true;\\n      primaryName = ns.args[1].toString();\\n      newName = ns.args[2].toString();\\n    }\\n    if (ns.args[0] == \\\"-d\\\" && ns.args.length == 2) {\\n      isDelete = true;\\n      primaryName = ns.args[1].toString();\\n    }\\n    if (ns.args[0] == \\\"-k\\\" && ns.args.length == 2) {\\n      isKill = true;\\n      primaryName = ns.args[1].toString();\\n    }\\n    if (ns.args[0] == \\\"-o\\\" && ns.args.length == 1) {\\n      isOverview = true;\\n    }\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r (<old name> <new name>\\\\n\\t-d (delete) <server name>\\\\n\\t-k (kill) <server name>\\\\n\\t-o (overview)\\\"\\n    );\\n    return;\\n  }\\n  if (isUpgrade) {\\n    const exponent = Math.ceil(Math.log2(upgradeRam));\\n    upgradeRam = Math.pow(2, exponent);\\n    upgradeRam = getGBfromAnyUnit(ns, upgradeRam, upgradeUnit);\\n    const servers = ns.getPurchasedServers();\\n    if (!servers.includes(primaryName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + primaryName);\\n    }\\n    const price = ns.getPurchasedServerUpgradeCost(primaryName, upgradeRam);\\n    const answer = await ns.prompt(\\n      \\\"upgrading the server (\\\" + primaryName + \\\") to \\\" + upgradeRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.upgradePurchasedServer(primaryName, upgradeRam);\\n  } else if (isBuy) {\\n    buyRam = getGBfromAnyUnit(ns, buyRam, buyUnit);\\n    if (buyRam < 1)\\n      return;\\n    const price = ns.getPurchasedServerCost(buyRam);\\n    const answer = await ns.prompt(\\n      \\\"buying the server (\\\" + primaryName + \\\") with \\\" + buyRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.purchaseServer(primaryName, buyRam);\\n  } else if (isRename) {\\n    if (!ns.getPurchasedServers().includes(primaryName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + primaryName);\\n    }\\n    ns.renamePurchasedServer(primaryName, newName);\\n  } else if (isDelete) {\\n    ns.deleteServer(primaryName);\\n  } else if (isKill) {\\n    ns.tprint(\\\"Killing server \\\" + primaryName);\\n    ns.killall(primaryName);\\n  } else if (isOverview) {\\n    ns.tail();\\n    ns.disableLog(\\\"ALL\\\");\\n    const servers = ns.getPurchasedServers();\\n    for (let i = 0; i < servers.length; i++) {\\n      const ramPercent = ns.formatNumber(ns.getServerUsedRam(servers[i]) / ns.getServerMaxRam(servers[i]));\\n      ns.print(servers[i] + \\\"\\t\\\" + ns.getServerMaxRam(servers[i]) + \\\"GB\\t\\\" + ramPercent + \\\"%\\\");\\n    }\\n  } else {\\n    const playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let ramSize = 16;\\n    while (ns.getPurchasedServerCost(ramSize) < playerMoney) {\\n      ramSize *= 2;\\n    }\\n    ramSize = ramSize / 2;\\n    ns.tprint(\\n      \\\"you can buy a server with \\\" + ramSize + \\\"GB of ram. This costs \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize))\\n    );\\n    const answer = await ns.prompt(\\\"buy Server for \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize)) + \\\"?\\\");\\n    if (answer) {\\n      ns.purchaseServer(\\\"hacker\\\", ramSize);\\n    }\\n  }\\n}\\nfunction getGBfromAnyUnit(ns, ram, unit) {\\n  if (unit == \\\"G\\\") {\\n    return ram;\\n  } else if (unit == \\\"T\\\") {\\n    return ram * 1024;\\n  } else if (unit == \\\"P\\\") {\\n    return ram * 1024 * 1024;\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r <old name> <new name>\\\"\\n    );\\n    return 0;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuaW50ZXJmYWNlIEF1dG9jb21wbGV0ZURhdGEge1xyXG4gICAgc2VydmVyczogc3RyaW5nW107XHJcbiAgICB0eHRzOiBzdHJpbmdbXTtcclxuICAgIHNjcmlwdHM6IHN0cmluZ1tdO1xyXG4gICAgZmxhZ3M6IHN0cmluZ1tdO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogQXV0b2NvbXBsZXRlRGF0YSkge1xyXG4gICAgcmV0dXJuIFsuLi5kYXRhLnNlcnZlcnNdO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGxldCBwcmltYXJ5TmFtZSA9IFwiXCI7XHJcblxyXG4gICAgbGV0IGlzVXBncmFkZSA9IGZhbHNlO1xyXG4gICAgbGV0IHVwZ3JhZGVSYW0gPSAwO1xyXG4gICAgbGV0IHVwZ3JhZGVVbml0ID0gXCJcIjtcclxuXHJcbiAgICBsZXQgaXNCdXkgPSBmYWxzZTtcclxuICAgIGxldCBidXlSYW0gPSAwO1xyXG4gICAgbGV0IGJ1eVVuaXQgPSBcIlwiO1xyXG5cclxuICAgIGxldCBpc1JlbmFtZSA9IGZhbHNlO1xyXG4gICAgbGV0IG5ld05hbWUgPSBcIlwiO1xyXG5cclxuICAgIGxldCBpc0RlbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGxldCBpc0tpbGwgPSBmYWxzZTtcclxuXHJcbiAgICBsZXQgaXNPdmVydmlldyA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChucy5hcmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi11XCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc1VwZ3JhZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcmltYXJ5TmFtZSA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgdXBncmFkZVJhbSA9IE51bWJlcihTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoMCwgLTEpKTtcclxuICAgICAgICAgICAgdXBncmFkZVVuaXQgPSBTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1iXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc0J1eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBidXlSYW0gPSBOdW1iZXIoU3RyaW5nKG5zLmFyZ3NbMl0pLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgICAgIGJ1eVVuaXQgPSBTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1yXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc1JlbmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBuZXdOYW1lID0gbnMuYXJnc1syXS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1kXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpc0RlbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1rXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpc0tpbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcmltYXJ5TmFtZSA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5zLmFyZ3NbMF0gPT0gXCItb1wiICYmIG5zLmFyZ3MubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgaXNPdmVydmlldyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBucy50cHJpbnQoXHJcbiAgICAgICAgICAgIFwiXFxudXNhZ2U6IHNtLmpzIFtvcHRpb25zXVxcblxcbk9wdGlvbnM6XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtdSA8TmFtZT4gPFJhbT48R3xUfFA+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtYiA8TmFtZT4gPFJhbT48R3xUfFA+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtciAoPG9sZCBuYW1lPiA8bmV3IG5hbWU+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtZCAoZGVsZXRlKSA8c2VydmVyIG5hbWU+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtayAoa2lsbCkgPHNlcnZlciBuYW1lPlwiICtcclxuICAgICAgICAgICAgICAgIFwiXFxuXFx0LW8gKG92ZXJ2aWV3KVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1VwZ3JhZGUpIHtcclxuICAgICAgICAvLyBnZXQgY3VycmVudCByYW1cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIodXBncmFkZVJhbSkpO1xyXG4gICAgICAgIHVwZ3JhZGVSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIHVwZ3JhZGVSYW0gPSBnZXRHQmZyb21BbnlVbml0KG5zLCB1cGdyYWRlUmFtLCB1cGdyYWRlVW5pdCk7XHJcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBpZiAoIXNlcnZlcnMuaW5jbHVkZXMocHJpbWFyeU5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcIllvdSBkbyBub3Qgb3duIGEgc2VydmVyIGNhbGxlZCBcIiArIHByaW1hcnlOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByaWNlID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyVXBncmFkZUNvc3QocHJpbWFyeU5hbWUsIHVwZ3JhZGVSYW0pO1xyXG5cclxuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBucy5wcm9tcHQoXHJcbiAgICAgICAgICAgIFwidXBncmFkaW5nIHRoZSBzZXJ2ZXIgKFwiICtcclxuICAgICAgICAgICAgICAgIHByaW1hcnlOYW1lICtcclxuICAgICAgICAgICAgICAgIFwiKSB0byBcIiArXHJcbiAgICAgICAgICAgICAgICB1cGdyYWRlUmFtICtcclxuICAgICAgICAgICAgICAgIFwiR0Igb2YgUmFtLCB3aWxsIGNvc3QgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKHByaWNlKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChhbnN3ZXIpIG5zLnVwZ3JhZGVQdXJjaGFzZWRTZXJ2ZXIocHJpbWFyeU5hbWUsIHVwZ3JhZGVSYW0pO1xyXG4gICAgfSBlbHNlIGlmIChpc0J1eSkge1xyXG4gICAgICAgIGJ1eVJhbSA9IGdldEdCZnJvbUFueVVuaXQobnMsIGJ1eVJhbSwgYnV5VW5pdCk7XHJcbiAgICAgICAgaWYgKGJ1eVJhbSA8IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KGJ1eVJhbSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IG5zLnByb21wdChcclxuICAgICAgICAgICAgXCJidXlpbmcgdGhlIHNlcnZlciAoXCIgKyBwcmltYXJ5TmFtZSArIFwiKSB3aXRoIFwiICsgYnV5UmFtICsgXCJHQiBvZiBSYW0sIHdpbGwgY29zdCBcIiArIG5zLmZvcm1hdE51bWJlcihwcmljZSksXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoYW5zd2VyKSBucy5wdXJjaGFzZVNlcnZlcihwcmltYXJ5TmFtZSwgYnV5UmFtKTtcclxuICAgIH0gZWxzZSBpZiAoaXNSZW5hbWUpIHtcclxuICAgICAgICBpZiAoIW5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5pbmNsdWRlcyhwcmltYXJ5TmFtZSkpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFwiWW91IGRvIG5vdCBvd24gYSBzZXJ2ZXIgY2FsbGVkIFwiICsgcHJpbWFyeU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBucy5yZW5hbWVQdXJjaGFzZWRTZXJ2ZXIocHJpbWFyeU5hbWUsIG5ld05hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChpc0RlbGV0ZSkge1xyXG4gICAgICAgIG5zLmRlbGV0ZVNlcnZlcihwcmltYXJ5TmFtZSk7XHJcbiAgICB9IGVsc2UgaWYgKGlzS2lsbCkge1xyXG4gICAgICAgIG5zLnRwcmludChcIktpbGxpbmcgc2VydmVyIFwiICsgcHJpbWFyeU5hbWUpO1xyXG4gICAgICAgIG5zLmtpbGxhbGwocHJpbWFyeU5hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChpc092ZXJ2aWV3KSB7XHJcbiAgICAgICAgbnMudGFpbCgpO1xyXG4gICAgICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcmFtUGVyY2VudCA9IG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlcnNbaV0pIC8gbnMuZ2V0U2VydmVyTWF4UmFtKHNlcnZlcnNbaV0pKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoc2VydmVyc1tpXSArIFwiXFx0XCIgKyBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyc1tpXSkgKyBcIkdCXFx0XCIgKyByYW1QZXJjZW50ICsgXCIlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyTW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIik7XHJcbiAgICAgICAgbGV0IHJhbVNpemUgPSAxNjtcclxuICAgICAgICB3aGlsZSAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW1TaXplKSA8IHBsYXllck1vbmV5KSB7XHJcbiAgICAgICAgICAgIHJhbVNpemUgKj0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFtU2l6ZSA9IHJhbVNpemUgLyAyO1xyXG4gICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgXCJ5b3UgY2FuIGJ1eSBhIHNlcnZlciB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIHJhbVNpemUgK1xyXG4gICAgICAgICAgICAgICAgXCJHQiBvZiByYW0uIFRoaXMgY29zdHMgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IG5zLnByb21wdChcImJ1eSBTZXJ2ZXIgZm9yIFwiICsgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpICsgXCI/XCIpO1xyXG5cclxuICAgICAgICBpZiAoYW5zd2VyKSB7XHJcbiAgICAgICAgICAgIG5zLnB1cmNoYXNlU2VydmVyKFwiaGFja2VyXCIsIHJhbVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0R0Jmcm9tQW55VW5pdChuczogTlMsIHJhbTogbnVtYmVyLCB1bml0OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgaWYgKHVuaXQgPT0gXCJHXCIpIHtcclxuICAgICAgICByZXR1cm4gcmFtO1xyXG4gICAgfSBlbHNlIGlmICh1bml0ID09IFwiVFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhbSAqIDEwMjQ7XHJcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT0gXCJQXCIpIHtcclxuICAgICAgICByZXR1cm4gcmFtICogMTAyNCAqIDEwMjQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgXCJcXG51c2FnZTogc20uanMgW29wdGlvbnNdXFxuXFxuT3B0aW9uczpcXG5cXHQtdSA8TmFtZT4gPFJhbT48R3xUfFA+XFxuXFx0LWIgPE5hbWU+IDxSYW0+PEd8VHxQPlxcblxcdC1yIDxvbGQgbmFtZT4gPG5ldyBuYW1lPlwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFRTyxnQkFBUyxhQUFhLE1BQXdCO0FBQ2pELFNBQU8sQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMzQjtBQUVBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxjQUFjO0FBRWxCLE1BQUksWUFBWTtBQUNoQixNQUFJLGFBQWE7QUFDakIsTUFBSSxjQUFjO0FBRWxCLE1BQUksUUFBUTtBQUNaLE1BQUksU0FBUztBQUNiLE1BQUksVUFBVTtBQUVkLE1BQUksV0FBVztBQUNmLE1BQUksVUFBVTtBQUVkLE1BQUksV0FBVztBQUVmLE1BQUksU0FBUztBQUViLE1BQUksYUFBYTtBQUVqQixNQUFJLEdBQUcsS0FBSyxTQUFTLEdBQUc7QUFDcEIsUUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLFFBQVEsR0FBRyxLQUFLLFVBQVUsR0FBRztBQUMzQyxrQkFBWTtBQUNaLG9CQUFjLEdBQUcsS0FBSyxDQUFDLEVBQUUsU0FBUztBQUNsQyxtQkFBYSxPQUFPLE9BQU8sR0FBRyxL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\",\"filename\":\"sm.js\",\"server\":\"home\"}}],[\"parallel/ServerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, nukeServer } from \\\"/lib.js\\\";\\nexport class ServerManager {\\n  /**\\n   * Buys or upgrades a server based on the desired RAM and server type.\\n   * If the server exists and can be upgraded successfully, it returns the upgraded server name.\\n   * If the server cannot be upgraded, it attempts to buy a new server with the desired RAM and name.\\n   *\\n   * @param ns - The Bitburner namespace object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param serverType - The type of server to buy or upgrade (`weak`, `grow`, `hack`).\\n   * @param batchId - The batch ID of the server.\\n   * @returns The name of the upgraded server or an empty string if a new server cannot be bought/upgraded.\\n   */\\n  static buyOrUpgradeServer(ns, desiredRam, serverType) {\\n    const server = this.getBestServerToUpgrade(ns, desiredRam, serverType);\\n    if (server.name !== \\\"\\\") {\\n      const upgradeSuccessful = this.upgradeServer(ns, server.totalRam, server.name);\\n      if (upgradeSuccessful)\\n        return server.name;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the upgrade failed, trying to buy a new server\\\"\\n    );\\n    const name = this.buyServer(ns, desiredRam, serverType);\\n    return name;\\n  }\\n  static buyServer(ns, desiredRam, serverName) {\\n    const purchasedServerLimit = ns.getPurchasedServerLimit();\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (purchasedServers.length >= purchasedServerLimit) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to buy a new server, but the limit has been reached\\\");\\n      return \\\"\\\";\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerCost(desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.tprint(\\n        Colors.RED + \\\"[server Manager] attempted to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB, for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      return \\\"\\\";\\n    }\\n    const name = ns.purchaseServer(serverName, desiredRam);\\n    if (name === \\\"\\\") {\\n      ns.tprint(\\n        Colors.RED + \\\"[server Manager] Failed to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost)\\n      );\\n      return \\\"\\\";\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Bought Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    nukeServer(ns, name);\\n    return name;\\n  }\\n  static upgradeServer(ns, desiredRam, serverName) {\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (!purchasedServers.includes(serverName)) {\\n      ns.print(Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the server does not exist\\\");\\n      return false;\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerUpgradeCost(serverName, desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to upgrade Server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      return false;\\n    }\\n    if (!ns.upgradePurchasedServer(serverName, desiredRam)) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to upgrade Server, but the upgrade failed\\\");\\n      return false;\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Upgraded Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    return true;\\n  }\\n  /**\\n   * Upgrades an existing server to meet the desired RAM requirement, that is cheapest to upgrade.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param name - The name of the server to upgrade.\\n   * @returns The name of the upgraded server, or an empty string if the upgrade failed.\\n   */\\n  static getBestServerToUpgrade(ns, desiredRam, name) {\\n    const purchasedServers = ns.getPurchasedServers().filter((server) => server.includes(name));\\n    if (purchasedServers.length === 0) {\\n      return {\\n        cost: 0,\\n        name: \\\"\\\",\\n        totalRam: 0\\n      };\\n    }\\n    let minUpgradeCost = Number.MAX_VALUE;\\n    let serverToUpgrade = \\\"\\\";\\n    let totalRequiredRam = 0;\\n    for (let i = 0; i < purchasedServers.length; i++) {\\n      const server = purchasedServers[i];\\n      const serverMaxRam = ns.getServerMaxRam(server);\\n      totalRequiredRam = desiredRam + serverMaxRam;\\n      const exponent = Math.ceil(Math.log2(totalRequiredRam));\\n      totalRequiredRam = Math.pow(2, exponent);\\n      const cost = ns.getPurchasedServerUpgradeCost(server, totalRequiredRam);\\n      if (cost < minUpgradeCost) {\\n        minUpgradeCost = cost;\\n        serverToUpgrade = server;\\n      }\\n    }\\n    return {\\n      cost: minUpgradeCost,\\n      name: serverToUpgrade,\\n      totalRam: totalRequiredRam\\n    };\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlcnZlck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzLCBudWtlU2VydmVyIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlck1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCdXlzIG9yIHVwZ3JhZGVzIGEgc2VydmVyIGJhc2VkIG9uIHRoZSBkZXNpcmVkIFJBTSBhbmQgc2VydmVyIHR5cGUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGV4aXN0cyBhbmQgY2FuIGJlIHVwZ3JhZGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyB0aGUgdXBncmFkZWQgc2VydmVyIG5hbWUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGNhbm5vdCBiZSB1cGdyYWRlZCwgaXQgYXR0ZW1wdHMgdG8gYnV5IGEgbmV3IHNlcnZlciB3aXRoIHRoZSBkZXNpcmVkIFJBTSBhbmQgbmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgQml0YnVybmVyIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gZGVzaXJlZFJhbSAtIEhvdyBtdWNoIFJBTSBuZWVkcyB0aGUgc2VydmVyIGF0IGxlYXN0LlxyXG4gICAgICogQHBhcmFtIHNlcnZlclR5cGUgLSBUaGUgdHlwZSBvZiBzZXJ2ZXIgdG8gYnV5IG9yIHVwZ3JhZGUgKGB3ZWFrYCwgYGdyb3dgLCBgaGFja2ApLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgYmF0Y2ggSUQgb2YgdGhlIHNlcnZlci5cclxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB1cGdyYWRlZCBzZXJ2ZXIgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIGEgbmV3IHNlcnZlciBjYW5ub3QgYmUgYm91Z2h0L3VwZ3JhZGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnV5T3JVcGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuZ2V0QmVzdFNlcnZlclRvVXBncmFkZShucywgZGVzaXJlZFJhbSwgc2VydmVyVHlwZSk7XHJcbiAgICAgICAgaWYgKHNlcnZlci5uYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZ3JhZGVTdWNjZXNzZnVsID0gdGhpcy51cGdyYWRlU2VydmVyKG5zLCBzZXJ2ZXIudG90YWxSYW0sIHNlcnZlci5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHVwZ3JhZGVTdWNjZXNzZnVsKSByZXR1cm4gc2VydmVyLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBDb2xvcnMuWUVMTE9XICtcclxuICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXIsIGJ1dCB0aGUgdXBncmFkZSBmYWlsZWQsIHRyeWluZyB0byBidXkgYSBuZXcgc2VydmVyXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5idXlTZXJ2ZXIobnMsIGRlc2lyZWRSYW0sIHNlcnZlclR5cGUpO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBidXlTZXJ2ZXIobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIHNlcnZlck5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyTGltaXQgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpO1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7XHJcbiAgICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID49IHB1cmNoYXNlZFNlcnZlckxpbWl0KSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIGJ1dCB0aGUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVzaXJlZFJhbSkpO1xyXG4gICAgICAgIGRlc2lyZWRSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KGRlc2lyZWRSYW0pO1xyXG4gICAgICAgIGlmIChjb3N0ID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5SRUQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gYnV5IGEgbmV3IHNlcnZlcjogJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgICAgICBcIicgd2l0aCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJHQiwgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIoY29zdCkgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiLCBidXQgdGhlIHBsYXllciBkb2VzIG5vdCBoYXZlIGVub3VnaCBtb25leVwiLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgZW5vdWdoIG1vbmV5IHRvIGJ1eSBhIG5ldyBzZXJ2ZXJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKHNlcnZlck5hbWUsIGRlc2lyZWRSYW0pO1xyXG4gICAgICAgIGlmIChuYW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5SRUQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBGYWlsZWQgdG8gYnV5IGEgbmV3IHNlcnZlcjogJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgICAgICBcIicgd2l0aCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJHQiBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihjb3N0KSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgQ29sb3JzLkdSRUVOICtcclxuICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBCb3VnaHQgU2VydmVyICdcIiArXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIGRlc2lyZWRSYW0gK1xyXG4gICAgICAgICAgICAgICAgXCJHQiBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpICtcclxuICAgICAgICAgICAgICAgIFwiIVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgbnVrZVNlcnZlcihucywgbmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHVwZ3JhZGVTZXJ2ZXIobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIHNlcnZlck5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7XHJcbiAgICAgICAgaWYgKCFwdXJjaGFzZWRTZXJ2ZXJzLmluY2x1ZGVzKHNlcnZlck5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIHVwZ3JhZGUgU2VydmVyLCBidXQgdGhlIHNlcnZlciBkb2VzIG5vdCBleGlzdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZXhwb25lbnQgPSBNYXRoLmNlaWwoTWF0aC5sb2cyKGRlc2lyZWRSYW0pKTtcclxuICAgICAgICBkZXNpcmVkUmFtID0gTWF0aC5wb3coMiwgZXhwb25lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCBjb3N0ID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyVXBncmFkZUNvc3Qoc2VydmVyTmFtZSwgZGVzaXJlZFJhbSk7XHJcblxyXG4gICAgICAgIGlmIChjb3N0ID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgQ29sb3JzLlJFRCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJbc2VydmVyIE1hbmFnZXJdIGF0dGVtcHRlZCB0byB1cGdyYWRlIFNlcnZlcjogJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgICAgICBcIicgd2l0aCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJHQiBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihjb3N0KSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIsIGJ1dCB0aGUgcGxheWVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIG1vbmV5XCIsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghbnMudXBncmFkZVB1cmNoYXNlZFNlcnZlcihzZXJ2ZXJOYW1lLCBkZXNpcmVkUmFtKSkge1xyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuUkVEICsgXCJbc2VydmVyIE1hbmFnZXJdIGF0dGVtcHRlZCB0byB1cGdyYWRlIFNlcnZlciwgYnV0IHRoZSB1cGdyYWRlIGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgQ29sb3JzLkdSRUVOICtcclxuICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBVcGdyYWRlZCBTZXJ2ZXIgJ1wiICtcclxuICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgXCInIHdpdGggXCIgK1xyXG4gICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICBcIkdCIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIoY29zdCkgK1xyXG4gICAgICAgICAgICAgICAgXCIhXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZ3JhZGVzIGFuIGV4aXN0aW5nIHNlcnZlciB0byBtZWV0IHRoZSBkZXNpcmVkIFJBTSByZXF1aXJlbWVudCwgdGhhdCBpcyBjaGVhcGVzdCB0byB1cGdyYWRlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBucyAtIFRoZSBOZXRTY3JpcHRKUyBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gZGVzaXJlZFJhbSAtIEhvdyBtdWNoIFJBTSBuZWVkcyB0aGUgc2VydmVyIGF0IGxlYXN0LlxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIHRvIHVwZ3JhZGUuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbmFtZSBvZiB0aGUgdXBncmFkZWQgc2VydmVyLCBvciBhbiBlbXB0eSBzdHJpbmcgaWYgdGhlIHVwZ3JhZGUgZmFpbGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0QmVzdFNlcnZlclRvVXBncmFkZShuczogTlMsIGRlc2lyZWRSYW06IG51bWJlciwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5maWx0ZXIoKHNlcnZlcikgPT4gc2VydmVyLmluY2x1ZGVzKG5hbWUpKTtcclxuXHJcbiAgICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBjb3N0OiAwLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgIHRvdGFsUmFtOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1pblVwZ3JhZGVDb3N0ID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgICBsZXQgc2VydmVyVG9VcGdyYWRlID0gXCJcIjtcclxuXHJcbiAgICAgICAgbGV0IHRvdGFsUmVxdWlyZWRSYW0gPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VydmVyID0gcHVyY2hhc2VkU2VydmVyc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlck1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpO1xyXG4gICAgICAgICAgICB0b3RhbFJlcXVpcmVkUmFtID0gZGVzaXJlZFJhbSArIHNlcnZlck1heFJhbTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5jZWlsKE1hdGgubG9nMih0b3RhbFJlcXVpcmVkUmFtKSk7XHJcbiAgICAgICAgICAgIHRvdGFsUmVxdWlyZWRSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb3N0ID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyVXBncmFkZUNvc3Qoc2VydmVyLCB0b3RhbFJlcXVpcmVkUmFtKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3N0IDwgbWluVXBncmFkZUNvc3QpIHtcclxuICAgICAgICAgICAgICAgIG1pblVwZ3JhZGVDb3N0ID0gY29zdDtcclxuICAgICAgICAgICAgICAgIHNlcnZlclRvVXBncmFkZSA9IHNlcnZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb3N0OiBtaW5VcGdyYWRlQ29zdCxcclxuICAgICAgICAgICAgbmFtZTogc2VydmVyVG9VcGdyYWRlLFxyXG4gICAgICAgICAgICB0b3RhbFJhbTogdG90YWxSZXF1aXJlZFJhbSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxRQUFRLGtCQUFrQjtBQUc1QixhQUFNLGNBQWM7QUFBQTtBQUFBO0FBQUE7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\",\"filename\":\"parallel/ServerManager.js\",\"server\":\"home\"}}],[\"gorg.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nclass Gorg {\\n  name = \\\"\\\";\\n  constructor() {\\n  }\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  ns.print(\\\"\\\\n\\\");\\n  PlayerManager.getInstance(ns).resetPlayer(ns);\\n  const gorg = new Gorg();\\n  gorg.name = \\\"Gorg\\\";\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvcmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IFBsYXllck1hbmFnZXIgfSBmcm9tIFwiLi9wYXJhbGxlbC9QbGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5jbGFzcyBHb3JnIHtcclxuICAgIG5hbWUgPSBcIlwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIG5zLnByaW50KFwiXFxuXCIpO1xyXG5cclxuICAgIFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpLnJlc2V0UGxheWVyKG5zKTtcclxuXHJcbiAgICBjb25zdCBnb3JnID0gbmV3IEdvcmcoKTtcclxuICAgIGdvcmcubmFtZSA9IFwiR29yZ1wiO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxxQkFBcUI7QUFFOUIsTUFBTSxLQUFLO0FBQUEsRUFDUCxPQUFPO0FBQUEsRUFFUCxjQUFjO0FBQUEsRUFFZDtBQUNKO0FBRUEsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUNuQixLQUFHLE1BQU0sSUFBSTtBQUViLGdCQUFjLFlBQVksRUFBRSxFQUFFLFlBQVksRUFBRTtBQUU1QyxRQUFNLE9BQU8sSUFBSSxLQUFLO0FBQ3RCLE9BQUssT0FBTztBQUNoQjsiLCJuYW1lcyI6W119\",\"filename\":\"gorg.js\",\"server\":\"home\"}}],[\"Time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Time {\\n  static instance;\\n  startTimeMillis = 0;\\n  endTimeMillis = 0;\\n  sleepTimeMillis = 0;\\n  startTime() {\\n    this.sleepTimeMillis = 0;\\n    this.startTimeMillis = Date.now();\\n  }\\n  endTime() {\\n    this.endTimeMillis = Date.now();\\n  }\\n  accumulateSleepTime(time) {\\n    this.sleepTimeMillis += time;\\n  }\\n  getTime(ns) {\\n    const runningTime = this.endTimeMillis - this.startTimeMillis - this.sleepTimeMillis;\\n    ns.write(\\\"timelog.txt\\\", \\\"Time: \\\" + runningTime + \\\"ms\\\\n\\\", \\\"a\\\");\\n    return runningTime;\\n  }\\n  constructor() {\\n  }\\n  static getInstance() {\\n    if (!Time.instance) {\\n      Time.instance = new Time();\\n    }\\n    return Time.instance;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVGltZTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXJ0VGltZU1pbGxpcyA9IDA7XHJcbiAgICBwcml2YXRlIGVuZFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG5cclxuICAgIHB1YmxpYyBzdGFydFRpbWUoKSB7XHJcbiAgICAgICAgdGhpcy5zbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lTWlsbGlzID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5kVGltZSgpIHtcclxuICAgICAgICB0aGlzLmVuZFRpbWVNaWxsaXMgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY2N1bXVsYXRlU2xlZXBUaW1lKHRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2xlZXBUaW1lTWlsbGlzICs9IHRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbWUobnM6IE5TKSB7XHJcbiAgICAgICAgY29uc3QgcnVubmluZ1RpbWUgPSB0aGlzLmVuZFRpbWVNaWxsaXMgLSB0aGlzLnN0YXJ0VGltZU1pbGxpcyAtIHRoaXMuc2xlZXBUaW1lTWlsbGlzO1xyXG4gICAgICAgIG5zLndyaXRlKFwidGltZWxvZy50eHRcIiwgXCJUaW1lOiBcIiArIHJ1bm5pbmdUaW1lICsgXCJtc1xcblwiLCBcImFcIik7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5pbmdUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy9cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIGlmICghVGltZS5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBUaW1lLmluc3RhbmNlID0gbmV3IFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFRpbWUuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFTyxhQUFNLEtBQUs7QUFBQSxFQUNkLE9BQWU7QUFBQSxFQUVQLGtCQUFrQjtBQUFBLEVBQ2xCLGdCQUFnQjtBQUFBLEVBQ2hCLGtCQUFrQjtBQUFBLEVBRW5CLFlBQVk7QUFDZixTQUFLLGtCQUFrQjtBQUN2QixTQUFLLGtCQUFrQixLQUFLLElBQUk7QUFBQSxFQUNwQztBQUFBLEVBRU8sVUFBVTtBQUNiLFNBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLEVBQ2xDO0FBQUEsRUFFTyxvQkFBb0IsTUFBYztBQUNyQyxTQUFLLG1CQUFtQjtBQUFBLEVBQzVCO0FBQUEsRUFFTyxRQUFRLElBQVE7QUFDbkIsVUFBTSxjQUFjLEtBQUssZ0JBQWdCLEtBQUssa0JBQWtCLEtBQUs7QUFDckUsT0FBRyxNQUFNLGVBQWUsV0FBVyxjQUFjLFFBQVEsR0FBRztBQUM1RCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRVEsY0FBYztBQUFBLEVBRXRCO0FBQUEsRUFFQSxPQUFjLGNBQWM7QUFDeEIsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNoQixXQUFLLFdBQVcsSUFBSSxLQUFLO0FBQUEsSUFDN0I7QUFDQSxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"Time.js\",\"server\":\"home\"}}],[\"Config/Config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Config {\\n  /**\\n   * The target the daemon should hack, leave empty to hack the best server.\\n   * Default: \\\"\\\"\\n   */\\n  static TARGET = \\\"\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to use to buy servers.\\n   * Default: 0\\n   */\\n  static MAX_MONEY_TO_BUY = 0;\\n  /**\\n   * The name of the grow/weak/hack servers.\\n   * When the Daemon needs to buy a new server, the servername will start with the value of this property, appended with a trailing number.\\n   * Example: \\\"daemon-grow-0\\\", \\\"daemon-grow-1\\\", ...\\n   * Default: \\\"daemon-grow\\\", \\\"daemon-weak\\\", \\\"daemon-hack\\\"\\n   */\\n  static GROW_SERVER_NAME = \\\"daemon-grow\\\";\\n  static WEAK_SERVER_NAME = \\\"daemon-weak\\\";\\n  static HACK_SERVER_NAME = \\\"daemon-hack\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to hack from a server, leave at 0 to let the daemon decide.\\n   * Default: 0\\n   */\\n  static HACK_THRESHOLD = 0;\\n  /**\\n   * The step value which is used to decrease the hack threshold to calculate the optimal HACK_THRESHOLD.\\n   * Default: 0.05\\n   */\\n  static THRESHOLD_STEP = 0.05;\\n  /**\\n   * The minimum hack threshold value.\\n   * This value represents the minimum threshold required for a successful hack.\\n   * Default: 0.15\\n   */\\n  static MIN_HACK_THRESHOLD = 0.05;\\n  /**\\n   * The maximum amount of RAM the daemon should leave free on the Home server.\\n   * Default: 50\\n   */\\n  static HOME_FREE_RAM = 50;\\n  /**\\n   * The delay time in milliseconds.\\n   * This constant represents the amount of time to add as a margin when calling weak/grow/hack in parallel mode.\\n   * Default: 1000\\n   */\\n  static DELAY_MARGIN_MS = 50;\\n  /**\\n   * The amount of time in milliseconds to wait before executing the next loop cycle.\\n   * Default: 10000 (10 seconds)\\n   */\\n  static LOOP_SAFETY_MARGIN_MS = 1e4;\\n  /**\\n   * The number of batches to use in parallel mode.\\n   * Default: 2\\n   */\\n  static LOOP_BATCH_COUNT = 2;\\n  /**\\n   * The amount of RAM (in gigabytes) required by the weaken, grow and hack script.\\n   * Default: 1.75, 1.75, 1.7\\n   */\\n  static WEAKEN_SCRIPT_RAM = 1.75;\\n  static GROW_SCRIPT_RAM = 1.75;\\n  static HACK_SCRIPT_RAM = 1.7;\\n  /**\\n   * The minimum amount of money required on the home server to start investing in the stock market.\\n   * Default: 10_000_000_000\\n   */\\n  static STOCK_MARKET_MIN_HOME_MONEY = 1e10;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUmVwcmVzZW50cyB0aGUgc2V0dGluZ3MgZm9yIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVG8gbW9kaWZ5IHRoZSBzZXR0aW5ncywgdXBkYXRlIHRoZSBjbGFzcyBwcm9wZXJ0aWVzIGFjY29yZGluZ2x5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0YXJnZXQgdGhlIGRhZW1vbiBzaG91bGQgaGFjaywgbGVhdmUgZW1wdHkgdG8gaGFjayB0aGUgYmVzdCBzZXJ2ZXIuXHJcbiAgICAgKiBEZWZhdWx0OiBcIlwiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVEFSR0VUOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5IHRoZSBkYWVtb24gaXMgYWxsb3dlZCB0byB1c2UgdG8gYnV5IHNlcnZlcnMuXHJcbiAgICAgKiBEZWZhdWx0OiAwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUFYX01PTkVZX1RPX0JVWTogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBncm93L3dlYWsvaGFjayBzZXJ2ZXJzLlxyXG4gICAgICogV2hlbiB0aGUgRGFlbW9uIG5lZWRzIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIHRoZSBzZXJ2ZXJuYW1lIHdpbGwgc3RhcnQgd2l0aCB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSwgYXBwZW5kZWQgd2l0aCBhIHRyYWlsaW5nIG51bWJlci5cclxuICAgICAqIEV4YW1wbGU6IFwiZGFlbW9uLWdyb3ctMFwiLCBcImRhZW1vbi1ncm93LTFcIiwgLi4uXHJcbiAgICAgKiBEZWZhdWx0OiBcImRhZW1vbi1ncm93XCIsIFwiZGFlbW9uLXdlYWtcIiwgXCJkYWVtb24taGFja1wiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgR1JPV19TRVJWRVJfTkFNRTogc3RyaW5nID0gXCJkYWVtb24tZ3Jvd1wiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBXRUFLX1NFUlZFUl9OQU1FOiBzdHJpbmcgPSBcImRhZW1vbi13ZWFrXCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhBQ0tfU0VSVkVSX05BTUU6IHN0cmluZyA9IFwiZGFlbW9uLWhhY2tcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leSB0aGUgZGFlbW9uIGlzIGFsbG93ZWQgdG8gaGFjayBmcm9tIGEgc2VydmVyLCBsZWF2ZSBhdCAwIHRvIGxldCB0aGUgZGFlbW9uIGRlY2lkZS5cclxuICAgICAqIERlZmF1bHQ6IDBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIQUNLX1RIUkVTSE9MRDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGVwIHZhbHVlIHdoaWNoIGlzIHVzZWQgdG8gZGVjcmVhc2UgdGhlIGhhY2sgdGhyZXNob2xkIHRvIGNhbGN1bGF0ZSB0aGUgb3B0aW1hbCBIQUNLX1RIUkVTSE9MRC5cclxuICAgICAqIERlZmF1bHQ6IDAuMDVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSFJFU0hPTERfU1RFUDogbnVtYmVyID0gMC4wNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtaW5pbXVtIGhhY2sgdGhyZXNob2xkIHZhbHVlLlxyXG4gICAgICogVGhpcyB2YWx1ZSByZXByZXNlbnRzIHRoZSBtaW5pbXVtIHRocmVzaG9sZCByZXF1aXJlZCBmb3IgYSBzdWNjZXNzZnVsIGhhY2suXHJcbiAgICAgKiBEZWZhdWx0OiAwLjE1XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUlOX0hBQ0tfVEhSRVNIT0xEOiBudW1iZXIgPSAwLjA1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIFJBTSB0aGUgZGFlbW9uIHNob3VsZCBsZWF2ZSBmcmVlIG9uIHRoZSBIb21lIHNlcnZlci5cclxuICAgICAqIERlZmF1bHQ6IDUwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSE9NRV9GUkVFX1JBTTogbnVtYmVyID0gNTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGVsYXkgdGltZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICAgKiBUaGlzIGNvbnN0YW50IHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIGFkZCBhcyBhIG1hcmdpbiB3aGVuIGNhbGxpbmcgd2Vhay9ncm93L2hhY2sgaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIERlZmF1bHQ6IDEwMDBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBERUxBWV9NQVJHSU5fTVM6IG51bWJlciA9IDUwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGFtb3VudCBvZiB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBleGVjdXRpbmcgdGhlIG5leHQgbG9vcCBjeWNsZS5cclxuICAgICAqIERlZmF1bHQ6IDEwMDAwICgxMCBzZWNvbmRzKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExPT1BfU0FGRVRZX01BUkdJTl9NUzogbnVtYmVyID0gMTAwMDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGJhdGNoZXMgdG8gdXNlIGluIHBhcmFsbGVsIG1vZGUuXHJcbiAgICAgKiBEZWZhdWx0OiAyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTE9PUF9CQVRDSF9DT1VOVDogbnVtYmVyID0gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBhbW91bnQgb2YgUkFNIChpbiBnaWdhYnl0ZXMpIHJlcXVpcmVkIGJ5IHRoZSB3ZWFrZW4sIGdyb3cgYW5kIGhhY2sgc2NyaXB0LlxyXG4gICAgICogRGVmYXVsdDogMS43NSwgMS43NSwgMS43XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV0VBS0VOX1NDUklQVF9SQU06IG51bWJlciA9IDEuNzU7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEdST1dfU0NSSVBUX1JBTTogbnVtYmVyID0gMS43NTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSEFDS19TQ1JJUFRfUkFNOiBudW1iZXIgPSAxLjc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWluaW11bSBhbW91bnQgb2YgbW9uZXkgcmVxdWlyZWQgb24gdGhlIGhvbWUgc2VydmVyIHRvIHN0YXJ0IGludmVzdGluZyBpbiB0aGUgc3RvY2sgbWFya2V0LlxyXG4gICAgICogRGVmYXVsdDogMTBfMDAwXzAwMF8wMDBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBTVE9DS19NQVJLRVRfTUlOX0hPTUVfTU9ORVk6IG51bWJlciA9IDEwXzAwMF8wMDBfMDAwO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBS08sYUFBTSxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtoQixPQUF1QixTQUFpQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNeEMsT0FBdUIsbUJBQTJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRbEQsT0FBdUIsbUJBQTJCO0FBQUEsRUFDbEQsT0FBdUIsbUJBQTJCO0FBQUEsRUFDbEQsT0FBdUIsbUJBQTJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1sRCxPQUF1QixpQkFBeUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTWhELE9BQXVCLGlCQUF5QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9oRCxPQUF1QixxQkFBNkI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXBELE9BQXVCLGdCQUF3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU8vQyxPQUF1QixrQkFBMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTWpELE9BQXVCLHdCQUFnQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNdkQsT0FBdUIsbUJBQTJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1sRCxPQUF1QixvQkFBNEI7QUFBQSxFQUNuRCxPQUF1QixrQkFBMEI7QUFBQSxFQUNqRCxPQUF1QixrQkFBMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTWpELE9BQXVCLDhCQUFzQztBQUNqRTsiLCJuYW1lcyI6W119\",\"filename\":\"Config/Config.js\",\"server\":\"home\"}}],[\"parallel/WGHAlgorithms.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreads,\\n  getGrowThreadsFormulas,\\n  getHackThreadsFormulas,\\n  getWeakenThreads,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack\\n} from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nimport { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nexport class WGHAlgorithms {\\n  static currentGrowThreads = 0;\\n  static currentHackThreads = 0;\\n  /**\\n   * Weakens a server by executing the weaken.js script with the specified number of threads.\\n   * The number of threads dispatched depends on the order, batch mode, and available resources.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param target - The name of the target server to weaken.\\n   * @param order - wether it is weaken I or weaken II.\\n   * @param batchId - The ID of the parallel batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the weaken script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   * @throws An error if the weaken order is not 1 or 2.\\n   */\\n  static weakenServer(ns, target, order, batchMode, delay = 0, isLastWeaken = false, filterNotAllowedHosts = true) {\\n    ns.print(\\\"----------------- WEAKEN \\\" + target + \\\" -----------------\\\");\\n    let totalWeakenThreadsNeeded = 0;\\n    if (order == 1 && !batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    } else if (order == 2 && !batchMode) {\\n      const growThreads = getGrowThreads(ns, target);\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, growThreads);\\n    } else if (order == 1 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterHack(ns, this.currentHackThreads);\\n    } else if (order == 2 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, this.currentGrowThreads);\\n    } else {\\n      throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n    }\\n    if (totalWeakenThreadsNeeded < 1) {\\n      ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n      return 0;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalWeakenThreadsNeeded);\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.GROW_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const weakenScriptRam = Config.WEAKEN_SCRIPT_RAM;\\n    let pid = 0;\\n    let threadsDispatched = 0;\\n    let threadsRemaining = totalWeakenThreadsNeeded;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= totalWeakenThreadsNeeded)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      pid = ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay, isLastWeaken);\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining <= 0) {\\n      ns.print(\\n        \\\"Done deploying \\\" + threadsDispatched + \\\"/\\\" + totalWeakenThreadsNeeded + \\\" weaken\\\" + order + \\\" threads!\\\"\\n      );\\n      return pid;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n    );\\n    const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    pid = ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay, isLastWeaken);\\n    ns.print(\\\"Done deploying \\\" + totalWeakenThreadsNeeded + \\\" weaken\\\" + order + \\\" threads on \\\" + server + \\\"!\\\");\\n    return pid;\\n  }\\n  /**\\n   * Grows the specified server by executing the \\\"grow.js\\\" script with the specified number of threads.\\n   * If batchMode is enabled, it calculates the number of threads needed using the getGrowThreadsFormulas function.\\n   * Otherwise, it uses the getGrowThreads function to determine the number of threads needed.\\n   * If there are no threads needed, the growth process is skipped.\\n   * If there is an available host with enough RAM to execute the \\\"grow.js\\\" script, it is executed immediately.\\n   * Otherwise, it attempts to upgrade or buy a server with enough RAM to execute the script.\\n   *\\n   * @param ns - The NetScript instance.\\n   * @param target - The name of the server to grow.\\n   * @param batchId - The ID of the batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the grow script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   */\\n  static growServer(ns, target, batchMode, delay, filterNotAllowedHosts = true) {\\n    ns.print(\\\"----------------- GROWING \\\" + target + \\\" -----------------\\\");\\n    let totalGrowThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n    } else {\\n      totalGrowThreadsNeeded = getGrowThreadsFormulas(ns, target, this.currentHackThreads);\\n      this.currentGrowThreads = totalGrowThreadsNeeded;\\n    }\\n    if (totalGrowThreadsNeeded < 1) {\\n      ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n      return 0;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalGrowThreadsNeeded);\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const growingScriptRam = Config.GROW_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n      if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n        const pid2 = ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying \\\" + totalGrowThreadsNeeded + \\\" grow threads on \\\" + host.name + \\\"!\\\");\\n        return pid2;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n    const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    const pid = ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n    ns.print(\\\"Done deploying \\\" + totalGrowThreadsNeeded + \\\" grow threads on \\\" + server + \\\"!\\\");\\n    return pid;\\n  }\\n  /**\\n   * Hacks a given server by executing the \\\"hack.js\\\" script with the specified number of threads, on certain hosts.\\n   *\\n   * @param ns - The NetScript object.\\n   * @param target - The name of the server to hack.\\n   * @param threshold - The hacking threshold for the server.\\n   * @param batchId - The ID of the current hacking batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the hack script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   */\\n  static hackServer(ns, target, threshold, batchMode, delay) {\\n    ns.print(\\\"----------------- HACKING \\\" + target + \\\" -----------------\\\");\\n    let totalHackThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n    } else {\\n      totalHackThreadsNeeded = getHackThreadsFormulas(ns, target, threshold);\\n      this.currentHackThreads = totalHackThreadsNeeded;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalHackThreadsNeeded);\\n    const allHosts = getBestHostByRamOptimized(ns).filter(\\n      (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.GROW_SERVER_NAME)\\n    );\\n    const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n      if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n        const pid2 = ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying \\\" + totalHackThreadsNeeded + \\\" hack threads on \\\" + host.name + \\\"!\\\");\\n        return pid2;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to hack \\\" + target + \\\". Buying server...\\\");\\n    const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    const pid = ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n    ns.print(\\\"Done deploying \\\" + totalHackThreadsNeeded + \\\" hack threads!\\\");\\n    return pid;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldHSEFsZ29yaXRobXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiQC9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IFNlcnZlciwgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIENvbG9ycyxcclxuICAgIGdldEdyb3dUaHJlYWRzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyxcclxuICAgIGdldEhhY2tUaHJlYWRzRm9ybXVsYXMsXHJcbiAgICBnZXRXZWFrZW5UaHJlYWRzLFxyXG4gICAgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2ssXHJcbn0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IFNlcnZlck1hbmFnZXIgfSBmcm9tIFwiLi9TZXJ2ZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFBsYXllck1hbmFnZXIgfSBmcm9tIFwiLi9QbGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgV0dIQWxnb3JpdGhtcyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBjdXJyZW50R3Jvd1RocmVhZHMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3VycmVudEhhY2tUaHJlYWRzID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICAgICAqIFRoZSBudW1iZXIgb2YgdGhyZWFkcyBkaXNwYXRjaGVkIGRlcGVuZHMgb24gdGhlIG9yZGVyLCBiYXRjaCBtb2RlLCBhbmQgYXZhaWxhYmxlIHJlc291cmNlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICAgICAqIEBwYXJhbSBvcmRlciAtIHdldGhlciBpdCBpcyB3ZWFrZW4gSSBvciB3ZWFrZW4gSUkuXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCAtIFRoZSBJRCBvZiB0aGUgcGFyYWxsZWwgYmF0Y2guXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hNb2RlIC0gU2V0IHRvIHRydWUsIG9mIG1vcmUgdGhhbiBvbmUgYmF0Y2ggc2hvdWxkIHJ1biBpbiBwYXJhbGxlbCBtb2RlLlxyXG4gICAgICogQHBhcmFtIGRlbGF5IC0gVGltZSBpbiBtcywgYnkgaG93IG11Y2ggdGhlIHdlYWtlbiBzY3JpcHQgc2hvdWxkIGJlIGRlbGF5ZWQgdG8gZW5hYmxlIHByZWNpc2UgcGFyYWxsZWwgYmF0Y2ggbW9kZSB0aW1pbmcgKGRlZmF1bHQ6IDApLlxyXG4gICAgICogQHJldHVybnMgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBQSUQgb2YgdGhlIHNjcmlwdCB0aGF0IHdhcyBleGVjdXRlZCwgb3IgMCBpZiBubyBzY3JpcHQgd2FzIGV4ZWN1dGVkLlxyXG4gICAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgd2Vha2VuIG9yZGVyIGlzIG5vdCAxIG9yIDIuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB3ZWFrZW5TZXJ2ZXIoXHJcbiAgICAgICAgbnM6IE5TLFxyXG4gICAgICAgIHRhcmdldDogc3RyaW5nLFxyXG4gICAgICAgIG9yZGVyOiBudW1iZXIsXHJcbiAgICAgICAgYmF0Y2hNb2RlOiBib29sZWFuLFxyXG4gICAgICAgIGRlbGF5ID0gMCxcclxuICAgICAgICBpc0xhc3RXZWFrZW4gPSBmYWxzZSxcclxuICAgICAgICBmaWx0ZXJOb3RBbGxvd2VkSG9zdHMgPSB0cnVlLFxyXG4gICAgKTogbnVtYmVyIHtcclxuICAgICAgICBucy5wcmludChcIi0tLS0tLS0tLS0tLS0tLS0tIFdFQUtFTiBcIiArIHRhcmdldCArIFwiIC0tLS0tLS0tLS0tLS0tLS0tXCIpO1xyXG4gICAgICAgIGxldCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB3ZWFrZW5pbmcgdGhyZWFkcyBiYXNlZCBvbiB0aGUgb3JkZXJcclxuXHJcbiAgICAgICAgaWYgKG9yZGVyID09IDEgJiYgIWJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICAvLyBmaXJzdCB3ZWFrIGhhcyB0byB3ZWFrZW4gc2VydmVyIHRvIG1pbiBmcm9tIHVua25vd24gc2VjIGx2bFxyXG4gICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMiAmJiAhYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHNlY29uZCB3ZWFrIG9ubHkgaGFzIHRvIHJlbW92ZSB0aGUgc2VjIGluY3JlYXNlIGZyb20gdGhlIGdyb3cgYmVmb3JlIChtb3JlIHJhbSBlZmZpY2llbnQpXHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3dUaHJlYWRzID0gZ2V0R3Jvd1RocmVhZHMobnMsIHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zLCBncm93VGhyZWFkcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PSAxICYmIGJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICAvLyB3ZWFrIGFmdGVyIHByZXZpb3VzIGhhY2tcclxuICAgICAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gZ2V0V2Vha2VuVGhyZWFkc0FmdGVySGFjayhucywgdGhpcy5jdXJyZW50SGFja1RocmVhZHMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMiAmJiBiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgLy8gd2VhayBhZnRlciBwcmV2aW91cyBncm93XHJcbiAgICAgICAgICAgIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCA9IGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnMsIHRoaXMuY3VycmVudEdyb3dUaHJlYWRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWFrZW4gb3JkZXIgY2FuIG9ubHkgYmUgZWl0aGVyIDEgb3IgMiFcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkIDwgMSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcIldlYWtlbnRocmVhZHMgYXJlIDAsIHNraXBwaW5nIHdlYWsgXCIgKyBvcmRlcik7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGFjayB4cFxyXG4gICAgICAgIGNvbnN0IHBtID0gUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucyk7XHJcbiAgICAgICAgcG0uYWRkSGFja2luZ0V4cChucywgdGFyZ2V0LCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgICAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICAgICAgbGV0IGFsbEhvc3RzOiBTZXJ2ZXJbXSA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgICAgIGlmIChmaWx0ZXJOb3RBbGxvd2VkSG9zdHMpIHtcclxuICAgICAgICAgICAgYWxsSG9zdHMgPSBhbGxIb3N0cy5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAoaG9zdCkgPT4gIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSkgJiYgIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuSEFDS19TRVJWRVJfTkFNRSksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHdlYWtlblNjcmlwdFJhbSA9IENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTTtcclxuICAgICAgICBsZXQgcGlkID0gMDtcclxuXHJcbiAgICAgICAgbGV0IHRocmVhZHNEaXNwYXRjaGVkID0gMDtcclxuICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgd2Vha2VuU2NyaXB0UmFtKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkU3BhY2UgPSBNYXRoLmZsb29yKGZyZWVSYW0gLyB3ZWFrZW5TY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgICAgICBjb25zdCB0aHJlYWRzVG9EaXNwYXRjaCA9IE1hdGgubWluKHRocmVhZHNSZW1haW5pbmcsIHRocmVhZFNwYWNlKTtcclxuXHJcbiAgICAgICAgICAgIHBpZCA9IG5zLmV4ZWMoXCJ3ZWFrZW4uanNcIiwgaG9zdC5uYW1lLCB0aHJlYWRzVG9EaXNwYXRjaCwgdGFyZ2V0LCBkZWxheSwgaXNMYXN0V2Vha2VuKTtcclxuICAgICAgICAgICAgdGhyZWFkc1JlbWFpbmluZyAtPSB0aHJlYWRzVG9EaXNwYXRjaDtcclxuICAgICAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgKz0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhyZWFkc1JlbWFpbmluZyA8PSAwKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgXCJEb25lIGRlcGxveWluZyBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiL1wiICtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIHdlYWtlblwiICtcclxuICAgICAgICAgICAgICAgICAgICBvcmRlciArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgdGhyZWFkcyFcIixcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICAgICAgXCJUaGVyZSBhcmUgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGhyZWFkc1JlbWFpbmluZyArXHJcbiAgICAgICAgICAgICAgICBcIiB0aHJlYWRzIHJlbWFpbmluZyBhZnRlciBkaXNwYXRjaGluZyBhbGwgdGhyZWFkcywgYXR0ZW1wdGluZyB0byBkaXNwYXRjaCByZW1haW5pbmcgdGhyZWFkcyBvbiBwdXJjaGFzZWQgc2VydmVyXCIsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVlZGVkV2Vha2VuUmFtID0gdGhyZWFkc1JlbWFpbmluZyAqIHdlYWtlblNjcmlwdFJhbTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkV2Vha2VuUmFtLCBDb25maWcuV0VBS19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiXCIpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBwaWQgPSBucy5leGVjKFwid2Vha2VuLmpzXCIsIHNlcnZlciwgdGhyZWFkc1JlbWFpbmluZywgdGFyZ2V0LCBkZWxheSwgaXNMYXN0V2Vha2VuKTtcclxuICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkICsgXCIgd2Vha2VuXCIgKyBvcmRlciArIFwiIHRocmVhZHMgb24gXCIgKyBzZXJ2ZXIgKyBcIiFcIik7XHJcbiAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdyb3dzIHRoZSBzcGVjaWZpZWQgc2VydmVyIGJ5IGV4ZWN1dGluZyB0aGUgXCJncm93LmpzXCIgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICAgICAqIElmIGJhdGNoTW9kZSBpcyBlbmFibGVkLCBpdCBjYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgdGhyZWFkcyBuZWVkZWQgdXNpbmcgdGhlIGdldEdyb3dUaHJlYWRzRm9ybXVsYXMgZnVuY3Rpb24uXHJcbiAgICAgKiBPdGhlcndpc2UsIGl0IHVzZXMgdGhlIGdldEdyb3dUaHJlYWRzIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIHRocmVhZHMgbmVlZGVkLlxyXG4gICAgICogSWYgdGhlcmUgYXJlIG5vIHRocmVhZHMgbmVlZGVkLCB0aGUgZ3Jvd3RoIHByb2Nlc3MgaXMgc2tpcHBlZC5cclxuICAgICAqIElmIHRoZXJlIGlzIGFuIGF2YWlsYWJsZSBob3N0IHdpdGggZW5vdWdoIFJBTSB0byBleGVjdXRlIHRoZSBcImdyb3cuanNcIiBzY3JpcHQsIGl0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxyXG4gICAgICogT3RoZXJ3aXNlLCBpdCBhdHRlbXB0cyB0byB1cGdyYWRlIG9yIGJ1eSBhIHNlcnZlciB3aXRoIGVub3VnaCBSQU0gdG8gZXhlY3V0ZSB0aGUgc2NyaXB0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBucyAtIFRoZSBOZXRTY3JpcHQgaW5zdGFuY2UuXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZlciB0byBncm93LlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgSUQgb2YgdGhlIGJhdGNoLlxyXG4gICAgICogQHBhcmFtIGJhdGNoTW9kZSAtIFNldCB0byB0cnVlLCBvZiBtb3JlIHRoYW4gb25lIGJhdGNoIHNob3VsZCBydW4gaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIEBwYXJhbSBkZWxheSAtIFRpbWUgaW4gbXMsIGJ5IGhvdyBtdWNoIHRoZSBncm93IHNjcmlwdCBzaG91bGQgYmUgZGVsYXllZCB0byBlbmFibGUgcHJlY2lzZSBwYXJhbGxlbCBiYXRjaCBtb2RlIHRpbWluZyAoZGVmYXVsdDogMCkuXHJcbiAgICAgKiBAcmV0dXJucyBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIFBJRCBvZiB0aGUgc2NyaXB0IHRoYXQgd2FzIGV4ZWN1dGVkLCBvciAwIGlmIG5vIHNjcmlwdCB3YXMgZXhlY3V0ZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBncm93U2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGJhdGNoTW9kZTogYm9vbGVhbiwgZGVsYXk6IG51bWJlciwgZmlsdGVyTm90QWxsb3dlZEhvc3RzID0gdHJ1ZSk6IG51bWJlciB7XHJcbiAgICAgICAgbnMucHJpbnQoXCItLS0tLS0tLS0tLS0tLS0tLSBHUk9XSU5HIFwiICsgdGFyZ2V0ICsgXCIgLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgbGV0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgICAgIGlmICghYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkID0gZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyhucywgdGFyZ2V0LCB0aGlzLmN1cnJlbnRIYWNrVGhyZWFkcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEdyb3dUaHJlYWRzID0gdG90YWxHcm93VGhyZWFkc05lZWRlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0b3RhbEdyb3dUaHJlYWRzTmVlZGVkIDwgMSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcIk5vIGdyb3cgdGhyZWFkcyBuZWVkZWQsIHNraXBwaW5nIGdyb3d0aCBwcm9jZXNzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhhY2sgeHBcclxuICAgICAgICBjb25zdCBwbSA9IFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpO1xyXG4gICAgICAgIHBtLmFkZEhhY2tpbmdFeHAobnMsIHRhcmdldCwgdG90YWxHcm93VGhyZWFkc05lZWRlZCk7XHJcblxyXG4gICAgICAgIC8vIGV4ZWMgZ3Jvdy5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICAgICAgbGV0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICAgICAgaWYgKGZpbHRlck5vdEFsbG93ZWRIb3N0cykge1xyXG4gICAgICAgICAgICBhbGxIb3N0cyA9IGFsbEhvc3RzLmZpbHRlcihcclxuICAgICAgICAgICAgICAgIChob3N0KSA9PiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKSAmJiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5IQUNLX1NFUlZFUl9OQU1FKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ3Jvd2luZ1NjcmlwdFJhbSA9IENvbmZpZy5HUk9XX1NDUklQVF9SQU07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF4VGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoaG9zdC5hdmFpbGFibGVSYW0gLyBncm93aW5nU2NyaXB0UmFtKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoXCJncm93LmpzXCIsIGhvc3QubmFtZSwgdG90YWxHcm93VGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIFwiICsgdG90YWxHcm93VGhyZWFkc05lZWRlZCArIFwiIGdyb3cgdGhyZWFkcyBvbiBcIiArIGhvc3QubmFtZSArIFwiIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIk5vIGF2YWlsYWJsZSBob3N0IHRvIGdyb3cgXCIgKyB0YXJnZXQgKyBcIi4gQXR0ZW1wdGluZyB0byB1cGdyYWRlL2J1eSBzZXJ2ZXIuLi5cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IG5lZWRlZEdyb3dSYW0gPSB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkICogZ3Jvd2luZ1NjcmlwdFJhbTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkR3Jvd1JhbSwgQ29uZmlnLkdST1dfU0VSVkVSX05BTUUpO1xyXG5cclxuICAgICAgICBpZiAoc2VydmVyID09PSBcIlwiKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhcImdyb3cuanNcIiwgc2VydmVyLCB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIFwiICsgdG90YWxHcm93VGhyZWFkc05lZWRlZCArIFwiIGdyb3cgdGhyZWFkcyBvbiBcIiArIHNlcnZlciArIFwiIVwiKTtcclxuICAgICAgICByZXR1cm4gcGlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFja3MgYSBnaXZlbiBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSBcImhhY2suanNcIiBzY3JpcHQgd2l0aCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB0aHJlYWRzLCBvbiBjZXJ0YWluIGhvc3RzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBucyAtIFRoZSBOZXRTY3JpcHQgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgdG8gaGFjay5cclxuICAgICAqIEBwYXJhbSB0aHJlc2hvbGQgLSBUaGUgaGFja2luZyB0aHJlc2hvbGQgZm9yIHRoZSBzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCAtIFRoZSBJRCBvZiB0aGUgY3VycmVudCBoYWNraW5nIGJhdGNoLlxyXG4gICAgICogQHBhcmFtIGJhdGNoTW9kZSAtIFNldCB0byB0cnVlLCBvZiBtb3JlIHRoYW4gb25lIGJhdGNoIHNob3VsZCBydW4gaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIEBwYXJhbSBkZWxheSAtIFRpbWUgaW4gbXMsIGJ5IGhvdyBtdWNoIHRoZSBoYWNrIHNjcmlwdCBzaG91bGQgYmUgZGVsYXllZCB0byBlbmFibGUgcHJlY2lzZSBwYXJhbGxlbCBiYXRjaCBtb2RlIHRpbWluZyAoZGVmYXVsdDogMCkuXHJcbiAgICAgKiBAcmV0dXJucyBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIFBJRCBvZiB0aGUgc2NyaXB0IHRoYXQgd2FzIGV4ZWN1dGVkLCBvciAwIGlmIG5vIHNjcmlwdCB3YXMgZXhlY3V0ZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBoYWNrU2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIHRocmVzaG9sZDogbnVtYmVyLCBiYXRjaE1vZGU6IGJvb2xlYW4sIGRlbGF5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIG5zLnByaW50KFwiLS0tLS0tLS0tLS0tLS0tLS0gSEFDS0lORyBcIiArIHRhcmdldCArIFwiIC0tLS0tLS0tLS0tLS0tLS0tXCIpO1xyXG4gICAgICAgIGxldCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkID0gMDtcclxuICAgICAgICBpZiAoIWJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkID0gTWF0aC5jZWlsKHRocmVzaG9sZCAvIG5zLmhhY2tBbmFseXplKHRhcmdldCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSBnZXRIYWNrVGhyZWFkc0Zvcm11bGFzKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEhhY2tUaHJlYWRzID0gdG90YWxIYWNrVGhyZWFkc05lZWRlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhhY2sgeHBcclxuICAgICAgICBjb25zdCBwbSA9IFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpO1xyXG4gICAgICAgIHBtLmFkZEhhY2tpbmdFeHAobnMsIHRhcmdldCwgdG90YWxIYWNrVGhyZWFkc05lZWRlZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucykuZmlsdGVyKFxyXG4gICAgICAgICAgICAoaG9zdCkgPT4gIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuV0VBS19TRVJWRVJfTkFNRSkgJiYgIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSksXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBoYWNraW5nU2NyaXB0UmFtID0gQ29uZmlnLkhBQ0tfU0NSSVBUX1JBTTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihob3N0LmF2YWlsYWJsZVJhbSAvIGhhY2tpbmdTY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFRocmVhZHNPbkhvc3QgPj0gdG90YWxIYWNrVGhyZWFkc05lZWRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhcImhhY2suanNcIiwgaG9zdC5uYW1lLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiRG9uZSBkZXBsb3lpbmcgXCIgKyB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkICsgXCIgaGFjayB0aHJlYWRzIG9uIFwiICsgaG9zdC5uYW1lICsgXCIhXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLllFTExPVyArIFwiTm8gYXZhaWxhYmxlIGhvc3QgdG8gaGFjayBcIiArIHRhcmdldCArIFwiLiBCdXlpbmcgc2VydmVyLi4uXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBuZWVkZWRHcm93UmFtID0gdG90YWxIYWNrVGhyZWFkc05lZWRlZCAqIGhhY2tpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgY29uc3Qgc2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIG5lZWRlZEdyb3dSYW0sIENvbmZpZy5IQUNLX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICAgICAgaWYgKHNlcnZlciA9PT0gXCJcIikgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoXCJoYWNrLmpzXCIsIHNlcnZlciwgdG90YWxIYWNrVGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XHJcbiAgICAgICAgbnMucHJpbnQoXCJEb25lIGRlcGxveWluZyBcIiArIHRvdGFsSGFja1RocmVhZHNOZWVkZWQgKyBcIiBoYWNrIHRocmVhZHMhXCIpO1xyXG4gICAgICAgIHJldHVybiBwaWQ7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLGNBQWM7QUFDdkIsU0FBaUIsaUNBQWlDO0FBQ2xEO0FBQUEsRUFDSTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLE9BQ0c7QUFDUCxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLHFCQUFxQjtBQUV2QixhQUFNLGNBQWM7QUFBQSxFQUN2QixPQUFlLHFCQUFxQjtBQUFBLEVBQ3BDLE9BQWUscUJBQXFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVwQyxPQUFPLGFBQ0gsSUFDQSxRQUNBLE9BQ0EsV0FDQSxRQUFRLEdBQ1IsZUFBZSxPQUNmLHdCQUF3QixNQUNsQjtBQUNOLE9BQUcsTUFBTSw4QkFBOEIsU0FBUyxvQkFBb0I7QUFDcEUsUUFBSSwyQkFBMkI7QUFHL0IsUUFBSSxTQUFTLEtBQUss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\",\"filename\":\"parallel/WGHAlgorithms.js\",\"server\":\"home\"}}],[\"parallel/PlayerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PlayerManager {\\n  static instance;\\n  player;\\n  static getInstance(ns) {\\n    if (!PlayerManager.instance) {\\n      PlayerManager.instance = new PlayerManager(ns);\\n    }\\n    return PlayerManager.instance;\\n  }\\n  getPlayer() {\\n    return this.player;\\n  }\\n  resetPlayer(ns) {\\n    const player = ns.getPlayer();\\n    this.player = player;\\n  }\\n  addHackingExp(ns, target, threadCount) {\\n    if (!ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      return;\\n    }\\n    const serverObject = ns.getServer(target);\\n    const hackXp = ns.formulas.hacking.hackExp(serverObject, this.player);\\n    const totalExpGain = hackXp * threadCount;\\n    const lvlAfterHack = ns.formulas.skills.calculateSkill(\\n      this.player.exp.hacking + totalExpGain,\\n      this.player.mults.hacking\\n    );\\n    if (lvlAfterHack > this.player.skills.hacking) {\\n      ns.print(`Hacking level up! Lvl: ${this.player.skills.hacking} -> ${lvlAfterHack}`);\\n    }\\n    this.player.exp.hacking += totalExpGain;\\n    this.player.skills.hacking = lvlAfterHack;\\n  }\\n  constructor(ns) {\\n    this.player = ns.getPlayer();\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBsYXllck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMsIFBsYXllciB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXJNYW5hZ2VyIHtcclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQbGF5ZXJNYW5hZ2VyO1xyXG4gICAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllcjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKG5zOiBOUykge1xyXG4gICAgICAgIGlmICghUGxheWVyTWFuYWdlci5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBQbGF5ZXJNYW5hZ2VyLmluc3RhbmNlID0gbmV3IFBsYXllck1hbmFnZXIobnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUGxheWVyTWFuYWdlci5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0UGxheWVyKG5zOiBOUykge1xyXG4gICAgICAgIGNvbnN0IHBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhhY2tpbmdFeHAobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZWFkQ291bnQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICghbnMuZmlsZUV4aXN0cyhcIkZvcm11bGFzLmV4ZVwiLCBcImhvbWVcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyT2JqZWN0ID0gbnMuZ2V0U2VydmVyKHRhcmdldCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhY2tYcCA9IG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja0V4cChzZXJ2ZXJPYmplY3QsIHRoaXMucGxheWVyKTtcclxuICAgICAgICBjb25zdCB0b3RhbEV4cEdhaW4gPSBoYWNrWHAgKiB0aHJlYWRDb3VudDtcclxuXHJcbiAgICAgICAgY29uc3QgbHZsQWZ0ZXJIYWNrID0gbnMuZm9ybXVsYXMuc2tpbGxzLmNhbGN1bGF0ZVNraWxsKFxyXG4gICAgICAgICAgICB0aGlzLnBsYXllci5leHAuaGFja2luZyArIHRvdGFsRXhwR2FpbixcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIubXVsdHMuaGFja2luZyxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAobHZsQWZ0ZXJIYWNrID4gdGhpcy5wbGF5ZXIuc2tpbGxzLmhhY2tpbmcpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoYEhhY2tpbmcgbGV2ZWwgdXAhIEx2bDogJHt0aGlzLnBsYXllci5za2lsbHMuaGFja2luZ30gLT4gJHtsdmxBZnRlckhhY2t9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXQgcGxheWVyIGV4cCBhbmQgbHZsIGFmdGVyIGhhY2sgZm9yIHNpbXVsYXRlZCBwbGF5ZXJcclxuICAgICAgICB0aGlzLnBsYXllci5leHAuaGFja2luZyArPSB0b3RhbEV4cEdhaW47XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2tpbGxzLmhhY2tpbmcgPSBsdmxBZnRlckhhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihuczogTlMpIHtcclxuICAgICAgICB0aGlzLnBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBRU8sYUFBTSxjQUFjO0FBQUEsRUFDdkIsT0FBZTtBQUFBLEVBQ1A7QUFBQSxFQUVSLE9BQWMsWUFBWSxJQUFRO0FBQzlCLFFBQUksQ0FBQyxjQUFjLFVBQVU7QUFDekIsb0JBQWMsV0FBVyxJQUFJLGNBQWMsRUFBRTtBQUFBLElBQ2pEO0FBQ0EsV0FBTyxjQUFjO0FBQUEsRUFDekI7QUFBQSxFQUVBLFlBQVk7QUFDUixXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBLEVBRUEsWUFBWSxJQUFRO0FBQ2hCLFVBQU0sU0FBUyxHQUFHLFVBQVU7QUFDNUIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUVBLGNBQWMsSUFBUSxRQUFnQixhQUFxQjtBQUN2RCxRQUFJLENBQUMsR0FBRyxXQUFXLGdCQUFnQixNQUFNLEdBQUc7QUFDeEM7QUFBQSxJQUNKO0FBRUEsVUFBTSxlQUFlLEdBQUcsVUFBVSxNQUFNO0FBRXhDLFVBQU0sU0FBUyxHQUFHLFNBQVMsUUFBUSxRQUFRLGNBQWMsS0FBSyxNQUFNO0FBQ3BFLFVBQU0sZUFBZSxTQUFTO0FBRTlCLFVBQU0sZUFBZSxHQUFHLFNBQVMsT0FBTztBQUFBLE1BQ3BDLEtBQUssT0FBTyxJQUFJLFVBQVU7QUFBQSxNQUMxQixLQUFLLE9BQU8sTUFBTTtBQUFBLElBQ3RCO0FBRUEsUUFBSSxlQUFlLEtBQUssT0FBTyxPQUFPLFNBQVM7QUFDM0MsU0FBRyxNQUFNLDBCQUEwQixLQUFLLE9BQU8sT0FBTyxPQUFPLE9BQU8sWUFBWSxFQUFFO0FBQUEsSUFDdEY7QUFHQSxTQUFLLE9BQU8sSUFBSSxXQUFXO0FBQzNCLFNBQUssT0FBTyxPQUFPLFVBQVU7QUFBQSxFQUNqQztBQUFBLEVBRVEsWUFBWSxJQUFRO0FBQ3hCLFNBQUssU0FBUyxHQUFHLFVBQVU7QUFBQSxFQUMvQjtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/PlayerManager.js\",\"server\":\"home\"}}],[\"Stock/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors } from \\\"/lib.js\\\";\\nconst COMMISSION_FEE = 1e5;\\nfunction getAllStocks(ns) {\\n  const stocks = [];\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    const position = ns.stock.getPosition(symbol);\\n    const stock = {\\n      symbol,\\n      organization: ns.stock.getOrganization(symbol),\\n      observedMinPrice: -1,\\n      observedMaxPrice: -1,\\n      longShares: position[0],\\n      longPrice: position[1],\\n      shortShares: position[2],\\n      shortPrice: position[3],\\n      bidPrice: ns.stock.getBidPrice(symbol),\\n      askPrice: ns.stock.getAskPrice(symbol),\\n      price: ns.stock.getPrice(symbol),\\n      previousPrice: -1,\\n      forecast: ns.stock.getForecast(symbol),\\n      volatility: ns.stock.getVolatility(symbol),\\n      maxShares: ns.stock.getMaxShares(symbol),\\n      profit: -1,\\n      cost: -1,\\n      profitPotential: -1\\n    };\\n    stock.profit = stock.longShares * (stock.bidPrice - stock.longPrice) - 2 * COMMISSION_FEE;\\n    stock.cost = stock.longShares * stock.longPrice + stock.shortShares * stock.shortPrice;\\n    stock.profitPotential = 2 * Math.abs(stock.forecast - 0.5) * stock.volatility;\\n    stocks.push(stock);\\n  }\\n  return stocks;\\n}\\nfunction updateStocks(ns, stocks) {\\n  for (const stock of stocks) {\\n    const position = ns.stock.getPosition(stock.symbol);\\n    stock.longShares = position[0];\\n    stock.longPrice = position[1];\\n    stock.shortShares = position[2];\\n    stock.shortPrice = position[3];\\n    stock.bidPrice = ns.stock.getBidPrice(stock.symbol);\\n    stock.askPrice = ns.stock.getAskPrice(stock.symbol);\\n    stock.price = ns.stock.getPrice(stock.symbol);\\n    stock.forecast = ns.stock.getForecast(stock.symbol);\\n    stock.volatility = ns.stock.getVolatility(stock.symbol);\\n    stock.maxShares = ns.stock.getMaxShares(stock.symbol);\\n  }\\n  return stocks;\\n}\\nfunction saveMarket(ns, stocks) {\\n  const str = JSON.stringify(stocks);\\n  ns.write(\\\"Stock/market.txt\\\", str, \\\"w\\\");\\n}\\nfunction loadMarket(ns) {\\n  const str = ns.read(\\\"Stock/market.txt\\\");\\n  try {\\n    const data = JSON.parse(str);\\n    return data;\\n  } catch (error) {\\n    return [];\\n  }\\n}\\nfunction getPercentage(money) {\\n  return 1 / (1 + Math.exp(5e-10 * money)) + 0.1;\\n}\\nfunction logPositions(ns, stock, isBuy, profit = 0) {\\n  if (isBuy)\\n    ns.write(\\n      \\\"Stock/log.txt\\\",\\n      \\\"buying \\\" + ns.formatNumber(stock.longShares) + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + ns.formatNumber(stock.longPrice * stock.longShares) + \\\"\\\\n\\\",\\n      \\\"a\\\"\\n    );\\n  else\\n    ns.write(\\n      \\\"Stock/log.txt\\\",\\n      \\\"selling \\\" + ns.formatNumber(stock.longShares) + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + ns.formatNumber(profit) + \\\"\\\\n\\\",\\n      \\\"a\\\"\\n    );\\n}\\nexport async function main(ns) {\\n  ns.print(\\\"asd\\\");\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const s = ns.stock;\\n  let initialStocks = getAllStocks(ns);\\n  ns.print(initialStocks.length);\\n  let totalProfit = 0;\\n  while (true) {\\n    ns.clearLog();\\n    const stocks = updateStocks(ns, initialStocks);\\n    for (const stock of stocks) {\\n      if (stock.observedMinPrice === -1 || stock.price < stock.observedMinPrice) {\\n        stock.observedMinPrice = stock.price;\\n      }\\n      if (stock.observedMaxPrice === -1 || stock.price > stock.observedMaxPrice) {\\n        stock.observedMaxPrice = stock.price;\\n      }\\n      if (stock.previousPrice === -1) {\\n        stock.previousPrice = stock.price;\\n      }\\n      if (stock.forecast >= 0.6 && stock.longShares === 0) {\\n        const money = getPercentage(ns.getServerMoneyAvailable(\\\"home\\\")) * ns.getServerMoneyAvailable(\\\"home\\\");\\n        const numShares = Math.min(Math.round(money / stock.bidPrice), stock.maxShares);\\n        const buyPrice = s.buyStock(stock.symbol, numShares);\\n        stock.longPrice = buyPrice;\\n        stock.longShares = numShares;\\n        ns.print(Colors.E_ORANGE + \\\"buying \\\" + numShares + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + buyPrice);\\n        logPositions(ns, stock, true);\\n      }\\n      if (stock.longShares > 0 && stock.forecast <= 0.5) {\\n        const sellPrice = s.sellStock(stock.symbol, stock.longShares);\\n        const profit = sellPrice * stock.longShares - stock.longPrice * stock.longShares - 2 * COMMISSION_FEE;\\n        stock.longShares = 0;\\n        stock.longPrice = 0;\\n        totalProfit += profit;\\n        ns.print(Colors.E_ORANGE + \\\"selling \\\" + stock.symbol + \\\" for \\\" + profit);\\n        logPositions(ns, stock, false, profit);\\n      }\\n      const color2 = stock.longShares > 0 ? Colors.E_ORANGE : \\\"\\\";\\n      const arrow = stock.price > stock.previousPrice ? \\\"↗\\\" : stock.price < stock.previousPrice ? \\\"↘\\\" : \\\"→\\\";\\n      ns.print(\\n        color2 + `${stock.symbol}:\\t${ns.formatNumber(stock.price)} (min: ${ns.formatNumber(\\n          stock.observedMinPrice\\n        )}, max: ${ns.formatNumber(stock.observedMaxPrice)})\\tforecast: ${ns.formatNumber(\\n          stock.forecast\\n        )} ${arrow}`\\n      );\\n      stock.previousPrice = stock.price;\\n      initialStocks = stocks;\\n    }\\n    const color = totalProfit < 0 ? Colors.RED : Colors.GREEN;\\n    ns.print(color + \\\"Total profit: \\\" + ns.formatNumber(totalProfit));\\n    saveMarket(ns, stocks);\\n    await s.nextUpdate();\\n    ns.print(\\\"\\\\n\\\");\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuaW50ZXJmYWNlIFN0b2NrIHtcclxuICAgIHN5bWJvbDogc3RyaW5nO1xyXG4gICAgb3JnYW5pemF0aW9uOiBzdHJpbmc7XHJcbiAgICBvYnNlcnZlZE1pblByaWNlOiBudW1iZXI7XHJcbiAgICBvYnNlcnZlZE1heFByaWNlOiBudW1iZXI7XHJcbiAgICBsb25nU2hhcmVzOiBudW1iZXI7XHJcbiAgICBsb25nUHJpY2U6IG51bWJlcjtcclxuICAgIHNob3J0U2hhcmVzOiBudW1iZXI7XHJcbiAgICBzaG9ydFByaWNlOiBudW1iZXI7XHJcbiAgICBiaWRQcmljZTogbnVtYmVyO1xyXG4gICAgYXNrUHJpY2U6IG51bWJlcjtcclxuICAgIHByaWNlOiBudW1iZXI7XHJcbiAgICBwcmV2aW91c1ByaWNlOiBudW1iZXI7XHJcbiAgICBmb3JlY2FzdDogbnVtYmVyO1xyXG4gICAgdm9sYXRpbGl0eTogbnVtYmVyO1xyXG4gICAgbWF4U2hhcmVzOiBudW1iZXI7XHJcbiAgICBwcm9maXQ6IG51bWJlcjtcclxuICAgIGNvc3Q6IG51bWJlcjtcclxuICAgIHByb2ZpdFBvdGVudGlhbDogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBDT01NSVNTSU9OX0ZFRSA9IDEwMF8wMDA7XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxTdG9ja3MobnM6IE5TKTogU3RvY2tbXSB7XHJcbiAgICBjb25zdCBzdG9ja3M6IFN0b2NrW10gPSBbXTtcclxuICAgIGNvbnN0IHN5bWJvbHMgPSBucy5zdG9jay5nZXRTeW1ib2xzKCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBzeW1ib2wgb2Ygc3ltYm9scykge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbnMuc3RvY2suZ2V0UG9zaXRpb24oc3ltYm9sKTtcclxuICAgICAgICBjb25zdCBzdG9jazogU3RvY2sgPSB7XHJcbiAgICAgICAgICAgIHN5bWJvbDogc3ltYm9sLFxyXG4gICAgICAgICAgICBvcmdhbml6YXRpb246IG5zLnN0b2NrLmdldE9yZ2FuaXphdGlvbihzeW1ib2wpLFxyXG4gICAgICAgICAgICBvYnNlcnZlZE1pblByaWNlOiAtMSxcclxuICAgICAgICAgICAgb2JzZXJ2ZWRNYXhQcmljZTogLTEsXHJcbiAgICAgICAgICAgIGxvbmdTaGFyZXM6IHBvc2l0aW9uWzBdLFxyXG4gICAgICAgICAgICBsb25nUHJpY2U6IHBvc2l0aW9uWzFdLFxyXG4gICAgICAgICAgICBzaG9ydFNoYXJlczogcG9zaXRpb25bMl0sXHJcbiAgICAgICAgICAgIHNob3J0UHJpY2U6IHBvc2l0aW9uWzNdLFxyXG4gICAgICAgICAgICBiaWRQcmljZTogbnMuc3RvY2suZ2V0QmlkUHJpY2Uoc3ltYm9sKSxcclxuICAgICAgICAgICAgYXNrUHJpY2U6IG5zLnN0b2NrLmdldEFza1ByaWNlKHN5bWJvbCksXHJcbiAgICAgICAgICAgIHByaWNlOiBucy5zdG9jay5nZXRQcmljZShzeW1ib2wpLFxyXG4gICAgICAgICAgICBwcmV2aW91c1ByaWNlOiAtMSxcclxuICAgICAgICAgICAgZm9yZWNhc3Q6IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN5bWJvbCksXHJcbiAgICAgICAgICAgIHZvbGF0aWxpdHk6IG5zLnN0b2NrLmdldFZvbGF0aWxpdHkoc3ltYm9sKSxcclxuICAgICAgICAgICAgbWF4U2hhcmVzOiBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3ltYm9sKSxcclxuICAgICAgICAgICAgcHJvZml0OiAtMSxcclxuICAgICAgICAgICAgY29zdDogLTEsXHJcbiAgICAgICAgICAgIHByb2ZpdFBvdGVudGlhbDogLTEsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3RvY2sucHJvZml0ID0gc3RvY2subG9uZ1NoYXJlcyAqIChzdG9jay5iaWRQcmljZSAtIHN0b2NrLmxvbmdQcmljZSkgLSAyICogQ09NTUlTU0lPTl9GRUU7XHJcbiAgICAgICAgc3RvY2suY29zdCA9IHN0b2NrLmxvbmdTaGFyZXMgKiBzdG9jay5sb25nUHJpY2UgKyBzdG9jay5zaG9ydFNoYXJlcyAqIHN0b2NrLnNob3J0UHJpY2U7XHJcbiAgICAgICAgc3RvY2sucHJvZml0UG90ZW50aWFsID0gMiAqIE1hdGguYWJzKHN0b2NrLmZvcmVjYXN0IC0gMC41KSAqIHN0b2NrLnZvbGF0aWxpdHk7XHJcblxyXG4gICAgICAgIHN0b2Nrcy5wdXNoKHN0b2NrKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RvY2tzO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTdG9ja3MobnM6IE5TLCBzdG9ja3M6IFN0b2NrW10pIHtcclxuICAgIGZvciAoY29uc3Qgc3RvY2sgb2Ygc3RvY2tzKSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBucy5zdG9jay5nZXRQb3NpdGlvbihzdG9jay5zeW1ib2wpO1xyXG4gICAgICAgIHN0b2NrLmxvbmdTaGFyZXMgPSBwb3NpdGlvblswXTtcclxuICAgICAgICBzdG9jay5sb25nUHJpY2UgPSBwb3NpdGlvblsxXTtcclxuICAgICAgICBzdG9jay5zaG9ydFNoYXJlcyA9IHBvc2l0aW9uWzJdO1xyXG4gICAgICAgIHN0b2NrLnNob3J0UHJpY2UgPSBwb3NpdGlvblszXTtcclxuICAgICAgICBzdG9jay5iaWRQcmljZSA9IG5zLnN0b2NrLmdldEJpZFByaWNlKHN0b2NrLnN5bWJvbCk7XHJcbiAgICAgICAgc3RvY2suYXNrUHJpY2UgPSBucy5zdG9jay5nZXRBc2tQcmljZShzdG9jay5zeW1ib2wpO1xyXG4gICAgICAgIHN0b2NrLnByaWNlID0gbnMuc3RvY2suZ2V0UHJpY2Uoc3RvY2suc3ltYm9sKTtcclxuICAgICAgICBzdG9jay5mb3JlY2FzdCA9IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN0b2NrLnN5bWJvbCk7XHJcbiAgICAgICAgc3RvY2sudm9sYXRpbGl0eSA9IG5zLnN0b2NrLmdldFZvbGF0aWxpdHkoc3RvY2suc3ltYm9sKTtcclxuICAgICAgICBzdG9jay5tYXhTaGFyZXMgPSBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3RvY2suc3ltYm9sKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RvY2tzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlTWFya2V0KG5zOiBOUywgc3RvY2tzOiBTdG9ja1tdKSB7XHJcbiAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShzdG9ja3MpO1xyXG4gICAgbnMud3JpdGUoXCJTdG9jay9tYXJrZXQudHh0XCIsIHN0ciwgXCJ3XCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTWFya2V0KG5zOiBOUyk6IFN0b2NrW10ge1xyXG4gICAgY29uc3Qgc3RyID0gbnMucmVhZChcIlN0b2NrL21hcmtldC50eHRcIik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UGVyY2VudGFnZShtb25leTogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gMSAvICgxICsgTWF0aC5leHAoMC4wMDAwMDAwMDA1ICogbW9uZXkpKSArIDAuMTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9nUG9zaXRpb25zKG5zOiBOUywgc3RvY2s6IFN0b2NrLCBpc0J1eTogYm9vbGVhbiwgcHJvZml0ID0gMCkge1xyXG4gICAgaWYgKGlzQnV5KVxyXG4gICAgICAgIG5zLndyaXRlKFxyXG4gICAgICAgICAgICBcIlN0b2NrL2xvZy50eHRcIixcclxuICAgICAgICAgICAgXCJidXlpbmcgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKHN0b2NrLmxvbmdTaGFyZXMpICtcclxuICAgICAgICAgICAgICAgIFwiIHNoYXJlcyBvZiBcIiArXHJcbiAgICAgICAgICAgICAgICBzdG9jay5zeW1ib2wgK1xyXG4gICAgICAgICAgICAgICAgXCIgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihzdG9jay5sb25nUHJpY2UgKiBzdG9jay5sb25nU2hhcmVzKSArXHJcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxyXG4gICAgICAgICAgICBcImFcIixcclxuICAgICAgICApO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIG5zLndyaXRlKFxyXG4gICAgICAgICAgICBcIlN0b2NrL2xvZy50eHRcIixcclxuICAgICAgICAgICAgXCJzZWxsaW5nIFwiICtcclxuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihzdG9jay5sb25nU2hhcmVzKSArXHJcbiAgICAgICAgICAgICAgICBcIiBzaGFyZXMgb2YgXCIgK1xyXG4gICAgICAgICAgICAgICAgc3RvY2suc3ltYm9sICtcclxuICAgICAgICAgICAgICAgIFwiIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIocHJvZml0KSArXHJcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxyXG4gICAgICAgICAgICBcImFcIixcclxuICAgICAgICApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnByaW50KFwiYXNkXCIpO1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIGNvbnN0IHMgPSBucy5zdG9jaztcclxuXHJcbiAgICBsZXQgaW5pdGlhbFN0b2NrczogU3RvY2tbXSA9IGdldEFsbFN0b2Nrcyhucyk7XHJcblxyXG4gICAgbnMucHJpbnQoaW5pdGlhbFN0b2Nrcy5sZW5ndGgpO1xyXG5cclxuICAgIGxldCB0b3RhbFByb2ZpdCA9IDA7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIG5zLmNsZWFyTG9nKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b2NrczogU3RvY2tbXSA9IHVwZGF0ZVN0b2NrcyhucywgaW5pdGlhbFN0b2Nrcyk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc3RvY2sgb2Ygc3RvY2tzKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9jay5vYnNlcnZlZE1pblByaWNlID09PSAtMSB8fCBzdG9jay5wcmljZSA8IHN0b2NrLm9ic2VydmVkTWluUHJpY2UpIHtcclxuICAgICAgICAgICAgICAgIHN0b2NrLm9ic2VydmVkTWluUHJpY2UgPSBzdG9jay5wcmljZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RvY2sub2JzZXJ2ZWRNYXhQcmljZSA9PT0gLTEgfHwgc3RvY2sucHJpY2UgPiBzdG9jay5vYnNlcnZlZE1heFByaWNlKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5vYnNlcnZlZE1heFByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0b2NrLnByZXZpb3VzUHJpY2UgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5wcmV2aW91c1ByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGJ1eSBsb25nIHN0b2NrXHJcbiAgICAgICAgICAgIGlmIChzdG9jay5mb3JlY2FzdCA+PSAwLjYgJiYgc3RvY2subG9uZ1NoYXJlcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9uZXkgPSBnZXRQZXJjZW50YWdlKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSkgKiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1TaGFyZXMgPSBNYXRoLm1pbihNYXRoLnJvdW5kKG1vbmV5IC8gc3RvY2suYmlkUHJpY2UpLCBzdG9jay5tYXhTaGFyZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1eVByaWNlID0gcy5idXlTdG9jayhzdG9jay5zeW1ib2wsIG51bVNoYXJlcyk7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5sb25nUHJpY2UgPSBidXlQcmljZTtcclxuICAgICAgICAgICAgICAgIHN0b2NrLmxvbmdTaGFyZXMgPSBudW1TaGFyZXM7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuRV9PUkFOR0UgKyBcImJ1eWluZyBcIiArIG51bVNoYXJlcyArIFwiIHNoYXJlcyBvZiBcIiArIHN0b2NrLnN5bWJvbCArIFwiIGZvciBcIiArIGJ1eVByaWNlKTtcclxuICAgICAgICAgICAgICAgIGxvZ1Bvc2l0aW9ucyhucywgc3RvY2ssIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNlbGwgbG9uZyBzdG9ja1xyXG4gICAgICAgICAgICBpZiAoc3RvY2subG9uZ1NoYXJlcyA+IDAgJiYgc3RvY2suZm9yZWNhc3QgPD0gMC41KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxsUHJpY2UgPSBzLnNlbGxTdG9jayhzdG9jay5zeW1ib2wsIHN0b2NrLmxvbmdTaGFyZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZml0ID0gc2VsbFByaWNlICogc3RvY2subG9uZ1NoYXJlcyAtIHN0b2NrLmxvbmdQcmljZSAqIHN0b2NrLmxvbmdTaGFyZXMgLSAyICogQ09NTUlTU0lPTl9GRUU7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5sb25nU2hhcmVzID0gMDtcclxuICAgICAgICAgICAgICAgIHN0b2NrLmxvbmdQcmljZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFByb2ZpdCArPSBwcm9maXQ7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuRV9PUkFOR0UgKyBcInNlbGxpbmcgXCIgKyBzdG9jay5zeW1ib2wgKyBcIiBmb3IgXCIgKyBwcm9maXQpO1xyXG4gICAgICAgICAgICAgICAgbG9nUG9zaXRpb25zKG5zLCBzdG9jaywgZmFsc2UsIHByb2ZpdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gc3RvY2subG9uZ1NoYXJlcyA+IDAgPyBDb2xvcnMuRV9PUkFOR0UgOiBcIlwiO1xyXG4gICAgICAgICAgICBjb25zdCBhcnJvdyA9IHN0b2NrLnByaWNlID4gc3RvY2sucHJldmlvdXNQcmljZSA/IFwi4oaXXCIgOiBzdG9jay5wcmljZSA8IHN0b2NrLnByZXZpb3VzUHJpY2UgPyBcIuKGmFwiIDogXCLihpJcIjtcclxuXHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgY29sb3IgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAke3N0b2NrLnN5bWJvbH06XFx0JHtucy5mb3JtYXROdW1iZXIoc3RvY2sucHJpY2UpfSAobWluOiAke25zLmZvcm1hdE51bWJlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvY2sub2JzZXJ2ZWRNaW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICApfSwgbWF4OiAke25zLmZvcm1hdE51bWJlcihzdG9jay5vYnNlcnZlZE1heFByaWNlKX0pXFx0Zm9yZWNhc3Q6ICR7bnMuZm9ybWF0TnVtYmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9jay5mb3JlY2FzdCxcclxuICAgICAgICAgICAgICAgICAgICApfSAke2Fycm93fWAsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdG9jay5wcmV2aW91c1ByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdG9ja3MgPSBzdG9ja3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gdG90YWxQcm9maXQgPCAwID8gQ29sb3JzLlJFRCA6IENvbG9ycy5HUkVFTjtcclxuICAgICAgICBucy5wcmludChjb2xvciArIFwiVG90YWwgcHJvZml0OiBcIiArIG5zLmZvcm1hdE51bWJlcih0b3RhbFByb2ZpdCkpO1xyXG5cclxuICAgICAgICBzYXZlTWFya2V0KG5zLCBzdG9ja3MpO1xyXG4gICAgICAgIGF3YWl0IHMubmV4dFVwZGF0ZSgpO1xyXG4gICAgICAgIG5zLnByaW50KFwiXFxuXCIpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBd0J2QixNQUFNLGlCQUFpQjtBQUV2QixTQUFTLGFBQWEsSUFBaUI7QUFDbkMsUUFBTSxTQUFrQixDQUFDO0FBQ3pCLFFBQU0sVUFBVSxHQUFHLE1BQU0sV0FBVztBQUVwQyxhQUFXLFVBQVUsU0FBUztBQUMxQixVQUFNLFdBQVcsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUM1QyxVQUFNLFFBQWU7QUFBQSxNQUNqQjtBQUFBLE1BQ0EsY0FBYyxHQUFHLE1BQU0sZ0JBQWdCLE1BQU07QUFBQSxNQUM3QyxrQkFBa0I7QUFBQSxNQUNsQixrQkFBa0I7QUFBQSxNQUNsQixZQUFZLFNBQVMsQ0FBQztBQUFBLE1BQ3RCLFdBQVcsU0FBUyxDQUFDO0FBQUEsTUFDckIsYUFBYSxTQUFTLENBQUM7QUFBQSxNQUN2QixZQUFZLFNBQVMsQ0FBQztBQUFBLE1BQ3RCLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLE9BQU8sR0FBRyxNQUFNLFNBQVMsTUFBTTtBQUFBLE1BQy9CLGVBQWU7QUFBQSxNQUNmLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLFlBQVksR0FBRyxNQUFNLGNBQWMsTUFBTTtBQUFBLE1BQ3pDLFdBQVcsR0FBRyxNQUFNLGFBQWEsTUFBTTtBQUFBLE1BQ3ZDLFFBQVE7QUFBQSxNQUNSLE1BQU07QUFBQSxNQUNOLGlCQUFpQjtBQUFBLElBQ3JCO0FBRUEsVUFBTSxTQUFTLE1BQU0sY0FBYyxNQUFNLFdBQVcsTUFBTSxhQUFhLElBQUk7QUFDM0UsVUFBTSxPQUFPLE1BQU0sYUFBYSxNQUFNLFlBQVksTUFBTSxjQUFjLE1BQU07QUFDNUUsVUFBTSxrQkFBa0IsSUFBSSxLQUFLLElBQUksTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNO0FBRW5FLFdBQU8sS0FBSyxLQUFLO0FBQUEsRUFDckI7QUFFQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLGFBQWEsSUFBUSxRQUFpQjtBQUMzQyxhQUFXLFNBQVMsUUFBUTtBQUN4QixVQUFNLFdBQVcsR0FBRyxNQUFNLFlBQVksTUFBTSxNQUFNO0FBQ2xELFVBQU0sYUFBYSxTQUFTLENBQUM7QUFDN0IsVUFBTSxZQUFZLFNBQVMsQ0FBQztBQUM1QixVQUFNLGNBQWMsU0FBUyxDQUFDO0FBQzlCLFVBQU0sYUFBYSxTQUFTLENBQUM7QUFDN0IsVUFBTSxXQUFXLEdBQUcsTUFBTSxZQUFZLE1BQU0sTUFBTTtBQUNsRCxVQUFNLFdBQVcsR0FBRyxNQUFNLFlBQVksTUFBTSxNQUFNO0FBQ2xELFVBQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxNQUFNLE1BQU07QUFDNUMsVUFBTSxXQUFXLEdBQUcsTUFBTSxZQUFZLE1BQU0sTUFBTTtBQUNsRCxVQUFNLGFBQWEsR0FBRyxNQUFNLGNBQWMsTUFBTSxNQUFNO0FBQ3RELFVBQU0sWUFBWSxHQUFHLE1BQU0sYUFBYSxNQUFNLE1BQU07QUFBQSxFQUN4RDtBQUVBLFNBQU87QUFDWDtBQUVBLFNBQVMsV0FBVyxJQUFRLFFBQWlCO0FBQ3pDLFFBQU0sTUFBTSxLQUFLLFVBQVUsTUFBTTtBQUNqQyxLQUFHLE1BQU0sb0JBQW9CLEtBQUssR0FBRztBQUN6QztBQUVBLFNBQVMsV0FBVyxJQUFpQjtBQUNqQyxRQUFNLE1BQU0sR0FBRyxLQUFLLGtCQUFrQjtBQUN0QyxNQUFJO0FBQ0EsVUFBTSxPQUFPLEtBQUssTUFBTSxHQUFHO0FBQzNCLFdBQU87QUFBQSxFQUNYLFNBQVMsT0FBTztBQUNaLFdBQU8sQ0FBQztBQUFBLEVBQ1o7QUFDSjtBQUVBLFNBQVMsY0FBYyxPQUFlO0FBQ2xDLFNBQU8sS0FBSyxJQUFJLEtBQUssSUFBSSxRQUFlLEtBQUssS0FBSztBQUN0RDtBQUVBLFNBQVMsYUFBYSxJQUFRLE9BQWMsT0FBZ0IsU0FBUyxHQUFHO0FBQ3BFLE1BQUk7QUFDQSxPQUFHO0FBQUEsTUFDQztBQUFBLE1BQ0EsWUFDSSxHQUFHLGFBQWEsTUFBTSxVQUFVLElBQ2hDLGdCQUNBLE1BQU0sU0FDTixVQUNBLEdBQUcsYUFBYSxNQUFNLFlBQVksTUFBTSxVQUFVLElBQ2xEO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQTtBQUVBLE9BQUc7QUFBQSxNQUNDO0FBQUEsTUFDQSxhQUNJLEdBQUcsYUFBYSxNQUFNLFVBQVUsSUFDaEMsZ0JBQ0EsTUFBTSxTQUNOLFVBQ0EsR0FBRyxhQUFhLE1BQU0sSUFDdEI7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUNSO0FBRUEsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLE1BQU0sS0FBSztBQUNkLEtBQUcsS0FBSztBQUNSLEtBQUcsV0FBVyxLQUFLO0FBQ25CLFFBQU0sSUFBSSxHQUFHO0FBRWIsTUFBSSxnQkFBeUIsYUFBYSxFQUFFO0FBRTVDLEtBQUcsTUFBTSxjQUFjLE1BQU07QUFFN0IsTUFBSSxjQUFjO0FBQ2xCLFNBQU8sTUFBTTtBQUNULE9BQUcsU0FBUztBQUVaLFVBQU0sU0FBa0IsYUFBYSxJQUFJLGFBQWE7QUFFdEQsZUFBVyxTQUFTLFFBQVE7QUFDeEIsVUFBSSxNQUFNLHFCQUFxQixNQUFNLE1BQU0sUUFBUSxNQUFNLGtCQUFrQjtBQUN2RSxjQUFNLG1CQUFtQixNQUFNO0FBQUEsTUFDbkM7QUFDQSxVQUFJLE1BQU0scUJBQXFCLE1BQU0sTUFBTSxRQUFRLE1BQU0sa0JBQWtCO0FBQ3ZFLGNBQU0sbUJBQW1CLE1BQU07QUFBQSxNQUNuQztBQUNBLFVBQUksTUFBTSxrQkFBa0IsSUFBSTtBQUM1QixjQUFNLGdCQUFnQixNQUFNO0FBQUEsTUFDaEM7QUFHQSxVQUFJLE1BQU0sWUFBWSxPQUFPLE1BQU0sZUFBZSxHQUFHO0FBQ2pELGNBQU0sUUFBUSxjQUFjLEdBQUcsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsd0JBQXdCLE1BQU07QUFDbkcsY0FBTSxZQUFZLEtBQUssSUFBSSxLQUFLLE1BQU0sUUFBUSxNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVM7QUFFOUUsY0FBTSxXQUFXLEVBQUUsU0FBUyxNQUFNLFFBQVEsU0FBUztBQUNuRCxjQUFNLFlBQVk7QUFDbEIsY0FBTSxhQUFhO0FBQ25CLFdBQUcsTUFBTSxPQUFPLFdBQVcsWUFBWSxZQUFZLGdCQUFnQixNQUFNLFNBQVMsVUFBVSxRQUFRO0FBQ3BHLHFCQUFhLElBQUksT0FBTyxJQUFJO0FBQUEsTUFDaEM7QUFFQSxVQUFJLE1BQU0sYUFBYSxLQUFLLE1BQU0sWUFBWSxLQUFLO0FBQy9DLGNBQU0sWUFBWSxFQUFFLFVBQVUsTUFBTSxRQUFRLE1BQU0sVUFBVTtBQUM1RCxjQUFNLFNBQVMsWUFBWSxNQUFNLGFBQWEsTUFBTSxZQUFZLE1BQU0sYUFBYSxJQUFJO0FBQ3ZGLGNBQU0sYUFBYTtBQUNuQixjQUFNLFlBQVk7QUFDbEIsdUJBQWU7QUFDZixXQUFHLE1BQU0sT0FBTyxXQUFXLGFBQWEsTUFBTSxTQUFTLFVBQVUsTUFBTTtBQUN2RSxxQkFBYSxJQUFJLE9BQU8sT0FBTyxNQUFNO0FBQUEsTUFDekM7QUFFQSxZQUFNQSxTQUFRLE1BQU0sYUFBYSxJQUFJLE9BQU8sV0FBVztBQUN2RCxZQUFNLFFBQVEsTUFBTSxRQUFRLE1BQU0sZ0JBQWdCLE1BQU0sTUFBTSxRQUFRLE1BQU0sZ0JBQWdCLE1BQU07QUFFbEcsU0FBRztBQUFBLFFBQ0NBLFNBQ0ksR0FBRyxNQUFNLE1BQU0sS0FBTSxHQUFHLGFBQWEsTUFBTSxLQUFLLENBQUMsVUFBVSxHQUFHO0FBQUEsVUFDMUQsTUFBTTtBQUFBLFFBQ1YsQ0FBQyxVQUFVLEdBQUcsYUFBYSxNQUFNLGdCQUFnQixDQUFDLGVBQWdCLEdBQUc7QUFBQSxVQUNqRSxNQUFNO0FBQUEsUUFDVixDQUFDLElBQUksS0FBSztBQUFBLE1BQ2xCO0FBRUEsWUFBTSxnQkFBZ0IsTUFBTTtBQUM1QixzQkFBZ0I7QUFBQSxJQUNwQjtBQUNBLFVBQU0sUUFBUSxjQUFjLElBQUksT0FBTyxNQUFNLE9BQU87QUFDcEQsT0FBRyxNQUFNLFFBQVEsbUJBQW1CLEdBQUcsYUFBYSxXQUFXLENBQUM7QUFFaEUsZUFBVyxJQUFJLE1BQU07QUFDckIsVUFBTSxFQUFFLFdBQVc7QUFDbkIsT0FBRyxNQUFNLElBQUk7QUFBQSxFQUNqQjtBQUNKOyIsIm5hbWVzIjpbImNvbG9yIl19\",\"filename\":\"Stock/manager.js\",\"server\":\"home\"}}],[\"HacknetNodes/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const EXPECTED_TURNOVER_TIME = 1e3 * 60 * 60 * 2;\\nexport async function main(ns) {\\n  const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\n  const stats = ns.hacknet.getNodeStats(0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5jb25zdCBFWFBFQ1RFRF9UVVJOT1ZFUl9USU1FID0gMTAwMCAqIDYwICogNjAgKiAyOyAvLyAyIGhvdXJzXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGNvbnN0IHB1cmNoYXNlQ29zdCA9IG5zLmhhY2tuZXQuZ2V0UHVyY2hhc2VOb2RlQ29zdCgpO1xyXG4gICAgY29uc3Qgc3RhdHMgPSBucy5oYWNrbmV0LmdldE5vZGVTdGF0cygwKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0seUJBQXlCLE1BQU8sS0FBSyxLQUFLO0FBRWhELHNCQUFzQixLQUFLLElBQVE7QUFDL0IsUUFBTSxlQUFlLEdBQUcsUUFBUSxvQkFBb0I7QUFDcEQsUUFBTSxRQUFRLEdBQUcsUUFBUSxhQUFhLENBQUM7QUFDM0M7IiwibmFtZXMiOltdfQ==\",\"filename\":\"HacknetNodes/manager.js\",\"server\":\"home\"}}],[\"CodingContracts/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, serverScanner } from \\\"/lib.js\\\";\\nexport async function main(ns2) {\\n  ns2.tail();\\n  ns2.disableLog(\\\"ALL\\\");\\n  const cc = ns2.codingcontract;\\n  const allServers = serverScanner(ns2);\\n  for (const server2 of allServers) {\\n    const contracts = ns2.ls(server2).filter((p) => p.includes(\\\"cct\\\"));\\n    if (contracts.length === 0)\\n      continue;\\n    ns2.print(`server ${server2} has ${contracts.length} contracts`);\\n    for (const contract2 of contracts) {\\n      const contractType = cc.getContractType(contract2, server2);\\n      ns2.print(`contract ${contract2} is of type ${contractType}`);\\n      let result;\\n      switch (contractType) {\\n        case \\\"Find Largest Prime Factor\\\":\\n          break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n          result = subarraywithMaximumSum(ns2, contract2, server2);\\n          break;\\n        case \\\"Total Ways to Sum\\\":\\n          result = totalWaysToSum(ns2, contract2, server2);\\n          break;\\n        case \\\"Total Ways to Sum II\\\":\\n          result = totalWaysToSumII(ns2, contract2, server2);\\n          break;\\n        case \\\"Spiralize Matrix\\\":\\n          break;\\n        case \\\"Array Jumping Game\\\":\\n          break;\\n        case \\\"Array Jumping Game II\\\":\\n          break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n          break;\\n        case \\\"Generate IP Addresses\\\":\\n          break;\\n        case \\\"Algorithmic Stock Trader I\\\":\\n          break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n          result = algorithmicStockTraderII(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n          result = algorithmicStockTraderIII(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n          result = algorithmicStockTraderIV(ns2, contract2, server2);\\n          break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n          result = minimumPathSumInATriangle(ns2, contract2, server2);\\n          break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n          result = uniquePathsInAGridI(ns2, contract2, server2);\\n          break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n          result = uniquePathsInAGridII(ns2, contract2, server2);\\n          break;\\n        case \\\"Shortest Path in a Grid\\\":\\n          result = findShortestPath(ns2, contract2, server2);\\n          break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n          break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n          result = findAllValidMathExpressions(ns2, contract2, server2);\\n          break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n          break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n          break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n          break;\\n        case \\\"Compression I: RLE Compression\\\":\\n          break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n          break;\\n        case \\\"Compression III: LZ Compression\\\":\\n          break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n          break;\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\n          break;\\n        default:\\n          throw new Error(\\\"unknown contract type: \\\" + contractType);\\n      }\\n      if (result === void 0)\\n        continue;\\n      const success = ns2.codingcontract.attempt(result, contract2, server2);\\n      if (success === \\\"\\\") {\\n        ns2.tprint(Colors.RED + `failed to solve contract ${contract2} on server ${server2}`);\\n        throw new Error(\\\"failed to solve contract\\\");\\n      }\\n      ns2.print(Colors.GREEN + success);\\n    }\\n  }\\n}\\nexport function findShortestPath(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (data2.length === 0 || data2[0][0] === 1 || data2[data2.length - 1][data2[0].length - 1] === 1) {\\n    ns2.print(\\\"no solution found\\\");\\n    return;\\n  }\\n  const visited = Array.from({ length: data2.length }, () => Array(data2[0].length).fill(false));\\n  const moves = [\\\"\\\"];\\n  const min = { length: Number.MAX_SAFE_INTEGER };\\n  const currentPath = [];\\n  const startX = 0;\\n  const startY = 0;\\n  const endX = data2.length - 1;\\n  const endY = data2[0].length - 1;\\n  const directions = {\\n    R: [0, 1],\\n    L: [0, -1],\\n    D: [1, 0],\\n    U: [-1, 0]\\n  };\\n  function findPath(grid, visited2, i2, j, x, y, moves2, min2, currentPath2, directions2) {\\n    if (i2 == x && j == y) {\\n      if (currentPath2.length < min2.length) {\\n        min2.length = currentPath2.length;\\n        moves2[0] = currentPath2.join(\\\"\\\");\\n      }\\n      return;\\n    }\\n    visited2[i2][j] = true;\\n    for (const dir in directions2) {\\n      const [row, col] = directions2[dir];\\n      if (isValid(grid, visited2, i2 + row, j + col)) {\\n        currentPath2.push(dir);\\n        findPath(grid, visited2, i2 + row, j + col, x, y, moves2, min2, currentPath2, directions2);\\n        currentPath2.pop();\\n      }\\n    }\\n    visited2[i2][j] = false;\\n  }\\n  function isValid(grid, visited2, row, col) {\\n    return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && !visited2[row][col] && !grid[row][col];\\n  }\\n  findPath(data2, visited, startX, startY, endX, endY, moves, min, currentPath, directions);\\n  return moves[0];\\n}\\nexport function totalWaysToSum(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"number\\\" || data2 < 1) {\\n    ns2.tprint(Colors.RED + \\\"invalid data for contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  function sumCombinations(target, current = [], start = 1, result = []) {\\n    if (target === 0) {\\n      result.push(current.slice());\\n      return;\\n    }\\n    for (let i2 = start; i2 <= target; i2++) {\\n      current.push(i2);\\n      sumCombinations(target - i2, current, i2, result);\\n      current.pop();\\n    }\\n    return result;\\n  }\\n  const res = sumCombinations(data2)?.filter((arr) => arr.length !== 1).length;\\n  if (res === void 0) {\\n    ns2.tprint(Colors.RED + \\\"failed to solve contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  return res;\\n}\\nfunction totalWaysToSumII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const target = data2[0];\\n  const nums = data2[1];\\n  const dp = Array(target + 1).fill(0);\\n  dp[0] = 1;\\n  for (const number of nums) {\\n    for (let i2 = number; i2 < target + 1; i2++) {\\n      dp[i2] += dp[i2 - number];\\n    }\\n  }\\n  const res = dp[target];\\n  if (res === void 0) {\\n    ns2.tprint(Colors.RED + \\\"failed to solve contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  return res;\\n}\\nfunction findAllValidMathExpressions(ns, contract, server) {\\n  const data = ns.codingcontract.getData(contract, server);\\n  function opStr(mu, len) {\\n    const ops2 = [\\\"\\\", \\\"-\\\", \\\"+\\\", \\\"*\\\"];\\n    const s = [];\\n    while (mu >= 4) {\\n      s.push(ops2[mu % 4]);\\n      mu -= mu % 4;\\n      mu /= 4;\\n    }\\n    s.push(ops2[mu]);\\n    while (s.length < len) {\\n      s.push(ops2[0]);\\n    }\\n    return s;\\n  }\\n  const answers = [];\\n  const digits = data[0];\\n  const assertion = data[1];\\n  const permutations = Math.pow(4, digits.length - 1);\\n  for (let i = 0; i < permutations; i++) {\\n    const ops = opStr(i, digits.length - 1);\\n    let expr = \\\"\\\";\\n    for (let j = 0; j < ops.length; j++) {\\n      expr += digits[j] + ops[j];\\n    }\\n    expr += digits[ops.length];\\n    try {\\n      if (eval(expr) == assertion) {\\n        answers.push(expr);\\n      }\\n    } catch (e) {\\n    }\\n  }\\n  return answers;\\n}\\nfunction algorithmicStockTraderII(ns2, contract2, server2) {\\n  const stockPrice = ns2.codingcontract.getData(contract2, server2);\\n  stockPrice.push(0);\\n  let profit = 0;\\n  for (let i2 = 0; i2 < stockPrice.length; i2++) {\\n    if (stockPrice[i2] < stockPrice[i2 + 1]) {\\n      profit += stockPrice[i2 + 1] - stockPrice[i2];\\n    }\\n  }\\n  profit = Math.max(profit, 0);\\n  return profit;\\n}\\nexport function algorithmicStockTraderIII(ns2, contract2, server2) {\\n  const stockPrice = ns2.codingcontract.getData(contract2, server2);\\n  let hold1 = Number.MIN_SAFE_INTEGER;\\n  let hold2 = Number.MIN_SAFE_INTEGER;\\n  let release1 = 0;\\n  let release2 = 0;\\n  for (const price of stockPrice) {\\n    release2 = Math.max(release2, hold2 + price);\\n    hold2 = Math.max(hold2, release1 - price);\\n    release1 = Math.max(release1, hold1 + price);\\n    hold1 = Math.max(hold1, price * -1);\\n  }\\n  return release2;\\n}\\nfunction algorithmicStockTraderIV(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const k = data2[0];\\n  const prices = data2[1];\\n  const len = prices.length;\\n  const hold = [];\\n  const rele = [];\\n  hold.length = k + 1;\\n  rele.length = k + 1;\\n  for (let i2 = 0; i2 <= k; ++i2) {\\n    hold[i2] = Number.MIN_SAFE_INTEGER;\\n    rele[i2] = 0;\\n  }\\n  let cur;\\n  for (let i2 = 0; i2 < len; ++i2) {\\n    cur = prices[i2];\\n    for (let j = k; j > 0; --j) {\\n      rele[j] = Math.max(rele[j], hold[j] + cur);\\n      hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\n    }\\n  }\\n  return rele[k];\\n}\\nfunction minimumPathSumInATriangle(ns2, contract2, server2) {\\n  const triangle = ns2.codingcontract.getData(contract2, server2);\\n  let pathSum = 0;\\n  pathSum += triangle[0][0];\\n  let currentCol = 0;\\n  for (let i2 = 0; i2 < triangle.length; i2++) {\\n    if (triangle[i2 + 1] === void 0)\\n      break;\\n    const possibleMoves = [triangle[i2 + 1][currentCol], triangle[i2 + 1][currentCol + 1]];\\n    if (possibleMoves[0] > possibleMoves[1])\\n      currentCol = currentCol + 1;\\n    const move = Math.min(...possibleMoves);\\n    pathSum += move;\\n  }\\n  return pathSum;\\n}\\nfunction subarraywithMaximumSum(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  let maxSum = -Infinity;\\n  let currentSum = 0;\\n  for (let i2 = 0; i2 < data2.length; i2++) {\\n    currentSum = Math.max(data2[i2], currentSum + data2[i2]);\\n    maxSum = Math.max(maxSum, currentSum);\\n  }\\n  return maxSum;\\n}\\nfunction uniquePathsInAGridI(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const n = data2[0];\\n  const m = data2[1];\\n  const currentRow = [];\\n  currentRow.length = n;\\n  for (let i2 = 0; i2 < n; i2++) {\\n    currentRow[i2] = 1;\\n  }\\n  for (let row = 1; row < m; row++) {\\n    for (let i2 = 1; i2 < n; i2++) {\\n      currentRow[i2] += currentRow[i2 - 1];\\n    }\\n  }\\n  return currentRow[n - 1];\\n}\\nfunction uniquePathsInAGridII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const obstacleGrid = [];\\n  obstacleGrid.length = data2.length;\\n  for (let i2 = 0; i2 < obstacleGrid.length; ++i2) {\\n    obstacleGrid[i2] = data2[i2].slice();\\n  }\\n  for (let i2 = 0; i2 < obstacleGrid.length; i2++) {\\n    for (let j = 0; j < obstacleGrid[0].length; j++) {\\n      if (obstacleGrid[i2][j] == 1) {\\n        obstacleGrid[i2][j] = 0;\\n      } else if (i2 == 0 && j == 0) {\\n        obstacleGrid[0][0] = 1;\\n      } else {\\n        obstacleGrid[i2][j] = (i2 > 0 ? obstacleGrid[i2 - 1][j] : 0) + (j > 0 ? obstacleGrid[i2][j - 1] : 0);\\n      }\\n    }\\n  }\\n  return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1];\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IENvbG9ycywgc2VydmVyU2Nhbm5lciB9IGZyb20gXCJAL2xpYlwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgY29uc3QgY2MgPSBucy5jb2Rpbmdjb250cmFjdDtcclxuXHJcbiAgICBjb25zdCBhbGxTZXJ2ZXJzID0gc2VydmVyU2Nhbm5lcihucyk7XHJcblxyXG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgYWxsU2VydmVycykge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyYWN0cyA9IG5zLmxzKHNlcnZlcikuZmlsdGVyKChwKSA9PiBwLmluY2x1ZGVzKFwiY2N0XCIpKTtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRyYWN0cy5sZW5ndGggPT09IDApIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBucy5wcmludChgc2VydmVyICR7c2VydmVyfSBoYXMgJHtjb250cmFjdHMubGVuZ3RofSBjb250cmFjdHNgKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cmFjdCBvZiBjb250cmFjdHMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJhY3RUeXBlID0gY2MuZ2V0Q29udHJhY3RUeXBlKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICBucy5wcmludChgY29udHJhY3QgJHtjb250cmFjdH0gaXMgb2YgdHlwZSAke2NvbnRyYWN0VHlwZX1gKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29udHJhY3RUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRmluZCBMYXJnZXN0IFByaW1lIEZhY3RvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlN1YmFycmF5IHdpdGggTWF4aW11bSBTdW1cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWJhcnJheXdpdGhNYXhpbXVtU3VtKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRvdGFsV2F5c1RvU3VtKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bSBJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRvdGFsV2F5c1RvU3VtSUkobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNwaXJhbGl6ZSBNYXRyaXhcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJheSBKdW1waW5nIEdhbWVcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJheSBKdW1waW5nIEdhbWUgSUlcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJNZXJnZSBPdmVybGFwcGluZyBJbnRlcnZhbHNcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJHZW5lcmF0ZSBJUCBBZGRyZXNzZXNcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBbGdvcml0aG1pYyBTdG9jayBUcmFkZXIgSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSUkobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFsZ29yaXRobWljIFN0b2NrIFRyYWRlciBJVlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFsZ29yaXRobWljU3RvY2tUcmFkZXJJVihucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTWluaW11bSBQYXRoIFN1bSBpbiBhIFRyaWFuZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbWluaW11bVBhdGhTdW1JbkFUcmlhbmdsZShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVW5pcXVlIFBhdGhzIGluIGEgR3JpZCBJXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdW5pcXVlUGF0aHNJbkFHcmlkSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVW5pcXVlIFBhdGhzIGluIGEgR3JpZCBJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHVuaXF1ZVBhdGhzSW5BR3JpZElJKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTaG9ydGVzdCBQYXRoIGluIGEgR3JpZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZpbmRTaG9ydGVzdFBhdGgobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNhbml0aXplIFBhcmVudGhlc2VzIGluIEV4cHJlc3Npb25cIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJGaW5kIEFsbCBWYWxpZCBNYXRoIEV4cHJlc3Npb25zXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIYW1taW5nQ29kZXM6IEludGVnZXIgdG8gRW5jb2RlZCBCaW5hcnlcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIYW1taW5nQ29kZXM6IEVuY29kZWQgQmluYXJ5IHRvIEludGVnZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJQcm9wZXIgMi1Db2xvcmluZyBvZiBhIEdyYXBoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ29tcHJlc3Npb24gSTogUkxFIENvbXByZXNzaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ29tcHJlc3Npb24gSUk6IExaIERlY29tcHJlc3Npb25cIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJDb21wcmVzc2lvbiBJSUk6IExaIENvbXByZXNzaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRW5jcnlwdGlvbiBJOiBDYWVzYXIgQ2lwaGVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRW5jcnlwdGlvbiBJSTogVmlnZW7DqHJlIENpcGhlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGNvbnRyYWN0IHR5cGU6IFwiICsgY29udHJhY3RUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBucy5jb2Rpbmdjb250cmFjdC5hdHRlbXB0KHJlc3VsdCwgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgIGlmIChzdWNjZXNzID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIGBmYWlsZWQgdG8gc29sdmUgY29udHJhY3QgJHtjb250cmFjdH0gb24gc2VydmVyICR7c2VydmVyfWApO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIHNvbHZlIGNvbnRyYWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBzdWNjZXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kU2hvcnRlc3RQYXRoKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGE6IG51bWJlcltdW10gPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCB8fCBkYXRhWzBdWzBdID09PSAxIHx8IGRhdGFbZGF0YS5sZW5ndGggLSAxXVtkYXRhWzBdLmxlbmd0aCAtIDFdID09PSAxKSB7XHJcbiAgICAgICAgbnMucHJpbnQoXCJubyBzb2x1dGlvbiBmb3VuZFwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdmlzaXRlZDogYm9vbGVhbltdW10gPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBkYXRhLmxlbmd0aCB9LCAoKSA9PiBBcnJheShkYXRhWzBdLmxlbmd0aCkuZmlsbChmYWxzZSkpO1xyXG4gICAgY29uc3QgbW92ZXM6IHN0cmluZ1tdID0gW1wiXCJdO1xyXG4gICAgY29uc3QgbWluID0geyBsZW5ndGg6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIH07XHJcbiAgICBjb25zdCBjdXJyZW50UGF0aDogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBjb25zdCBzdGFydFggPSAwO1xyXG4gICAgY29uc3Qgc3RhcnRZID0gMDtcclxuICAgIGNvbnN0IGVuZFggPSBkYXRhLmxlbmd0aCAtIDE7XHJcbiAgICBjb25zdCBlbmRZID0gZGF0YVswXS5sZW5ndGggLSAxO1xyXG5cclxuICAgIGNvbnN0IGRpcmVjdGlvbnMgPSB7XHJcbiAgICAgICAgUjogWzAsIDFdLFxyXG4gICAgICAgIEw6IFswLCAtMV0sXHJcbiAgICAgICAgRDogWzEsIDBdLFxyXG4gICAgICAgIFU6IFstMSwgMF0sXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGZpbmRQYXRoKFxyXG4gICAgICAgIGdyaWQ6IG51bWJlcltdW10sXHJcbiAgICAgICAgdmlzaXRlZDogYm9vbGVhbltdW10sXHJcbiAgICAgICAgaTogbnVtYmVyLFxyXG4gICAgICAgIGo6IG51bWJlcixcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyLFxyXG4gICAgICAgIG1vdmVzOiBzdHJpbmdbXSxcclxuICAgICAgICBtaW46IHsgbGVuZ3RoOiBudW1iZXIgfSxcclxuICAgICAgICBjdXJyZW50UGF0aDogc3RyaW5nW10sXHJcbiAgICAgICAgZGlyZWN0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyW10+LFxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKGkgPT0geCAmJiBqID09IHkpIHtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYXRoLmxlbmd0aCA8IG1pbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIG1pbi5sZW5ndGggPSBjdXJyZW50UGF0aC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBtb3Zlc1swXSA9IGN1cnJlbnRQYXRoLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmlzaXRlZFtpXVtqXSA9IHRydWU7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGlyIGluIGRpcmVjdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgW3JvdywgY29sXSA9IGRpcmVjdGlvbnNbZGlyXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKGdyaWQsIHZpc2l0ZWQsIGkgKyByb3csIGogKyBjb2wpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aC5wdXNoKGRpcik7XHJcbiAgICAgICAgICAgICAgICBmaW5kUGF0aChncmlkLCB2aXNpdGVkLCBpICsgcm93LCBqICsgY29sLCB4LCB5LCBtb3ZlcywgbWluLCBjdXJyZW50UGF0aCwgZGlyZWN0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aC5wb3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmlzaXRlZFtpXVtqXSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzVmFsaWQoZ3JpZDogbnVtYmVyW11bXSwgdmlzaXRlZDogYm9vbGVhbltdW10sIHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHJvdyA+PSAwICYmIHJvdyA8IGdyaWQubGVuZ3RoICYmIGNvbCA+PSAwICYmIGNvbCA8IGdyaWRbMF0ubGVuZ3RoICYmICF2aXNpdGVkW3Jvd11bY29sXSAmJiAhZ3JpZFtyb3ddW2NvbF1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRQYXRoKGRhdGEsIHZpc2l0ZWQsIHN0YXJ0WCwgc3RhcnRZLCBlbmRYLCBlbmRZLCBtb3ZlcywgbWluLCBjdXJyZW50UGF0aCwgZGlyZWN0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIG1vdmVzWzBdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG90YWxXYXlzVG9TdW0obnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YTogbnVtYmVyID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwibnVtYmVyXCIgfHwgZGF0YSA8IDEpIHtcclxuICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiaW52YWxpZCBkYXRhIGZvciBjb250cmFjdCBcIiArIGNvbnRyYWN0ICsgXCIgb24gc2VydmVyIFwiICsgc2VydmVyKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3VtQ29tYmluYXRpb25zKHRhcmdldDogbnVtYmVyLCBjdXJyZW50OiBudW1iZXJbXSA9IFtdLCBzdGFydCA9IDEsIHJlc3VsdDogbnVtYmVyW11bXSA9IFtdKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50LnNsaWNlKCkpOyAvLyBQdXNoIGEgY29weSBvZiB0aGUgY3VycmVudCBjb21iaW5hdGlvbiB0byB0aGUgcmVzdWx0XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSB0YXJnZXQ7IGkrKykge1xyXG4gICAgICAgICAgICBjdXJyZW50LnB1c2goaSk7XHJcbiAgICAgICAgICAgIHN1bUNvbWJpbmF0aW9ucyh0YXJnZXQgLSBpLCBjdXJyZW50LCBpLCByZXN1bHQpO1xyXG4gICAgICAgICAgICBjdXJyZW50LnBvcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZXMgPSBzdW1Db21iaW5hdGlvbnMoZGF0YSk/LmZpbHRlcigoYXJyKSA9PiBhcnIubGVuZ3RoICE9PSAxKS5sZW5ndGg7XHJcbiAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiZmFpbGVkIHRvIHNvbHZlIGNvbnRyYWN0IFwiICsgY29udHJhY3QgKyBcIiBvbiBzZXJ2ZXIgXCIgKyBzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvdGFsV2F5c1RvU3VtSUkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBjb25zdCB0YXJnZXQ6IG51bWJlciA9IGRhdGFbMF07XHJcbiAgICBjb25zdCBudW1zOiBudW1iZXJbXSA9IGRhdGFbMV07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAgSG93IG1hbnkgZGlmZmVyZW50IGRpc3RpbmN0IHdheXMgY2FuIHRoZSBudW1iZXIgNTggYmUgd3JpdHRlbiBhcyBhIHN1bSBvZiBpbnRlZ2VycyBjb250YWluZWQgaW4gdGhlIHNldDpcclxuXHJcbiAgICAgICAgWzIsNyw4LDksMTEsMTMsMTQsMTUsMTgsMTldP1xyXG5cclxuICAgICAgICBZb3UgbWF5IHVzZSBlYWNoIGludGVnZXIgaW4gdGhlIHNldCB6ZXJvIG9yIG1vcmUgdGltZXMuXHJcbiAgICAgKi9cclxuXHJcbiAgICBjb25zdCBkcCA9IEFycmF5KHRhcmdldCArIDEpLmZpbGwoMCk7XHJcbiAgICBkcFswXSA9IDE7XHJcblxyXG4gICAgZm9yIChjb25zdCBudW1iZXIgb2YgbnVtcykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBudW1iZXI7IGkgPCB0YXJnZXQgKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgZHBbaV0gKz0gZHBbaSAtIG51bWJlcl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcyA9IGRwW3RhcmdldF07XHJcbiAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiZmFpbGVkIHRvIHNvbHZlIGNvbnRyYWN0IFwiICsgY29udHJhY3QgKyBcIiBvbiBzZXJ2ZXIgXCIgKyBzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQWxsVmFsaWRNYXRoRXhwcmVzc2lvbnMobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gb3BTdHIobXU6IG51bWJlciwgbGVuOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBvcHMgPSBbXCJcIiwgXCItXCIsIFwiK1wiLCBcIipcIl07XHJcbiAgICAgICAgY29uc3Qgczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICB3aGlsZSAobXUgPj0gNCkge1xyXG4gICAgICAgICAgICBzLnB1c2gob3BzW211ICUgNF0pO1xyXG4gICAgICAgICAgICBtdSAtPSBtdSAlIDQ7XHJcbiAgICAgICAgICAgIG11IC89IDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMucHVzaChvcHNbbXVdKTtcclxuICAgICAgICB3aGlsZSAocy5sZW5ndGggPCBsZW4pIHtcclxuICAgICAgICAgICAgcy5wdXNoKG9wc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzO1xyXG4gICAgfVxyXG4gICAgLy8gW1wiMDEyMzQ1XCIsIE5dLCB3aGVyZSBOIGlzIHRoZSBhc3NlcnRpb25cclxuICAgIC8vIGVhY2ggZ2FwIGJldHdlZW4gdHdvIGRpZ2l0cyBjYW4gYmUgb25lIG9mIDQgdGhpbmdzIChibGFuaywgLSwgKywgKiksXHJcbiAgICAvLyBzbyB0aGVyZSBhcmUgNF5kIHBlcm11dGF0aW9ucywgd2hlcmUgZD1sZW5ndGgtMVxyXG4gICAgY29uc3QgYW5zd2VycyA9IFtdO1xyXG4gICAgY29uc3QgZGlnaXRzID0gZGF0YVswXTtcclxuICAgIGNvbnN0IGFzc2VydGlvbiA9IGRhdGFbMV07XHJcblxyXG4gICAgY29uc3QgcGVybXV0YXRpb25zID0gTWF0aC5wb3coNCwgZGlnaXRzLmxlbmd0aCAtIDEpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJtdXRhdGlvbnM7IGkrKykge1xyXG4gICAgICAgIC8vIHR1cm4gdGhlIHBlcm11dGF0aW9uIG51bWJlciBpbnRvIGEgbGlzdCBvZiBvcGVyYXRvcnNcclxuICAgICAgICBjb25zdCBvcHMgPSBvcFN0cihpLCBkaWdpdHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgLy8gaW50ZXJsZWF2ZSBkaWdpdHMgYW5kIG9wc1xyXG4gICAgICAgIGxldCBleHByID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9wcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBleHByICs9IGRpZ2l0c1tqXSArIG9wc1tqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXhwciArPSBkaWdpdHNbb3BzLmxlbmd0aF07XHJcbiAgICAgICAgLy8gbGVhZGluZyAwcyBzb21ldGltZXMgdGhyb3cgYW4gZXJyb3IgYWJvdXQgb2N0YWxzXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGV2YWwoZXhwcikgPT0gYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBhbnN3ZXJzLnB1c2goZXhwcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbnN3ZXJzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhbGdvcml0aG1pY1N0b2NrVHJhZGVySUkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc3RvY2tQcmljZTogbnVtYmVyW10gPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIHN0b2NrUHJpY2UucHVzaCgwKTtcclxuXHJcbiAgICBsZXQgcHJvZml0ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RvY2tQcmljZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChzdG9ja1ByaWNlW2ldIDwgc3RvY2tQcmljZVtpICsgMV0pIHtcclxuICAgICAgICAgICAgcHJvZml0ICs9IHN0b2NrUHJpY2VbaSArIDFdIC0gc3RvY2tQcmljZVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvZml0ID0gTWF0aC5tYXgocHJvZml0LCAwKTtcclxuXHJcbiAgICByZXR1cm4gcHJvZml0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWxnb3JpdGhtaWNTdG9ja1RyYWRlcklJSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdG9ja1ByaWNlOiBudW1iZXJbXSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgbGV0IGhvbGQxID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XHJcbiAgICBsZXQgaG9sZDIgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcclxuICAgIGxldCByZWxlYXNlMSA9IDA7XHJcbiAgICBsZXQgcmVsZWFzZTIgPSAwO1xyXG4gICAgZm9yIChjb25zdCBwcmljZSBvZiBzdG9ja1ByaWNlKSB7XHJcbiAgICAgICAgcmVsZWFzZTIgPSBNYXRoLm1heChyZWxlYXNlMiwgaG9sZDIgKyBwcmljZSk7XHJcbiAgICAgICAgaG9sZDIgPSBNYXRoLm1heChob2xkMiwgcmVsZWFzZTEgLSBwcmljZSk7XHJcbiAgICAgICAgcmVsZWFzZTEgPSBNYXRoLm1heChyZWxlYXNlMSwgaG9sZDEgKyBwcmljZSk7XHJcbiAgICAgICAgaG9sZDEgPSBNYXRoLm1heChob2xkMSwgcHJpY2UgKiAtMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlbGVhc2UyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhbGdvcml0aG1pY1N0b2NrVHJhZGVySVYobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBjb25zdCBrOiBudW1iZXIgPSBkYXRhWzBdO1xyXG4gICAgY29uc3QgcHJpY2VzOiBudW1iZXJbXSA9IGRhdGFbMV07XHJcblxyXG4gICAgY29uc3QgbGVuID0gcHJpY2VzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBpZiAoayA+IGxlbiAvIDIpIHtcclxuICAgIC8vICAgICBsZXQgcmVzID0gMDtcclxuICAgIC8vICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAvLyAgICAgICAgIHJlcyArPSBNYXRoLm1heChwcmljZXNbaV0gLSBwcmljZXNbaSAtIDFdLCAwKTtcclxuICAgIC8vICAgICB9XHJcblxyXG4gICAgLy8gICAgIHJldHVybiByZXM7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29uc3QgaG9sZDogbnVtYmVyW10gPSBbXTtcclxuICAgIGNvbnN0IHJlbGU6IG51bWJlcltdID0gW107XHJcbiAgICBob2xkLmxlbmd0aCA9IGsgKyAxO1xyXG4gICAgcmVsZS5sZW5ndGggPSBrICsgMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGs7ICsraSkge1xyXG4gICAgICAgIGhvbGRbaV0gPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcclxuICAgICAgICByZWxlW2ldID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY3VyOiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgY3VyID0gcHJpY2VzW2ldO1xyXG4gICAgICAgIGZvciAobGV0IGogPSBrOyBqID4gMDsgLS1qKSB7XHJcbiAgICAgICAgICAgIHJlbGVbal0gPSBNYXRoLm1heChyZWxlW2pdLCBob2xkW2pdICsgY3VyKTtcclxuICAgICAgICAgICAgaG9sZFtqXSA9IE1hdGgubWF4KGhvbGRbal0sIHJlbGVbaiAtIDFdIC0gY3VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlbGVba107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1pbmltdW1QYXRoU3VtSW5BVHJpYW5nbGUobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgdHJpYW5nbGU6IG51bWJlcltdW10gPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIGxldCBwYXRoU3VtID0gMDtcclxuICAgIHBhdGhTdW0gKz0gdHJpYW5nbGVbMF1bMF07XHJcbiAgICBsZXQgY3VycmVudENvbCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRyaWFuZ2xlW2kgKyAxXSA9PT0gdW5kZWZpbmVkKSBicmVhaztcclxuICAgICAgICBjb25zdCBwb3NzaWJsZU1vdmVzID0gW3RyaWFuZ2xlW2kgKyAxXVtjdXJyZW50Q29sXSwgdHJpYW5nbGVbaSArIDFdW2N1cnJlbnRDb2wgKyAxXV07XHJcblxyXG4gICAgICAgIGlmIChwb3NzaWJsZU1vdmVzWzBdID4gcG9zc2libGVNb3Zlc1sxXSkgY3VycmVudENvbCA9IGN1cnJlbnRDb2wgKyAxO1xyXG4gICAgICAgIGNvbnN0IG1vdmUgPSBNYXRoLm1pbiguLi5wb3NzaWJsZU1vdmVzKTtcclxuICAgICAgICBwYXRoU3VtICs9IG1vdmU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhdGhTdW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN1YmFycmF5d2l0aE1heGltdW1TdW0obnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YTogbnVtYmVyW10gPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIGxldCBtYXhTdW0gPSAtSW5maW5pdHk7XHJcbiAgICBsZXQgY3VycmVudFN1bSA9IDA7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY3VycmVudFN1bSA9IE1hdGgubWF4KGRhdGFbaV0sIGN1cnJlbnRTdW0gKyBkYXRhW2ldKTtcclxuICAgICAgICBtYXhTdW0gPSBNYXRoLm1heChtYXhTdW0sIGN1cnJlbnRTdW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtYXhTdW07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuaXF1ZVBhdGhzSW5BR3JpZEkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBjb25zdCBuOiBudW1iZXIgPSBkYXRhWzBdOyAvLyBOdW1iZXIgb2Ygcm93c1xyXG4gICAgY29uc3QgbTogbnVtYmVyID0gZGF0YVsxXTsgLy8gTnVtYmVyIG9mIGNvbHVtbnNcclxuICAgIGNvbnN0IGN1cnJlbnRSb3c6IG51bWJlcltdID0gW107XHJcbiAgICBjdXJyZW50Um93Lmxlbmd0aCA9IG47XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBjdXJyZW50Um93W2ldID0gMTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IHJvdyA9IDE7IHJvdyA8IG07IHJvdysrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgY3VycmVudFJvd1tpXSArPSBjdXJyZW50Um93W2kgLSAxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGN1cnJlbnRSb3dbbiAtIDFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1bmlxdWVQYXRoc0luQUdyaWRJSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkYXRhID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgIGNvbnN0IG9ic3RhY2xlR3JpZDogbnVtYmVyW11bXSA9IFtdO1xyXG4gICAgb2JzdGFjbGVHcmlkLmxlbmd0aCA9IGRhdGEubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYnN0YWNsZUdyaWQubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBvYnN0YWNsZUdyaWRbaV0gPSBkYXRhW2ldLnNsaWNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYnN0YWNsZUdyaWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9ic3RhY2xlR3JpZFswXS5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBpZiAob2JzdGFjbGVHcmlkW2ldW2pdID09IDEpIHtcclxuICAgICAgICAgICAgICAgIG9ic3RhY2xlR3JpZFtpXVtqXSA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSAwICYmIGogPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgb2JzdGFjbGVHcmlkWzBdWzBdID0gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9ic3RhY2xlR3JpZFtpXVtqXSA9IChpID4gMCA/IG9ic3RhY2xlR3JpZFtpIC0gMV1bal0gOiAwKSArIChqID4gMCA/IG9ic3RhY2xlR3JpZFtpXVtqIC0gMV0gOiAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2JzdGFjbGVHcmlkW29ic3RhY2xlR3JpZC5sZW5ndGggLSAxXVtvYnN0YWNsZUdyaWRbMF0ubGVuZ3RoIC0gMV07XHJcbn1c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eEM7QUFFQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLG9CQUFvQkwsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ25FLFFBQU1FLFFBQU9ILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3ZELFFBQU0sSUFBWUUsTUFBSyxDQUFDO0FBQ3hCLFFBQU0sSUFBWUEsTUFBSyxDQUFDO0FBQ3hCLFFBQU0sYUFBdUIsQ0FBQztBQUM5QixhQUFXLFNBQVM7QUFFcEIsV0FBU0UsS0FBSSxHQUFHQSxLQUFJLEdBQUdBLE1BQUs7QUFDeEIsZUFBV0EsRUFBQyxJQUFJO0FBQUEsRUFDcEI7QUFDQSxXQUFTLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTztBQUM5QixhQUFTQSxLQUFJLEdBQUdBLEtBQUksR0FBR0EsTUFBSztBQUN4QixpQkFBV0EsRUFBQyxLQUFLLFdBQVdBLEtBQUksQ0FBQztBQUFBLElBQ3JDO0FBQUEsRUFDSjtBQUVBLFNBQU8sV0FBVyxJQUFJLENBQUM7QUFDM0I7QUFFQSxTQUFTLHFCQUFxQkwsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ3BFLFFBQU1FLFFBQU9ILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3ZELFFBQU0sZUFBMkIsQ0FBQztBQUNsQyxlQUFhLFNBQVNFLE1BQUs7QUFDM0IsV0FBU0UsS0FBSSxHQUFHQSxLQUFJLGFBQWEsUUFBUSxFQUFFQSxJQUFHO0FBQzFDLGlCQUFhQSxFQUFDLElBQUlGLE1BQUtFLEVBQUMsRUFBRSxNQUFNO0FBQUEsRUFDcEM7QUFFQSxXQUFTQSxLQUFJLEdBQUdBLEtBQUksYUFBYSxRQUFRQSxNQUFLO0FBQzFDLGFBQVMsSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQzdDLFVBQUksYUFBYUEsRUFBQyxFQUFFLENBQUMsS0FBSyxHQUFHO0FBQ3pCLHFCQUFhQSxFQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQUEsTUFDekIsV0FBV0EsTUFBSyxLQUFLLEtBQUssR0FBRztBQUN6QixxQkFBYSxDQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQUEsTUFDekIsT0FBTztBQUNILHFCQUFhQSxFQUFDLEVBQUUsQ0FBQyxLQUFLQSxLQUFJLElBQUksYUFBYUEsS0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLE1BQU0sSUFBSSxJQUFJLGFBQWFBLEVBQUMsRUFBRSxJQUFJLENBQUMsSUFBSTtBQUFBLE1BQ2xHO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFFQSxTQUFPLGFBQWEsYUFBYSxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxTQUFTLENBQUM7QUFDM0U7IiwibmFtZXMiOlsibnMiLCJzZXJ2ZXIiLCJjb250cmFjdCIsImRhdGEiLCJ2aXNpdGVkIiwiaSIsIm1vdmVzIiwibWluIiwiY3VycmVudFBhdGgiLCJkaXJlY3Rpb25zIiwib3BzIl19\",\"filename\":\"CodingContracts/manager.js\",\"server\":\"home\"}}],[\"CodingContracts/contractTests.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { algorithmicStockTraderIII } from \\\"/CodingContracts/manager.js\\\";\\nfunction sumCombinations(target, current = [], start = 1, result = []) {\\n  if (target === 0) {\\n    result.push(current.slice());\\n    return;\\n  }\\n  for (let i = start; i <= target; i++) {\\n    current.push(i);\\n    sumCombinations(target - i, current, i, result);\\n    current.pop();\\n  }\\n  return result;\\n}\\nexport function generateSwitchCase(ns) {\\n  let switchCase = \\\"\\\";\\n  switchCase += \\\"switch (contractType) {\\\\n\\\";\\n  for (const contractType of ns.codingcontract.getContractTypes()) {\\n    switchCase += `case \\\"${contractType}\\\":\\n`;\\n    switchCase += `break;\\n`;\\n  }\\n  switchCase += \\\"default:\\\\n\\\";\\n  switchCase += \\\"break;\\\\n\\\";\\n  switchCase += \\\"}\\\\n\\\";\\n  return switchCase;\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  algorithmicStockTraderIII(ns, \\\"\\\", \\\"\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyYWN0VGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSUkgfSBmcm9tIFwiLi9tYW5hZ2VyXCI7XHJcblxyXG5mdW5jdGlvbiBzdW1Db21iaW5hdGlvbnModGFyZ2V0OiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlcltdID0gW10sIHN0YXJ0ID0gMSwgcmVzdWx0OiBudW1iZXJbXVtdID0gW10pIHtcclxuICAgIGlmICh0YXJnZXQgPT09IDApIHtcclxuICAgICAgICByZXN1bHQucHVzaChjdXJyZW50LnNsaWNlKCkpOyAvLyBQdXNoIGEgY29weSBvZiB0aGUgY3VycmVudCBjb21iaW5hdGlvbiB0byB0aGUgcmVzdWx0XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSB0YXJnZXQ7IGkrKykge1xyXG4gICAgICAgIGN1cnJlbnQucHVzaChpKTtcclxuICAgICAgICBzdW1Db21iaW5hdGlvbnModGFyZ2V0IC0gaSwgY3VycmVudCwgaSwgcmVzdWx0KTtcclxuICAgICAgICBjdXJyZW50LnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVN3aXRjaENhc2UobnM6IE5TKSB7XHJcbiAgICBsZXQgc3dpdGNoQ2FzZSA9IFwiXCI7XHJcbiAgICBzd2l0Y2hDYXNlICs9IFwic3dpdGNoIChjb250cmFjdFR5cGUpIHtcXG5cIjtcclxuICAgIGZvciAoY29uc3QgY29udHJhY3RUeXBlIG9mIG5zLmNvZGluZ2NvbnRyYWN0LmdldENvbnRyYWN0VHlwZXMoKSkge1xyXG4gICAgICAgIHN3aXRjaENhc2UgKz0gYGNhc2UgXCIke2NvbnRyYWN0VHlwZX1cIjpcXG5gO1xyXG4gICAgICAgIHN3aXRjaENhc2UgKz0gYGJyZWFrO1xcbmA7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2hDYXNlICs9IFwiZGVmYXVsdDpcXG5cIjtcclxuICAgIHN3aXRjaENhc2UgKz0gXCJicmVhaztcXG5cIjtcclxuICAgIHN3aXRjaENhc2UgKz0gXCJ9XFxuXCI7XHJcbiAgICByZXR1cm4gc3dpdGNoQ2FzZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG5cclxuICAgIGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSUkobnMsIFwiXCIsIFwiXCIpO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxpQ0FBaUM7QUFFMUMsU0FBUyxnQkFBZ0IsUUFBZ0IsVUFBb0IsQ0FBQyxHQUFHLFFBQVEsR0FBRyxTQUFxQixDQUFDLEdBQUc7QUFDakcsTUFBSSxXQUFXLEdBQUc7QUFDZCxXQUFPLEtBQUssUUFBUSxNQUFNLENBQUM7QUFDM0I7QUFBQSxFQUNKO0FBRUEsV0FBUyxJQUFJLE9BQU8sS0FBSyxRQUFRLEtBQUs7QUFDbEMsWUFBUSxLQUFLLENBQUM7QUFDZCxvQkFBZ0IsU0FBUyxHQUFHLFNBQVMsR0FBRyxNQUFNO0FBQzlDLFlBQVEsSUFBSTtBQUFBLEVBQ2hCO0FBRUEsU0FBTztBQUNYO0FBRU8sZ0JBQVMsbUJBQW1CLElBQVE7QUFDdkMsTUFBSSxhQUFhO0FBQ2pCLGdCQUFjO0FBQ2QsYUFBVyxnQkFBZ0IsR0FBRyxlQUFlLGlCQUFpQixHQUFHO0FBQzdELGtCQUFjLFNBQVMsWUFBWTtBQUFBO0FBQ25DLGtCQUFjO0FBQUE7QUFBQSxFQUNsQjtBQUNBLGdCQUFjO0FBQ2QsZ0JBQWM7QUFDZCxnQkFBYztBQUNkLFNBQU87QUFDWDtBQUVBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFFbkIsNEJBQTBCLElBQUksSUFBSSxFQUFFO0FBQ3hDOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"CodingContracts/contractTests.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"daemon-grow\",\"daemon-grow-0\",\"daemon-grow-1\",\"daemon-hack\",\"daemon-weak\",\"daemon-grow-2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"notes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"notes.txt\",\"text\":\"grow being 3.2x hacktime and weaken 4x hacktime\\r\\ngrow can not safely be distributed, cause:\\r\\n    multiple instances cant finish at the same time, effect is calculated at the end, \\r\\n    thus if its spread across multiple instances they'll increase security for one another\\r\\n\\r\\nhttps://bitburner.readthedocs.io/en/latest/guidesandtips/recommendedbitnodeorder.html\\r\\n\\r\\nhaack skill level up:\\r\\n\\r\\ncheck if batch causes level up\\r\\nif it causes level up, change WGH threads accordingly\\r\\n\\r\\n\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44210.106927853914\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.381316829908698\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44148.70400156523\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.34294000097827\\r\\nnum_batches: 21\"}}],[\"timelog.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"timelog.txt\",\"text\":\"Time: 96.45164398458292ms\\r\\nTime: 171.8585117433904ms\\r\\nTime: 119.57338754956436ms\\r\\nTime: 97.57338754956436ms\\r\\nTime: 96.89307214608561ms\\r\\nTime: 108.29599843476899ms\\r\\nTime: 100.591577386469ms\\r\\nTime: 114.48564159480156ms\\r\\nTime: 91.76981913522468ms\\r\\nTime: 133.16132076175563ms\\r\\nTime: 90.44659185857017ms\\r\\nTime: 123.3417268491612ms\\r\\n------------------------------- NEW\"}}],[\"Stock/market.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Stock/market.txt\",\"text\":\"[{\\\"symbol\\\":\\\"ECP\\\",\\\"organization\\\":\\\"ECorp\\\",\\\"observedMinPrice\\\":39493.569532488604,\\\"observedMaxPrice\\\":50317.09239350064,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":47652.699418604694,\\\"askPrice\\\":48035.45202437662,\\\"price\\\":47844.075721490655,\\\"previousPrice\\\":47844.075721490655,\\\"forecast\\\":0.4093976805068219,\\\"volatility\\\":0.0048,\\\"maxShares\\\":17300000,\\\"profit\\\":271226580229.9975,\\\"cost\\\":543227358648.2681,\\\"profitPotential\\\":0.0018002915020722424},{\\\"symbol\\\":\\\"MGCP\\\",\\\"organization\\\":\\\"MegaCorp\\\",\\\"observedMinPrice\\\":30669.814059203567,\\\"observedMaxPrice\\\":37190.04696633288,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":35092.360411869915,\\\"askPrice\\\":35233.01115500367,\\\"price\\\":35162.68578343679,\\\"previousPrice\\\":35162.68578343679,\\\"forecast\\\":0.5674121434638326,\\\"volatility\\\":0.0045000000000000005,\\\"maxShares\\\":15200000,\\\"profit\\\":38905404259.35343,\\\"cost\\\":511384684048.3566,\\\"profitPotential\\\":0.0011285690740516015},{\\\"symbol\\\":\\\"BLD\\\",\\\"organization\\\":\\\"Blade Industries\\\",\\\"observedMinPrice\\\":15512.952274758523,\\\"observedMaxPrice\\\":23373.89853227532,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":23327.15073521077,\\\"askPrice\\\":23420.646329339874,\\\"price\\\":23373.89853227532,\\\"previousPrice\\\":23373.89853227532,\\\"forecast\\\":0.5851883862261554,\\\"volatility\\\":0.0070999999999999995,\\\"maxShares\\\":14700000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0014701543487708575},{\\\"symbol\\\":\\\"CLRK\\\",\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"observedMinPrice\\\":14706.812809103594,\\\"observedMaxPrice\\\":19212.670190900113,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":15125.27824227836,\\\"askPrice\\\":15277.291088934422,\\\"price\\\":15201.284665606392,\\\"previousPrice\\\":15201.284665606392,\\\"forecast\\\":0.5929227994940973,\\\"volatility\\\":0.0070999999999999995,\\\"maxShares\\\":18200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009816084483970841},{\\\"symbol\\\":\\\"OMTK\\\",\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"observedMinPrice\\\":39392.47333039525,\\\"observedMaxPrice\\\":52806.32340530873,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":43077.414501618325,\\\"askPrice\\\":43597.46377125556,\\\"price\\\":43337.439136436944,\\\"previousPrice\\\":43337.439136436944,\\\"forecast\\\":0.595390735358352,\\\"volatility\\\":0.0064,\\\"maxShares\\\":10500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0011876133673683598},{\\\"symbol\\\":\\\"FSIG\\\",\\\"organization\\\":\\\"Four Sigma\\\",\\\"observedMinPrice\\\":53393.22650076692,\\\"observedMaxPrice\\\":95782.82609358044,\\\"longShares\\\":7200000,\\\"longPrice\\\":83854.76901310172,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":85622.00455719008,\\\"askPrice\\\":87351.74202299191,\\\"price\\\":86486.873290091,\\\"previousPrice\\\":86486.873290091,\\\"forecast\\\":0.6513586502002624,\\\"volatility\\\":0.0105,\\\"maxShares\\\":7200000,\\\"profit\\\":72349736958.43764,\\\"cost\\\":333875733841.14307,\\\"profitPotential\\\":0.003427215797614935},{\\\"symbol\\\":\\\"KGI\\\",\\\"organization\\\":\\\"KuaiGong International\\\",\\\"observedMinPrice\\\":9407.22757600825,\\\"observedMaxPrice\\\":20052.934211838354,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":10009.704390755604,\\\"askPrice\\\":10090.103622809864,\\\"price\\\":10049.904006782734,\\\"previousPrice\\\":10049.904006782734,\\\"forecast\\\":0.5759436316421831,\\\"volatility\\\":0.008,\\\"maxShares\\\":23600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009312523697837012},{\\\"symbol\\\":\\\"FLCM\\\",\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"observedMinPrice\\\":44447.87571190897,\\\"observedMaxPrice\\\":89977.77010349647,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":74445.09491264897,\\\"askPrice\\\":75797.27625314107,\\\"price\\\":75121.18558289502,\\\"previousPrice\\\":75121.18558289502,\\\"forecast\\\":0.38103808738725403,\\\"volatility\\\":0.0125,\\\"maxShares\\\":12500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00398038810242018},{\\\"symbol\\\":\\\"STM\\\",\\\"organization\\\":\\\"Storm Technologies\\\",\\\"observedMinPrice\\\":14388.576971564738,\\\"observedMaxPrice\\\":19175.55741045312,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":14778.531112380191,\\\"askPrice\\\":14867.469113056499,\\\"price\\\":14823.000112718346,\\\"previousPrice\\\":14823.000112718346,\\\"forecast\\\":0.5610425532855904,\\\"volatility\\\":0.0085,\\\"maxShares\\\":10400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.000872119553084077},{\\\"symbol\\\":\\\"DCOMM\\\",\\\"organization\\\":\\\"DefComm\\\",\\\"observedMinPrice\\\":6817.967279557362,\\\"observedMaxPrice\\\":9010.440956396507,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":8844.060879391907,\\\"askPrice\\\":8986.707022607907,\\\"price\\\":8915.383950999907,\\\"previousPrice\\\":8915.383950999907,\\\"forecast\\\":0.5929984261548512,\\\"volatility\\\":0.0068000000000000005,\\\"maxShares\\\":20600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0010099294143390803},{\\\"symbol\\\":\\\"HLS\\\",\\\"organization\\\":\\\"Helios Labs\\\",\\\"observedMinPrice\\\":18781.51078289013,\\\"observedMaxPrice\\\":23897.876172119883,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":19152.54220855438,\\\"askPrice\\\":19539.46225317164,\\\"price\\\":19346.00223086301,\\\"previousPrice\\\":19346.00223086301,\\\"forecast\\\":0.5948525017312084,\\\"volatility\\\":0.0060999999999999995,\\\"maxShares\\\":9200000,\\\"profit\\\":39556856132.76187,\\\"cost\\\":142585575387.42508,\\\"profitPotential\\\":0.0011233823801412284},{\\\"symbol\\\":\\\"VITA\\\",\\\"organization\\\":\\\"VitaLife\\\",\\\"observedMinPrice\\\":10953.05179180265,\\\"observedMaxPrice\\\":14647.356427912528,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":10898.286532843638,\\\"askPrice\\\":11007.817050761663,\\\"price\\\":10953.05179180265,\\\"previousPrice\\\":10953.05179180265,\\\"forecast\\\":0.4221565209802295,\\\"volatility\\\":0.0075,\\\"maxShares\\\":15900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0011012132289679609},{\\\"symbol\\\":\\\"ICRS\\\",\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"observedMinPrice\\\":14236.15699318693,\\\"observedMaxPrice\\\":16720.831139226735,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":15582.11064396081,\\\"askPrice\\\":15833.435009185983,\\\"price\\\":15707.772826573397,\\\"previousPrice\\\":15707.772826573397,\\\"forecast\\\":0.5844495881339893,\\\"volatility\\\":0.0062,\\\"maxShares\\\":13100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0011121727430324488},{\\\"symbol\\\":\\\"UNV\\\",\\\"organization\\\":\\\"Universal Energy\\\",\\\"observedMinPrice\\\":25723.930945553286,\\\"observedMaxPrice\\\":33514.10520521994,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":31467.08146273762,\\\"askPrice\\\":31656.452063315777,\\\"price\\\":31561.7667630267,\\\"previousPrice\\\":31561.7667630267,\\\"forecast\\\":0.40735108663015146,\\\"volatility\\\":0.005,\\\"maxShares\\\":7900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009028831369591927},{\\\"symbol\\\":\\\"AERO\\\",\\\"organization\\\":\\\"AeroCorp\\\",\\\"observedMinPrice\\\":12053.97315115185,\\\"observedMaxPrice\\\":16158.213900202609,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":14143.796923430478,\\\"askPrice\\\":14429.530194610894,\\\"price\\\":14286.663559020686,\\\"previousPrice\\\":14286.663559020686,\\\"forecast\\\":0.5614796991737182,\\\"volatility\\\":0.0059,\\\"maxShares\\\":12100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0006686333701646865},{\\\"symbol\\\":\\\"OMN\\\",\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"observedMinPrice\\\":5537.310544592318,\\\"observedMaxPrice\\\":8062.3445654902125,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":7156.070013772593,\\\"askPrice\\\":7242.461201061598,\\\"price\\\":7199.265607417095,\\\"previousPrice\\\":7199.265607417095,\\\"forecast\\\":0.5564611328223402,\\\"volatility\\\":0.0075,\\\"maxShares\\\":15000000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0004203249343984183},{\\\"symbol\\\":\\\"SLRS\\\",\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"observedMinPrice\\\":14899.106598458888,\\\"observedMaxPrice\\\":18950.577490107047,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":17543.829610410805,\\\"askPrice\\\":17898.250410621124,\\\"price\\\":17721.040010515964,\\\"previousPrice\\\":17721.040010515964,\\\"forecast\\\":0.5638994323116227,\\\"volatility\\\":0.0077,\\\"maxShares\\\":6300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0011555811897104877},{\\\"symbol\\\":\\\"GPH\\\",\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"observedMinPrice\\\":20060.281114741923,\\\"observedMaxPrice\\\":26019.47298119381,\\\"longShares\\\":5600000,\\\"longPrice\\\":25106.717144811777,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":24525.845320449105,\\\"askPrice\\\":24722.84006197882,\\\"price\\\":24624.342691213962,\\\"previousPrice\\\":24624.342691213962,\\\"forecast\\\":0.5986453219307172,\\\"volatility\\\":0.0063,\\\"maxShares\\\":5600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0012649585877059998},{\\\"symbol\\\":\\\"NVMD\\\",\\\"organization\\\":\\\"Nova Medical\\\",\\\"observedMinPrice\\\":21114.092011674078,\\\"observedMaxPrice\\\":26036.505688474575,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":22327.79243654358,\\\"askPrice\\\":22552.19236052894,\\\"price\\\":22439.992398536262,\\\"previousPrice\\\":22439.992398536262,\\\"forecast\\\":0.44948293713385185,\\\"volatility\\\":0.006999999999999999,\\\"maxShares\\\":5200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0007580328184733739},{\\\"symbol\\\":\\\"WDS\\\",\\\"organization\\\":\\\"Watchdog Security\\\",\\\"observedMinPrice\\\":7807.050227054164,\\\"observedMaxPrice\\\":29334.370889399048,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":24878.736484115518,\\\"askPrice\\\":25280.006427407705,\\\"price\\\":25079.37145576161,\\\"previousPrice\\\":25079.37145576161,\\\"forecast\\\":0.580960092759253,\\\"volatility\\\":0.0248,\\\"maxShares\\\":11800000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0030228190451402777},{\\\"symbol\\\":\\\"LXO\\\",\\\"organization\\\":\\\"LexoCorp\\\",\\\"observedMinPrice\\\":11679.261613833238,\\\"observedMaxPrice\\\":16754.913434388385,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":13192.169078766923,\\\"askPrice\\\":13378.16139206273,\\\"price\\\":13285.165235414826,\\\"previousPrice\\\":13285.165235414826,\\\"forecast\\\":0.5553672094344129,\\\"volatility\\\":0.0126,\\\"maxShares\\\":9100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0016811501291270966},{\\\"symbol\\\":\\\"RHOC\\\",\\\"organization\\\":\\\"Rho Construction\\\",\\\"observedMinPrice\\\":2762.1074373065385,\\\"observedMaxPrice\\\":3367.2299989743215,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":2808.5494501817902,\\\"askPrice\\\":2853.848634862142,\\\"price\\\":2831.199042521966,\\\"previousPrice\\\":2831.199042521966,\\\"forecast\\\":0.510842128123446,\\\"volatility\\\":0.0052,\\\"maxShares\\\":11300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00015084197942196598},{\\\"symbol\\\":\\\"APHE\\\",\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"observedMinPrice\\\":9145.765902329646,\\\"observedMaxPrice\\\":20234.443084918392,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":9054.308243306348,\\\"askPrice\\\":9237.223561352943,\\\"price\\\":9145.765902329646,\\\"previousPrice\\\":9145.765902329646,\\\"forecast\\\":0.428402093663012,\\\"volatility\\\":0.0182,\\\"maxShares\\\":6000000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.002940268482402415},{\\\"symbol\\\":\\\"SYSC\\\",\\\"organization\\\":\\\"SysCore Securities\\\",\\\"observedMinPrice\\\":10496.091301576986,\\\"observedMaxPrice\\\":18087.294509376967,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":11148.891408782214,\\\"askPrice\\\":11419.71468187004,\\\"price\\\":11284.303045326127,\\\"previousPrice\\\":11284.303045326127,\\\"forecast\\\":0.5104821935145576,\\\"volatility\\\":0.015300000000000001,\\\"maxShares\\\":7500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0006397291996507615},{\\\"symbol\\\":\\\"CTK\\\",\\\"organization\\\":\\\"CompuTek\\\",\\\"observedMinPrice\\\":5579.464510109497,\\\"observedMaxPrice\\\":7040.649318331193,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":6608.25222329252,\\\"askPrice\\\":6714.836936571432,\\\"price\\\":6661.544579931976,\\\"previousPrice\\\":6661.544579931976,\\\"forecast\\\":0.5581648086771375,\\\"volatility\\\":0.0089,\\\"maxShares\\\":8400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0006758523153824428},{\\\"symbol\\\":\\\"NTLK\\\",\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"observedMinPrice\\\":3386.8144623606568,\\\"observedMaxPrice\\\":10742.445270186392,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":5629.126641097766,\\\"askPrice\\\":5765.866559504999,\\\"price\\\":5697.496600301382,\\\"previousPrice\\\":5697.496600301382,\\\"forecast\\\":0.4317814740740348,\\\"volatility\\\":0.0294,\\\"maxShares\\\":3100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00326557520170033},{\\\"symbol\\\":\\\"OMGA\\\",\\\"organization\\\":\\\"Omega Software\\\",\\\"observedMinPrice\\\":3951.830359867369,\\\"observedMaxPrice\\\":4926.42653506785,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":4416.74461030091,\\\"askPrice\\\":4524.033953061256,\\\"price\\\":4470.389281681083,\\\"previousPrice\\\":4470.389281681083,\\\"forecast\\\":0.4670882743994084,\\\"volatility\\\":0.0095,\\\"maxShares\\\":2300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009734836955046548},{\\\"symbol\\\":\\\"FNS\\\",\\\"organization\\\":\\\"FoodNStuff\\\",\\\"observedMinPrice\\\":3320.245634379983,\\\"observedMaxPrice\\\":4417.174255166539,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":3337.0692768040385,\\\"askPrice\\\":3377.3558274294396,\\\"price\\\":3357.212552116739,\\\"previousPrice\\\":3357.212552116739,\\\"forecast\\\":0.4860975999228732,\\\"volatility\\\":0.0070999999999999995,\\\"maxShares\\\":2100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00020295359518627604},{\\\"symbol\\\":\\\"JGN\\\",\\\"organization\\\":\\\"Joe's Guns\\\",\\\"observedMinPrice\\\":133.2240561312815,\\\"observedMaxPrice\\\":389.49764542269173,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":138.4728956087212,\\\"askPrice\\\":140.9880440657918,\\\"price\\\":139.7304698372565,\\\"previousPrice\\\":139.7304698372565,\\\"forecast\\\":0.43755772063403886,\\\"volatility\\\":0.0203,\\\"maxShares\\\":17600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.002335055500316449},{\\\"symbol\\\":\\\"SGC\\\",\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"observedMinPrice\\\":2872.824183599508,\\\"observedMaxPrice\\\":4302.825504660109,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":3852.1068120517693,\\\"askPrice\\\":3922.0744433503883,\\\"price\\\":3887.090627701079,\\\"previousPrice\\\":3887.090627701079,\\\"forecast\\\":0.433454936772123,\\\"volatility\\\":0.013500000000000002,\\\"maxShares\\\":2200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0015804850340641581},{\\\"symbol\\\":\\\"CTYS\\\",\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"observedMinPrice\\\":800.0062787610877,\\\"observedMaxPrice\\\":1291.2138265745655,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":806.3264081987979,\\\"askPrice\\\":814.4301911957707,\\\"price\\\":810.3782996972843,\\\"previousPrice\\\":810.3782996972843,\\\"forecast\\\":0.42188844665827824,\\\"volatility\\\":0.0143,\\\"maxShares\\\":14400000,\\\"profit\\\":303775391.63639414,\\\"cost\\\":16650434338.306658,\\\"profitPotential\\\":0.002339156744697334},{\\\"symbol\\\":\\\"MDYN\\\",\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"observedMinPrice\\\":35443.87151768814,\\\"observedMaxPrice\\\":43098.86405974733,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":40372.641088161414,\\\"askPrice\\\":40615.60582891263,\\\"price\\\":40494.123458537026,\\\"previousPrice\\\":40494.123458537026,\\\"forecast\\\":0.42401253665471905,\\\"volatility\\\":0.0074,\\\"maxShares\\\":2500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0013693478149247112},{\\\"symbol\\\":\\\"TITN\\\",\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"observedMinPrice\\\":13177.072613803752,\\\"observedMaxPrice\\\":19127.14321128874,\\\"longShares\\\":3600000,\\\"longPrice\\\":13488.75839245217,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":13752.437838815718,\\\"askPrice\\\":13835.200754595953,\\\"price\\\":13793.819296705837,\\\"previousPrice\\\":13793.819296705837,\\\"forecast\\\":0.6005670727261174,\\\"volatility\\\":0.0058,\\\"maxShares\\\":3600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0013653229502696169}]\"}}],[\"budget.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"budget.txt\",\"text\":\"10000\"}}],[\"Stock/log.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Stock/log.txt\",\"text\":\"buying 19.866m shares of BLD for 227.156b\\nbuying 5.069m shares of OMTK for 205.168b\\nbuying 2.463m shares of FSIG for 183.750b\\nbuying 6.648m shares of KGI for 165.302b\\nbuying 2.759m shares of FLCM for 148.408b\\nbuying 4.071m shares of UNV for 134.880b\\nbuying 4.352m shares of GPH for 121.229b\\nbuying 3.916m shares of MGCP for 108.308b\\nselling 0.000 shares of OMTK for -2.752b\\nselling 0.000 shares of UNV for 11.597m\\nbuying 41.400m shares of CTYS for 13.803b\\nselling 0.000 shares of GPH for 2.679b\\nselling 0.000 shares of CTYS for 909.031m\\nbuying 3.100m shares of NTLK for 4.208b\\nbuying 7.766m shares of ECP for 135.524b\\nselling 0.000 shares of KGI for 34.352b\\nselling 0.000 shares of FLCM for 64.320b\\nbuying 6.028m shares of GPH for 164.360b\\nselling 0.000 shares of NTLK for 909.549m\\nselling 0.000 shares of ECP for 11.406b\\nselling 0.000 shares of FSIG for 87.940b\\nbuying 6.200m shares of UNV for 183.275b\\nbuying 12.300m shares of FLCM for 767.387b\\nbuying 5.900m shares of FSIG for 470.949b\\nselling 0.000 shares of UNV for 13.621b\\nbuying 3.800m shares of TITN for 73.031b\\nselling 0.000 shares of BLD for 104.634b\\nselling 0.000 shares of GPH for 41.768b\\nselling 0.000 shares of TITN for 1.953b\\nbuying 41.400m shares of CTYS for 13.948b\\nbuying 21.200m shares of ECP for 301.952b\\nselling 0.000 shares of MGCP for 51.056b\\nselling 0.000 shares of FLCM for 465.251b\\nbuying 15.700m shares of MGCP for 596.244b\\nbuying 8.600m shares of OMTK for 233.990b\\nbuying 3.800m shares of TITN for 75.317b\\nselling 0.000 shares of ECP for 26.367b\\nselling 0.000 shares of MGCP for 3.372b\\nselling 0.000 shares of OMTK for 20.360b\\nselling 0.000 shares of FSIG for 356.619b\\nselling 0.000 shares of TITN for 7.239b\\nbuying 24.100m shares of BLD for 455.349b\\nbuying 16.500m shares of CLRK for 204.498b\\nbuying 3.800m shares of TITN for 73.476b\\nbuying 15.700m shares of MGCP for 497.342b\\nselling 0.000 shares of CTYS for 14.528b\\nselling 0.000 shares of TITN for 1.608b\\nbuying 21.200m shares of ECP for 269.250b\\nbuying 5.900m shares of FSIG for 432.250b\\nbuying 3.800m shares of TITN for 73.174b\\nbuying 8.600m shares of OMTK for 177.521b\\nselling 0.000 shares of ECP for 37.532b\\nselling 0.000 shares of MGCP for 60.397b\\nselling 0.000 shares of BLD for 73.694b\\nselling 0.000 shares of CLRK for 47.206b\\nselling 0.000 shares of FSIG for 86.039b\\nbuying 21.200m shares of ECP for 285.117b\\nbuying 15.700m shares of MGCP for 523.897b\\nselling 0.000 shares of OMTK for 12.707b\\nbuying 6.500m shares of GPH for 220.375b\\nselling 0.000 shares of ECP for 20.335b\\nselling 0.000 shares of MGCP for 21.670b\\nbuying 5.900m shares of FSIG for 424.499b\\nbuying 9.600m shares of APHE for 74.060b\\nbuying 15.700m shares of MGCP for 525.979b\\nbuying 12.300m shares of FLCM for 428.869b\\nbuying 15.600m shares of KGI for 498.347b\\nbuying 8.600m shares of OMTK for 167.505b\\nselling 0.000 shares of FSIG for 113.500b\\nselling 0.000 shares of KGI for -2.344b\\nselling 0.000 shares of FLCM for 79.689b\\nselling 0.000 shares of GPH for 16.313b\\nselling 0.000 shares of TITN for 32.703b\\nbuying 17.800m shares of RHOC for 44.450b\\nselling 0.000 shares of MGCP for 22.481b\\nbuying 12.300m shares of FLCM for 452.386b\\nbuying 6.500m shares of GPH for 215.590b\\nselling 0.000 shares of APHE for 30.808b\\nbuying 21.200m shares of ECP for 298.707b\\nbuying 15.700m shares of MGCP for 564.319b\\nselling 0.000 shares of OMTK for 15.490b\\nbuying 5.900m shares of FSIG for 429.595b\\nselling 0.000 shares of FLCM for 46.467b\\nbuying 6.200m shares of UNV for 170.397b\\nselling 0.000 shares of GPH for 2.782b\\nselling 0.000 shares of RHOC for 3.048b\\nselling 0.000 shares of UNV for -4.942b\\nbuying 6.500m shares of GPH for 201.375b\\nselling 0.000 shares of MGCP for 41.605b\\nselling 0.000 shares of FSIG for 121.328b\\nselling 0.000 shares of GPH for 18.517b\\nbuying 17.800m shares of RHOC for 44.686b\\nselling 0.000 shares of ECP for 62.465b\\nbuying 5.900m shares of FSIG for 305.227b\\nbuying 6.500m shares of GPH for 180.301b\\nselling 0.000 shares of FSIG for 14.361b\\nselling 0.000 shares of GPH for 4.900b\\nbuying 8.600m shares of OMTK for 159.747b\\nbuying 29.800m shares of DCOMM for 190.103b\\nselling 0.000 shares of DCOMM for 746.733m\\nbuying 15.700m shares of MGCP for 495.160b\\nselling 0.000 shares of OMTK for 5.315b\\nbuying 5.900m shares of FSIG for 251.807b\\nselling 0.000 shares of FSIG for 50.291b\\nbuying 41.400m shares of CTYS for 39.896b\\nbuying 5.900m shares of FSIG for 282.582b\\nselling 0.000 shares of CTYS for -79.736m\\nbuying 21.200m shares of ECP for 304.723b\\nselling 0.000 shares of MGCP for 27.748b\\nselling 0.000 shares of FSIG for 24.314b\\nselling 0.000 shares of ECP for 2.522b\\nbuying 15.700m shares of MGCP for 552.975b\\nbuying 3.100m shares of NTLK for 4.319b\\nbuying 5.900m shares of FSIG for 245.868b\\nselling 0.000 shares of RHOC for 13.624b\\nselling 0.000 shares of NTLK for 145.256m\\nbuying 13.700m shares of WDS for 74.515b\\nbuying 6.200m shares of UNV for 194.069b\\nselling 0.000 shares of FSIG for 1.891m\\nbuying 15.600m shares of KGI for 291.374b\\nselling 0.000 shares of UNV for 3.501b\\nbuying 17.800m shares of RHOC for 51.071b\\nbuying 3.100m shares of NTLK for 3.809b\\nselling 0.000 shares of TITN for 1.797m\\nbuying 5.900m shares of FSIG for 275.958b\\nbuying 12.300m shares of FLCM for 412.966b\\nselling 0.000 shares of NTLK for 164.090m\\nselling 0.000 shares of FSIG for 25.216b\\nbuying 3.100m shares of NTLK for 3.809b\\nbuying 6.500m shares of GPH for 154.510b\\nbuying 5.900m shares of FSIG for 283.297b\\nselling 0.000 shares of KGI for 12.250b\\nselling 0.000 shares of FLCM for 36.791b\\nselling 0.000 shares of GPH for -669.879m\\nselling 0.000 shares of RHOC for 11.255b\\nbuying 3.800m shares of TITN for 75.981b\\nselling 0.000 shares of FSIG for 19.225b\\nbuying 6.200m shares of UNV for 217.231b\\nbuying 17.800m shares of RHOC for 56.061b\\nselling 0.000 shares of TITN for 6.815b\\nbuying 41.400m shares of CTYS for 38.700b\\nbuying 5.900m shares of FSIG for 237.235b\\nbuying 15.700m shares of MGCP for 649.554b\\nselling 0.000 shares of MGCP for -8.239b\\nselling 0.000 shares of NTLK for 28.155b\\nselling 0.000 shares of CTYS for 2.295b\\nbuying 3.800m shares of TITN for 73.386b\\nbuying 21.200m shares of ECP for 253.738b\\nselling 0.000 shares of UNV for 30.142b\\nbuying 3.100m shares of NTLK for 21.413b\\nselling 0.000 shares of ECP for 7.928b\\nselling 0.000 shares of FSIG for 120.635b\\nselling 0.000 shares of NTLK for 1.407b\\nbuying 24.100m shares of BLD for 412.971b\\nbuying 16.500m shares of CLRK for 168.870b\\nbuying 5.900m shares of FSIG for 318.002b\\nselling 0.000 shares of BLD for 20.756b\\nbuying 8.900m shares of LXO for 123.552b\\nselling 0.000 shares of RHOC for 13.317b\\nbuying 12.300m shares of FLCM for 387.968b\\nselling 0.000 shares of CLRK for 1.868b\\nselling 0.000 shares of FSIG for 56.110b\\nselling 0.000 shares of LXO for 12.752b\\nbuying 15.700m shares of MGCP for 587.058b\\nbuying 5.900m shares of FSIG for 373.435b\\nbuying 17.800m shares of RHOC for 66.633b\\nbuying 21.200m shares of ECP for 227.039b\\nselling 0.000 shares of FLCM for 96.159b\\nselling 0.000 shares of RHOC for 3.788b\\nselling 0.000 shares of TITN for 18.322b\\nbuying 8.600m shares of OMTK for 109.240b\\nselling 0.000 shares of ECP for 7.655b\\nselling 0.000 shares of MGCP for 36.869b\\nselling 0.000 shares of FSIG for 111.598b\\nbuying 3.800m shares of TITN for 86.819b\\nbuying 6.500m shares of GPH for 155.134b\\nbuying 17.800m shares of RHOC for 64.821b\\nbuying 3.100m shares of NTLK for 1.585b\\nselling 0.000 shares of TITN for 6.957b\\nselling 0.000 shares of OMTK for 9.417b\\nbuying 5.900m shares of FSIG for 419.833b\\nselling 0.000 shares of GPH for 4.351b\\nbuying 6.500m shares of GPH for 151.204b\\nbuying 41.400m shares of CTYS for 32.921b\\nbuying 6.200m shares of UNV for 275.770b\\nbuying 15.700m shares of MGCP for 614.380b\\nselling 0.000 shares of NTLK for 4.191b\\nselling 0.000 shares of FSIG for 198.741b\\nselling 0.000 shares of UNV for 37.334b\\nbuying 5.900m shares of FSIG for 584.842b\\nselling 0.000 shares of GPH for 50.973b\\nselling 0.000 shares of RHOC for 10.281b\\nselling 0.000 shares of CTYS for 12.621b\\nbuying 6.500m shares of GPH for 189.931b\\nbuying 3.100m shares of NTLK for 1.117b\\nbuying 3.800m shares of TITN for 88.315b\\nbuying 21.200m shares of ECP for 232.183b\\nbuying 17.800m shares of RHOC for 73.500b\\nbuying 86.363k shares of ECP for 1.894b\\nbuying 57.178k shares of MGCP for 1.709b\\nbuying 41.785k shares of OMTK for 1.551b\\nbuying 59.479k shares of KGI for 1.407b\\nbuying 39.123k shares of FLCM for 1.268b\\nbuying 57.053k shares of UNV for 1.172b\\nselling 0.000 shares of ECP for 130.255m\\nselling 0.000 shares of UNV for -3.632m\\nbuying 15.000m shares of BLD for 314.068b\\nbuying 15.900m shares of CLRK for 257.755b\\nselling 0.000 shares of OMTK for 150.546m\\nbuying 5.200m shares of FSIG for 290.387b\\nselling 0.000 shares of KGI for 77.687m\\nbuying 38.000m shares of CTYS for 18.066b\\nselling 0.000 shares of MGCP for 440.615m\\nselling 0.000 shares of BLD for 8.343b\\nselling 0.000 shares of CLRK for 14.975b\\nbuying 9.700m shares of OMTK for 358.692b\\nbuying 14.900m shares of KGI for 356.234b\\nselling 0.000 shares of FLCM for 380.954m\\nbuying 24.200m shares of ECP for 472.272b\\nbuying 17.300m shares of MGCP for 610.403b\\nselling 0.000 shares of OMTK for 28.379b\\nselling 0.000 shares of FSIG for 67.639b\\nbuying 13.500m shares of FLCM for 524.576b\\nbuying 8.400m shares of UNV for 149.149b\\nselling 0.000 shares of CTYS for 1.875b\\nselling 0.000 shares of MGCP for 54.910b\\nselling 0.000 shares of KGI for 9.630b\\nselling 0.000 shares of ECP for 53.318b\\nselling 0.000 shares of FLCM for 43.759b\\nbuying 3.700m shares of TITN for 67.420b\\nbuying 5.200m shares of FSIG for 267.277b\\nbuying 13.500m shares of FLCM for 490.982b\\nselling 0.000 shares of FSIG for 18.438b\\nbuying 5.200m shares of FSIG for 239.582b\\nselling 0.000 shares of FLCM for 237.330b\\nselling 0.000 shares of TITN for 9.037b\\nbuying 10.200m shares of DCOMM for 167.532b\\nbuying 24.200m shares of ECP for 419.175b\\nbuying 17.300m shares of MGCP for 489.175b\\nselling 0.000 shares of DCOMM for 13.252b\\nbuying 15.000m shares of BLD for 343.102b\\nbuying 9.700m shares of OMTK for 298.117b\\nbuying 3.700m shares of TITN for 70.355b\\nselling 0.000 shares of ECP for 33.135b\\nselling 0.000 shares of MGCP for 61.440b\\nselling 0.000 shares of UNV for 37.815b\\nselling 0.000 shares of TITN for 3.905b\\nbuying 10.200m shares of DCOMM for 162.715b\\nselling 0.000 shares of BLD for -1.402b\\nselling 0.000 shares of OMTK for 10.567b\\nbuying 13.500m shares of FLCM for 376.612b\\nselling 0.000 shares of DCOMM for -1.086b\\nbuying 17.300m shares of MGCP for 514.154b\\nselling 0.000 shares of MGCP for 2.550b\\nselling 0.000 shares of FLCM for 34.971b\\nbuying 3.700m shares of TITN for 68.030b\\nbuying 8.700m shares of APHE for 63.424b\\nbuying 13.500m shares of FLCM for 370.819b\\nselling 0.000 shares of APHE for 11.107b\\nselling 0.000 shares of FSIG for 263.867b\\nbuying 38.000m shares of CTYS for 17.076b\\nbuying 5.200m shares of FSIG for 476.488b\\nselling 0.000 shares of FLCM for 79.317b\\nbuying 14.900m shares of KGI for 268.506b\\nselling 0.000 shares of FSIG for 72.193b\\nselling 0.000 shares of KGI for 15.684b\\nbuying 13.500m shares of FLCM for 383.181b\\nbuying 8.400m shares of UNV for 179.721b\\nbuying 9.400m shares of GPH for 168.246b\\nbuying 5.200m shares of FSIG for 454.385b\\nselling 0.000 shares of UNV for -6.398b\\nbuying 8.700m shares of APHE for 60.653b\\nselling 0.000 shares of CTYS for 4.339b\\nbuying 77.378k shares of ECP for 2.027b\\nbuying 54.074k shares of MGCP for 1.820b\\nbuying 114.239k shares of BLD for 1.637b\\nbuying 101.285k shares of CLRK for 1.490b\\nbuying 37.191k shares of OMTK for 1.337b\\nbuying 18.036k shares of FSIG for 1.232b\\nbuying 53.379k shares of KGI for 1.123b\\nbuying 31.748k shares of FLCM for 1.038b\\nbuying 51.359k shares of UNV for 979.475m\\nbuying 66.808k shares of GPH for 931.636m\\nbuying 511.090k shares of CTYS for 912.932m\\nbuying 51.267k shares of TITN for 888.146m\\nbuying 986.703k shares of APHE for 5.368b\\nselling 0.000 shares of MGCP for 22.833m\\nselling 0.000 shares of BLD for -10.131m\\nselling 0.000 shares of FSIG for 23.065m\\nselling 0.000 shares of FLCM for 25.393m\\nselling 0.000 shares of UNV for 3.435m\\nselling 0.000 shares of TITN for 19.953m\\nselling 0.000 shares of ECP for 111.553m\\nbuying 3.292m shares of MGCP for 105.084b\\nbuying 7.085m shares of BLD for 94.345b\\nselling 0.000 shares of GPH for 33.336m\\nselling 0.000 shares of APHE for 1.699b\\nbuying 5.000m shares of TITN for 85.559b\\nbuying 71.260k shares of ECP for 1.456b\\nbuying 53.094k shares of MGCP for 1.324b\\nbuying 78.038k shares of BLD for 1.203b\\nbuying 70.285k shares of CLRK for 1.102b\\nbuying 24.686k shares of OMTK for 1.023b\\nbuying 12.416k shares of FSIG for 963.714m\\nbuying 50.967k shares of KGI for 919.288m\\nbuying 25.548k shares of FLCM for 892.439m\\nbuying 53.517k shares of DCOMM for 894.720m\\nbuying 51.438k shares of UNV for 882.702m\\nbuying 54.847k shares of GPH for 882.043m\\nbuying 827.909k shares of CTYS for 857.734m\\nbuying 31.642k shares of TITN for 742.044m\\nselling 0.000 shares of MGCP for -9.894m\\nselling 0.000 shares of FLCM for -4.439m\\nselling 0.000 shares of DCOMM for -15.683m\\nselling 0.000 shares of CTYS for -344.039k\\nbuying 27.400m shares of ECP for 482.642b\\nbuying 19.100m shares of MGCP for 479.361b\\nbuying 15.600m shares of BLD for 324.055b\\nbuying 12.400m shares of CLRK for 304.159b\\nbuying 9.700m shares of OMTK for 358.886b\\nbuying 5.400m shares of FSIG for 401.746b\\nbuying 17.471m shares of KGI for 368.395b\\nbuying 10.860m shares of FLCM for 334.589b\\nbuying 6.300m shares of GPH for 141.278b\\nbuying 8.200m shares of APHE for 49.106b\\nbuying 20.700m shares of CTYS for 20.401b\\nbuying 3.600m shares of TITN for 83.822b\\nbuying 8.600m shares of UNV for 179.359b\\nbuying 15.400m shares of DCOMM for 180.097b\\nselling 0.000 shares of MGCP for 33.925b\\nselling 0.000 shares of BLD for 18.782b\\nselling 0.000 shares of FSIG for 57.058b\\nselling 0.000 shares of KGI for 8.322b\\nselling 0.000 shares of FLCM for 55.311b\\nselling 0.000 shares of DCOMM for 1.724b\\nselling 0.000 shares of CTYS for 2.959b\\nselling 0.000 shares of OMTK for 53.405b\\nselling 0.000 shares of GPH for 10.015b\\nselling 0.000 shares of APHE for 7.473b\\nselling 0.000 shares of TITN for 2.950b\\nselling 0.000 shares of ECP for 89.138b\\nselling 0.000 shares of CLRK for 63.580b\\nbuying 5.400m shares of FSIG for 374.215b\\nbuying 19.100m shares of MGCP for 436.107b\\nbuying 12.400m shares of CLRK for 363.840b\\nbuying 13.000m shares of FLCM for 339.804b\\nbuying 20.700m shares of CTYS for 16.415b\\nbuying 3.600m shares of TITN for 79.871b\\nbuying 9.700m shares of OMTK for 369.523b\\nselling 0.000 shares of MGCP for 27.503b\\nselling 0.000 shares of CLRK for 22.287b\\nselling 0.000 shares of OMTK for 3.344b\\nselling 0.000 shares of FSIG for 111.759b\\nselling 0.000 shares of FLCM for 53.933b\\nselling 0.000 shares of CTYS for 390.478m\\nselling 0.000 shares of TITN for 799.464m\\nbuying 27.400m shares of ECP for 471.113b\\nbuying 19.100m shares of MGCP for 465.884b\\nbuying 12.400m shares of CLRK for 383.894b\\nbuying 5.400m shares of FSIG for 467.400b\\nbuying 13.000m shares of FLCM for 341.848b\\nbuying 8.200m shares of APHE for 61.865b\\nbuying 3.600m shares of TITN for 79.546b\\nbuying 6.300m shares of GPH for 168.252b\\nbuying 13.000m shares of HLS for 165.880b\\nselling 0.000 shares of ECP for 38.882b\\nselling 0.000 shares of FSIG for 27.639b\\nselling 0.000 shares of FLCM for 40.223b\\nselling 0.000 shares of UNV for 37.494b\\nselling 0.000 shares of TITN for 5.216b\\nbuying 209.636k shares of ECP for 6.314b\\nbuying 399.908k shares of BLD for 5.666b\\nbuying 326.037k shares of CLRK for 5.116b\\nbuying 50.853k shares of FSIG for 4.637b\\nbuying 109.966k shares of FLCM for 4.131b\\nbuying 2.127m shares of CTYS for 3.774b\\nselling 0.000 shares of ECP for -43.162m\\nbuying 68.776k shares of UNV for 1.965b\\nbuying 97.504k shares of TITN for 1.772b\\nbuying 4.206m shares of ECP for 115.717b\\nbuying 4.560m shares of MGCP for 103.430b\\nbuying 3.254m shares of OMTK for 93.066b\\nselling 0.000 shares of FLCM for 786.576m\\nselling 0.000 shares of UNV for 164.269m\\nbuying 5.397m shares of APHE for 85.126b\\nselling 0.000 shares of CTYS for 310.574m\\nbuying 3.541m shares of KGI for 76.940b\\nselling 0.000 shares of BLD for 230.249m\\nselling 0.000 shares of KGI for -771.487m\\nbuying 3.938m shares of FLCM for 160.073b\\nbuying 19.200m shares of CTYS for 31.187b\\nselling 0.000 shares of MGCP for 18.215b\\nbuying 10.730m shares of BLD for 152.430b\\nselling 0.000 shares of FSIG for 1.629b\\nselling 0.000 shares of FLCM for 33.873b\\nbuying 6.000m shares of GPH for 143.465b\\nselling 0.000 shares of APHE for 27.885b\\nbuying 6.032m shares of MGCP for 153.558b\\nselling 0.000 shares of CLRK for 1.188b\\nselling 0.000 shares of OMTK for 7.998b\\nbuying 5.118m shares of UNV for 150.126b\\nselling 0.000 shares of GPH for 5.193b\\nselling 0.000 shares of CTYS for 5.043b\\nbuying 8.219m shares of CLRK for 153.637b\\nbuying 3.543m shares of FLCM for 138.119b\\nselling 0.000 shares of UNV for 1.339b\\nselling 0.000 shares of TITN for 639.054m\\nselling 0.000 shares of MGCP for 16.888b\\nselling 0.000 shares of BLD for 20.610b\\nbuying 4.486m shares of TITN for 108.359b\\nbuying 3.239m shares of OMTK for 94.979b\\nbuying 15.000m shares of HLS for 200.567b\\nselling 0.000 shares of ECP for 58.513b\\nbuying 22.100m shares of BLD for 355.962b\\nselling 0.000 shares of OMTK for 3.876b\\nselling 0.000 shares of FLCM for 29.455b\\nselling 0.000 shares of HLS for -1.738b\\nselling 0.000 shares of TITN for 3.829b\\nbuying 18.300m shares of ECP for 723.462b\\nselling 0.000 shares of CLRK for 43.530b\\nbuying 11.400m shares of FLCM for 455.466b\\nbuying 6.000m shares of GPH for 135.881b\\nbuying 4.900m shares of TITN for 119.407b\\nselling 0.000 shares of ECP for 41.121b\\nbuying 14.100m shares of MGCP for 340.080b\\nselling 0.000 shares of BLD for 20.556b\\nbuying 6.800m shares of FSIG for 308.255b\\nbuying 18.300m shares of ECP for 720.973b\\nselling 0.000 shares of FLCM for 96.830b\\nselling 0.000 shares of TITN for 6.551b\\nbuying 15.200m shares of KGI for 245.727b\\nbuying 1.492m shares of ECP for 42.939b\\nbuying 1.081m shares of MGCP for 38.628b\\nbuying 428.392k shares of FSIG for 34.750b\\nbuying 419.769k shares of FLCM for 31.449b\\nbuying 2.125m shares of DCOMM for 28.272b\\nbuying 2.248m shares of APHE for 25.468b\\nbuying 59.300m shares of CTYS for 20.353b\\nbuying 822.312k shares of KGI for 20.747b\\nselling 0.000 shares of APHE for 4.014b\\nselling 0.000 shares of CTYS for -32.279m\\nbuying 846.444k shares of TITN for 23.581b\\nselling 0.000 shares of ECP for 6.691b\\nbuying 878.058k shares of OMTK for 26.407b\\nselling 0.000 shares of FSIG for 9.545b\\nselling 0.000 shares of DCOMM for 3.045b\\nbuying 961.240k shares of GPH for 31.262b\\nselling 0.000 shares of TITN for 1.350b\\nselling 0.000 shares of MGCP for 7.698b\\nbuying 2.768m shares of BLD for 35.364b\\nbuying 1.363m shares of CLRK for 31.665b\\nselling 0.000 shares of OMTK for 464.839m\\nbuying 1.290m shares of UNV for 31.433b\\nselling 0.000 shares of GPH for 1.376b\\nbuying 3.431k shares of ECP for 98.731m\\nbuying 1.040k shares of MGCP for 42.167m\\nselling 0.000 shares of BLD for -183.819m\\nbuying 44.289k shares of FSIG for 3.535b\\nbuying 98.425k shares of GPH for 3.193b\\nbuying 109.548k shares of TITN for 2.860b\\nselling 0.000 shares of MGCP for 2.766m\\nbuying 18.300m shares of BLD for 222.399b\\nbuying 9.700m shares of OMTK for 259.906b\\nselling 0.000 shares of FSIG for 519.631m\\nselling 0.000 shares of KGI for 5.389b\\nselling 0.000 shares of FLCM for 37.627b\\nselling 0.000 shares of UNV for 760.983m\\nselling 0.000 shares of TITN for 348.375m\\nselling 0.000 shares of ECP for 17.268m\\nselling 0.000 shares of BLD for 10.275b\\nbuying 14.800m shares of KGI for 427.958b\\nbuying 3.700m shares of TITN for 103.180b\\nbuying 17.600m shares of ECP for 542.208b\\nbuying 15.000m shares of MGCP for 583.300b\\nselling 0.000 shares of CLRK for 5.830b\\nbuying 5.200m shares of FSIG for 343.143b\\nselling 0.000 shares of KGI for 22.923b\\nselling 0.000 shares of TITN for 8.461b\\nbuying 8.000m shares of APHE for 69.644b\\nselling 0.000 shares of OMTK for 57.165b\\nbuying 11.100m shares of FLCM for 1.303t\\nbuying 7.400m shares of UNV for 160.375b\\nselling 0.000 shares of GPH for 784.810m\\nselling 0.000 shares of APHE for 9.869b\\nbuying 3.700m shares of TITN for 109.193b\\nselling 0.000 shares of ECP for 115.278b\\nbuying 12.300m shares of CLRK for 282.533b\\nbuying 9.700m shares of OMTK for 298.442b\\nbuying 4.700m shares of GPH for 188.789b\\nselling 0.000 shares of MGCP for 158.244b\\nselling 0.000 shares of OMTK for 18.298b\\nselling 0.000 shares of FLCM for 554.176b\\nbuying 14.400m shares of DCOMM for 168.952b\\nbuying 15.000m shares of MGCP for 716.901b\\nselling 0.000 shares of FSIG for 148.932b\\nselling 0.000 shares of DCOMM for 11.508b\\nselling 0.000 shares of UNV for 1.551b\\nbuying 14.837m shares of ECP for 350.106b\\nbuying 10.396m shares of MGCP for 314.814b\\nbuying 11.061m shares of CLRK for 282.514b\\nbuying 2.423m shares of FSIG for 253.585b\\nbuying 6.889m shares of KGI for 229.957b\\nbuying 10.000m shares of UNV for 200.325b\\nbuying 6.900m shares of GPH for 183.191b\\nselling 0.000 shares of ECP for 569.826m\\nselling 0.000 shares of MGCP for 2.168b\\nbuying 15.014m shares of BLD for 234.971b\\nbuying 5.956m shares of FLCM for 209.554b\\nbuying 5.700m shares of SLRS for 161.192b\\nbuying 16.200m shares of MGCP for 467.108b\\nselling 0.000 shares of BLD for 14.442b\\nselling 0.000 shares of FSIG for 39.148b\\nselling 0.000 shares of UNV for 2.833b\\nselling 0.000 shares of GPH for 12.964b\\nbuying 32.600m shares of CTYS for 15.635b\\nbuying 3.700m shares of TITN for 82.303b\\nbuying 11.200m shares of APHE for 98.864b\\nselling 0.000 shares of MGCP for 10.867b\\nselling 0.000 shares of CLRK for 24.961b\\nbuying 10.800m shares of OMTK for 246.960b\\nselling 0.000 shares of KGI for 27.086b\\nselling 0.000 shares of FLCM for 75.208b\\nbuying 6.900m shares of GPH for 181.027b\\nselling 0.000 shares of APHE for 12.637b\\nselling 0.000 shares of CTYS for 477.783m\\nbuying 22.000m shares of ECP for 448.455b\\nbuying 16.200m shares of MGCP for 449.890b\\nbuying 20.800m shares of BLD for 302.629b\\nbuying 11.700m shares of FLCM for 461.615b\\nselling 0.000 shares of OMTK for 26.377b\\nselling 0.000 shares of TITN for 11.041b\\nbuying 7.200m shares of RHOC for 43.773b\\nselling 0.000 shares of MGCP for 41.186b\\nselling 0.000 shares of SLRS for 29.137b\\nbuying 3.700m shares of TITN for 90.268b\\nselling 0.000 shares of FLCM for 140.536b\\nselling 0.000 shares of GPH for 27.946b\\nselling 0.000 shares of ECP for 103.026b\\nselling 0.000 shares of BLD for 83.676b\\nbuying 5.800m shares of FSIG for 380.453b\\nselling 0.000 shares of TITN for 9.504b\\nbuying 3.700m shares of TITN for 107.501b\\nbuying 23.600m shares of DCOMM for 175.203b\\nselling 0.000 shares of RHOC for 17.225b\\nselling 0.000 shares of TITN for 3.980b\\nbuying 13.900m shares of KGI for 454.912b\\nbuying 6.900m shares of GPH for 178.584b\\nbuying 7.200m shares of RHOC for 55.628b\\nbuying 3.700m shares of TITN for 104.663b\\nselling 0.000 shares of FSIG for 275.912b\\nselling 0.000 shares of KGI for 69.725b\\nselling 0.000 shares of GPH for 22.100b\\nbuying 16.200m shares of MGCP for 370.245b\\nselling 0.000 shares of DCOMM for 25.151b\\nselling 0.000 shares of TITN for 5.712b\\nselling 0.000 shares of MGCP for 7.086b\\nbuying 12.900m shares of CLRK for 359.753b\\nselling 0.000 shares of RHOC for 18.293b\\nbuying 5.800m shares of FSIG for 426.148b\\nbuying 22.000m shares of ECP for 396.531b\\nselling 0.000 shares of CLRK for 23.771b\\nbuying 11.700m shares of FLCM for 238.062b\\nbuying 7.200m shares of RHOC for 60.170b\\nselling 0.000 shares of ECP for 30.116b\\nselling 0.000 shares of FLCM for 14.378b\\nbuying 22.000m shares of ECP for 416.409b\\nselling 0.000 shares of FSIG for 274.324b\\nbuying 11.700m shares of FLCM for 242.301b\\nselling 0.000 shares of RHOC for 10.529b\\nbuying 3.700m shares of TITN for 102.626b\\nbuying 17.300m shares of ECP for 543.227b\\nbuying 10.500m shares of OMTK for 472.672b\\nbuying 7.200m shares of FSIG for 706.164b\\nbuying 12.500m shares of FLCM for 630.902b\\nbuying 5.600m shares of GPH for 160.016b\\nbuying 6.000m shares of APHE for 76.819b\\nbuying 14.400m shares of CTYS for 23.997b\\nbuying 23.600m shares of KGI for 428.588b\\nbuying 14.700m shares of BLD for 283.234b\\nbuying 18.200m shares of CLRK for 303.722b\\nselling 0.000 shares of FSIG for 31.748b\\nselling 0.000 shares of KGI for -3.026b\\nselling 0.000 shares of FLCM for 10.488b\\nbuying 20.600m shares of DCOMM for 173.888b\\nbuying 9.200m shares of HLS for 142.586b\\nselling 0.000 shares of CTYS for -909.252m\\nbuying 3.600m shares of TITN for 81.480b\\nbuying 15.200m shares of MGCP for 440.105b\\nselling 0.000 shares of APHE for -728.517m\\nselling 0.000 shares of TITN for 7.466b\\nselling 0.000 shares of OMTK for 59.422b\\nselling 0.000 shares of GPH for 31.040b\\nselling 0.000 shares of BLD for 46.291b\\nbuying 10.500m shares of OMTK for 544.419b\\nbuying 12.500m shares of FLCM for 475.029b\\nselling 0.000 shares of DCOMM for 29.517b\\nbuying 3.600m shares of TITN for 77.988b\\nselling 0.000 shares of MGCP for 93.672b\\nselling 0.000 shares of CLRK for 71.626b\\nselling 0.000 shares of OMTK for 55.033b\\nselling 0.000 shares of TITN for 1.151b\\nbuying 15.200m shares of MGCP for 511.385b\\nbuying 7.200m shares of FSIG for 333.876b\\nselling 0.000 shares of FLCM for 179.110b\\nbuying 14.400m shares of CTYS for 16.650b\\nselling 0.000 shares of ECP for 279.416b\\nselling 0.000 shares of MGCP for 42.898b\\nbuying 12.500m shares of FLCM for 562.627b\\nselling 0.000 shares of CTYS for 1.289b\\nbuying 3.600m shares of TITN for 62.477b\\nbuying 14.700m shares of BLD for 231.623b\\nbuying 10.500m shares of OMTK for 544.351b\\nselling 0.000 shares of TITN for 2.281b\\nbuying 6.000m shares of APHE for 100.821b\\nselling 0.000 shares of OMTK for -10.412b\\nselling 0.000 shares of FSIG for 204.388b\\nselling 0.000 shares of HLS for 56.587b\\nbuying 3.600m shares of TITN for 63.556b\\nbuying 15.200m shares of MGCP for 477.164b\\nselling 0.000 shares of BLD for 43.536b\\nselling 0.000 shares of FLCM for 233.368b\\nselling 0.000 shares of APHE for 7.353b\\nselling 0.000 shares of TITN for 3.171b\\nbuying 17.300m shares of ECP for 689.888b\\nbuying 3.600m shares of TITN for 62.030b\\nselling 0.000 shares of MGCP for 30.387b\\nbuying 7.200m shares of FSIG for 389.759b\\nbuying 12.500m shares of FLCM for 562.076b\\nselling 0.000 shares of TITN for 6.102b\\nbuying 7.900m shares of UNV for 236.953b\\nselling 0.000 shares of FSIG for 117.961b\\nbuying 3.600m shares of TITN for 59.933b\\nselling 0.000 shares of ECP for 140.325b\\nbuying 7.200m shares of FSIG for 488.635b\\nselling 0.000 shares of FLCM for 288.305b\\nselling 0.000 shares of UNV for 13.139b\\nselling 0.000 shares of TITN for 1.968b\\nbuying 6.000m shares of APHE for 82.010b\\nbuying 17.300m shares of ECP for 782.560b\\nselling 0.000 shares of FSIG for 48.863b\\nselling 0.000 shares of APHE for -4.235b\\nbuying 3.600m shares of TITN for 60.603b\\nselling 0.000 shares of ECP for 38.599b\\nbuying 14.700m shares of BLD for 298.155b\\nbuying 7.200m shares of FSIG for 493.818b\\nbuying 12.500m shares of FLCM for 644.322b\\nselling 0.000 shares of TITN for -1.712b\\nbuying 17.300m shares of ECP for 779.380b\\nselling 0.000 shares of BLD for 19.303b\\nbuying 15.200m shares of MGCP for 530.033b\\nselling 0.000 shares of ECP for 86.464b\\nselling 0.000 shares of MGCP for 32.233b\\nselling 0.000 shares of FSIG for 183.605b\\nbuying 7.200m shares of FSIG for 603.754b\\nselling 0.000 shares of FLCM for 450.844b\\nbuying 3.600m shares of TITN for 48.560b\\nbuying 5.600m shares of GPH for 140.598b\\n\"}}],[\"CodingContracts/types.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"CodingContracts/types.txt\",\"text\":\"[\\\"Find Largest Prime Factor\\\",\\\"Subarray with Maximum Sum\\\",\\\"Total Ways to Sum\\\",\\\"Total Ways to Sum II\\\",\\\"Spiralize Matrix\\\",\\\"Array Jumping Game\\\",\\\"Array Jumping Game II\\\",\\\"Merge Overlapping Intervals\\\",\\\"Generate IP Addresses\\\",\\\"Algorithmic Stock Trader I\\\",\\\"Algorithmic Stock Trader II\\\",\\\"Algorithmic Stock Trader III\\\",\\\"Algorithmic Stock Trader IV\\\",\\\"Minimum Path Sum in a Triangle\\\",\\\"Unique Paths in a Grid I\\\",\\\"Unique Paths in a Grid II\\\",\\\"Shortest Path in a Grid\\\",\\\"Sanitize Parentheses in Expression\\\",\\\"Find All Valid Math Expressions\\\",\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"Proper 2-Coloring of a Graph\\\",\\\"Compression I: RLE Compression\\\",\\\"Compression II: LZ Decompression\\\",\\\"Compression III: LZ Compression\\\",\\\"Encryption I: Caesar Cipher\\\",\\\"Encryption II: Vigenère Cipher\\\"]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"Stock/manager.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":2316028008335.38,\"onlineRunningTime\":7596.609999995282,\"ramUsage\":29.3,\"server\":\"home\",\"scriptKey\":\"Stock/manager.js*[]\",\"title\":\"Stock/manager.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"serverStats.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7593.809999995285,\"ramUsage\":8.1,\"server\":\"home\",\"scriptKey\":\"serverStats.js*[]\",\"title\":\"serverStats.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hackingDeamon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1150597663.0330238,\"onlineMoneyMade\":482007939874355.56,\"onlineRunningTime\":5584.809999997112,\"ramUsage\":20.55,\"server\":\"home\",\"scriptKey\":\"hackingDeamon.js*[]\",\"title\":\"hackingDeamon.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",109508.24931105482],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"hack.js*[\\\"global-pharm\\\",109508.24931105482]\",\"title\":\"hack.js global-pharm 109508.24931105482\",\"threads\":60,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",0,false]\",\"title\":\"weaken.js global-pharm 0 false\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",29265.53314961461],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"global-pharm\\\",29265.53314961461]\",\"title\":\"grow.js global-pharm 29265.53314961461\",\"threads\":540,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.210000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.0100000000000025,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.610000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.210000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.010000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.210000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.8100000000000005,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.6100000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.21,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.6099999999999999,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.6100000000000001,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.01,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"global-pharm\\\",100,false]\",\"title\":\"weaken.js global-pharm 100 false\",\"threads\":44,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"72.5.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67866866366,\"moneyMax\":1696671659150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1354,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"31.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54982068032,\"moneyMax\":1374551700800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1246,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"46.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":17427312560,\"moneyMax\":435682814000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":71,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"8.6.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":29979261019,\"moneyMax\":749481525475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":946,\"serverGrowth\":55,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"38.2.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":22248645271,\"moneyMax\":556216131775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1091,\"serverGrowth\":88,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"84.5.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":24329193982,\"moneyMax\":608229849550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":71,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"66.3.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":17614624577,\"moneyMax\":440365614425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1018,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"22.5.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":21012995420,\"moneyMax\":525324885500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":78,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"86.6.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":24676277779,\"moneyMax\":616906944475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1176,\"serverGrowth\":97,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"48.3.8.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1438524343,\"moneyMax\":35963108575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1006,\"serverGrowth\":80,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"48.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1388,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"23.6.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1097259169,\"moneyMax\":27431479225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":933,\"serverGrowth\":87,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"24.1.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":932606459,\"moneyMax\":23315161475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":57,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"84.9.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":853417465,\"moneyMax\":21335436625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":947,\"serverGrowth\":69,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"3.7.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":653240057,\"moneyMax\":16331001425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"20.8.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":765375731,\"moneyMax\":19134393275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":68,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"96.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":973828819,\"moneyMax\":24345720475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":86,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"22.6.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1110309241,\"moneyMax\":27757731025,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":803,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"26.2.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":856718321,\"moneyMax\":21417958025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":71,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"63.2.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":589959012,\"moneyMax\":14748975300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":85,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"51.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":823222545,\"moneyMax\":20580563625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":78,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"16.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":792335096,\"moneyMax\":19808377400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":74,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"78.1.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1079806665,\"moneyMax\":26995166625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":58,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"39.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":908216362,\"moneyMax\":22705409050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":64,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"85.2.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"zb-def\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"zb-def\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1085672538,\"moneyMax\":27141813450,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":795,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"88.0.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"applied-energetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"applied-energetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":805996101,\"moneyMax\":20149902525,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":782,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"30.0.6.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":879659455,\"moneyMax\":21991486375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":71,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"40.6.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1628968910,\"moneyMax\":40724222750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":53,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"88.4.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":40418379825,\"moneyMax\":40418379825,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":756,\"serverGrowth\":89,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"54.4.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"nova-med\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"nova-med\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1211516408,\"moneyMax\":30287910200,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":811,\"serverGrowth\":80,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"98.0.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1368910523,\"moneyMax\":34222763075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"5.3.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1003915367,\"moneyMax\":25097884175,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":783,\"serverGrowth\":79,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"97.2.4.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":731817003,\"moneyMax\":18295425075,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":680,\"serverGrowth\":55,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"6.2.0.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":578372838,\"moneyMax\":14459320950,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":492,\"serverGrowth\":53,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"39.7.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":749032980,\"moneyMax\":18725824500,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":594,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"75.3.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":299426810,\"moneyMax\":7485670250,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":408,\"serverGrowth\":49,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"63.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":240369984,\"moneyMax\":6009249600,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":414,\"serverGrowth\":44,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"82.5.1.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":829172217,\"moneyMax\":20729305425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":741,\"serverGrowth\":79,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"86.6.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":283804808,\"moneyMax\":7095120200,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":54,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"47.2.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"syscore\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"syscore\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":546497754,\"moneyMax\":13662443850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":589,\"serverGrowth\":62,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"21.9.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":466282562,\"moneyMax\":11657064050,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":444,\"serverGrowth\":32,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"10.2.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":4463572900,\"moneyMax\":4463572900,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":325,\"serverGrowth\":52,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"78.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"computek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"computek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":233676288,\"moneyMax\":5841907200,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":317,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"52.5.9.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":423,\"serverGrowth\":62,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"50.8.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"johnson-ortho\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"johnson-ortho\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":73838024,\"moneyMax\":1845950600,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":299,\"serverGrowth\":44,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"74.4.6.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"14.9.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.068,\"minDifficulty\":3,\"moneyAvailable\":4325999.1880356595,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"18.8.5.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"34.8.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"87.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"93.5.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"98.2.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"28.7.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"18.1.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"34.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"52.7.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"66.7.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"70.7.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":69127276,\"moneyMax\":1728181900,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":208,\"serverGrowth\":35,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"43.3.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"crush-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"crush-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":55810803,\"moneyMax\":1395270075,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":225,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"38.2.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.078,\"minDifficulty\":10,\"moneyAvailable\":47742509.86502671,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"48.8.2.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":521,\"serverGrowth\":34,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"1.5.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1097,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"19.4.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"snap-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"snap-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":689,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"9.2.5.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":533,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"16.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":365,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"56.5.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":207,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"8.5.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":522,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"81.7.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"14.6.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"8.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"63.1.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow\",\"httpPortOpen\":true,\"ip\":\"49.9.9.2\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-0\",\"httpPortOpen\":true,\"ip\":\"28.4.3.9\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-1\",\"httpPortOpen\":true,\"ip\":\"53.4.3.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-1\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack\",\"httpPortOpen\":true,\"ip\":\"56.7.4.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-weak\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-weak\",\"httpPortOpen\":true,\"ip\":\"25.1.9.5\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-weak\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-weak\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-weak\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-2\",\"httpPortOpen\":true,\"ip\":\"92.1.3.6\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-2\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  if (ns.args[2] === true) {\\n    ns.atExit(() => {\\n      ns.writePort(2, \\\"done\\\");\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgaWYgKG5zLmFyZ3NbMl0gPT09IHRydWUpIHtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBucy53cml0ZVBvcnQoMiwgXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDBDQUEwQztBQUNsRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLDJDQUEyQztBQUVuRyxRQUFNLEdBQUcsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUUxRCxNQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sTUFBTTtBQUNyQixPQUFHLE9BQU8sTUFBTTtBQUNaLFNBQUcsVUFBVSxHQUFHLE1BQU07QUFBQSxJQUMxQixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":266773.56050219893}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":163.3921,\"discovery\":\"known\",\"playerReputation\":1508768.8094582825}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":95.28209999999999,\"discovery\":\"known\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":94.919,\"discovery\":\"known\",\"playerReputation\":185375.82848402357}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":94.2749,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":36.0014,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":9086.956047218988}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0.9954,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":127.2742,\"discovery\":\"known\",\"playerReputation\":206077.83719205385}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":46.7541,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":47844.075721490655,\"lastPrice\":48052.28657199691,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.48,\"b\":false,\"otlkMag\":9.060231949317807,\"otlkMagForecast\":31.592772853426805,\"cap\":536887854,\"spreadPerc\":0.4,\"shareTxForMovement\":68196,\"shareTxUntilMovement\":55800,\"totalShares\":86700000,\"maxShares\":17300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":35162.68578343679,\"lastPrice\":35306.14501668529,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":6.741214346383262,\"otlkMagForecast\":67.43032423191902,\"cap\":422516433,\"spreadPerc\":0.2,\"shareTxForMovement\":43149,\"shareTxUntilMovement\":10812,\"totalShares\":75900000,\"maxShares\":15200000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":23373.89853227532,\"lastPrice\":23224.40004296001,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":8.51883862261555,\"otlkMagForecast\":60.774184660398014,\"cap\":402365736,\"spreadPerc\":0.2,\"shareTxForMovement\":86701,\"shareTxUntilMovement\":79298,\"totalShares\":73600000,\"maxShares\":14700000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":15201.284665606392,\"lastPrice\":15299.137315791388,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":9.292279949409735,\"otlkMagForecast\":61.451056754984286,\"cap\":357500432,\"spreadPerc\":0.5,\"shareTxForMovement\":36885,\"shareTxUntilMovement\":23175,\"totalShares\":91200000,\"maxShares\":18200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":43337.439136436944,\"lastPrice\":43087.425056827444,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.539073535835199,\"otlkMagForecast\":62.67380463758223,\"cap\":35598123,\"spreadPerc\":0.6,\"shareTxForMovement\":61644,\"shareTxUntilMovement\":18088,\"totalShares\":52600000,\"maxShares\":10500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":86486.873290091,\"lastPrice\":87310.20235576309,\"playerShares\":7200000,\"playerAvgPx\":83854.76901310172,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.05,\"b\":true,\"otlkMag\":15.135865020026241,\"otlkMagForecast\":68.41499883402929,\"cap\":893738282,\"spreadPerc\":1,\"shareTxForMovement\":84222,\"shareTxUntilMovement\":70822,\"totalShares\":35800000,\"maxShares\":7200000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":10049.904006782734,\"lastPrice\":9977.535895598932,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.594363164218316,\"otlkMagForecast\":61.78708564572735,\"cap\":139571177,\"spreadPerc\":0.4,\"shareTxForMovement\":46648,\"shareTxUntilMovement\":25476,\"totalShares\":118200000,\"maxShares\":23600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":75121.18558289502,\"lastPrice\":75972.53216777049,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":false,\"otlkMag\":11.896191261274593,\"otlkMagForecast\":30.91388734605716,\"cap\":499998345,\"spreadPerc\":0.9,\"shareTxForMovement\":68056,\"shareTxUntilMovement\":36792,\"totalShares\":62600000,\"maxShares\":12500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":14823.000112718346,\"lastPrice\":14709.641385145631,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":6.10425532855904,\"otlkMagForecast\":58.932950227458086,\"cap\":503033860,\"spreadPerc\":0.3,\"shareTxForMovement\":70958,\"shareTxUntilMovement\":70958,\"totalShares\":52200000,\"maxShares\":10400000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":8915.383950999907,\"lastPrice\":8970.348531252865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":9.29984261548512,\"otlkMagForecast\":60.0964932244314,\"cap\":133446380,\"spreadPerc\":0.8,\"shareTxForMovement\":91172,\"shareTxUntilMovement\":27424,\"totalShares\":102800000,\"maxShares\":20600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":19346.00223086301,\"lastPrice\":19452.995145945362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":9.485250173120841,\"otlkMagForecast\":58.56876184580646,\"cap\":427838599,\"spreadPerc\":1,\"shareTxForMovement\":95558,\"shareTxUntilMovement\":60374,\"totalShares\":46000000,\"maxShares\":9200000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":10953.05179180265,\"lastPrice\":11027.530194915382,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.78434790197705,\"otlkMagForecast\":42.93888135817511,\"cap\":61523155,\"spreadPerc\":0.5,\"shareTxForMovement\":91308,\"shareTxUntilMovement\":91308,\"totalShares\":79400000,\"maxShares\":15900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":15707.772826573397,\"lastPrice\":15619.970534851185,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":8.444958813398925,\"otlkMagForecast\":57.10571128703458,\"cap\":304847134,\"spreadPerc\":0.8,\"shareTxForMovement\":69896,\"shareTxUntilMovement\":69896,\"totalShares\":65500000,\"maxShares\":13100000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":31561.7667630267,\"lastPrice\":31704.842259707664,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":false,\"otlkMag\":9.264891336984855,\"otlkMagForecast\":40.053177607310815,\"cap\":129686791,\"spreadPerc\":0.3,\"shareTxForMovement\":64191,\"shareTxUntilMovement\":62097,\"totalShares\":39400000,\"maxShares\":7900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14286.663559020686,\"lastPrice\":14210.64846105901,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":6.147969917371815,\"otlkMagForecast\":56.015684447874555,\"cap\":83529568,\"spreadPerc\":1,\"shareTxForMovement\":96668,\"shareTxUntilMovement\":96668,\"totalShares\":60300000,\"maxShares\":12100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7199.265607417095,\"lastPrice\":7150.642770159116,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.64611328223403,\"otlkMagForecast\":56.26073629916354,\"cap\":185196343,\"spreadPerc\":0.6,\"shareTxForMovement\":61745,\"shareTxUntilMovement\":61745,\"totalShares\":74800000,\"maxShares\":15000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":17721.040010515964,\"lastPrice\":17844.75259591008,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":6.38994323116226,\"otlkMagForecast\":59.64550331972744,\"cap\":130937040,\"spreadPerc\":1,\"shareTxForMovement\":123003,\"shareTxUntilMovement\":123003,\"totalShares\":31700000,\"maxShares\":6300000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":24624.342691213962,\"lastPrice\":24484.49168564886,\"playerShares\":5600000,\"playerAvgPx\":25106.717144811777,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":9.864532193071717,\"otlkMagForecast\":99.9719877853405,\"cap\":511494329,\"spreadPerc\":0.4,\"shareTxForMovement\":49808,\"shareTxUntilMovement\":3216,\"totalShares\":28200000,\"maxShares\":5600000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":22439.992398536262,\"lastPrice\":22582.407058490542,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":5.051706286614813,\"otlkMagForecast\":43.27513838978332,\"cap\":26981053,\"spreadPerc\":0.5,\"shareTxForMovement\":122015,\"shareTxUntilMovement\":122015,\"totalShares\":26200000,\"maxShares\":5200000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":25079.37145576161,\"lastPrice\":24527.87148396465,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":8.096009275925296,\"otlkMagForecast\":52.933909239677135,\"cap\":104679217,\"spreadPerc\":0.8,\"shareTxForMovement\":19425,\"shareTxUntilMovement\":19425,\"totalShares\":58900000,\"maxShares\":11800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":13285.165235414826,\"lastPrice\":13436.930176351729,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":5.53672094344129,\"otlkMagForecast\":55.800232464954995,\"cap\":53760841,\"spreadPerc\":0.7,\"shareTxForMovement\":57589,\"shareTxUntilMovement\":57589,\"totalShares\":45600000,\"maxShares\":9100000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2831.199042521966,\"lastPrice\":2817.9139366316804,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":true,\"otlkMag\":1.0842128123445984,\"otlkMagForecast\":48.92967076610489,\"cap\":22719933,\"spreadPerc\":0.8,\"shareTxForMovement\":121088,\"shareTxUntilMovement\":121088,\"totalShares\":56500000,\"maxShares\":11300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":9145.765902329646,\"lastPrice\":9296.678474244121,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.82,\"b\":false,\"otlkMag\":7.1597906336987975,\"otlkMagForecast\":40.89525679639919,\"cap\":13567796,\"spreadPerc\":1,\"shareTxForMovement\":54200,\"shareTxUntilMovement\":6720,\"totalShares\":30200000,\"maxShares\":6000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":11284.303045326127,\"lastPrice\":11440.833960138145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":1.0482193514557614,\"otlkMagForecast\":51.183626918812045,\"cap\":74849866,\"spreadPerc\":1.2,\"shareTxForMovement\":41376,\"shareTxUntilMovement\":41376,\"totalShares\":37600000,\"maxShares\":7500000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":6661.544579931976,\"lastPrice\":6608.222313146963,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.89,\"b\":true,\"otlkMag\":5.816480867713741,\"otlkMagForecast\":55.00305027307057,\"cap\":68460840,\"spreadPerc\":0.8,\"shareTxForMovement\":75638,\"shareTxUntilMovement\":75638,\"totalShares\":41800000,\"maxShares\":8400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5697.496600301382,\"lastPrice\":5849.364279726135,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.94,\"b\":false,\"otlkMag\":6.821852592596522,\"otlkMagForecast\":47.89580010812945,\"cap\":30311367,\"spreadPerc\":1.2,\"shareTxForMovement\":31578,\"shareTxUntilMovement\":31578,\"totalShares\":15700000,\"maxShares\":3100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4470.389281681083,\"lastPrice\":4508.893020274316,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.95,\"b\":false,\"otlkMag\":3.2911725600591577,\"otlkMagForecast\":52.91798635430135,\"cap\":71510516,\"spreadPerc\":1.2,\"shareTxForMovement\":87153,\"shareTxUntilMovement\":87153,\"totalShares\":11400000,\"maxShares\":2300000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3357.212552116739,\"lastPrice\":3335.739959337284,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":1.3902400077126746,\"otlkMagForecast\":51.393605748502516,\"cap\":100118440,\"spreadPerc\":0.6,\"shareTxForMovement\":83007,\"shareTxUntilMovement\":83007,\"totalShares\":10700000,\"maxShares\":2100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3887.090627701079,\"lastPrice\":3934.667116407191,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.35,\"b\":false,\"otlkMag\":6.654506322787702,\"otlkMagForecast\":45.08445244559061,\"cap\":49674486,\"spreadPerc\":0.9,\"shareTxForMovement\":44907,\"shareTxUntilMovement\":44907,\"totalShares\":10900000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":139.7304698372565,\"lastPrice\":142.30217459908272,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.03,\"b\":false,\"otlkMag\":6.244227936596113,\"otlkMagForecast\":45.64624235801937,\"cap\":4696809,\"spreadPerc\":0.9,\"shareTxForMovement\":46352,\"shareTxUntilMovement\":46352,\"totalShares\":87900000,\"maxShares\":17600000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":810.3782996972843,\"lastPrice\":800.0062787610877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.43,\"b\":false,\"otlkMag\":7.811155334172175,\"otlkMagForecast\":37.85008507696268,\"cap\":9231356,\"spreadPerc\":0.5,\"shareTxForMovement\":32839,\"shareTxUntilMovement\":17526,\"totalShares\":71900000,\"maxShares\":14400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":40494.123458537026,\"lastPrice\":40765.80346199142,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":false,\"otlkMag\":7.598746334528096,\"otlkMagForecast\":41.38181205670147,\"cap\":141555418,\"spreadPerc\":0.3,\"shareTxForMovement\":110991,\"shareTxUntilMovement\":110991,\"totalShares\":12300000,\"maxShares\":2500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":13793.819296705837,\"lastPrice\":13866.35410667744,\"playerShares\":3600000,\"playerAvgPx\":13488.75839245217,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":10.05670727261174,\"otlkMagForecast\":61.10055045239847,\"cap\":41568543,\"spreadPerc\":0.3,\"shareTxForMovement\":207897,\"shareTxUntilMovement\":70900,\"totalShares\":18100000,\"maxShares\":3600000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":10,\"lastUpdate\":1709568006100,\"ticksUntilCycle\":32}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":200,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1709500725171","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}