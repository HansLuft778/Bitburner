{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":706,\"strength\":2,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":63248114.20371193,\"strength\":13.677028418391027,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5246636836477374,\"hacking_speed\":1.415670095271294,\"hacking_money\":1.8072183428106552,\"hacking_grow\":1.2571953689117603,\"hacking\":1.885554793221472,\"hacking_exp\":2.688490295498844,\"strength\":1.5086344426941123,\"strength_exp\":1.5903521416733768,\"defense\":1.5086344426941123,\"defense_exp\":1.5903521416733768,\"dexterity\":1.4520606510930834,\"dexterity_exp\":1.5903521416733768,\"agility\":1.3200551373573484,\"agility_exp\":1.5903521416733768,\"charisma\":1.6594978869635237,\"charisma_exp\":1.5903521416733768,\"hacknet_node_money\":1.2571953689117603,\"hacknet_node_purchase_cost\":0.7954213201291127,\"hacknet_node_ram_cost\":0.7954213201291127,\"hacknet_node_core_cost\":0.7954213201291127,\"hacknet_node_level_cost\":0.7954213201291127,\"company_rep\":2.0992648270088576,\"faction_rep\":1.5903521416733768,\"work_money\":1.3829149058029364,\"crime_success\":1.2571953689117603,\"crime_money\":1.2571953689117603,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuregen Gene Modification\"}],\"city\":\"Ishima\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[]},\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-527.3299999999902,\"numPeopleKilled\":0,\"location\":\"Storm Technologies\",\"money\":587886657788.636,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-1032,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":622454438820.6354,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":587885657788.636,\"work\":0,\"servers\":-28878080000,\"other\":-5315700000,\"augmentations\":-375000000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4320,\"codingcontract\":0,\"corporation\":0,\"crime\":165053000,\"gang\":0,\"hacking\":10771431014517.707,\"hacknet\":13635055.799451966,\"hacknet_expenses\":-128154.50934570104,\"hospitalization\":-5595000,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":3352325696031.4014,\"work\":10095.360843708015,\"servers\":-2076352316060.1147,\"other\":-15977800000,\"augmentations\":-5295748173102.816}},\"playtimeSinceLastAug\":17375400,\"playtimeSinceLastBitnode\":422838800,\"lastAugReset\":1709198856803,\"lastNodeReset\":-1,\"purchasedServers\":[\"daemon-grow\",\"daemon-hack\",\"daemon-weak\"],\"scriptProdSinceLastAug\":622401060802.4647,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1708793459067},{\"ID\":\"FROZE\",\"unlockedOn\":1708804573260},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1708819127725},{\"ID\":\"TOR\",\"unlockedOn\":1708819187737},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1708819727725},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1708823028666},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1708823028668},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1708823328667},{\"ID\":\"NITESEC\",\"unlockedOn\":1708889793992},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1708898400757},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1708942188632},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1708946531579},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1708946951570},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1708947071581},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1708979204993},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1709031428692},{\"ID\":\"TRAVEL\",\"unlockedOn\":1709139381830},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1709150990586},{\"ID\":\"4S\",\"unlockedOn\":1709151830586},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1709154050587},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1709215419160}],\"terminalCommandHistory\":[\"buy Formulas.exe \",\"home\",\"run hackingDeamon.js \",\"scan-analyze 10\",\"backdoor \",\"bac\",\"backdoor \",\"home \",\"run bestServer.js \",\"run serverStats.js \",\"run bestServer.js \",\"run hackingDeamon.js \",\"cat timelog.txt \",\"nano timelog.txt \",\"cat timelog.txt \",\"scan\",\"run hackingDeamon.js \",\"cat timelog.txt \",\"nano timelog.txt \",\"run hackingDeamon.js \",\"cat timelog.txt \",\"run hackingDeamon.js \",\"run serverStats.js \",\"run hackingDeamon.js \",\"scan\",\"connect daemon-grow \",\"free\",\"home\",\"connect daemon-hack \",\"free\",\"home\",\"run bestServer.js \",\"run hackingDeamon.js \",\"cat timelog.txt \",\"run gorg.js \",\"scan-analyze 10\",\"analyze \",\"ls\",\"home\",\"cat timelog.txt \",\"nano timelog.txt \",\"run hackingDeamon.js \",\"scan-analyze 10\",\"home\",\"cat timelog.txt \",\"run hackingDeamon.js \",\"nano timelog.txt \",\"cat timelog.txt \",\"nano timelog.txt \",\"run hackingDeamon.js \"],\"lastUpdate\":1709216232553,\"lastSave\":1709216187160,\"totalPlaytime\":422838800,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":24846,\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1a1ebb4b422ad0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":4,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"87.8.7.3\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV2.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"parallel/growingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  growServer(ns, \\\"foodnstuff\\\", 0);\\n}\\nexport function growServer(ns, target, batchId, delay = 0) {\\n  const serverMaxMoney = ns.getServerMaxMoney(target);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(target);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  const totalGrowThreadsNeeded = Math.ceil(ns.growthAnalyze(target, moneyMultiplier));\\n  ns.print(\\\"Actual grow threads needed: \\\" + totalGrowThreadsNeeded);\\n  if (totalGrowThreadsNeeded < 1) {\\n    ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const growingScriptRam = 1.75;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n    if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n      ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n  const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to grow \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to grow \\\" + target);\\n  }\\n  ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3dpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQgfSBmcm9tIFwiQC9iZXN0U2VydmVyXCI7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tIFwiQC9saWJcIjtcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgU2VydmVyTWFuYWdlciB9IGZyb20gXCIuL1NlcnZlck1hbmFnZXJcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gICAgbnMudGFpbCgpO1xuICAgIGdyb3dTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3dTZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApOiBib29sZWFuIHtcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XG4gICAgY29uc3Qgc2VydmVyQ3VycmVudE1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KTtcbiAgICBsZXQgbW9uZXlNdWx0aXBsaWVyID0gc2VydmVyTWF4TW9uZXkgLyBzZXJ2ZXJDdXJyZW50TW9uZXk7XG4gICAgaWYgKGlzTmFOKG1vbmV5TXVsdGlwbGllcikgfHwgbW9uZXlNdWx0aXBsaWVyID09IEluZmluaXR5KSBtb25leU11bHRpcGxpZXIgPSAxO1xuICAgIGNvbnN0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZSh0YXJnZXQsIG1vbmV5TXVsdGlwbGllcikpO1xuXG4gICAgbnMucHJpbnQoXCJBY3R1YWwgZ3JvdyB0aHJlYWRzIG5lZWRlZDogXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKTtcblxuICAgIGlmICh0b3RhbEdyb3dUaHJlYWRzTmVlZGVkIDwgMSkge1xuICAgICAgICBucy5wcmludChcIk5vIGdyb3cgdGhyZWFkcyBuZWVkZWQsIHNraXBwaW5nIGdyb3d0aCBwcm9jZXNzXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZXhlYyBncm93LmpzIHdpdGggbnVtIG9mIHRocmVhZHNcbiAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xuICAgIGNvbnN0IGdyb3dpbmdTY3JpcHRSYW0gPSAxLjc1O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XG5cbiAgICAgICAgY29uc3QgbWF4VGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoaG9zdC5hdmFpbGFibGVSYW0gLyBncm93aW5nU2NyaXB0UmFtKTtcblxuICAgICAgICBpZiAobWF4VGhyZWFkc09uSG9zdCA+PSB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKSB7XG4gICAgICAgICAgICBucy5leGVjKFwiZ3Jvdy5qc1wiLCBob3N0Lm5hbWUsIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJObyBhdmFpbGFibGUgaG9zdCB0byBncm93IFwiICsgdGFyZ2V0ICsgXCIuIEF0dGVtcHRpbmcgdG8gdXBncmFkZS9idXkgc2VydmVyLi4uXCIpO1xuXG4gICAgY29uc3QgbmVlZGVkR3Jvd1JhbSA9IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKiBncm93aW5nU2NyaXB0UmFtO1xuICAgIGNvbnN0IHNlcnZlciA9IFNlcnZlck1hbmFnZXIuYnV5T3JVcGdyYWRlU2VydmVyKG5zLCBuZWVkZWRHcm93UmFtLCBDb25maWcuR1JPV19TRVJWRVJfTkFNRSk7XG5cbiAgICBpZiAoc2VydmVyID09PSBcIlwiKSB7XG4gICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byBncm93IFwiICsgdGFyZ2V0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGdyb3cgXCIgKyB0YXJnZXQpO1xuICAgIH1cblxuICAgIG5zLmV4ZWMoXCJncm93LmpzXCIsIHNlcnZlciwgdG90YWxHcm93VGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsY0FBYztBQUV2QixTQUFTLHFCQUFxQjtBQUU5QixzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLGFBQVcsSUFBSSxjQUFjLENBQUM7QUFDbEM7QUFFTyxnQkFBUyxXQUFXLElBQVEsUUFBZ0IsU0FBaUIsUUFBUSxHQUFZO0FBQ3BGLFFBQU0saUJBQWlCLEdBQUcsa0JBQWtCLE1BQU07QUFDbEQsUUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsTUFBTTtBQUM1RCxNQUFJLGtCQUFrQixpQkFBaUI7QUFDdkMsTUFBSSxNQUFNLGVBQWUsS0FBSyxtQkFBbUI7QUFBVSxzQkFBa0I7QUFDN0UsUUFBTSx5QkFBeUIsS0FBSyxLQUFLLEdBQUcsY0FBYyxRQUFRLGVBQWUsQ0FBQztBQUVsRixLQUFHLE1BQU0saUNBQWlDLHNCQUFzQjtBQUVoRSxNQUFJLHlCQUF5QixHQUFHO0FBQzVCLE9BQUcsTUFBTSxpREFBaUQ7QUFDMUQsV0FBTztBQUFBLEVBQ1g7QUFHQSxRQUFNLFdBQVcsMEJBQTBCLEVBQUU7QUFDN0MsUUFBTSxtQkFBbUI7QUFFekIsV0FBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFVBQU0sbUJBQW1CLEtBQUssTUFBTSxLQUFLLGVBQWUsZ0JBQWdCO0FBRXhFLFFBQUksb0JBQW9CLHdCQUF3QjtBQUM1QyxTQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sd0JBQXdCLFFBQVEsS0FBSztBQUNuRSxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFFQSxLQUFHLE1BQU0sT0FBTyxTQUFTLCtCQUErQixTQUFTLHVDQUF1QztBQUV4RyxRQUFNLGdCQUFnQix5QkFBeUI7QUFDL0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksZUFBZSxPQUFPLGdCQUFnQjtBQUUxRixNQUFJLFdBQVcsSUFBSTtBQUNmLE9BQUcsT0FBTyx5Q0FBeUMsTUFBTTtBQUN6RCxVQUFNLElBQUksTUFBTSx5Q0FBeUMsTUFBTTtBQUFBLEVBQ25FO0FBRUEsS0FBRyxLQUFLLFdBQVcsUUFBUSx3QkFBd0IsUUFBUSxLQUFLO0FBRWhFLFNBQU87QUFDWDsiLCJuYW1lcyI6W119\",\"filename\":\"parallel/growingAlgo.js\",\"server\":\"home\"}}],[\"parallel/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  hackServer(ns, \\\"silver-helix\\\", 0.8, 0);\\n}\\nexport function hackServer(ns, target, threshold, batchId, delay = 0) {\\n  const totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n  ns.print(\\\"actual hack threads needed: \\\" + totalHackThreadsNeeded);\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const hackingScriptRam = 1.7;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n    if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n      ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Buying server...\\\");\\n  const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to hack \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to hack \\\" + target);\\n  }\\n  ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQgfSBmcm9tIFwiQC9iZXN0U2VydmVyXCI7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tIFwiQC9saWJcIjtcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgU2VydmVyTWFuYWdlciB9IGZyb20gXCIuL1NlcnZlck1hbmFnZXJcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gICAgbnMudGFpbCgpO1xuICAgIGhhY2tTZXJ2ZXIobnMsIFwic2lsdmVyLWhlbGl4XCIsIDAuOCwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYWNrU2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIHRocmVzaG9sZDogbnVtYmVyLCBiYXRjaElkOiBudW1iZXIsIGRlbGF5ID0gMCkge1xuICAgIGNvbnN0IHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSBNYXRoLmNlaWwodGhyZXNob2xkIC8gbnMuaGFja0FuYWx5emUodGFyZ2V0KSk7XG4gICAgbnMucHJpbnQoXCJhY3R1YWwgaGFjayB0aHJlYWRzIG5lZWRlZDogXCIgKyB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkKTtcblxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XG4gICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IDEuNztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xuXG4gICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XG5cbiAgICAgICAgaWYgKG1heFRocmVhZHNPbkhvc3QgPj0gdG90YWxIYWNrVGhyZWFkc05lZWRlZCkge1xuICAgICAgICAgICAgbnMuZXhlYyhcImhhY2suanNcIiwgaG9zdC5uYW1lLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbnMucHJpbnQoQ29sb3JzLllFTExPVyArIFwiTm8gYXZhaWxhYmxlIGhvc3QgdG8gZ3JvdyBcIiArIHRhcmdldCArIFwiLiBCdXlpbmcgc2VydmVyLi4uXCIpO1xuXG4gICAgY29uc3QgbmVlZGVkR3Jvd1JhbSA9IHRvdGFsSGFja1RocmVhZHNOZWVkZWQgKiBoYWNraW5nU2NyaXB0UmFtO1xuICAgIGNvbnN0IHNlcnZlciA9IFNlcnZlck1hbmFnZXIuYnV5T3JVcGdyYWRlU2VydmVyKG5zLCBuZWVkZWRHcm93UmFtLCBDb25maWcuSEFDS19TRVJWRVJfTkFNRSk7XG5cbiAgICBpZiAoc2VydmVyID09PSBcIlwiKSB7XG4gICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byBoYWNrIFwiICsgdGFyZ2V0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGhhY2sgXCIgKyB0YXJnZXQpO1xuICAgIH1cblxuICAgIG5zLmV4ZWMoXCJoYWNrLmpzXCIsIHNlcnZlciwgdG90YWxIYWNrVGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsY0FBYztBQUV2QixTQUFTLHFCQUFxQjtBQUU5QixzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLGFBQVcsSUFBSSxnQkFBZ0IsS0FBSyxDQUFDO0FBQ3pDO0FBRU8sZ0JBQVMsV0FBVyxJQUFRLFFBQWdCLFdBQW1CLFNBQWlCLFFBQVEsR0FBRztBQUM5RixRQUFNLHlCQUF5QixLQUFLLEtBQUssWUFBWSxHQUFHLFlBQVksTUFBTSxDQUFDO0FBQzNFLEtBQUcsTUFBTSxpQ0FBaUMsc0JBQXNCO0FBRWhFLFFBQU0sV0FBVywwQkFBMEIsRUFBRTtBQUM3QyxRQUFNLG1CQUFtQjtBQUV6QixXQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsUUFBUSxLQUFLO0FBQ3RDLFVBQU0sT0FBTyxTQUFTLENBQUM7QUFFdkIsVUFBTSxtQkFBbUIsS0FBSyxNQUFNLEtBQUssZUFBZSxnQkFBZ0I7QUFFeEUsUUFBSSxvQkFBb0Isd0JBQXdCO0FBQzVDLFNBQUcsS0FBSyxXQUFXLEtBQUssTUFBTSx3QkFBd0IsUUFBUSxLQUFLO0FBQ25FLGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUVBLEtBQUcsTUFBTSxPQUFPLFNBQVMsK0JBQStCLFNBQVMsb0JBQW9CO0FBRXJGLFFBQU0sZ0JBQWdCLHlCQUF5QjtBQUMvQyxRQUFNLFNBQVMsY0FBYyxtQkFBbUIsSUFBSSxlQUFlLE9BQU8sZ0JBQWdCO0FBRTFGLE1BQUksV0FBVyxJQUFJO0FBQ2YsT0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFVBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsRUFDbkU7QUFFQSxLQUFHLEtBQUssV0FBVyxRQUFRLHdCQUF3QixRQUFRLEtBQUs7QUFFaEUsU0FBTztBQUNYOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/hackingAlgo.js\",\"server\":\"home\"}}],[\"parallel/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getBestServer } from \\\"/bestServer.js\\\";\\nimport { Colors, getTimeH } from \\\"/lib.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { growServer } from \\\"/parallel/growingAlgo.js\\\";\\nimport { hackServer } from \\\"/parallel/hackingAlgo.js\\\";\\nimport { weakenServer } from \\\"/parallel/weakenAlgo.js\\\";\\nimport { Time } from \\\"/Time.js\\\";\\nimport { Config } from \\\"/Config/Config.js\\\";\\nconst DELAY_MARGIN_MS = Config.DELAY_MARGIN_MS;\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServer(ns);\\n    await parallelCycle(ns, target, 0.8);\\n  }\\n}\\nlet cycleCounter = 0;\\nlet offset = 1;\\nexport async function parallelCycle(ns, target, hackThreshold = 0.8, num_batches = 1) {\\n  const time = Time.getInstance();\\n  const weakTime = ns.getWeakenTime(target);\\n  const growTime = ns.getGrowTime(target);\\n  const hackTime = ns.getHackTime(target);\\n  if (num_batches > 1) {\\n    ns.print(Colors.CYAN + \\\"------------ MULTI BATCH MODE ------------\\\");\\n    num_batches = Math.floor((weakTime - Config.LOOP_SAFETY_MARGIN_MS) / (4 * DELAY_MARGIN_MS));\\n    ns.print(Colors.E_ORANGE + \\\"num_batches: \\\" + num_batches);\\n    for (let batchId = 0; batchId < num_batches; batchId++) {\\n      ns.print(Colors.CYAN + \\\"------------ BATCH \\\" + batchId + \\\" ------------\\\");\\n      const start = window.performance.now();\\n      const hackDelay = weakTime - hackTime - DELAY_MARGIN_MS;\\n      WGHAlgorithms.hackServer(ns, target, hackThreshold, true, hackDelay);\\n      WGHAlgorithms.weakenServer(ns, target, 1, true);\\n      const growDelay = weakTime - growTime + DELAY_MARGIN_MS;\\n      WGHAlgorithms.growServer(ns, target, hackThreshold, true, growDelay);\\n      const weak2delay = 2 * DELAY_MARGIN_MS;\\n      WGHAlgorithms.weakenServer(ns, target, 2, true, weak2delay);\\n      ns.print(Colors.GREEN + \\\"Cycle done. Beginning new cycle..\\\" + Colors.RESET);\\n      const end = window.performance.now();\\n      ns.print(Colors.GREEN + \\\"Cycle took: \\\" + (end - start) + \\\"ms\\\" + Colors.RESET);\\n      await ns.sleep(4 * DELAY_MARGIN_MS);\\n      time.accumulateSleepTime(4 * DELAY_MARGIN_MS);\\n    }\\n    if (cycleCounter % 2 == 0)\\n      offset = DELAY_MARGIN_MS / 2;\\n    else\\n      offset = 0;\\n    const batchDeployTime = 4 * DELAY_MARGIN_MS * num_batches;\\n    const sleepTime = weakTime - batchDeployTime + offset;\\n    await ns.sleep(sleepTime);\\n    time.accumulateSleepTime(sleepTime);\\n    cycleCounter++;\\n  } else {\\n    ns.print(Colors.CYAN + \\\"------------ SINGLE BATCH MODE ------------\\\");\\n    const weakTime2 = ns.getWeakenTime(target);\\n    const growTime2 = ns.getGrowTime(target);\\n    const hackTime2 = ns.getHackTime(target);\\n    ns.print(\\\"Attempting to start Weak I at \\\" + getTimeH());\\n    const weak1Dispatched = weakenServer(ns, target, 1, 0);\\n    let weak2StartTime = 0;\\n    if (weak1Dispatched == true) {\\n      weak2StartTime = 2 * DELAY_MARGIN_MS;\\n      await ns.sleep(weak2StartTime);\\n      time.accumulateSleepTime(weak2StartTime);\\n    }\\n    ns.print(\\\"Attempting to start Weak II at \\\" + getTimeH());\\n    const weak2Dispatched = weakenServer(ns, target, 2, 0);\\n    let growStartTime = 0;\\n    if (weak2Dispatched == true) {\\n      growStartTime = weakTime2 + DELAY_MARGIN_MS - growTime2;\\n      const growDelay = growStartTime - weak2StartTime;\\n      await ns.sleep(growDelay);\\n      time.accumulateSleepTime(growDelay);\\n    }\\n    ns.print(\\\"Attempting to start Grow at \\\" + getTimeH());\\n    const growDispatched = growServer(ns, target, 0);\\n    if (weak1Dispatched == true && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 2 was skipped. Did the last hack attempt fail?\\\\nHacking is about to start earlier than planned.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime);\\n      time.accumulateSleepTime(hackStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n      time.accumulateSleepTime(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(Colors.YELLOW + \\\"Weak 1 and Weak 2 were skipped? Hacking now. \\\" + getTimeH() + Colors.RESET);\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n      time.accumulateSleepTime(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == true && growDispatched == true && weak2Dispatched == true) {\\n      ns.print(Colors.GREEN + \\\"Hack is about to start as expected\\\" + Colors.RESET);\\n      const hackStartTime = weakTime2 + 3 * DELAY_MARGIN_MS - hackTime2;\\n      const hackDelayDiff = hackStartTime - growStartTime;\\n      await ns.sleep(hackDelayDiff);\\n      time.accumulateSleepTime(hackDelayDiff);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n      time.accumulateSleepTime(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == true && growDispatched == true) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 1 was skipped. Perhaps the server is already at the min sec lvl.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + 2 * DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime - growStartTime);\\n      time.accumulateSleepTime(hackStartTime - growStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n      time.accumulateSleepTime(hackTime2 + DELAY_MARGIN_MS);\\n    } else {\\n      ns.print(Colors.RED + \\\"could not start hack!\\\" + Colors.RESET);\\n      ns.print(\\n        \\\"weak1Dispatched: \\\" + weak1Dispatched + \\\" | weak2Dispatched: \\\" + weak2Dispatched + \\\" | growDispatched: \\\" + growDispatched\\n      );\\n      printServerStats(ns, target, hackThreshold);\\n      return;\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5cbmltcG9ydCB7IGdldEJlc3RTZXJ2ZXIgfSBmcm9tIFwiLi4vYmVzdFNlcnZlci5qc1wiO1xuaW1wb3J0IHsgQ29sb3JzLCBnZXRUaW1lSCB9IGZyb20gXCIuLi9saWIuanNcIjtcbmltcG9ydCB7IHByaW50U2VydmVyU3RhdHMgfSBmcm9tIFwiLi4vc2VydmVyU3RhdHMuanNcIjtcbmltcG9ydCB7IFdHSEFsZ29yaXRobXMgfSBmcm9tIFwiLi9XR0hBbGdvcml0aG1zLmpzXCI7XG5pbXBvcnQgeyBncm93U2VydmVyIH0gZnJvbSBcIi4vZ3Jvd2luZ0FsZ28uanNcIjtcbmltcG9ydCB7IGhhY2tTZXJ2ZXIgfSBmcm9tIFwiLi9oYWNraW5nQWxnby5qc1wiO1xuaW1wb3J0IHsgd2Vha2VuU2VydmVyIH0gZnJvbSBcIi4vd2Vha2VuQWxnby5qc1wiO1xuaW1wb3J0IHsgVGltZSB9IGZyb20gXCJAL1RpbWUuanNcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWcuanNcIjtcblxuY29uc3QgREVMQVlfTUFSR0lOX01TID0gQ29uZmlnLkRFTEFZX01BUkdJTl9NUztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gICAgbnMudGFpbCgpO1xuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XG5cbiAgICAvLyB0aW1pbmcgb3JkZXIgKGFsd2F5cyBzYW1lKTogd2Vha2VuID4gZ3JvdyA+IGhhY2tcbiAgICAvLyBmb3Igbm93LCBlYWNoIGhhcyBvd24gc2VydmVyOiAgICBhd3MtMCAgIGF3cy0gICAgYXdzLTIgICBhd3MtM1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYWsgICAgd2VhayAgICBncm93ICAgIGhhY2tcblxuICAgIC8vIHN0ZXBzOiBXR1dILVdHV0gtLi5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRCZXN0U2VydmVyKG5zKTtcbiAgICAgICAgYXdhaXQgcGFyYWxsZWxDeWNsZShucywgdGFyZ2V0LCAwLjgpO1xuICAgIH1cbn1cbmxldCBjeWNsZUNvdW50ZXIgPSAwO1xubGV0IG9mZnNldCA9IDE7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyYWxsZWxDeWNsZShuczogTlMsIHRhcmdldDogc3RyaW5nLCBoYWNrVGhyZXNob2xkID0gMC44LCBudW1fYmF0Y2hlcyA9IDEpIHtcbiAgICBjb25zdCB0aW1lID0gVGltZS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgY29uc3Qgd2Vha1RpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XG4gICAgY29uc3QgZ3Jvd1RpbWUgPSBucy5nZXRHcm93VGltZSh0YXJnZXQpO1xuICAgIGNvbnN0IGhhY2tUaW1lID0gbnMuZ2V0SGFja1RpbWUodGFyZ2V0KTtcblxuICAgIGlmIChudW1fYmF0Y2hlcyA+IDEpIHtcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLSBNVUxUSSBCQVRDSCBNT0RFIC0tLS0tLS0tLS0tLVwiKTtcblxuICAgICAgICBudW1fYmF0Y2hlcyA9IE1hdGguZmxvb3IoKHdlYWtUaW1lIC0gQ29uZmlnLkxPT1BfU0FGRVRZX01BUkdJTl9NUykgLyAoNCAqIERFTEFZX01BUkdJTl9NUykpO1xuXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5FX09SQU5HRSArIFwibnVtX2JhdGNoZXM6IFwiICsgbnVtX2JhdGNoZXMpO1xuXG4gICAgICAgIGZvciAobGV0IGJhdGNoSWQgPSAwOyBiYXRjaElkIDwgbnVtX2JhdGNoZXM7IGJhdGNoSWQrKykge1xuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLSBCQVRDSCBcIiArIGJhdGNoSWQgKyBcIiAtLS0tLS0tLS0tLS1cIik7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyBoYWNraW5nXG4gICAgICAgICAgICBjb25zdCBoYWNrRGVsYXkgPSB3ZWFrVGltZSAtIGhhY2tUaW1lIC0gREVMQVlfTUFSR0lOX01TO1xuICAgICAgICAgICAgV0dIQWxnb3JpdGhtcy5oYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIHRydWUsIGhhY2tEZWxheSk7XG5cbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAvLyB3ZWFrIElcbiAgICAgICAgICAgIFdHSEFsZ29yaXRobXMud2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDEsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gZ3Jvd1xuICAgICAgICAgICAgY29uc3QgZ3Jvd0RlbGF5ID0gd2Vha1RpbWUgLSBncm93VGltZSArIERFTEFZX01BUkdJTl9NUztcbiAgICAgICAgICAgIFdHSEFsZ29yaXRobXMuZ3Jvd1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCB0cnVlLCBncm93RGVsYXkpO1xuXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gd2VhayBJSVxuICAgICAgICAgICAgY29uc3Qgd2VhazJkZWxheSA9IDIgKiBERUxBWV9NQVJHSU5fTVM7XG4gICAgICAgICAgICBXR0hBbGdvcml0aG1zLndlYWtlblNlcnZlcihucywgdGFyZ2V0LCAyLCB0cnVlLCB3ZWFrMmRlbGF5KTtcblxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJDeWNsZSBkb25lLiBCZWdpbm5pbmcgbmV3IGN5Y2xlLi5cIiArIENvbG9ycy5SRVNFVCk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIkN5Y2xlIHRvb2s6IFwiICsgKGVuZCAtIHN0YXJ0KSArIFwibXNcIiArIENvbG9ycy5SRVNFVCk7XG5cbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDQgKiBERUxBWV9NQVJHSU5fTVMpO1xuICAgICAgICAgICAgdGltZS5hY2N1bXVsYXRlU2xlZXBUaW1lKDQgKiBERUxBWV9NQVJHSU5fTVMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdoYXRzIGhhcHBlbmluZyBoZXJlIGlzIGEgbGl0dGxlIGhhcmQgdG8gZXhwbGFpbiBidXQgaWxsIHRyeSBteSBiZXN0OlxuICAgICAgICAvLyBiYXRjaERlcGxveVRpbWUgc2hvdWxkIGJlIG9idmlvdXMsIGl0IGlzIHRoZSB0aW1lIGl0IHRvb2sgdG8gZGVwbG95IGFsbCBiYXRjaGVzXG4gICAgICAgIC8vIHNsZWVwVGltZSBpcyB0aGUgdGltZSB3ZSB3YWl0LCB1bnRpbCB0aGUgbmV4dCBiYXRjaGVzIGNhbiBiZSBkZXBsb3llZFxuICAgICAgICAvLyBvZmZzZXQ6XG4gICAgICAgIC8vIGltYWdpbmUgdGhlIHNjZW5hcmlvOiBmaXJzdCBiYXRjaCBpcyBkZXBsb3llZCwgdGhlbiB3ZSB3YWl0IGZvciB0aGUgbmV4dCBiYXRjaCB0byBiZSBkZXBsb3llZC5cbiAgICAgICAgLy8gV2hlbiB0aGUgZmlyc3QgYmF0Y2ggZmluaXNoZXMsIHdlIGNhbiBSQU0gZnJlZWQgdXAsIHNvIHNvIHRoaXMgaXMgdGhlIHRpbWUgd2UgY2FuIHNhdmVseVxuICAgICAgICAvLyBkZXBsb3kgdGhlIG5leHQgYmF0Y2guXG4gICAgICAgIC8vIHByb2JsZW0gaXMsIHdoZW4gd2UganVzdCB3YWl0IERFTEFZX01BUkdJTl9NUyBsb25nLCB3ZSBzdGFydCB0byBkZXBsb3kgdGhlIG5leHQgYmF0Y2ggaW4gYWxtb3N0XG4gICAgICAgIC8vIHRoZSBleGFjdCBtb21lbnQgd2hlbiB0aGUgZmlyc3QgYmF0Y2ggZmluaXNoZXMuIFRoaXMgaXMgYmFkLCBkdWUgdG8ganMgYW5kIHRpbWluZ3MuXG4gICAgICAgIC8vIEl0IGNhbiBoYXBwZW4sIHRoYXQgdGhlIHNlY29uZCBiYXRjaCBpcyBkZXBsb3llZCwgcmlnaHQgYWZ0ZXIgZ3JvdyBmcm9tIHRoZSBmaXJzdCBiYXRjaCBmaW5pc2hlLFxuICAgICAgICAvLyBtZWFuaW5nIHRoZXJlIGlzIG5vIG1vbmV5IGFuZCBhIGhpZ2ggc2VjbHZsIG9uIHRoZSBzZXJ2ZXIsIHdoaWNoIGluY3JlYXNlZCB0aGUgd2Vha2VuIHRpbWUgb2ZcbiAgICAgICAgLy8gdGhlIHNlY29uZCBiYXRjaCwgd2hpY2ggbWVzc2VzIHVwIGV2ZXJ5dGhpbmcgaW4gdGhlIGxvbmcgcnVuLiBUaGF0cyB3aHkgd2UgYWRkIHRoZSBvZmZzZXRcbiAgICAgICAgLy8gZm9yIGV2ZXJ5IHNlY29uZCBiYXRjaCwgc28gc3RhcnQgdGhlIHNlY29uZCBiYXRjaCBpbiB0aGUgbWlkZGxlIG9mIGZpcnN0IGJhdGNoIGNvbXBsZXRpb25zLlxuXG4gICAgICAgIGlmIChjeWNsZUNvdW50ZXIgJSAyID09IDApIG9mZnNldCA9IERFTEFZX01BUkdJTl9NUyAvIDI7XG4gICAgICAgIGVsc2Ugb2Zmc2V0ID0gMDtcblxuICAgICAgICBjb25zdCBiYXRjaERlcGxveVRpbWUgPSA0ICogREVMQVlfTUFSR0lOX01TICogbnVtX2JhdGNoZXM7XG4gICAgICAgIGNvbnN0IHNsZWVwVGltZSA9IHdlYWtUaW1lIC0gYmF0Y2hEZXBsb3lUaW1lICsgb2Zmc2V0O1xuXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKHNsZWVwVGltZSk7XG4gICAgICAgIHRpbWUuYWNjdW11bGF0ZVNsZWVwVGltZShzbGVlcFRpbWUpO1xuICAgICAgICBjeWNsZUNvdW50ZXIrKztcbiAgICB9IGVsc2Uge1xuICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tIFNJTkdMRSBCQVRDSCBNT0RFIC0tLS0tLS0tLS0tLVwiKTtcbiAgICAgICAgY29uc3Qgd2Vha1RpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XG4gICAgICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcbiAgICAgICAgY29uc3QgaGFja1RpbWUgPSBucy5nZXRIYWNrVGltZSh0YXJnZXQpO1xuICAgICAgICAvLyB3ZWFrIElcbiAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IFdlYWsgSSBhdCBcIiArIGdldFRpbWVIKCkpO1xuICAgICAgICBjb25zdCB3ZWFrMURpc3BhdGNoZWQgPSB3ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMSwgMCk7XG5cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gd2VhayBJSSBkZWxheVxuXG4gICAgICAgIC8vIGlmIHdlYWsgSSBza2lwLCBzdGFydCBJSSBpbW1lZGlhdGVseVxuICAgICAgICBsZXQgd2VhazJTdGFydFRpbWUgPSAwO1xuICAgICAgICBpZiAod2VhazFEaXNwYXRjaGVkID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIHdlYWsyU3RhcnRUaW1lID0gd2Vha1RpbWUgKyAyICogREVMQVlfTUFSR0lOX01TIC0gd2Vha1RpbWU7XG4gICAgICAgICAgICB3ZWFrMlN0YXJ0VGltZSA9IDIgKiBERUxBWV9NQVJHSU5fTVM7XG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCh3ZWFrMlN0YXJ0VGltZSk7XG4gICAgICAgICAgICB0aW1lLmFjY3VtdWxhdGVTbGVlcFRpbWUod2VhazJTdGFydFRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlYWsgSUlcbiAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IFdlYWsgSUkgYXQgXCIgKyBnZXRUaW1lSCgpKTtcbiAgICAgICAgY29uc3Qgd2VhazJEaXNwYXRjaGVkID0gd2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDIsIDApO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIGdyb3cgZGVsYXlcblxuICAgICAgICBsZXQgZ3Jvd1N0YXJ0VGltZSA9IDA7XG4gICAgICAgIGlmICh3ZWFrMkRpc3BhdGNoZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgZ3Jvd1N0YXJ0VGltZSA9IHdlYWtUaW1lICsgREVMQVlfTUFSR0lOX01TIC0gZ3Jvd1RpbWU7XG4gICAgICAgICAgICBjb25zdCBncm93RGVsYXkgPSBncm93U3RhcnRUaW1lIC0gd2VhazJTdGFydFRpbWU7XG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChncm93RGVsYXkpO1xuICAgICAgICAgICAgdGltZS5hY2N1bXVsYXRlU2xlZXBUaW1lKGdyb3dEZWxheSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBncm93XG4gICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBHcm93IGF0IFwiICsgZ2V0VGltZUgoKSk7XG4gICAgICAgIGNvbnN0IGdyb3dEaXNwYXRjaGVkID0gZ3Jvd1NlcnZlcihucywgdGFyZ2V0LCAwKTtcblxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBoYWNraW5nXG5cbiAgICAgICAgLy8gaGFja2luZyBzdGFydCBsb2dpYywgZm9yIGZ1cnRoZXIgdGltZSBvcHRpbWl6YXRpb25zXG4gICAgICAgIC8vIG5vdGU6IHdoZW4gd2VhazIgZmFpbHMsIHRoZSBncm93IG11c3QgYWxzbyBmYWlsIChhbmQgdmljZSB2ZXJzYTogd2hlbiBncm93IGZhaWxzLCB3ZWFrMiBzaG91bGQgbm90IGhhdmUgc3RhcnRlZClcbiAgICAgICAgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSB0cnVlICYmIHdlYWsyRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiBncm93RGlzcGF0Y2hlZCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gc2NlbmFyaW86IHdlYWsxIHdvcmtzLCByZXN0IHNraXBcbiAgICAgICAgICAgIC8vIGhhY2sgZmluaXNoZXMgMSBtYXJnaW4gdW5pdCBhZnRlciB3ZWFrMSBlbmRzXG4gICAgICAgICAgICBucy5wcmludChcbiAgICAgICAgICAgICAgICBDb2xvcnMuWUVMTE9XICtcbiAgICAgICAgICAgICAgICAgICAgXCJXZWFrIDIgd2FzIHNraXBwZWQuIERpZCB0aGUgbGFzdCBoYWNrIGF0dGVtcHQgZmFpbD9cXG5IYWNraW5nIGlzIGFib3V0IHRvIHN0YXJ0IGVhcmxpZXIgdGhhbiBwbGFubmVkLlwiICtcbiAgICAgICAgICAgICAgICAgICAgQ29sb3JzLlJFU0VULFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGhhY2tTdGFydFRpbWUgPSB3ZWFrVGltZSArIERFTEFZX01BUkdJTl9NUyAtIGhhY2tUaW1lO1xuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja1N0YXJ0VGltZSk7XG4gICAgICAgICAgICB0aW1lLmFjY3VtdWxhdGVTbGVlcFRpbWUoaGFja1N0YXJ0VGltZSk7XG4gICAgICAgICAgICBucy5wcmludChcIkF0dGVtcHRpbmcgdG8gc3RhcnQgSGFjayBhdCBcIiArIGdldFRpbWVIKCkpO1xuICAgICAgICAgICAgaGFja1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCAwKTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcbiAgICAgICAgICAgIHRpbWUuYWNjdW11bGF0ZVNsZWVwVGltZShoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VhazFEaXNwYXRjaGVkID09IGZhbHNlICYmIHdlYWsyRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiBncm93RGlzcGF0Y2hlZCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gc2NlbmFyaW86IHdlYWsxIGFuZCB3ZWFrMiBza2lwcGVkXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJXZWFrIDEgYW5kIFdlYWsgMiB3ZXJlIHNraXBwZWQ/IEhhY2tpbmcgbm93LiBcIiArIGdldFRpbWVIKCkgKyBDb2xvcnMuUkVTRVQpO1xuICAgICAgICAgICAgaGFja1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCAwKTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcbiAgICAgICAgICAgIHRpbWUuYWNjdW11bGF0ZVNsZWVwVGltZShoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VhazFEaXNwYXRjaGVkID09IHRydWUgJiYgZ3Jvd0Rpc3BhdGNoZWQgPT0gdHJ1ZSAmJiB3ZWFrMkRpc3BhdGNoZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gaGFjayBub3JtYWxcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5HUkVFTiArIFwiSGFjayBpcyBhYm91dCB0byBzdGFydCBhcyBleHBlY3RlZFwiICsgQ29sb3JzLlJFU0VUKTtcbiAgICAgICAgICAgIGNvbnN0IGhhY2tTdGFydFRpbWUgPSB3ZWFrVGltZSArIDMgKiBERUxBWV9NQVJHSU5fTVMgLSBoYWNrVGltZTtcbiAgICAgICAgICAgIGNvbnN0IGhhY2tEZWxheURpZmYgPSBoYWNrU3RhcnRUaW1lIC0gZ3Jvd1N0YXJ0VGltZTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tEZWxheURpZmYpO1xuICAgICAgICAgICAgdGltZS5hY2N1bXVsYXRlU2xlZXBUaW1lKGhhY2tEZWxheURpZmYpO1xuICAgICAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IEhhY2sgYXQgXCIgKyBnZXRUaW1lSCgpKTtcbiAgICAgICAgICAgIGhhY2tTZXJ2ZXIobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCwgMCk7XG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XG4gICAgICAgICAgICB0aW1lLmFjY3VtdWxhdGVTbGVlcFRpbWUoaGFja1RpbWUgKyBERUxBWV9NQVJHSU5fTVMpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlYWsxRGlzcGF0Y2hlZCA9PSBmYWxzZSAmJiB3ZWFrMkRpc3BhdGNoZWQgPT0gdHJ1ZSAmJiBncm93RGlzcGF0Y2hlZCA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBjYXNlIHdlYWsxIHdhcyBza2lwcGVkLCBidXQgd2VhazIgYW5kIGdyb3cgd2VyZSBkaXNwYXRjaGVkXG5cbiAgICAgICAgICAgIG5zLnByaW50KFxuICAgICAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgKyBcIldlYWsgMSB3YXMgc2tpcHBlZC4gUGVyaGFwcyB0aGUgc2VydmVyIGlzIGFscmVhZHkgYXQgdGhlIG1pbiBzZWMgbHZsLlwiICsgQ29sb3JzLlJFU0VULFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGhhY2tTdGFydFRpbWUgPSB3ZWFrVGltZSArIDIgKiBERUxBWV9NQVJHSU5fTVMgLSBoYWNrVGltZTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tTdGFydFRpbWUgLSBncm93U3RhcnRUaW1lKTtcbiAgICAgICAgICAgIHRpbWUuYWNjdW11bGF0ZVNsZWVwVGltZShoYWNrU3RhcnRUaW1lIC0gZ3Jvd1N0YXJ0VGltZSk7XG4gICAgICAgICAgICBucy5wcmludChcIkF0dGVtcHRpbmcgdG8gc3RhcnQgSGFjayBhdCBcIiArIGdldFRpbWVIKCkpO1xuICAgICAgICAgICAgaGFja1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCAwKTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tUaW1lICsgREVMQVlfTUFSR0lOX01TKTtcbiAgICAgICAgICAgIHRpbWUuYWNjdW11bGF0ZVNsZWVwVGltZShoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuUkVEICsgXCJjb3VsZCBub3Qgc3RhcnQgaGFjayFcIiArIENvbG9ycy5SRVNFVCk7XG4gICAgICAgICAgICBucy5wcmludChcbiAgICAgICAgICAgICAgICBcIndlYWsxRGlzcGF0Y2hlZDogXCIgK1xuICAgICAgICAgICAgICAgICAgICB3ZWFrMURpc3BhdGNoZWQgK1xuICAgICAgICAgICAgICAgICAgICBcIiB8IHdlYWsyRGlzcGF0Y2hlZDogXCIgK1xuICAgICAgICAgICAgICAgICAgICB3ZWFrMkRpc3BhdGNoZWQgK1xuICAgICAgICAgICAgICAgICAgICBcIiB8IGdyb3dEaXNwYXRjaGVkOiBcIiArXG4gICAgICAgICAgICAgICAgICAgIGdyb3dEaXNwYXRjaGVkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHByaW50U2VydmVyU3RhdHMobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuIG5vdGVzOlxuIHdlYWtlbiByZW1vdmVzIDAuMDUgc2VjIGx2bFxuIGdyb3cgYWRkcyAwLjAwNCBzZWMgbHZsXG5cbiBncm93IGFkZHMgbW9uZXk6XG5cbiAqL1xuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLFFBQVEsZ0JBQWdCO0FBQ2pDLFNBQVMsd0JBQXdCO0FBQ2pDLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsb0JBQW9CO0FB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\",\"filename\":\"parallel/manager.js\",\"server\":\"home\"}}],[\"parallel/serverManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, nukeAll, nukeServer } from \\\"/lib.js\\\";\\nexport class ServerManager {\\n  /**\\n   * Buys or upgrades a server based on the desired RAM and server type.\\n   * If the server exists and can be upgraded successfully, it returns the upgraded server name.\\n   * If the server cannot be upgraded, it attempts to buy a new server with the desired RAM and name.\\n   *\\n   * @param ns - The Bitburner namespace object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param serverType - The type of server to buy or upgrade (`weak`, `grow`, `hack`).\\n   * @param batchId - The batch ID of the server.\\n   * @returns The name of the upgraded server or an empty string if a new server cannot be bought/upgraded.\\n   */\\n  static buyOrUpgradeServer(ns, desiredRam, serverType, batchId) {\\n    const serverName = serverType + \\\"-\\\" + batchId;\\n    const upgradeSuccessful = this.upgradeServer(ns, desiredRam, serverName);\\n    if (upgradeSuccessful) {\\n      ns.print(Colors.GREEN + \\\"[server Manager] Upgraded Server '\\\" + serverName + \\\"'!\\\");\\n      return serverName;\\n    }\\n    const name = this.buyServer(ns, desiredRam, serverName);\\n    if (name === \\\"\\\") {\\n      ns.print(Colors.RED + \\\"[server Manager] Failed to buy a new server!\\\");\\n      return name;\\n    }\\n    ns.print(Colors.GREEN + \\\"[server Manager] Bought Server '\\\" + name + \\\"'!\\\");\\n    nukeAll(ns);\\n    return name;\\n  }\\n  static buyServer(ns, desiredRam, serverName) {\\n    const purchasedServerLimit = ns.getPurchasedServerLimit();\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (purchasedServers.length >= purchasedServerLimit) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to buy a new server, but the limit has been reached\\\");\\n      return \\\"\\\";\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerCost(desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to buy a new server, but the player does not have enough money\\\"\\n      );\\n      return \\\"\\\";\\n    }\\n    const name = ns.purchaseServer(serverName, desiredRam);\\n    nukeServer(ns, name);\\n    return name;\\n  }\\n  static upgradeServer(ns, desiredRam, serverName) {\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (!purchasedServers.includes(serverName)) {\\n      ns.print(Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the server does not exist\\\");\\n      return false;\\n    }\\n    const serverMaxRam = ns.getServerMaxRam(serverName);\\n    let totalRequiredRam = desiredRam + serverMaxRam;\\n    const exponent = Math.ceil(Math.log2(totalRequiredRam));\\n    totalRequiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerUpgradeCost(serverName, totalRequiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to upgrade Server, but the player does not have enough money\\\"\\n      );\\n      return false;\\n    }\\n    if (!ns.upgradePurchasedServer(serverName, totalRequiredRam)) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to upgrade Server, but the upgrade failed\\\");\\n      return false;\\n    }\\n    return true;\\n  }\\n  /**\\n   * Upgrades an existing server to meet the desired RAM requirement, that is cheapest to upgrade.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param name - The name of the server to upgrade.\\n   * @returns The name of the upgraded server, or an empty string if the upgrade failed.\\n   */\\n  static getBestServerToUpgrade(ns, desiredRam, name) {\\n    const purchasedServers = ns.getPurchasedServers().filter((server) => server.includes(name));\\n    let minUpgradeCost = Number.MAX_VALUE;\\n    let serverToUpgrade = \\\"\\\";\\n    let totalRequiredRam = 0;\\n    for (let i = 0; i < purchasedServers.length; i++) {\\n      const server = purchasedServers[i];\\n      const serverMaxRam = ns.getServerMaxRam(server);\\n      totalRequiredRam = desiredRam + serverMaxRam;\\n      const exponent = Math.ceil(Math.log2(totalRequiredRam));\\n      totalRequiredRam = Math.pow(2, exponent);\\n      const cost = ns.getPurchasedServerUpgradeCost(server, totalRequiredRam);\\n      if (cost < minUpgradeCost) {\\n        minUpgradeCost = cost;\\n        serverToUpgrade = server;\\n      }\\n    }\\n    return {\\n      minUpgradeCost,\\n      serverToUpgrade,\\n      totalRequiredRam\\n    };\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzLCBudWtlQWxsLCBudWtlU2VydmVyIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlck1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCdXlzIG9yIHVwZ3JhZGVzIGEgc2VydmVyIGJhc2VkIG9uIHRoZSBkZXNpcmVkIFJBTSBhbmQgc2VydmVyIHR5cGUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGV4aXN0cyBhbmQgY2FuIGJlIHVwZ3JhZGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyB0aGUgdXBncmFkZWQgc2VydmVyIG5hbWUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGNhbm5vdCBiZSB1cGdyYWRlZCwgaXQgYXR0ZW1wdHMgdG8gYnV5IGEgbmV3IHNlcnZlciB3aXRoIHRoZSBkZXNpcmVkIFJBTSBhbmQgbmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgQml0YnVybmVyIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gZGVzaXJlZFJhbSAtIEhvdyBtdWNoIFJBTSBuZWVkcyB0aGUgc2VydmVyIGF0IGxlYXN0LlxyXG4gICAgICogQHBhcmFtIHNlcnZlclR5cGUgLSBUaGUgdHlwZSBvZiBzZXJ2ZXIgdG8gYnV5IG9yIHVwZ3JhZGUgKGB3ZWFrYCwgYGdyb3dgLCBgaGFja2ApLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgYmF0Y2ggSUQgb2YgdGhlIHNlcnZlci5cclxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB1cGdyYWRlZCBzZXJ2ZXIgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIGEgbmV3IHNlcnZlciBjYW5ub3QgYmUgYm91Z2h0L3VwZ3JhZGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnV5T3JVcGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJUeXBlOiBzdHJpbmcsIGJhdGNoSWQ6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyTmFtZSA9IHNlcnZlclR5cGUgKyBcIi1cIiArIGJhdGNoSWQ7XHJcbiAgICAgICAgY29uc3QgdXBncmFkZVN1Y2Nlc3NmdWwgPSB0aGlzLnVwZ3JhZGVTZXJ2ZXIobnMsIGRlc2lyZWRSYW0sIHNlcnZlck5hbWUpO1xyXG5cclxuICAgICAgICBpZiAodXBncmFkZVN1Y2Nlc3NmdWwpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJbc2VydmVyIE1hbmFnZXJdIFVwZ3JhZGVkIFNlcnZlciAnXCIgKyBzZXJ2ZXJOYW1lICsgXCInIVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlcnZlck5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5idXlTZXJ2ZXIobnMsIGRlc2lyZWRSYW0sIHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGlmIChuYW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gRmFpbGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIhXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJbc2VydmVyIE1hbmFnZXJdIEJvdWdodCBTZXJ2ZXIgJ1wiICsgbmFtZSArIFwiJyFcIik7XHJcbiAgICAgICAgbnVrZUFsbChucyk7XHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ1eVNlcnZlcihuczogTlMsIGRlc2lyZWRSYW06IG51bWJlciwgc2VydmVyTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJMaW1pdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlckxpbWl0KCk7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBpZiAocHVyY2hhc2VkU2VydmVycy5sZW5ndGggPj0gcHVyY2hhc2VkU2VydmVyTGltaXQpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLlJFRCArIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gYnV5IGEgbmV3IHNlcnZlciwgYnV0IHRoZSBsaW1pdCBoYXMgYmVlbiByZWFjaGVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5jZWlsKE1hdGgubG9nMihkZXNpcmVkUmFtKSk7XHJcbiAgICAgICAgZGVzaXJlZFJhbSA9IE1hdGgucG93KDIsIGV4cG9uZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QoZGVzaXJlZFJhbSk7XHJcbiAgICAgICAgaWYgKGNvc3QgPiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIikpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBDb2xvcnMuUkVEICtcclxuICAgICAgICAgICAgICAgICAgICBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIGJ1dCB0aGUgcGxheWVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIG1vbmV5XCIsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmFtZSA9IG5zLnB1cmNoYXNlU2VydmVyKHNlcnZlck5hbWUsIGRlc2lyZWRSYW0pO1xyXG4gICAgICAgIG51a2VTZXJ2ZXIobnMsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB1cGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpO1xyXG4gICAgICAgIGlmICghcHVyY2hhc2VkU2VydmVycy5pbmNsdWRlcyhzZXJ2ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJbc2VydmVyIE1hbmFnZXJdIGF0dGVtcHRlZCB0byB1cGdyYWRlIFNlcnZlciwgYnV0IHRoZSBzZXJ2ZXIgZG9lcyBub3QgZXhpc3RcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlck1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXJOYW1lKTtcclxuICAgICAgICBsZXQgdG90YWxSZXF1aXJlZFJhbSA9IGRlc2lyZWRSYW0gKyBzZXJ2ZXJNYXhSYW07XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5jZWlsKE1hdGgubG9nMih0b3RhbFJlcXVpcmVkUmFtKSk7XHJcbiAgICAgICAgdG90YWxSZXF1aXJlZFJhbSA9IE1hdGgucG93KDIsIGV4cG9uZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHNlcnZlck5hbWUsIHRvdGFsUmVxdWlyZWRSYW0pO1xyXG5cclxuICAgICAgICBpZiAoY29zdCA+IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5SRUQgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIHVwZ3JhZGUgU2VydmVyLCBidXQgdGhlIHBsYXllciBkb2VzIG5vdCBoYXZlIGVub3VnaCBtb25leVwiLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5zLnVwZ3JhZGVQdXJjaGFzZWRTZXJ2ZXIoc2VydmVyTmFtZSwgdG90YWxSZXF1aXJlZFJhbSkpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLlJFRCArIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXIsIGJ1dCB0aGUgdXBncmFkZSBmYWlsZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGdyYWRlcyBhbiBleGlzdGluZyBzZXJ2ZXIgdG8gbWVldCB0aGUgZGVzaXJlZCBSQU0gcmVxdWlyZW1lbnQsIHRoYXQgaXMgY2hlYXBlc3QgdG8gdXBncmFkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIGRlc2lyZWRSYW0gLSBIb3cgbXVjaCBSQU0gbmVlZHMgdGhlIHNlcnZlciBhdCBsZWFzdC5cclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZlciB0byB1cGdyYWRlLlxyXG4gICAgICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIHVwZ3JhZGVkIHNlcnZlciwgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSB1cGdyYWRlIGZhaWxlZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEJlc3RTZXJ2ZXJUb1VwZ3JhZGUobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuZmlsdGVyKChzZXJ2ZXIpID0+IHNlcnZlci5pbmNsdWRlcyhuYW1lKSk7XHJcblxyXG4gICAgICAgIGxldCBtaW5VcGdyYWRlQ29zdCA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgbGV0IHNlcnZlclRvVXBncmFkZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbFJlcXVpcmVkUmFtID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IHB1cmNoYXNlZFNlcnZlcnNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJNYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcclxuICAgICAgICAgICAgdG90YWxSZXF1aXJlZFJhbSA9IGRlc2lyZWRSYW0gKyBzZXJ2ZXJNYXhSYW07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIodG90YWxSZXF1aXJlZFJhbSkpO1xyXG4gICAgICAgICAgICB0b3RhbFJlcXVpcmVkUmFtID0gTWF0aC5wb3coMiwgZXhwb25lbnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHNlcnZlciwgdG90YWxSZXF1aXJlZFJhbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29zdCA8IG1pblVwZ3JhZGVDb3N0KSB7XHJcbiAgICAgICAgICAgICAgICBtaW5VcGdyYWRlQ29zdCA9IGNvc3Q7XHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb1VwZ3JhZGUgPSBzZXJ2ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWluVXBncmFkZUNvc3QsXHJcbiAgICAgICAgICAgIHNlcnZlclRvVXBncmFkZSxcclxuICAgICAgICAgICAgdG90YWxSZXF1aXJlZFJhbSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxRQUFRLFNBQVMsa0JBQWtCO0FBR3JDLGFBQU0sY0FBYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVl2QixPQUFPLG1CQUFtQixJQUFRLFlBQW9CLFlBQW9CLFNBQXlCO0FBQy9GLFVBQU0sYUFBYSxhQUFhLE1BQU07QUFDdEMsVUFBTSxvQkFBb0IsS0FBSyxjQUFjLElBQUksWUFBWSxVQUFVO0FBRXZFLFFBQUksbUJBQW1CO0FBQ25CLFNBQUcsTUFBTSxPQUFPLFFBQVEsdUNBQXVDLGFBQWEsSUFBSTtBQUNoRixhQUFPO0FBQUEsSUFDWDtBQUVBLFVBQU0sT0FBTyxLQUFLLFVBQVUsSUFBSSxZQUFZLFVBQVU7QUFDdEQsUUFBSSxTQUFTLElBQUk7QUFDYixTQUFHLE1BQU0sT0FBTyxNQUFNLDhDQUE4QztBQUNwRSxhQUFPO0FBQUEsSUFDWDtBQUNBLE9BQUcsTUFBTSxPQUFPLFFBQVEscUNBQXFDLE9BQU8sSUFBSTtBQUN4RSxZQUFRLEVBQUU7QUFDVixXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsT0FBTyxVQUFVLElBQVEsWUFBb0IsWUFBNEI7QUFDckUsVUFBTSx1QkFBdUIsR0FBRyx3QkFBd0I7QUFDeEQsVUFBTSxtQkFBbUIsR0FBRyxvQkFBb0I7QUFDaEQsUUFBSSxpQkFBaUIsVUFBVSxzQkFBc0I7QUFDakQsU0FBRyxNQUFNLE9BQU8sTUFBTSxnRkFBZ0Y7QUFDdEcsYUFBTztBQUFBLElBQ1g7QUFFQSxVQUFNLFdBQVcsS0FBSyxLQUFLLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDaEQsaUJBQWEsS0FBSyxJQUFJLEdBQUcsUUFBUTtBQUVqQyxVQUFNLE9BQU8sR0FBRyx1QkFBdUIsVUFBVTtBQUNqRCxRQUFJLE9BQU8sR0FBRyx3QkFBd0IsTUFBTSxHQUFHO0FBQzNDLFNBQUc7QUFBQSxRQUNDLE9BQU8sTUFDSDtBQUFBLE1BQ1I7QUFDQSxhQUFPO0FBQUEsSUFDWDtBQUVBLFVBQU0sT0FBTyxHQUFHLGVBQWUsWUFBWSxVQUFVO0FBQ3JELGVBQVcsSUFBSSxJQUFJO0FBQ25CLFdBQU87QUFBQSxFQUNYO0FBQUEsRUFFQSxPQUFPLGNBQWMsSUFBUSxZQUFvQixZQUE2QjtBQUMxRSxVQUFNLG1CQUFtQixHQUFHLG9CQUFvQjtBQUNoRCxRQUFJLENBQUMsaUJBQWlCLFNBQVMsVUFBVSxHQUFHO0FBQ3hDLFNBQUcsTUFBTSxPQUFPLFNBQVMsNkVBQTZFO0FBQ3RHLGFBQU87QUFBQSxJQUNYO0FBRUEsVUFBTSxlQUFlLEdBQUcsZ0JBQWdCLFVBQVU7QUFDbEQsUUFBSSxtQkFBbUIsYUFBYTtBQUVwQyxVQUFNLFdBQVcsS0FBSyxLQUFLLEtBQUssS0FBSyxnQkFBZ0IsQ0FBQztBQUN0RCx1QkFBbUIsS0FBSyxJQUFJLEdBQUcsUUFBUTtBQUV2QyxVQUFNLE9BQU8sR0FBRyw4QkFBOEIsWUFBWSxnQkFBZ0I7QUFFMUUsUUFBSSxPQUFPLEdBQUcsd0JBQXdCLE1BQU0sR0FBRztBQUMzQyxTQUFHO0FBQUEsUUFDQyxPQUFPLE1BQU07QUFBQSxNQUNqQjtBQUNBLGFBQU87QUFBQSxJQUNYO0FBRUEsUUFBSSxDQUFDLEdBQUcsdUJBQXVCLFlBQVksZ0JBQWdCLEdBQUc7QUFDMUQsU0FBRyxNQUFNLE9BQU8sTUFBTSxzRUFBc0U7QUFDNUYsYUFBTztBQUFBLElBQ1g7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVVBLE9BQU8sdUJBQXVCLElBQVEsWUFBb0IsTUFBYztBQUNwRSxVQUFNLG1CQUFtQixHQUFHLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxXQUFXLE9BQU8sU0FBUyxJQUFJLENBQUM7QUFFMUYsUUFBSSxpQkFBaUIsT0FBTztBQUM1QixRQUFJLGtCQUFrQjtBQUV0QixRQUFJLG1CQUFtQjtBQUV2QixhQUFTLElBQUksR0FBRyxJQUFJLGlCQUFpQixRQUFRLEtBQUs7QUFDOUMsWUFBTSxTQUFTLGlCQUFpQixDQUFDO0FBRWpDLFlBQU0sZUFBZSxHQUFHLGdCQUFnQixNQUFNO0FBQzlDLHlCQUFtQixhQUFhO0FBRWhDLFlBQU0sV0FBVyxLQUFLLEtBQUssS0FBSyxLQUFLLGdCQUFnQixDQUFDO0FBQ3RELHlCQUFtQixLQUFLLElBQUksR0FBRyxRQUFRO0FBRXZDLFlBQU0sT0FBTyxHQUFHLDhCQUE4QixRQUFRLGdCQUFnQjtBQUV0RSxVQUFJLE9BQU8sZ0JBQWdCO0FBQ3ZCLHlCQUFpQjtBQUNqQiwwQkFBa0I7QUFBQSxNQUN0QjtBQUFBLElBQ0o7QUFDQSxXQUFPO0FBQUEsTUFDSDtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLCJuYW1lcyI6W119\",\"filename\":\"parallel/serverManager.js\",\"server\":\"home\"}}],[\"parallel/weakenAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  weakenServer(ns, \\\"foodnstuff\\\", 1, 0);\\n}\\nexport function weakenServer(ns, target, order, batchId, delay = 0) {\\n  let totalWeakenThreadsNeeded = 0;\\n  if (order == 1) {\\n    totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    ns.print(\\\"Actual weaken1 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else if (order == 2) {\\n    const growThreads = getGrowThreads(ns, target);\\n    const secIncrease = ns.growthAnalyzeSecurity(growThreads, target);\\n    totalWeakenThreadsNeeded = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    ns.print(\\\"Actual weaken2 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else {\\n    throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n  }\\n  if (totalWeakenThreadsNeeded < 1) {\\n    ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const weakenScriptRam = 1.75;\\n  let threadsDispatched = 0;\\n  let threadsRemaining = totalWeakenThreadsNeeded;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    if (threadsDispatched >= totalWeakenThreadsNeeded)\\n      break;\\n    const host = allHosts[i];\\n    const freeRam = host.availableRam;\\n    if (freeRam < weakenScriptRam)\\n      continue;\\n    const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n    const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n    ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay);\\n    threadsRemaining -= threadsToDispatch;\\n    threadsDispatched += threadsToDispatch;\\n  }\\n  if (threadsRemaining <= 0) {\\n    ns.print(\\\"Done deploying weaken\\\" + order + \\\"!\\\");\\n    return true;\\n  }\\n  ns.print(\\n    Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n  );\\n  const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to weak \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to weak \\\" + target);\\n  }\\n  ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbkFsZ28udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIH0gZnJvbSBcIkAvYmVzdFNlcnZlclwiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldEdyb3dUaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICB3ZWFrZW5TZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAxLCAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICogVGhlIG51bWJlciBvZiB0aHJlYWRzIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHdlYWtlbmluZyBhbmQgdGhlIHRhcmdldCBzZXJ2ZXIncyBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0QVBJIG9iamVjdC5cclxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICogQHBhcmFtIGhvc3QgLSBUaGUgbmFtZSBvZiB0aGUgY3VycmVudCBzZXJ2ZXIgaG9zdGluZyB0aGUgd2Vha2VuIHNjcmlwdC5cclxuICogQHBhcmFtIG9yZGVyIC0gVGhlIG9yZGVyIG9mIHdlYWtlbmluZy4gQ2FuIG9ubHkgYmUgZWl0aGVyIDEgb3IgMi5cclxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgd2Vha2VuIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC5cclxuICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgd2Vha2VuIG9yZGVyIGlzIG5vdCAxIG9yIDIsIG9yIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggZnJlZSBSQU0gdG8gZXhlY3V0ZSB0aGUgd2Vha2VuIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3ZWFrZW5TZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgb3JkZXI6IG51bWJlciwgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApOiBib29sZWFuIHtcclxuICAgIGxldCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgLy8gY2FsY3VsYXRlIHdlYWtlbmluZyB0aHJlYWRzIGJhc2VkIG9uIHRoZSBvcmRlclxyXG5cclxuICAgIGlmIChvcmRlciA9PSAxKSB7XHJcbiAgICAgICAgLy8gZmlyc3Qgd2VhayBoYXMgdG8gd2Vha2VuIHNlcnZlciB0byBtaW4gZnJvbSB1bmtub3duIHNlYyBsdmxcclxuICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjEgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMikge1xyXG4gICAgICAgIC8vIHNlY29uZCB3ZWFrIG9ubHkgaGFzIHRvIHJlbW92ZSB0aGUgc2VjIGluY3JlYXNlIGZyb20gdGhlIGdyb3cgYmVmb3JlIChtb3JlIHJhbSBlZmZpY2llbnQpXHJcbiAgICAgICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBzZWNJbmNyZWFzZSA9IG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eShncm93VGhyZWFkcywgdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gTWF0aC5jZWlsKHNlY0luY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjIgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2Vha2VuIG9yZGVyIGNhbiBvbmx5IGJlIGVpdGhlciAxIG9yIDIhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPCAxKSB7XHJcbiAgICAgICAgbnMucHJpbnQoXCJXZWFrZW50aHJlYWRzIGFyZSAwLCBza2lwcGluZyB3ZWFrIFwiICsgb3JkZXIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgY29uc3Qgd2Vha2VuU2NyaXB0UmFtID0gMS43NTtcclxuXHJcbiAgICBsZXQgdGhyZWFkc0Rpc3BhdGNoZWQgPSAwO1xyXG4gICAgbGV0IHRocmVhZHNSZW1haW5pbmcgPSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQ7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XHJcbiAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG5cclxuICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgaWYgKGZyZWVSYW0gPCB3ZWFrZW5TY3JpcHRSYW0pIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHRocmVhZFNwYWNlID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gd2Vha2VuU2NyaXB0UmFtKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgdGhyZWFkU3BhY2UpO1xyXG5cclxuICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgKz0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPD0gMCkge1xyXG4gICAgICAgIG5zLnByaW50KFwiRG9uZSBkZXBsb3lpbmcgd2Vha2VuXCIgKyBvcmRlciArIFwiIVwiKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIG5zLnByaW50KFxyXG4gICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICBcIlRoZXJlIGFyZSBcIiArXHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgK1xyXG4gICAgICAgICAgICBcIiB0aHJlYWRzIHJlbWFpbmluZyBhZnRlciBkaXNwYXRjaGluZyBhbGwgdGhyZWFkcywgYXR0ZW1wdGluZyB0byBkaXNwYXRjaCByZW1haW5pbmcgdGhyZWFkcyBvbiBwdXJjaGFzZWQgc2VydmVyXCIsXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG5lZWRlZFdlYWtlblJhbSA9IHRocmVhZHNSZW1haW5pbmcgKiB3ZWFrZW5TY3JpcHRSYW07XHJcbiAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkV2Vha2VuUmFtLCBDb25maWcuV0VBS19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgaWYgKHNlcnZlciA9PT0gXCJcIikge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byB3ZWFrIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gd2VhayBcIiArIHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbnMuZXhlYyhcIndlYWtlbi5qc1wiLCBzZXJ2ZXIsIHRocmVhZHNSZW1haW5pbmcsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsUUFBUSxnQkFBZ0Isd0JBQXdCO0FBRXpELFNBQVMscUJBQXFCO0FBRTlCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsZUFBYSxJQUFJLGNBQWMsR0FBRyxDQUFDO0FBQ3ZDO0FBYU8sZ0JBQVMsYUFBYSxJQUFRLFFBQWdCLE9BQWUsU0FBaUIsUUFBUSxHQUFZO0FBQ3JHLE1BQUksMkJBQTJCO0FBRy9CLE1BQUksU0FBUyxHQUFHO0FBRVosK0JBQTJCLGlCQUFpQixJQUFJLE1BQU07QUFDdEQsT0FBRyxNQUFNLG9DQUFvQyx3QkFBd0I7QUFBQSxFQUN6RSxXQUFXLFNBQVMsR0FBRztBQUVuQixVQUFNLGNBQWMsZUFBZSxJQUFJLE1BQU07QUFDN0MsVUFBTSxjQUFjLEdBQUcsc0JBQXNCLGFBQWEsTUFBTTtBQUVoRSwrQkFBMkIsS0FBSyxLQUFLLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUV0RSxPQUFHLE1BQU0sb0NBQW9DLHdCQUF3QjtBQUFBLEVBQ3pFLE9BQU87QUFDSCxVQUFNLElBQUksTUFBTSx5Q0FBeUM7QUFBQSxFQUM3RDtBQUVBLE1BQUksMkJBQTJCLEdBQUc7QUFDOUIsT0FBRyxNQUFNLHdDQUF3QyxLQUFLO0FBQ3RELFdBQU87QUFBQSxFQUNYO0FBR0EsUUFBTSxXQUFXLDBCQUEwQixFQUFFO0FBQzdDLFFBQU0sa0JBQWtCO0FBRXhCLE1BQUksb0JBQW9CO0FBQ3hCLE1BQUksbUJBQW1CO0FBQ3ZCLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDdEMsUUFBSSxxQkFBcUI7QUFBMEI7QUFDbkQsVUFBTSxPQUFPLFNBQVMsQ0FBQztBQUV2QixVQUFNLFVBQVUsS0FBSztBQUNyQixRQUFJLFVBQVU7QUFBaUI7QUFDL0IsVUFBTSxjQUFjLEtBQUssTUFBTSxVQUFVLGVBQWU7QUFHeEQsVUFBTSxvQkFBb0IsS0FBSyxJQUFJLGtCQUFrQixXQUFXO0FBRWhFLE9BQUcsS0FBSyxhQUFhLEtBQUssTUFBTSxtQkFBbUIsUUFBUSxLQUFLO0FBQ2hFLHdCQUFvQjtBQUNwQix5QkFBcUI7QUFBQSxFQUN6QjtBQUVBLE1BQUksb0JBQW9CLEdBQUc7QUFDdkIsT0FBRyxNQUFNLDBCQUEwQixRQUFRLEdBQUc7QUFDOUMsV0FBTztBQUFBLEVBQ1g7QUFDQSxLQUFHO0FBQUEsSUFDQyxPQUFPLFNBQ0gsZUFDQSxtQkFDQTtBQUFBLEVBQ1I7QUFFQSxRQUFNLGtCQUFrQixtQkFBbUI7QUFDM0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksaUJBQWlCLE9BQU8sZ0JBQWdCO0FBRTVGLE1BQUksV0FBVyxJQUFJO0FBQ2YsT0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFVBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsRUFDbkU7QUFFQSxLQUFHLEtBQUssYUFBYSxRQUFRLGtCQUFrQixRQUFRLEtBQUs7QUFFNUQsU0FBTztBQUNYOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/weakenAlgo.js\",\"server\":\"home\"}}],[\"serverStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors } from \\\"/lib.js\\\";\\nconst BORDER_COLOR = Colors.CYAN;\\nlet maxMoney = 0;\\nlet curMoney = 0;\\nlet hackingChance = 0;\\nlet minSec = 0;\\nlet curSec = 0;\\nlet maxRam = 0;\\nlet useRam = 0;\\nlet freeRam = 0;\\nlet moneyMultiplier = 0;\\nlet growingThreads = 0;\\nlet serverWeakenThreadsCur = 0;\\nlet hackThreads = 0;\\nlet headerString = \\\"\\\";\\nlet footerString = \\\"\\\";\\nlet hackingPercent = 0;\\nexport function printServerStats(ns, server, hackThreshold) {\\n  setStats(ns, server, hackThreshold);\\n  ns.print(BORDER_COLOR + headerString + Colors.RESET);\\n  printStatLine(ns, \\\"Money:\\\", false);\\n  printStatLine(ns, \\\"Max Money: \\\" + ns.formatNumber(maxMoney) + \\\" | Current Money: \\\" + ns.formatNumber(curMoney));\\n  printStatLine(\\n    ns,\\n    \\\"Percent: \\\" + ns.formatNumber(curMoney / maxMoney) + \\\" | Hack Chance: \\\" + ns.formatNumber(hackingChance)\\n  );\\n  printStatLine(ns, \\\"Security:\\\", false);\\n  printStatLine(ns, \\\"Min Seclvl: \\\" + minSec + \\\" | Current Seclvl: \\\" + ns.formatNumber(curSec));\\n  printStatLine(ns, \\\"Ram:\\\", false);\\n  printStatLine(ns, \\\"Server Max Ram: \\\" + maxRam);\\n  printStatLine(ns, \\\"Used Ram: \\\" + useRam + \\\" | free Ram: \\\" + freeRam);\\n  printStatLine(ns, \\\"Threads:\\\", false);\\n  printStatLine(ns, \\\"Grow Threads: \\\" + growingThreads);\\n  printStatLine(ns, \\\"Weaken Threads \\\" + serverWeakenThreadsCur);\\n  printStatLine(ns, \\\"Hack Threads: \\\" + hackThreads + \\\" | Hack percent: \\\" + ns.formatNumber(hackingPercent, 5));\\n  ns.print(BORDER_COLOR + footerString + Colors.RESET);\\n}\\nexport function printServerStatsConsole() {\\n}\\nfunction setStats(ns, server, hackThreshold) {\\n  maxMoney = ns.getServerMaxMoney(server);\\n  curMoney = ns.getServerMoneyAvailable(server);\\n  hackingChance = ns.hackAnalyzeChance(server);\\n  minSec = ns.getServerMinSecurityLevel(server);\\n  curSec = ns.getServerSecurityLevel(server);\\n  maxRam = ns.getServerMaxRam(server);\\n  useRam = ns.getServerUsedRam(server);\\n  freeRam = maxRam - useRam;\\n  moneyMultiplier = maxMoney / curMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  growingThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier));\\n  serverWeakenThreadsCur = Math.ceil((curSec - ns.getServerMinSecurityLevel(server)) / 0.05);\\n  hackingPercent = ns.hackAnalyze(server);\\n  hackThreads = Math.ceil(hackThreshold / hackingPercent);\\n  if (isNaN(hackThreads) || hackThreads == Infinity)\\n    hackThreads = 0;\\n  if (isNaN(hackingPercent) || hackingPercent == Infinity)\\n    hackingPercent = 0;\\n  headerString = \\\"┌───────────────── stats for \\\" + server + \\\" ─────────────────┐\\\";\\n  footerString = \\\"└\\\" + \\\"─\\\".repeat(headerString.length - 2) + \\\"┘\\\";\\n}\\nfunction printStatLine(ns, value, indent = true) {\\n  if (indent)\\n    value = \\\"\\t\\\" + value;\\n  const offset = indent ? 8 : 3;\\n  ns.print(\\n    BORDER_COLOR + \\\"│ \\\" + Colors.RESET + value + \\\" \\\".repeat(headerString.length - value.length - offset) + BORDER_COLOR + \\\"│\\\" + Colors.RESET\\n  );\\n}\\nexport function autocomplete(data) {\\n  return [...data.servers];\\n}\\nexport async function main(ns) {\\n  ns.clearLog();\\n  ns.tail();\\n  ns.resizeTail(542, 375);\\n  ns.disableLog(\\\"ALL\\\");\\n  if (ns.args.length == 1) {\\n    while (true) {\\n      ns.clearLog();\\n      printServerStats(ns, ns.args[0].toString(), 0.9);\\n      await ns.sleep(100);\\n    }\\n  } else {\\n    while (true) {\\n      ns.clearLog();\\n      const server = ns.peek(1);\\n      if (server === \\\"NULL PORT DATA\\\") {\\n        ns.print(\\\"No server found\\\");\\n        await ns.sleep(1e3);\\n        continue;\\n      }\\n      printServerStats(ns, server.toString(), 0.9);\\n      await ns.sleep(100);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlclN0YXRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIi4vbGliXCI7XG5cbmNvbnN0IEJPUkRFUl9DT0xPUiA9IENvbG9ycy5DWUFOO1xuXG5sZXQgbWF4TW9uZXkgPSAwO1xubGV0IGN1ck1vbmV5ID0gMDtcbmxldCBoYWNraW5nQ2hhbmNlID0gMDtcbmxldCBtaW5TZWMgPSAwO1xubGV0IGN1clNlYyA9IDA7XG5sZXQgbWF4UmFtID0gMDtcbmxldCB1c2VSYW0gPSAwO1xubGV0IGZyZWVSYW0gPSAwO1xubGV0IG1vbmV5TXVsdGlwbGllciA9IDA7XG5sZXQgZ3Jvd2luZ1RocmVhZHMgPSAwO1xubGV0IHNlcnZlcldlYWtlblRocmVhZHNDdXIgPSAwO1xubGV0IGhhY2tUaHJlYWRzID0gMDtcbmxldCBoZWFkZXJTdHJpbmcgPSBcIlwiO1xubGV0IGZvb3RlclN0cmluZyA9IFwiXCI7XG5sZXQgaGFja2luZ1BlcmNlbnQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTZXJ2ZXJTdGF0cyhuczogTlMsIHNlcnZlcjogc3RyaW5nLCBoYWNrVGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBzZXRTdGF0cyhucywgc2VydmVyLCBoYWNrVGhyZXNob2xkKTtcblxuICAgIG5zLnByaW50KEJPUkRFUl9DT0xPUiArIGhlYWRlclN0cmluZyArIENvbG9ycy5SRVNFVCk7XG5cbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIk1vbmV5OlwiLCBmYWxzZSk7XG4gICAgcHJpbnRTdGF0TGluZShucywgXCJNYXggTW9uZXk6IFwiICsgbnMuZm9ybWF0TnVtYmVyKG1heE1vbmV5KSArIFwiIHwgQ3VycmVudCBNb25leTogXCIgKyBucy5mb3JtYXROdW1iZXIoY3VyTW9uZXkpKTtcbiAgICBwcmludFN0YXRMaW5lKFxuICAgICAgICBucyxcbiAgICAgICAgXCJQZXJjZW50OiBcIiArIG5zLmZvcm1hdE51bWJlcihjdXJNb25leSAvIG1heE1vbmV5KSArIFwiIHwgSGFjayBDaGFuY2U6IFwiICsgbnMuZm9ybWF0TnVtYmVyKGhhY2tpbmdDaGFuY2UpLFxuICAgICk7XG5cbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIlNlY3VyaXR5OlwiLCBmYWxzZSk7XG4gICAgcHJpbnRTdGF0TGluZShucywgXCJNaW4gU2VjbHZsOiBcIiArIG1pblNlYyArIFwiIHwgQ3VycmVudCBTZWNsdmw6IFwiICsgbnMuZm9ybWF0TnVtYmVyKGN1clNlYykpO1xuXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJSYW06XCIsIGZhbHNlKTtcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIlNlcnZlciBNYXggUmFtOiBcIiArIG1heFJhbSk7XG4gICAgcHJpbnRTdGF0TGluZShucywgXCJVc2VkIFJhbTogXCIgKyB1c2VSYW0gKyBcIiB8IGZyZWUgUmFtOiBcIiArIGZyZWVSYW0pO1xuXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJUaHJlYWRzOlwiLCBmYWxzZSk7XG4gICAgcHJpbnRTdGF0TGluZShucywgXCJHcm93IFRocmVhZHM6IFwiICsgZ3Jvd2luZ1RocmVhZHMpO1xuICAgIHByaW50U3RhdExpbmUobnMsIFwiV2Vha2VuIFRocmVhZHMgXCIgKyBzZXJ2ZXJXZWFrZW5UaHJlYWRzQ3VyKTtcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIkhhY2sgVGhyZWFkczogXCIgKyBoYWNrVGhyZWFkcyArIFwiIHwgSGFjayBwZXJjZW50OiBcIiArIG5zLmZvcm1hdE51bWJlcihoYWNraW5nUGVyY2VudCwgNSkpO1xuXG4gICAgbnMucHJpbnQoQk9SREVSX0NPTE9SICsgZm9vdGVyU3RyaW5nICsgQ29sb3JzLlJFU0VUKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50U2VydmVyU3RhdHNDb25zb2xlKCkge1xuICAgIC8vIHRvZG9cbn1cblxuZnVuY3Rpb24gc2V0U3RhdHMobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgaGFja1RocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgLy8gbW9uZXlcbiAgICBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XG4gICAgY3VyTW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShzZXJ2ZXIpO1xuICAgIGhhY2tpbmdDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZShzZXJ2ZXIpO1xuICAgIC8vIHNlYyBsdmxcbiAgICBtaW5TZWMgPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlcik7XG4gICAgY3VyU2VjID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xuICAgIC8vIHJhbVxuICAgIG1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXIpO1xuICAgIHVzZVJhbSA9IG5zLmdldFNlcnZlclVzZWRSYW0oc2VydmVyKTtcbiAgICBmcmVlUmFtID0gbWF4UmFtIC0gdXNlUmFtO1xuICAgIC8vIHRocmVhZHNcblxuICAgIG1vbmV5TXVsdGlwbGllciA9IG1heE1vbmV5IC8gY3VyTW9uZXk7XG4gICAgaWYgKGlzTmFOKG1vbmV5TXVsdGlwbGllcikgfHwgbW9uZXlNdWx0aXBsaWVyID09IEluZmluaXR5KSBtb25leU11bHRpcGxpZXIgPSAxO1xuXG4gICAgZ3Jvd2luZ1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZShzZXJ2ZXIsIG1vbmV5TXVsdGlwbGllcikpO1xuXG4gICAgc2VydmVyV2Vha2VuVGhyZWFkc0N1ciA9IE1hdGguY2VpbCgoY3VyU2VjIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIpKSAvIDAuMDUpO1xuXG4gICAgaGFja2luZ1BlcmNlbnQgPSBucy5oYWNrQW5hbHl6ZShzZXJ2ZXIpO1xuICAgIGhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKGhhY2tUaHJlc2hvbGQgLyBoYWNraW5nUGVyY2VudCk7XG4gICAgaWYgKGlzTmFOKGhhY2tUaHJlYWRzKSB8fCBoYWNrVGhyZWFkcyA9PSBJbmZpbml0eSkgaGFja1RocmVhZHMgPSAwO1xuICAgIGlmIChpc05hTihoYWNraW5nUGVyY2VudCkgfHwgaGFja2luZ1BlcmNlbnQgPT0gSW5maW5pdHkpIGhhY2tpbmdQZXJjZW50ID0gMDtcblxuICAgIGhlYWRlclN0cmluZyA9IFwi4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIHN0YXRzIGZvciBcIiArIHNlcnZlciArIFwiIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFwiO1xuICAgIGZvb3RlclN0cmluZyA9IFwi4pSUXCIgKyBcIuKUgFwiLnJlcGVhdChoZWFkZXJTdHJpbmcubGVuZ3RoIC0gMikgKyBcIuKUmFwiO1xufVxuXG5mdW5jdGlvbiBwcmludFN0YXRMaW5lKG5zOiBOUywgdmFsdWU6IHN0cmluZywgaW5kZW50ID0gdHJ1ZSkge1xuICAgIGlmIChpbmRlbnQpIHZhbHVlID0gXCJcXHRcIiArIHZhbHVlO1xuICAgIGNvbnN0IG9mZnNldCA9IGluZGVudCA/IDggOiAzOyAvLyB0aGUgb2Zmc2V0IHRvIHN1YnRyYWN0IHRoZSBib3JkZXIgYW5kIGluZGVudFxuICAgIG5zLnByaW50KFxuICAgICAgICBCT1JERVJfQ09MT1IgK1xuICAgICAgICAgICAgXCLilIIgXCIgK1xuICAgICAgICAgICAgQ29sb3JzLlJFU0VUICtcbiAgICAgICAgICAgIHZhbHVlICtcbiAgICAgICAgICAgIFwiIFwiLnJlcGVhdChoZWFkZXJTdHJpbmcubGVuZ3RoIC0gdmFsdWUubGVuZ3RoIC0gb2Zmc2V0KSArXG4gICAgICAgICAgICBCT1JERVJfQ09MT1IgK1xuICAgICAgICAgICAgXCLilIJcIiArXG4gICAgICAgICAgICBDb2xvcnMuUkVTRVQsXG4gICAgKTtcbn1cblxuaW50ZXJmYWNlIEF1dG9jb21wbGV0ZURhdGEge1xuICAgIHNlcnZlcnM6IHN0cmluZ1tdO1xuICAgIHR4dHM6IHN0cmluZ1tdO1xuICAgIHNjcmlwdHM6IHN0cmluZ1tdO1xuICAgIGZsYWdzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZShkYXRhOiBBdXRvY29tcGxldGVEYXRhKSB7XG4gICAgcmV0dXJuIFsuLi5kYXRhLnNlcnZlcnNdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBucy5jbGVhckxvZygpO1xuICAgIG5zLnRhaWwoKTtcbiAgICBucy5yZXNpemVUYWlsKDU0MiwgMzc1KTtcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xuICAgIGlmIChucy5hcmdzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBucy5jbGVhckxvZygpO1xuICAgICAgICAgICAgcHJpbnRTZXJ2ZXJTdGF0cyhucywgbnMuYXJnc1swXS50b1N0cmluZygpLCAwLjkpO1xuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBucy5jbGVhckxvZygpO1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyID0gbnMucGVlaygxKTtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiTlVMTCBQT1JUIERBVEFcIikge1xuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiTm8gc2VydmVyIGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDEwMDApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpbnRTZXJ2ZXJTdGF0cyhucywgc2VydmVyLnRvU3RyaW5nKCksIDAuOSk7XG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcCgxMDApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm1hcHBpbmdz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\",\"filename\":\"serverStats.js\",\"server\":\"home\"}}],[\"bestServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { isHackable, nukeServer, serverScanner } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  getBestServerList(ns, true);\\n}\\nexport function getBestServerList(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName))\\n      continue;\\n    nukeServer(ns, serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const hackingChance = ns.hackAnalyzeChance(serverName);\\n    let weakeningTime = ns.getWeakenTime(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverName) > ns.getHackingLevel())\\n      continue;\\n    let score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    if (ns.fileExists(\\\"formulas.exe\\\", \\\"home\\\")) {\\n      const server2 = ns.getServer(serverName);\\n      const player = ns.getPlayer();\\n      server2.hackDifficulty = server2.minDifficulty;\\n      const maxMoney2 = server2.moneyMax == void 0 ? 0 : server2.moneyMax;\\n      weakeningTime = ns.formulas.hacking.weakenTime(server2, player);\\n      score = maxMoney2 / weakeningTime * ns.formulas.hacking.hackChance(server2, player) / 1e3;\\n    }\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      hackingChance,\\n      weakeningTime,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function getBestServer(ns) {\\n  const servers = getBestServerList(ns, false);\\n  return servers[0].name;\\n}\\nexport function getBestHostByRamOptimized(ns) {\\n  const allHosts = [];\\n  const allServers = serverScanner(ns);\\n  for (let i = 0; i < allServers.length; i++) {\\n    const server = ns.getServer(allServers[i]);\\n    if (server.maxRam - server.ramUsed < 2)\\n      continue;\\n    if (!server.hasAdminRights)\\n      continue;\\n    const serverObj = {\\n      name: server.hostname,\\n      maxRam: server.maxRam,\\n      availableRam: server.maxRam - server.ramUsed,\\n      score: 0\\n    };\\n    allHosts.push(serverObj);\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  return allHosts;\\n}\\nexport function getBestHostByRam(ns) {\\n  const allHosts = getBestServerListCheap(ns, false).filter((server) => {\\n    return server.availableRam > 2;\\n  });\\n  const home = {\\n    name: \\\"home\\\",\\n    maxRam: ns.getServerMaxRam(\\\"home\\\") - 50,\\n    availableRam: ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") - 50,\\n    score: 0\\n  };\\n  allHosts.push(home);\\n  const purchasedServers = ns.getPurchasedServers();\\n  for (let i = 0; i < purchasedServers.length; i++) {\\n    const server = {\\n      name: purchasedServers[i],\\n      maxRam: ns.getServerMaxRam(purchasedServers[i]),\\n      availableRam: ns.getServerMaxRam(purchasedServers[i]) - ns.getServerUsedRam(purchasedServers[i]),\\n      score: 0\\n    };\\n    if (server.maxRam > 2) {\\n      allHosts.push(server);\\n    }\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  return allHosts;\\n}\\nexport function getBestServerListCheap(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName))\\n      continue;\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverList[i]) > ns.getHackingLevel())\\n      continue;\\n    const score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function printTable(ns, array) {\\n  const tableArray = [];\\n  for (let i = 0; i < array.length; i++) {\\n    if (array[i].maxMoney === void 0)\\n      array[i].maxMoney = 0;\\n    if (array[i].hackingChance === void 0)\\n      array[i].hackingChance = 0;\\n    if (array[i].weakeningTime === void 0)\\n      array[i].weakeningTime = 0;\\n    const server = {\\n      name: array[i].name,\\n      maxMoney: ns.formatNumber(Number(array[i].maxMoney)),\\n      hackingChance: ns.formatNumber(Number(array[i].hackingChance)),\\n      weakeningTime: ns.formatNumber(Number(array[i].weakeningTime) / 1e3),\\n      //ns.formatNumber(Number(array[i].weakeningTime), 4),\\n      score: ns.formatNumber(Number(array[i].score))\\n    };\\n    tableArray.push(server);\\n  }\\n  ns.print(\\\"╔════════════════════╦══════════╦════════╦═══════════╦═════════╗\\\");\\n  ns.print(\\\"║       server       ║   Max $  ║ chance ║ Weak time ║  score  ║\\\");\\n  ns.print(\\\"╠════════════════════╬══════════╬════════╬═══════════╬═════════╣\\\");\\n  for (let i = 0; i < tableArray.length; i++) {\\n    ns.print(\\n      \\\"║ \\\" + tableArray[i].name + space(tableArray[i].name.length, 0) + \\\"║ \\\" + tableArray[i].maxMoney + space(tableArray[i].maxMoney.length, 1) + \\\"║ \\\" + tableArray[i].hackingChance + space(tableArray[i].hackingChance.length, 2) + \\\"║ \\\" + tableArray[i].weakeningTime + space(tableArray[i].weakeningTime.length, 3) + \\\"║ \\\" + tableArray[i].score + space(tableArray[i].score.length, 4) + \\\"║\\\"\\n    );\\n  }\\n  ns.print(\\\"╚════════════════════╩══════════╩════════╩═══════════╩═════════╝\\\");\\n}\\nfunction space(len, colIndex) {\\n  const colLen = [19, 9, 7, 10, 8];\\n  const real = colLen[colIndex] - len;\\n  let str = \\\"\\\";\\n  for (let i = 0; i < real; i++) {\\n    str += \\\" \\\";\\n  }\\n  return str;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBpc0hhY2thYmxlLCBudWtlU2VydmVyLCBzZXJ2ZXJTY2FubmVyIH0gZnJvbSBcIi4vbGliLmpzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlciB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBtYXhNb25leT86IG51bWJlcjtcclxuICAgIGhhY2tpbmdDaGFuY2U/OiBudW1iZXI7XHJcbiAgICB3ZWFrZW5pbmdUaW1lPzogbnVtYmVyO1xyXG4gICAgbWF4UmFtOiBudW1iZXI7XHJcbiAgICBhdmFpbGFibGVSYW06IG51bWJlcjtcclxuICAgIHNjb3JlOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIGdldEJlc3RTZXJ2ZXJMaXN0KG5zLCB0cnVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RTZXJ2ZXJMaXN0KG5zOiBOUywgc2hvdWxkUHJpbnQ6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IHNlcnZlckxpc3QgPSBzZXJ2ZXJTY2FubmVyKG5zKTtcclxuXHJcbiAgICBjb25zdCBzZXJ2ZXJzOiBTZXJ2ZXJbXSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VydmVyTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlck5hbWUgPSBzZXJ2ZXJMaXN0W2ldO1xyXG4gICAgICAgIGlmICghaXNIYWNrYWJsZShucywgc2VydmVyTmFtZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBudWtlU2VydmVyKG5zLCBzZXJ2ZXJOYW1lKTsgLy8gNTAgbXMgZm9yIDUwMCBpdHRlcmF0aW9uc1xyXG5cclxuICAgICAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGNvbnN0IGhhY2tpbmdDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZShzZXJ2ZXJOYW1lKTtcclxuICAgICAgICBsZXQgd2Vha2VuaW5nVGltZSA9IG5zLmdldFdlYWtlblRpbWUoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgbWF4UmFtID0gbnMuZ2V0U2VydmVyTWF4UmFtKHNlcnZlck5hbWUpO1xyXG5cclxuICAgICAgICAvLyBmaWx0ZXIgc2VydmVyIHdpdGggbm8gbW9uZXkgb3IgdGhlIGhhY2tpbmcgbGV2ZWwgYWJvdmUgcGxheWVycyBoYWNraW5nIGxldmVsXHJcbiAgICAgICAgaWYgKG1heE1vbmV5IDwgMSB8fCBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXJOYW1lKSA+IG5zLmdldEhhY2tpbmdMZXZlbCgpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgLy8gY29uc3Qgc2NvcmUgPSAobWF4TW9uZXkgLyAod2Vha2VuaW5nVGltZSArIDMpKSAqIGhhY2tpbmdDaGFuY2UgKiAoMSAvIHdlYWtlbmluZ1RpbWUpXHJcbiAgICAgICAgLy8gY29uc3Qgc2NvcmUgPSBucy5mb3JtYXROdW1iZXIoKChtYXhNb25leSAvICh3ZWFrZW5pbmdUaW1lKSkgKiBoYWNraW5nQ2hhbmNlKSAvIDEwMDApXHJcbiAgICAgICAgbGV0IHNjb3JlID0gbWF4TW9uZXkgLyBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlck5hbWUpIC8gMTAwMDAwMDtcclxuXHJcbiAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJmb3JtdWxhcy5leGVcIiwgXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IG5zLmdldFNlcnZlcihzZXJ2ZXJOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcbiAgICAgICAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IHNlcnZlci5taW5EaWZmaWN1bHR5O1xyXG4gICAgICAgICAgICBjb25zdCBtYXhNb25leSA9IHNlcnZlci5tb25leU1heCA9PSB1bmRlZmluZWQgPyAwIDogc2VydmVyLm1vbmV5TWF4O1xyXG4gICAgICAgICAgICB3ZWFrZW5pbmdUaW1lID0gbnMuZm9ybXVsYXMuaGFja2luZy53ZWFrZW5UaW1lKHNlcnZlciwgcGxheWVyKTtcclxuICAgICAgICAgICAgc2NvcmUgPSAoKG1heE1vbmV5IC8gd2Vha2VuaW5nVGltZSkgKiBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tDaGFuY2Uoc2VydmVyLCBwbGF5ZXIpKSAvIDEwMDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzZXJ2ZXI6IFNlcnZlciA9IHtcclxuICAgICAgICAgICAgbmFtZTogc2VydmVyTmFtZSxcclxuICAgICAgICAgICAgbWF4TW9uZXk6IG1heE1vbmV5LFxyXG4gICAgICAgICAgICBoYWNraW5nQ2hhbmNlOiBoYWNraW5nQ2hhbmNlLFxyXG4gICAgICAgICAgICB3ZWFrZW5pbmdUaW1lOiB3ZWFrZW5pbmdUaW1lLFxyXG4gICAgICAgICAgICBtYXhSYW06IG1heFJhbSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBtYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlck5hbWUpLFxyXG4gICAgICAgICAgICBzY29yZTogc2NvcmUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2VydmVycy5wdXNoKHNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgc2VydmVycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChiLnNjb3JlIHx8IDApIC0gKGEuc2NvcmUgfHwgMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoc2hvdWxkUHJpbnQpIHByaW50VGFibGUobnMsIHNlcnZlcnMpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFNlcnZlcihuczogTlMpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgc2VydmVycyA9IGdldEJlc3RTZXJ2ZXJMaXN0KG5zLCBmYWxzZSk7XHJcbiAgICByZXR1cm4gc2VydmVyc1swXS5uYW1lO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChuczogTlMpOiBTZXJ2ZXJbXSB7XHJcbiAgICBjb25zdCBhbGxIb3N0czogU2VydmVyW10gPSBbXTtcclxuICAgIGNvbnN0IGFsbFNlcnZlcnMgPSBzZXJ2ZXJTY2FubmVyKG5zKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBucy5nZXRTZXJ2ZXIoYWxsU2VydmVyc1tpXSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQgPCAyKSBjb250aW51ZTtcclxuICAgICAgICBpZiAoIXNlcnZlci5oYXNBZG1pblJpZ2h0cykgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlck9iajogU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBzZXJ2ZXIuaG9zdG5hbWUsXHJcbiAgICAgICAgICAgIG1heFJhbTogc2VydmVyLm1heFJhbSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQsXHJcbiAgICAgICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYWxsSG9zdHMucHVzaChzZXJ2ZXJPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnQgYnkgcmFtIGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgYWxsSG9zdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmF2YWlsYWJsZVJhbSAtIGIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbEhvc3RzO1xyXG59XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgdXNlIGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQgaW5zdGVhZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RIb3N0QnlSYW0obnM6IE5TKTogU2VydmVyW10ge1xyXG4gICAgY29uc3QgYWxsSG9zdHMgPSBnZXRCZXN0U2VydmVyTGlzdENoZWFwKG5zLCBmYWxzZSkuZmlsdGVyKChzZXJ2ZXIpID0+IHtcclxuICAgICAgICByZXR1cm4gc2VydmVyLmF2YWlsYWJsZVJhbSA+IDI7XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBob21lOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgbmFtZTogXCJob21lXCIsXHJcbiAgICAgICAgbWF4UmFtOiBucy5nZXRTZXJ2ZXJNYXhSYW0oXCJob21lXCIpIC0gNTAsXHJcbiAgICAgICAgYXZhaWxhYmxlUmFtOiBucy5nZXRTZXJ2ZXJNYXhSYW0oXCJob21lXCIpIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShcImhvbWVcIikgLSA1MCxcclxuICAgICAgICBzY29yZTogMCxcclxuICAgIH07IC8vIDEwIHNvbWUgc2FmZXR5IG1hcmdpblxyXG4gICAgYWxsSG9zdHMucHVzaChob21lKTtcclxuXHJcbiAgICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHB1cmNoYXNlZFNlcnZlcnNbaV0sXHJcbiAgICAgICAgICAgIG1heFJhbTogbnMuZ2V0U2VydmVyTWF4UmFtKHB1cmNoYXNlZFNlcnZlcnNbaV0pLFxyXG4gICAgICAgICAgICBhdmFpbGFibGVSYW06IG5zLmdldFNlcnZlck1heFJhbShwdXJjaGFzZWRTZXJ2ZXJzW2ldKSAtIG5zLmdldFNlcnZlclVzZWRSYW0ocHVyY2hhc2VkU2VydmVyc1tpXSksXHJcbiAgICAgICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHNlcnZlci5tYXhSYW0gPiAyKSB7XHJcbiAgICAgICAgICAgIGFsbEhvc3RzLnB1c2goc2VydmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc29ydCBieSByYW0gaW4gYXNjZW5kaW5nIG9yZGVyXHJcbiAgICBhbGxIb3N0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGEuYXZhaWxhYmxlUmFtIC0gYi5hdmFpbGFibGVSYW07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gYWxsSG9zdHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0U2VydmVyTGlzdENoZWFwKG5zOiBOUywgc2hvdWxkUHJpbnQ6IGJvb2xlYW4pOiBTZXJ2ZXJbXSB7XHJcbiAgICBjb25zdCBzZXJ2ZXJMaXN0ID0gc2VydmVyU2Nhbm5lcihucyk7XHJcblxyXG4gICAgY29uc3Qgc2VydmVyczogU2VydmVyW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZXJ2ZXJOYW1lID0gc2VydmVyTGlzdFtpXTtcclxuICAgICAgICAvLyBjb25zdCBzbyA9IG5zLmdldFNlcnZlcihzZXJ2ZXJOYW1lKTtcclxuICAgICAgICAvLyBjb25zdCBwbGF5ZXIgPSBucy5nZXRQbGF5ZXIoKTtcclxuXHJcbiAgICAgICAgaWYgKCFpc0hhY2thYmxlKG5zLCBzZXJ2ZXJOYW1lKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGNhbk9wZW5Qb3J0cyA9IHNvLm51bU9wZW5Qb3J0c1JlcXVpcmVkIDw9IGdldE51bUhhY2tzKG5zKTtcclxuICAgICAgICAvLyBjb25zdCBjYW5IYWNrID0gc28ucmVxdWlyZWRIYWNraW5nU2tpbGwgPD0gcGxheWVyLnNraWxscy5oYWNraW5nO1xyXG4gICAgICAgIC8vIGlmICghKGNhbk9wZW5Qb3J0cyAmJiBjYW5IYWNrKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgbWF4UmFtID0gbnMuZ2V0U2VydmVyTWF4UmFtKHNlcnZlck5hbWUpO1xyXG5cclxuICAgICAgICAvLyBmaWx0ZXIgc2VydmVyIHdpdGggbm8gbW9uZXkgb3IgdGhlIGhhY2tpbmcgbGV2ZWwgYWJvdmUgcGxheWVycyBoYWNraW5nIGxldmVsXHJcbiAgICAgICAgaWYgKG1heE1vbmV5IDwgMSB8fCBucy5nZXRTZXJ2ZXJSZXF1aXJlZEhhY2tpbmdMZXZlbChzZXJ2ZXJMaXN0W2ldKSA+IG5zLmdldEhhY2tpbmdMZXZlbCgpKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NvcmUgPSBtYXhNb25leSAvIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyTmFtZSkgLyAxMDAwMDAwO1xyXG5cclxuICAgICAgICBjb25zdCBzZXJ2ZXI6IFNlcnZlciA9IHtcclxuICAgICAgICAgICAgbmFtZTogc2VydmVyTmFtZSxcclxuICAgICAgICAgICAgbWF4TW9uZXk6IG1heE1vbmV5LFxyXG4gICAgICAgICAgICBtYXhSYW06IG1heFJhbSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBtYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlck5hbWUpLFxyXG4gICAgICAgICAgICBzY29yZTogc2NvcmUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZXJ2ZXJzLnB1c2goc2VydmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXJ2ZXJzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICByZXR1cm4gKGIuc2NvcmUgfHwgMCkgLSAoYS5zY29yZSB8fCAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChzaG91bGRQcmludCkgcHJpbnRUYWJsZShucywgc2VydmVycyk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlcnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFRhYmxlKG5zOiBOUywgYXJyYXk6IFNlcnZlcltdKSB7XHJcbiAgICAvLyBzYW5pdHkgY2hlY2sgKyBudW1iZXIgZm9ybWF0dGluZ1xyXG4gICAgaW50ZXJmYWNlIFRhYmxlU2VydmVyIHtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgbWF4TW9uZXk6IHN0cmluZztcclxuICAgICAgICBoYWNraW5nQ2hhbmNlOiBzdHJpbmc7XHJcbiAgICAgICAgd2Vha2VuaW5nVGltZTogc3RyaW5nO1xyXG4gICAgICAgIHNjb3JlOiBzdHJpbmc7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0YWJsZUFycmF5OiBUYWJsZVNlcnZlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChhcnJheVtpXS5tYXhNb25leSA9PT0gdW5kZWZpbmVkKSBhcnJheVtpXS5tYXhNb25leSA9IDA7XHJcbiAgICAgICAgaWYgKGFycmF5W2ldLmhhY2tpbmdDaGFuY2UgPT09IHVuZGVmaW5lZCkgYXJyYXlbaV0uaGFja2luZ0NoYW5jZSA9IDA7XHJcbiAgICAgICAgaWYgKGFycmF5W2ldLndlYWtlbmluZ1RpbWUgPT09IHVuZGVmaW5lZCkgYXJyYXlbaV0ud2Vha2VuaW5nVGltZSA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlcjogVGFibGVTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGFycmF5W2ldLm5hbWUsXHJcbiAgICAgICAgICAgIG1heE1vbmV5OiBucy5mb3JtYXROdW1iZXIoTnVtYmVyKGFycmF5W2ldLm1heE1vbmV5KSksXHJcbiAgICAgICAgICAgIGhhY2tpbmdDaGFuY2U6IG5zLmZvcm1hdE51bWJlcihOdW1iZXIoYXJyYXlbaV0uaGFja2luZ0NoYW5jZSkpLFxyXG4gICAgICAgICAgICB3ZWFrZW5pbmdUaW1lOiBucy5mb3JtYXROdW1iZXIoTnVtYmVyKGFycmF5W2ldLndlYWtlbmluZ1RpbWUpIC8gMTAwMCksIC8vbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS53ZWFrZW5pbmdUaW1lKSwgNCksXHJcbiAgICAgICAgICAgIHNjb3JlOiBucy5mb3JtYXROdW1iZXIoTnVtYmVyKGFycmF5W2ldLnNjb3JlKSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0YWJsZUFycmF5LnB1c2goc2VydmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBucy5wcmludChcIuKVlOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVpuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVl1wiKTtcclxuICAgIG5zLnByaW50KFwi4pWRICAgICAgIHNlcnZlciAgICAgICDilZEgICBNYXggJCAg4pWRIGNoYW5jZSDilZEgV2VhayB0aW1lIOKVkSAgc2NvcmUgIOKVkVwiKTtcclxuICAgIG5zLnByaW50KFwi4pWg4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWs4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWs4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWs4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWs4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWjXCIpO1xyXG4gICAgLy8gcG9sbHV0aW5nIHRhYmxlIHdpdGggZGF0YVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJsZUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIFwi4pWRIFwiICtcclxuICAgICAgICAgICAgICAgIHRhYmxlQXJyYXlbaV0ubmFtZSArXHJcbiAgICAgICAgICAgICAgICBzcGFjZSh0YWJsZUFycmF5W2ldLm5hbWUubGVuZ3RoLCAwKSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLm1heE1vbmV5ICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0ubWF4TW9uZXkubGVuZ3RoLCAxKSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLmhhY2tpbmdDaGFuY2UgK1xyXG4gICAgICAgICAgICAgICAgc3BhY2UodGFibGVBcnJheVtpXS5oYWNraW5nQ2hhbmNlLmxlbmd0aCwgMikgK1xyXG4gICAgICAgICAgICAgICAgXCLilZEgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGFibGVBcnJheVtpXS53ZWFrZW5pbmdUaW1lICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0ud2Vha2VuaW5nVGltZS5sZW5ndGgsIDMpICtcclxuICAgICAgICAgICAgICAgIFwi4pWRIFwiICtcclxuICAgICAgICAgICAgICAgIHRhYmxlQXJyYXlbaV0uc2NvcmUgK1xyXG4gICAgICAgICAgICAgICAgc3BhY2UodGFibGVBcnJheVtpXS5zY29yZS5sZW5ndGgsIDQpICtcclxuICAgICAgICAgICAgICAgIFwi4pWRXCIsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBucy5wcmludChcIuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVqeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVqeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVqeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVqeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3BhY2UobGVuOiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIpIHtcclxuICAgIC8vIHdpdGggb2YgdGhlIGNlbGwgY29udGVudFxyXG4gICAgY29uc3QgY29sTGVuID0gWzE5LCA5LCA3LCAxMCwgOF07XHJcbiAgICBjb25zdCByZWFsID0gY29sTGVuW2NvbEluZGV4XSAtIGxlbjtcclxuICAgIGxldCBzdHIgPSBcIlwiO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWFsOyBpKyspIHtcclxuICAgICAgICBzdHIgKz0gXCIgXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxZQUFZLFlBQVkscUJBQXFCO0FBWXRELHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFDbkIsb0JBQWtCLElBQUksSUFBSTtBQUM5QjtBQUVPLGdCQUFTLGtCQUFrQixJQUFRLGFBQXNCO0FBQzVELFFBQU0sYUFBYSxjQUFjLEVBQUU7QUFFbkMsUUFBTSxVQUFvQixDQUFDO0FBRTNCLFdBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsVUFBTSxhQUFhLFdBQVcsQ0FBQztBQUMvQixRQUFJLENBQUMsV0FBVyxJQUFJLFVBQVU7QUFBRztBQUVqQyxlQUFXLElBQUksVUFBVTtBQUV6QixVQUFNLFdBQVcsR0FBRyxrQkFBa0IsVUFBVTtBQUNoRCxVQUFNLGdCQUFnQixHQUFHLGtCQUFrQixVQUFVO0FBQ3JELFFBQUks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bkMsUUFBSSxNQUFNLENBQUMsRUFBRSxhQUFhO0FBQVcsWUFBTSxDQUFDLEVBQUUsV0FBVztBQUN6RCxRQUFJLE1BQU0sQ0FBQyxFQUFFLGtCQUFrQjtBQUFXLFlBQU0sQ0FBQyxFQUFFLGdCQUFnQjtBQUNuRSxRQUFJLE1BQU0sQ0FBQyxFQUFFLGtCQUFrQjtBQUFXLFlBQU0sQ0FBQyxFQUFFLGdCQUFnQjtBQUVuRSxVQUFNLFNBQXNCO0FBQUEsTUFDeEIsTUFBTSxNQUFNLENBQUMsRUFBRTtBQUFBLE1BQ2YsVUFBVSxHQUFHLGFBQWEsT0FBTyxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUM7QUFBQSxNQUNuRCxlQUFlLEdBQUcsYUFBYSxPQUFPLE1BQU0sQ0FBQyxFQUFFLGFBQWEsQ0FBQztBQUFBLE1BQzdELGVBQWUsR0FBRyxhQUFhLE9BQU8sTUFBTSxDQUFDLEVBQUUsYUFBYSxJQUFJLEdBQUk7QUFBQTtBQUFBLE1BQ3BFLE9BQU8sR0FBRyxhQUFhLE9BQU8sTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDO0FBQUEsSUFDakQ7QUFDQSxlQUFXLEtBQUssTUFBTTtBQUFBLEVBQzFCO0FBRUEsS0FBRyxNQUFNLGtFQUFrRTtBQUMzRSxLQUFHLE1BQU0sa0VBQWtFO0FBQzNFLEtBQUcsTUFBTSxrRUFBa0U7QUFFM0UsV0FBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxPQUFHO0FBQUEsTUFDQyxPQUNJLFdBQVcsQ0FBQyxFQUFFLE9BQ2QsTUFBTSxXQUFXLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxJQUNsQyxPQUNBLFdBQVcsQ0FBQyxFQUFFLFdBQ2QsTUFBTSxXQUFXLENBQUMsRUFBRSxTQUFTLFFBQVEsQ0FBQyxJQUN0QyxPQUNBLFdBQVcsQ0FBQyxFQUFFLGdCQUNkLE1BQU0sV0FBVyxDQUFDLEVBQUUsY0FBYyxRQUFRLENBQUMsSUFDM0MsT0FDQSxXQUFXLENBQUMsRUFBRSxnQkFDZCxNQUFNLFdBQVcsQ0FBQyxFQUFFLGNBQWMsUUFBUSxDQUFDLElBQzNDLE9BQ0EsV0FBVyxDQUFDLEVBQUUsUUFDZCxNQUFNLFdBQVcsQ0FBQyxFQUFFLE1BQU0sUUFBUSxDQUFDLElBQ25DO0FBQUEsSUFDUjtBQUFBLEVBQ0o7QUFFQSxLQUFHLE1BQU0sa0VBQWtFO0FBQy9FO0FBRUEsU0FBUyxNQUFNLEtBQWEsVUFBa0I7QUFFMUMsUUFBTSxTQUFTLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO0FBQy9CLFFBQU0sT0FBTyxPQUFPLFFBQVEsSUFBSTtBQUNoQyxNQUFJLE1BQU07QUFDVixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sS0FBSztBQUMzQixXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU87QUFDWDsiLCJuYW1lcyI6WyJzZXJ2ZXIiLCJtYXhNb25leSJdfQ==\",\"filename\":\"bestServer.js\",\"server\":\"home\"}}],[\"loop/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { getHackThreads } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await hackServer(ns, \\\"foodnstuff\\\", 0.8);\\n}\\nexport async function hackServer(ns, target, threshold) {\\n  const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n  const targetHackThreads = getHackThreads(ns, target, threshold);\\n  const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n  ns.print(\\n    \\\"total hack threads needed: \\\" + targetHackThreads + \\\" money available: \\\" + ns.getServerMoneyAvailable(target)\\n  );\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const totalMaxRam = allHosts.reduce((acc, server) => {\\n    return acc + server.maxRam;\\n  }, 0);\\n  const numRuns = Math.ceil(targetHackThreads / totalMaxRam);\\n  ns.print(\\\"total RAM: \\\" + totalMaxRam + \\\" numRuns: \\\" + numRuns + \\\"\\\\nthreads to finish: \\\" + targetHackThreads);\\n  let sumThreadsDone = 0;\\n  while (sumThreadsDone < targetHackThreads) {\\n    const hackingTime = ns.getHackTime(target);\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (sumThreadsDone >= targetHackThreads)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n      const numThreadsOnHost = Math.floor(freeRam / hackingScriptRam);\\n      ns.exec(\\\"hack.js\\\", host.name, numThreadsOnHost, target, 0);\\n      sumThreadsDone += numThreadsOnHost;\\n    }\\n    await ns.sleep(hackingTime + safetyMarginMs);\\n    ns.print(\\\"done with \\\" + sumThreadsDone + \\\"/\\\" + targetHackThreads + \\\" hacks\\\");\\n  }\\n  ns.print(\\\"Done hacking!\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQgfSBmcm9tIFwiQC9iZXN0U2VydmVyXCI7XG5pbXBvcnQgeyBnZXRIYWNrVGhyZWFkcyB9IGZyb20gXCJAL2xpYlwiO1xuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIG5zLnRhaWwoKTtcbiAgICBhd2FpdCBoYWNrU2VydmVyKG5zLCBcImZvb2Ruc3R1ZmZcIiwgMC44KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhY2tTZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBjb25zdCBzYWZldHlNYXJnaW5NcyA9IENvbmZpZy5ERUxBWV9NQVJHSU5fTVM7XG5cbiAgICAvL2NvbnN0IGhhY2tDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZSh0YXJnZXQpIC8vIHRvZG9cbiAgICBjb25zdCB0YXJnZXRIYWNrVGhyZWFkcyA9IGdldEhhY2tUaHJlYWRzKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XG4gICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XG5cbiAgICBucy5wcmludChcbiAgICAgICAgXCJ0b3RhbCBoYWNrIHRocmVhZHMgbmVlZGVkOiBcIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgbW9uZXkgYXZhaWxhYmxlOiBcIiArIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCksXG4gICAgKTtcblxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XG5cbiAgICBjb25zdCB0b3RhbE1heFJhbSA9IGFsbEhvc3RzLnJlZHVjZSgoYWNjLCBzZXJ2ZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjYyArIHNlcnZlci5tYXhSYW07XG4gICAgfSwgMCk7XG4gICAgY29uc3QgbnVtUnVucyA9IE1hdGguY2VpbCh0YXJnZXRIYWNrVGhyZWFkcyAvIHRvdGFsTWF4UmFtKTtcblxuICAgIG5zLnByaW50KFwidG90YWwgUkFNOiBcIiArIHRvdGFsTWF4UmFtICsgXCIgbnVtUnVuczogXCIgKyBudW1SdW5zICsgXCJcXG50aHJlYWRzIHRvIGZpbmlzaDogXCIgKyB0YXJnZXRIYWNrVGhyZWFkcyk7XG5cbiAgICBsZXQgc3VtVGhyZWFkc0RvbmUgPSAwO1xuICAgIHdoaWxlIChzdW1UaHJlYWRzRG9uZSA8IHRhcmdldEhhY2tUaHJlYWRzKSB7XG4gICAgICAgIGNvbnN0IGhhY2tpbmdUaW1lID0gbnMuZ2V0SGFja1RpbWUodGFyZ2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHN1bVRocmVhZHNEb25lID49IHRhcmdldEhhY2tUaHJlYWRzKSBicmVhaztcblxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xuICAgICAgICAgICAgY29uc3QgZnJlZVJhbSA9IGhvc3QubWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0Lm5hbWUpO1xuXG4gICAgICAgICAgICBjb25zdCBudW1UaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XG5cbiAgICAgICAgICAgIG5zLmV4ZWMoXCJoYWNrLmpzXCIsIGhvc3QubmFtZSwgbnVtVGhyZWFkc09uSG9zdCwgdGFyZ2V0LCAwKTtcbiAgICAgICAgICAgIHN1bVRocmVhZHNEb25lICs9IG51bVRocmVhZHNPbkhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja2luZ1RpbWUgKyBzYWZldHlNYXJnaW5Ncyk7XG4gICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgc3VtVGhyZWFkc0RvbmUgKyBcIi9cIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgaGFja3NcIik7XG4gICAgfVxuXG4gICAgbnMucHJpbnQoXCJEb25lIGhhY2tpbmchXCIpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxpQ0FBaUM7QUFDMUMsU0FBUyxzQkFBc0I7QUFHL0Isc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixRQUFNLFdBQVcsSUFBSSxjQUFjLEdBQUc7QUFDMUM7QUFFQSxzQkFBc0IsV0FBVyxJQUFRLFFBQWdCLFdBQW1CO0FBQ3hFLFFBQU0saUJBQWlCLE9BQU87QUFHOUIsUUFBTSxvQkFBb0IsZUFBZSxJQUFJLFFBQVEsU0FBUztBQUM5RCxRQUFNLG1CQUFtQixPQUFPO0FBRWhDLEtBQUc7QUFBQSxJQUNDLGdDQUFnQyxvQkFBb0IsdUJBQXVCLEdBQUcsd0JBQXdCLE1BQU07QUFBQSxFQUNoSDtBQUVBLFFBQU0sV0FBVywwQkFBMEIsRUFBRTtBQUU3QyxRQUFNLGNBQWMsU0FBUyxPQUFPLENBQUMsS0FBSyxXQUFXO0FBQ2pELFdBQU8sTUFBTSxPQUFPO0FBQUEsRUFDeEIsR0FBRyxDQUFDO0FBQ0osUUFBTSxVQUFVLEtBQUssS0FBSyxvQkFBb0IsV0FBVztBQUV6RCxLQUFHLE1BQU0sZ0JBQWdCLGNBQWMsZUFBZSxVQUFVLDBCQUEwQixpQkFBaUI7QUFFM0csTUFBSSxpQkFBaUI7QUFDckIsU0FBTyxpQkFBaUIsbUJBQW1CO0FBQ3ZDLFVBQU0sY0FBYyxHQUFHLFlBQVksTUFBTTtBQUN6QyxhQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsUUFBUSxLQUFLO0FBQ3RDLFVBQUksa0JBQWtCO0FBQW1CO0FBRXpDLFlBQU0sT0FBTyxTQUFTLENBQUM7QUFDdkIsWUFBTSxVQUFVLEtBQUssU0FBUyxHQUFHLGlCQUFpQixLQUFLLElBQUk7QUFFM0QsWUFBTSxtQkFBbUIsS0FBSyxNQUFNLFVBQVUsZ0JBQWdCO0FBRTlELFNBQUcsS0FBSyxXQUFXLEtBQUssTUFBTSxrQkFBa0IsUUFBUSxDQUFDO0FBQ3pELHdCQUFrQjtBQUFBLElBQ3RCO0FBQ0EsVUFBTSxHQUFHLE1BQU0sY0FBYyxjQUFjO0FBQzNDLE9BQUcsTUFBTSxlQUFlLGlCQUFpQixNQUFNLG9CQUFvQixRQUFRO0FBQUEsRUFDL0U7QUFFQSxLQUFHLE1BQU0sZUFBZTtBQUM1QjsiLCJuYW1lcyI6W119\",\"filename\":\"loop/hackingAlgo.js\",\"server\":\"home\"}}],[\"loop/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getBestServerListCheap } from \\\"/bestServer.js\\\";\\nimport { Colors, nukeAll } from \\\"/lib.js\\\";\\nimport { hackServer } from \\\"/loop/hackingAlgo.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nlet lastTarget = \\\"\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServerListCheap(ns, true)[0].name;\\n    if (lastTarget != target) {\\n      nukeAll(ns);\\n      ns.print(\\\"found new best Server: \\\" + target);\\n    }\\n    lastTarget = target;\\n    await loopCycle(ns, target, 0.8);\\n  }\\n}\\nexport async function loopCycle(ns, target, threshold) {\\n  ns.print(Colors.CYAN + \\\"------------ PREPARING ------------\\\" + Colors.RESET);\\n  await prepareServer(ns, target, threshold);\\n  ns.print(Colors.CYAN + \\\"------------- HACKING -------------\\\" + Colors.RESET);\\n  await hackServer(ns, target, threshold);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5cbmltcG9ydCB7IGdldEJlc3RTZXJ2ZXJMaXN0Q2hlYXAgfSBmcm9tIFwiLi4vYmVzdFNlcnZlci5qc1wiO1xuaW1wb3J0IHsgQ29sb3JzLCBudWtlQWxsIH0gZnJvbSBcIi4uL2xpYi5qc1wiO1xuaW1wb3J0IHsgaGFja1NlcnZlciB9IGZyb20gXCIuL2hhY2tpbmdBbGdvLmpzXCI7XG5pbXBvcnQgeyBwcmVwYXJlU2VydmVyIH0gZnJvbSBcIi4vcHJlcGFyZVNlcnZlci5qc1wiO1xuXG5sZXQgbGFzdFRhcmdldCA9IFwiXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIG5zLnRhaWwoKTtcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xuXG4gICAgLy8gc3RlcHM6IFdHV0gtV0dXSC0uLlxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldEJlc3RTZXJ2ZXJMaXN0Q2hlYXAobnMsIHRydWUpWzBdLm5hbWU7XG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9IHRhcmdldCkge1xuICAgICAgICAgICAgbnVrZUFsbChucyk7XG4gICAgICAgICAgICBucy5wcmludChcImZvdW5kIG5ldyBiZXN0IFNlcnZlcjogXCIgKyB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGF3YWl0IGxvb3BDeWNsZShucywgdGFyZ2V0LCAwLjgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvb3BDeWNsZShuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlcikge1xuICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0gUFJFUEFSSU5HIC0tLS0tLS0tLS0tLVwiICsgQ29sb3JzLlJFU0VUKTtcbiAgICBhd2FpdCBwcmVwYXJlU2VydmVyKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XG5cbiAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tLSBIQUNLSU5HIC0tLS0tLS0tLS0tLS1cIiArIENvbG9ycy5SRVNFVCk7XG4gICAgYXdhaXQgaGFja1NlcnZlcihucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xufVxuXG4vKipcbiBub3RlczpcbiB3ZWFrZW4gcmVtb3ZlcyAwLjA1IHNlYyBsdmxcbiBncm93IGFkZHMgMC4wMDQgc2VjIGx2bFxuXG4gKi9cbiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyw4QkFBOEI7QUFDdkMsU0FBUyxRQUFRLGVBQWU7QUFDaEMsU0FBUyxrQkFBa0I7QUFDM0IsU0FBUyxxQkFBcUI7QUFFOUIsSUFBSSxhQUFhO0FBRWpCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFHbkIsU0FBTyxNQUFNO0FBQ1QsVUFBTSxTQUFTLHVCQUF1QixJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDbkQsUUFBSSxjQUFjLFFBQVE7QUFDdEIsY0FBUSxFQUFFO0FBQ1YsU0FBRyxNQUFNLDRCQUE0QixNQUFNO0FBQUEsSUFDL0M7QUFDQSxpQkFBYTtBQUNiLFVBQU0sVUFBVSxJQUFJLFFBQVEsR0FBRztBQUFBLEVBQ25DO0FBQ0o7QUFFQSxzQkFBc0IsVUFBVSxJQUFRLFFBQWdCLFdBQW1CO0FBQ3ZFLEtBQUcsTUFBTSxPQUFPLE9BQU8sd0NBQXdDLE9BQU8sS0FBSztBQUMzRSxRQUFNLGNBQWMsSUFBSSxRQUFRLFNBQVM7QUFFekMsS0FBRyxNQUFNLE9BQU8sT0FBTyx3Q0FBd0MsT0FBTyxLQUFLO0FBQzNFLFFBQU0sV0FBVyxJQUFJLFFBQVEsU0FBUztBQUMxQzsiLCJuYW1lcyI6W119\",\"filename\":\"loop/manager.js\",\"server\":\"home\"}}],[\"lib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export var Colors = /* @__PURE__ */ ((Colors2) => {\\n  Colors2[\\\"RESET\\\"] = \\\"\\\\x1B[0m\\\";\\n  Colors2[\\\"BLACK\\\"] = \\\"\\\\x1B[30m\\\";\\n  Colors2[\\\"RED\\\"] = \\\"\\\\x1B[31m\\\";\\n  Colors2[\\\"GREEN\\\"] = \\\"\\\\x1B[32m\\\";\\n  Colors2[\\\"YELLOW\\\"] = \\\"\\\\x1B[33m\\\";\\n  Colors2[\\\"BLUE\\\"] = \\\"\\\\x1B[34m\\\";\\n  Colors2[\\\"MAGENTA\\\"] = \\\"\\\\x1B[35m\\\";\\n  Colors2[\\\"CYAN\\\"] = \\\"\\\\x1B[36m\\\";\\n  Colors2[\\\"WHITE\\\"] = \\\"\\\\x1B[37m\\\";\\n  Colors2[\\\"E_ORANGE\\\"] = \\\"\\\\x1B[38;5;178m\\\";\\n  return Colors2;\\n})(Colors || {});\\nexport function serverScanner(ns) {\\n  const uncheckedHosts = [\\\"home\\\"];\\n  const checkedHosts = [];\\n  for (let i = 0; i < uncheckedHosts.length; i++) {\\n    const newHosts = ns.scan(uncheckedHosts[i]);\\n    checkedHosts.push(uncheckedHosts[i]);\\n    for (let n = 0; n < newHosts.length; n++) {\\n      if (checkedHosts.includes(newHosts[n]) == false || uncheckedHosts.includes(newHosts[n]) == false) {\\n        uncheckedHosts.push(newHosts[n]);\\n      }\\n    }\\n  }\\n  return checkedHosts.sort();\\n}\\nexport function isHackable(ns, server) {\\n  if (ns.getServerNumPortsRequired(server) <= getNumHacks(ns) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel())\\n    return true;\\n  else\\n    return false;\\n}\\nexport function getNumHacks(ns) {\\n  let i = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    i++;\\n  return i;\\n}\\nexport function nukeAll(ns) {\\n  const hosts = serverScanner(ns);\\n  for (let i = 0; i < hosts.length; i++) {\\n    if (isHackable(ns, hosts[i]) || ns.getPurchasedServers().includes(hosts[i])) {\\n      openPorts(ns, hosts[i]);\\n      ns.nuke(hosts[i]);\\n      ns.scp(\\\"hack.js\\\", hosts[i]);\\n      ns.scp(\\\"grow.js\\\", hosts[i]);\\n      ns.scp(\\\"weaken.js\\\", hosts[i]);\\n    } else {\\n      continue;\\n    }\\n  }\\n}\\nexport function nukeServer(ns, server) {\\n  openPorts(ns, server);\\n  ns.nuke(server);\\n  ns.scp(\\\"hack.js\\\", server);\\n  ns.scp(\\\"grow.js\\\", server);\\n  ns.scp(\\\"weaken.js\\\", server);\\n}\\nexport function openPorts(ns, target) {\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    ns.brutessh(target);\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    ns.ftpcrack(target);\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    ns.httpworm(target);\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    ns.sqlinject(target);\\n}\\nexport function getTimeH(timestamp) {\\n  if (timestamp == void 0 || timestamp == null)\\n    timestamp = Date.now();\\n  const date = new Date(timestamp);\\n  date.setUTCHours(date.getUTCHours() + 1);\\n  const hours = date.getUTCHours().toString().padStart(2, \\\"0\\\");\\n  const minutes = date.getUTCMinutes().toString().padStart(2, \\\"0\\\");\\n  const seconds = date.getUTCSeconds().toString().padStart(2, \\\"0\\\");\\n  const milliseconds = date.getUTCMilliseconds().toString().padStart(3, \\\"0\\\");\\n  const formattedTime = `${hours}:${minutes}:${seconds}:${milliseconds}`;\\n  return formattedTime;\\n}\\nexport function getGrowThreads(ns, server) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(server);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = serverMaxMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier));\\n  return serverGrowThreads;\\n}\\nexport function getGrowThreadsThreshold(ns, server, threshold) {\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const minMoney = maxMoney * (1 - threshold);\\n  const moneyMultiplier = maxMoney / minMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier));\\n  return serverGrowThreads;\\n}\\nexport function getWeakenThreadsAfterHack(ns, numHackThreads) {\\n  const hackSecLvlIncrease = ns.hackAnalyzeSecurity(numHackThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreadsAfterGrow(ns, numGrowThreads) {\\n  const hackSecLvlIncrease = ns.growthAnalyzeSecurity(numGrowThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreads(ns, server) {\\n  const serverSecLvl = ns.getServerSecurityLevel(server);\\n  const serverWeakenThreads = Math.ceil((serverSecLvl - ns.getServerMinSecurityLevel(server)) / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getHackThreads(ns, server, moneyHackThreshold) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const lowerMoneyBound = serverMaxMoney * (1 - moneyHackThreshold);\\n  const hackAmount = serverMaxMoney - lowerMoneyBound;\\n  const serverHackThreads = Math.floor(ns.hackAnalyzeThreads(server, hackAmount));\\n  return serverHackThreads;\\n}\\nexport function getGrowThreadsFormulas(ns, server, hackThreshold) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = ns.getPlayer();\\n  if (serverObject.moneyMax == void 0)\\n    return 0;\\n  serverObject.moneyAvailable = serverObject.moneyMax * (1 - (hackThreshold + 0.01));\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  return ns.formulas.hacking.growThreads(serverObject, playerObject, serverObject.moneyMax);\\n}\\nexport function getHackThreadsFormulas(ns, server, hackThreshold) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = ns.getPlayer();\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  serverObject.moneyAvailable = serverObject.moneyMax;\\n  return Math.floor(hackThreshold / ns.formulas.hacking.hackPercent(serverObject, playerObject));\\n}\\nexport function writeToPort(ns, port, data) {\\n  const currentData = ns.peek(port);\\n  if (currentData == \\\"NULL PORT DATA\\\") {\\n    ns.writePort(port, data);\\n  } else {\\n    ns.writePort(port, data);\\n    ns.readPort(port);\\n  }\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const server = \\\"phantasy\\\";\\n  ns.print(getWeakenThreads(ns, server) + \\\" weakens needed\\\");\\n  ns.print(getGrowThreads(ns, server) + \\\" grows needed\\\");\\n  ns.print(getHackThreadsFormulas(ns, server, 0.9) + \\\" hacks needed\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcblxuZXhwb3J0IGVudW0gQ29sb3JzIHtcbiAgICBSRVNFVCA9IFwiXFx4MWJbMG1cIixcbiAgICBCTEFDSyA9IFwiXFx4MWJbMzBtXCIsXG4gICAgUkVEID0gXCJcXHgxYlszMW1cIixcbiAgICBHUkVFTiA9IFwiXFx4MWJbMzJtXCIsXG4gICAgWUVMTE9XID0gXCJcXHgxYlszM21cIixcbiAgICBCTFVFID0gXCJcXHgxYlszNG1cIixcbiAgICBNQUdFTlRBID0gXCJcXHgxYlszNW1cIixcbiAgICBDWUFOID0gXCJcXHgxYlszNm1cIixcbiAgICBXSElURSA9IFwiXFx4MWJbMzdtXCIsXG4gICAgRV9PUkFOR0UgPSBcIlxceDFiWzM4OzU7MTc4bVwiLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VydmVyU2Nhbm5lcihuczogTlMpIHtcbiAgICBjb25zdCB1bmNoZWNrZWRIb3N0cyA9IFtcImhvbWVcIl07XG4gICAgY29uc3QgY2hlY2tlZEhvc3RzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuY2hlY2tlZEhvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5ld0hvc3RzID0gbnMuc2Nhbih1bmNoZWNrZWRIb3N0c1tpXSk7XG4gICAgICAgIGNoZWNrZWRIb3N0cy5wdXNoKHVuY2hlY2tlZEhvc3RzW2ldKTtcblxuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IG5ld0hvc3RzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tlZEhvc3RzLmluY2x1ZGVzKG5ld0hvc3RzW25dKSA9PSBmYWxzZSB8fCB1bmNoZWNrZWRIb3N0cy5pbmNsdWRlcyhuZXdIb3N0c1tuXSkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB1bmNoZWNrZWRIb3N0cy5wdXNoKG5ld0hvc3RzW25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGVja2VkSG9zdHMuc29ydCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIYWNrYWJsZShuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XG4gICAgaWYgKFxuICAgICAgICBucy5nZXRTZXJ2ZXJOdW1Qb3J0c1JlcXVpcmVkKHNlcnZlcikgPD0gZ2V0TnVtSGFja3MobnMpICYmXG4gICAgICAgIG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcikgPD0gbnMuZ2V0SGFja2luZ0xldmVsKClcbiAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnVtSGFja3MobnM6IE5TKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiQnJ1dGVTU0guZXhlXCIpKSBpKys7XG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGVFBDcmFjay5leGVcIikpIGkrKztcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkhUVFBXb3JtLmV4ZVwiKSkgaSsrO1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiKSkgaSsrO1xuICAgIHJldHVybiBpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVrZUFsbChuczogTlMpIHtcbiAgICBjb25zdCBob3N0cyA9IHNlcnZlclNjYW5uZXIobnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGhvc3QgaXMgaGFja2FibGVcbiAgICAgICAgaWYgKGlzSGFja2FibGUobnMsIGhvc3RzW2ldKSB8fCBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuaW5jbHVkZXMoaG9zdHNbaV0pKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBnZXRQdXJjaGFzZWRTZXJ2ZXJzKCkgaXMgbm90IG5lZWRlZFxuICAgICAgICAgICAgb3BlblBvcnRzKG5zLCBob3N0c1tpXSk7XG4gICAgICAgICAgICBucy5udWtlKGhvc3RzW2ldKTtcblxuICAgICAgICAgICAgLy8gY29weSBhbGwgc2NyaXB0cyB0byB0aGUgc2VydmVyXG4gICAgICAgICAgICBucy5zY3AoXCJoYWNrLmpzXCIsIGhvc3RzW2ldKTtcbiAgICAgICAgICAgIG5zLnNjcChcImdyb3cuanNcIiwgaG9zdHNbaV0pO1xuICAgICAgICAgICAgbnMuc2NwKFwid2Vha2VuLmpzXCIsIGhvc3RzW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVrZVNlcnZlcihuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XG4gICAgb3BlblBvcnRzKG5zLCBzZXJ2ZXIpO1xuICAgIG5zLm51a2Uoc2VydmVyKTtcblxuICAgIG5zLnNjcChcImhhY2suanNcIiwgc2VydmVyKTtcbiAgICBucy5zY3AoXCJncm93LmpzXCIsIHNlcnZlcik7XG4gICAgbnMuc2NwKFwid2Vha2VuLmpzXCIsIHNlcnZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuUG9ydHMobnM6IE5TLCB0YXJnZXQ6IHN0cmluZykge1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiQnJ1dGVTU0guZXhlXCIpKSBucy5icnV0ZXNzaCh0YXJnZXQpO1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiRlRQQ3JhY2suZXhlXCIpKSBucy5mdHBjcmFjayh0YXJnZXQpO1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIpKSBucy5odHRwd29ybSh0YXJnZXQpO1xuICAgIGlmIChucy5maWxlRXhpc3RzKFwiU1FMSW5qZWN0LmV4ZVwiKSkgbnMuc3FsaW5qZWN0KHRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lSCh0aW1lc3RhbXA/OiBudW1iZXIpIHtcbiAgICBpZiAodGltZXN0YW1wID09IHVuZGVmaW5lZCB8fCB0aW1lc3RhbXAgPT0gbnVsbCkgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoZGF0ZS5nZXRVVENIb3VycygpICsgMSk7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgY29uc3QgbWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpO1xuICAgIGNvbnN0IHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbiAgICBjb25zdCBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMywgXCIwXCIpO1xuICAgIGNvbnN0IGZvcm1hdHRlZFRpbWUgPSBgJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN9OiR7bWlsbGlzZWNvbmRzfWA7XG4gICAgcmV0dXJuIGZvcm1hdHRlZFRpbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHcm93VGhyZWFkcyhuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2VydmVyTWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIpO1xuICAgIGNvbnN0IHNlcnZlckN1cnJlbnRNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHNlcnZlcik7XG4gICAgbGV0IG1vbmV5TXVsdGlwbGllciA9IHNlcnZlck1heE1vbmV5IC8gc2VydmVyQ3VycmVudE1vbmV5O1xuICAgIGlmIChpc05hTihtb25leU11bHRpcGxpZXIpIHx8IG1vbmV5TXVsdGlwbGllciA9PSBJbmZpbml0eSkgbW9uZXlNdWx0aXBsaWVyID0gc2VydmVyTWF4TW9uZXk7XG4gICAgY29uc3Qgc2VydmVyR3Jvd1RocmVhZHMgPSBNYXRoLmNlaWwobnMuZ3Jvd3RoQW5hbHl6ZShzZXJ2ZXIsIG1vbmV5TXVsdGlwbGllcikpO1xuXG4gICAgcmV0dXJuIHNlcnZlckdyb3dUaHJlYWRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jvd1RocmVhZHNUaHJlc2hvbGQobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgdGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XG4gICAgY29uc3QgbWluTW9uZXkgPSBtYXhNb25leSAqICgxIC0gdGhyZXNob2xkKTtcbiAgICBjb25zdCBtb25leU11bHRpcGxpZXIgPSBtYXhNb25leSAvIG1pbk1vbmV5O1xuICAgIGNvbnN0IHNlcnZlckdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUoc2VydmVyLCBtb25leU11bHRpcGxpZXIpKTtcblxuICAgIHJldHVybiBzZXJ2ZXJHcm93VGhyZWFkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2sobnM6IE5TLCBudW1IYWNrVGhyZWFkczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBoYWNrU2VjTHZsSW5jcmVhc2UgPSBucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KG51bUhhY2tUaHJlYWRzKTtcblxuICAgIGNvbnN0IHNlcnZlcldlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoaGFja1NlY0x2bEluY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XG5cbiAgICByZXR1cm4gc2VydmVyV2Vha2VuVGhyZWFkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnM6IE5TLCBudW1Hcm93VGhyZWFkczogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBoYWNrU2VjTHZsSW5jcmVhc2UgPSBucy5ncm93dGhBbmFseXplU2VjdXJpdHkobnVtR3Jvd1RocmVhZHMpO1xuXG4gICAgY29uc3Qgc2VydmVyV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChoYWNrU2VjTHZsSW5jcmVhc2UgLyBucy53ZWFrZW5BbmFseXplKDEpKTtcblxuICAgIHJldHVybiBzZXJ2ZXJXZWFrZW5UaHJlYWRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vha2VuVGhyZWFkcyhuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgc2VydmVyU2VjTHZsID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xuICAgIGNvbnN0IHNlcnZlcldlYWtlblRocmVhZHMgPSBNYXRoLmNlaWwoKHNlcnZlclNlY0x2bCAtIG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwoc2VydmVyKSkgLyBucy53ZWFrZW5BbmFseXplKDEpKTtcblxuICAgIHJldHVybiBzZXJ2ZXJXZWFrZW5UaHJlYWRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFja1RocmVhZHMobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgbW9uZXlIYWNrVGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XG4gICAgY29uc3QgbG93ZXJNb25leUJvdW5kID0gc2VydmVyTWF4TW9uZXkgKiAoMSAtIG1vbmV5SGFja1RocmVzaG9sZCk7XG4gICAgY29uc3QgaGFja0Ftb3VudCA9IHNlcnZlck1heE1vbmV5IC0gbG93ZXJNb25leUJvdW5kO1xuICAgIGNvbnN0IHNlcnZlckhhY2tUaHJlYWRzID0gTWF0aC5mbG9vcihucy5oYWNrQW5hbHl6ZVRocmVhZHMoc2VydmVyLCBoYWNrQW1vdW50KSk7XG5cbiAgICByZXR1cm4gc2VydmVySGFja1RocmVhZHM7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIEZvcm11bGFzQVBJIC0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyhuczogTlMsIHNlcnZlcjogc3RyaW5nLCBoYWNrVGhyZXNob2xkOiBudW1iZXIpIHtcbiAgICBjb25zdCBzZXJ2ZXJPYmplY3QgPSBucy5nZXRTZXJ2ZXIoc2VydmVyKTtcbiAgICBjb25zdCBwbGF5ZXJPYmplY3QgPSBucy5nZXRQbGF5ZXIoKTtcblxuICAgIGlmIChzZXJ2ZXJPYmplY3QubW9uZXlNYXggPT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcblxuICAgIHNlcnZlck9iamVjdC5tb25leUF2YWlsYWJsZSA9IHNlcnZlck9iamVjdC5tb25leU1heCAqICgxIC0gKGhhY2tUaHJlc2hvbGQgKyAwLjAxKSk7XG4gICAgc2VydmVyT2JqZWN0LmJhc2VEaWZmaWN1bHR5ID0gc2VydmVyT2JqZWN0Lm1pbkRpZmZpY3VsdHk7XG5cbiAgICByZXR1cm4gbnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXJPYmplY3QsIHBsYXllck9iamVjdCwgc2VydmVyT2JqZWN0Lm1vbmV5TWF4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhhY2tUaHJlYWRzRm9ybXVsYXMobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgaGFja1RocmVzaG9sZDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2VydmVyT2JqZWN0ID0gbnMuZ2V0U2VydmVyKHNlcnZlcik7XG4gICAgY29uc3QgcGxheWVyT2JqZWN0ID0gbnMuZ2V0UGxheWVyKCk7XG5cbiAgICBzZXJ2ZXJPYmplY3QuYmFzZURpZmZpY3VsdHkgPSBzZXJ2ZXJPYmplY3QubWluRGlmZmljdWx0eTtcbiAgICBzZXJ2ZXJPYmplY3QubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXJPYmplY3QubW9uZXlNYXg7XG5cbiAgICAvLyB0aHJlYWRzICogcGVyY2VudCA9PSBoYWNrVGhyZXNob2xkID0+IHRocmVhZHMgPT0gaGFja1RocmVzaG9sZCAvIHBlcmNlbnRcbiAgICByZXR1cm4gTWF0aC5mbG9vcihoYWNrVGhyZXNob2xkIC8gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChzZXJ2ZXJPYmplY3QsIHBsYXllck9iamVjdCkpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBQb3J0cyAtLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVG9Qb3J0KG5zOiBOUywgcG9ydDogbnVtYmVyLCBkYXRhOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjdXJyZW50RGF0YSA9IG5zLnBlZWsocG9ydCk7XG4gICAgaWYgKGN1cnJlbnREYXRhID09IFwiTlVMTCBQT1JUIERBVEFcIikge1xuICAgICAgICBucy53cml0ZVBvcnQocG9ydCwgZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnMud3JpdGVQb3J0KHBvcnQsIGRhdGEpO1xuICAgICAgICBucy5yZWFkUG9ydChwb3J0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIG5zLnRhaWwoKTtcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xuXG4gICAgY29uc3Qgc2VydmVyID0gXCJwaGFudGFzeVwiO1xuICAgIG5zLnByaW50KGdldFdlYWtlblRocmVhZHMobnMsIHNlcnZlcikgKyBcIiB3ZWFrZW5zIG5lZWRlZFwiKTtcbiAgICBucy5wcmludChnZXRHcm93VGhyZWFkcyhucywgc2VydmVyKSArIFwiIGdyb3dzIG5lZWRlZFwiKTtcbiAgICBucy5wcmludChnZXRIYWNrVGhyZWFkc0Zvcm11bGFzKG5zLCBzZXJ2ZXIsIDAuOSkgKyBcIiBoYWNrcyBuZWVkZWRcIik7XG59XG4iXSwibWFwcGluZ3MiOiJBQUVPLFdBQUssU0FBTCxrQkFBS0EsWUFBTDtBQUNILEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsU0FBTTtBQUNOLEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsWUFBUztBQUNULEVBQUFBLFFBQUEsVUFBTztBQUNQ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\",\"filename\":\"lib.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"hackingDeamon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { Time } from \\\"/Time.js\\\";\\nimport { getBestHostByRamOptimized, getBestServerList } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreadsFormulas,\\n  getGrowThreadsThreshold,\\n  getHackThreadsFormulas,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack,\\n  writeToPort\\n} from \\\"/lib.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nimport { parallelCycle } from \\\"/parallel/manager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  let hackThreshold = 0.5;\\n  let lastTarget = \\\"\\\";\\n  const time = Time.getInstance();\\n  while (true) {\\n    time.startTime();\\n    let target = getBestServerList(ns, false)[0].name;\\n    writeToPort(ns, 1, target);\\n    ns.print(\\\"lastTarget: \\\" + lastTarget + \\\" target: \\\" + target);\\n    if (ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      if (lastTarget !== target) {\\n        if (ns.getServerMaxMoney(target) != parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) != ns.getServerMinSecurityLevel(target)) {\\n          await prepareServer(ns, target);\\n        }\\n        hackThreshold = getHackThresholdBatch(ns, target);\\n        ns.print(\\\"hackThreshold: \\\" + hackThreshold);\\n        if (ns.getServerMaxMoney(target) == parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) == ns.getServerMinSecurityLevel(target)) {\\n          ns.print(Colors.GREEN + \\\"Preparation finished, starting parallel mode\\\");\\n        } else {\\n          ns.tprint(Colors.RED + \\\"Preparation failed\\\");\\n          throw new Error(\\\"Preparation failed\\\");\\n        }\\n        lastTarget = target;\\n      }\\n      await parallelCycle(ns, target, hackThreshold, Config.LOOP_BATCH_COUNT);\\n    } else {\\n      if (lastTarget !== target) {\\n        if (ns.getServerMaxMoney(target) != ns.getServerMoneyAvailable(target) || ns.getServerSecurityLevel(target) != ns.getServerMinSecurityLevel(target)) {\\n          await prepareServer(ns, target);\\n        }\\n        hackThreshold = getHackThreshold(ns, target);\\n        ns.print(\\\"hackThreshold: \\\" + hackThreshold);\\n        if (ns.getServerMaxMoney(target) == ns.getServerMoneyAvailable(target) && ns.getServerSecurityLevel(target) == ns.getServerMinSecurityLevel(target)) {\\n          ns.print(Colors.GREEN + \\\"Preparation finished, starting parallel mode\\\");\\n        } else {\\n          ns.tprint(Colors.RED + \\\"Preparation failed, starting loop mode\\\");\\n          throw new Error(\\\"Preparation failed, starting loop mode\\\");\\n        }\\n        lastTarget = target;\\n      }\\n      await parallelCycle(ns, target, hackThreshold);\\n    }\\n    time.endTime();\\n    ns.print(\\\"Cycle took: \\\" + time.getTime(ns));\\n  }\\n}\\nfunction getHackThreshold(ns, target) {\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const totalMaxRam = allHosts.reduce((acc, server) => {\\n    return acc + server.maxRam;\\n  }, 0);\\n  let hackThreshold = 0.9;\\n  const THRESHOLD_STEP = Config.THRESHOLD_STEP;\\n  const MIN_HACK_THRESHOLD = Config.MIN_HACK_THRESHOLD;\\n  const RAM_WEAKEN = Config.WEAKEN_SCRIPT_RAM;\\n  const RAM_GROW = Config.GROW_SCRIPT_RAM;\\n  const RAM_HACK = Config.HACK_SCRIPT_RAM;\\n  while (true) {\\n    const serverGrowThreads = getGrowThreadsThreshold(ns, target, hackThreshold + THRESHOLD_STEP);\\n    const secIncrease = ns.growthAnalyzeSecurity(serverGrowThreads);\\n    const secondWeakenThreads = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    const hackAmount = ns.getServerMaxMoney(target) * hackThreshold;\\n    const serverHackThreads = Math.ceil(ns.hackAnalyzeThreads(target, hackAmount));\\n    const firstWeakenThreads = getWeakenThreadsAfterHack(ns, serverHackThreads);\\n    const totalRamNeeded = firstWeakenThreads * RAM_WEAKEN + serverGrowThreads * RAM_GROW + secondWeakenThreads * RAM_WEAKEN + serverHackThreads * RAM_HACK;\\n    ns.print(\\\"predicted threads needed:\\\");\\n    ns.print(\\\"firstWeakenThreads: \\\" + firstWeakenThreads);\\n    ns.print(\\\"serverGrowThreads: \\\" + serverGrowThreads);\\n    ns.print(\\\"secondWeakenThreads: \\\" + secondWeakenThreads);\\n    ns.print(\\\"serverHackThreads: \\\" + serverHackThreads);\\n    if (totalRamNeeded < totalMaxRam) {\\n      ns.print(\\n        \\\"needs \\\" + totalRamNeeded + \\\"GB of RAM and got \\\" + totalMaxRam + \\\". Running parallel mode on \\\" + target\\n      );\\n      break;\\n    }\\n    if (hackThreshold < MIN_HACK_THRESHOLD) {\\n      ns.tprint(\\\"Error! Not enough RAM to run parallel mode on \\\" + target);\\n      throw new Error(\\\"Error! Not enough RAM to run parallel mode on \\\" + target);\\n    }\\n    hackThreshold = Math.round((hackThreshold - THRESHOLD_STEP) * 100) / 100;\\n    ns.print(\\\"Threshold is too high, trying with: \\\" + hackThreshold);\\n  }\\n  return hackThreshold;\\n}\\nfunction getHackThresholdBatch(ns, target) {\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const totalMaxRam = allHosts.reduce((acc, server) => {\\n    return acc + server.maxRam;\\n  }, 0);\\n  let hackThreshold = 0.9;\\n  const THRESHOLD_STEP = Config.THRESHOLD_STEP;\\n  while (true) {\\n    const serverGrowThreads = getGrowThreadsFormulas(ns, target, hackThreshold);\\n    const secondWeakenThreads = getWeakenThreadsAfterGrow(ns, serverGrowThreads);\\n    const serverHackThreads = getHackThreadsFormulas(ns, target, hackThreshold);\\n    const firstWeakenThreads = getWeakenThreadsAfterHack(ns, serverHackThreads);\\n    const weaken1RamNeeded = Config.WEAKEN_SCRIPT_RAM * firstWeakenThreads;\\n    const weaken2RamNeeded = Config.WEAKEN_SCRIPT_RAM * secondWeakenThreads;\\n    const growRamNeeded = Config.GROW_SCRIPT_RAM * serverGrowThreads;\\n    const hackRamNeeded = Config.HACK_SCRIPT_RAM * serverHackThreads;\\n    const totalRamNeeded = weaken1RamNeeded + weaken2RamNeeded + growRamNeeded + hackRamNeeded;\\n    ns.print(\\\"predicted threads needed:\\\");\\n    ns.print(\\\"firstWeakenThreads: \\\" + firstWeakenThreads + \\\" with \\\" + weaken1RamNeeded + \\\"GB of RAM\\\");\\n    ns.print(\\\"serverGrowThreads: \\\" + serverGrowThreads + \\\" with \\\" + growRamNeeded + \\\"GB of RAM\\\");\\n    ns.print(\\\"secondWeakenThreads: \\\" + secondWeakenThreads + \\\" with \\\" + weaken2RamNeeded + \\\"GB of RAM\\\");\\n    ns.print(\\\"serverHackThreads: \\\" + serverHackThreads + \\\" with \\\" + hackRamNeeded + \\\"GB of RAM\\\");\\n    ns.print(\\n      \\\"totalThreads: \\\" + (firstWeakenThreads + serverGrowThreads + secondWeakenThreads + serverHackThreads) + \\\" with \\\" + totalRamNeeded + \\\"GB of RAM\\\"\\n    );\\n    if (totalRamNeeded < totalMaxRam) {\\n      ns.print(\\n        \\\"needs \\\" + totalRamNeeded + \\\"GB of RAM and got \\\" + totalMaxRam + \\\". Running parallel mode on \\\" + target\\n      );\\n      return hackThreshold;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"Not enough RAM to run parallel mode on \\\" + target + \\\". Attempting to upgrade/buy server...\\\"\\n    );\\n    const hackServer = ServerManager.buyOrUpgradeServer(ns, hackRamNeeded, Config.HACK_SERVER_NAME);\\n    const Server = ServerManager.buyOrUpgradeServer(ns, growRamNeeded, Config.GROW_SERVER_NAME);\\n    const weaken1Server = ServerManager.buyOrUpgradeServer(ns, weaken1RamNeeded, Config.WEAK_SERVER_NAME);\\n    const weaken2Server = ServerManager.buyOrUpgradeServer(ns, weaken2RamNeeded, Config.WEAK_SERVER_NAME);\\n    if (hackServer !== \\\"\\\" && Server !== \\\"\\\" && weaken1Server !== \\\"\\\" && weaken2Server !== \\\"\\\") {\\n      ns.print(Colors.GREEN + \\\"Servers bought, running parallel mode on \\\" + target);\\n      return hackThreshold;\\n    }\\n    hackThreshold = Math.round((hackThreshold - THRESHOLD_STEP) * 100) / 100;\\n    ns.print(\\\"Threshold is too high, trying with: \\\" + hackThreshold);\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdEZWFtb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi9UaW1lXCI7XHJcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQsIGdldEJlc3RTZXJ2ZXJMaXN0IH0gZnJvbSBcIi4vYmVzdFNlcnZlclwiO1xyXG5pbXBvcnQge1xyXG4gICAgQ29sb3JzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyxcclxuICAgIGdldEdyb3dUaHJlYWRzVGhyZXNob2xkLFxyXG4gICAgZ2V0SGFja1RocmVhZHNGb3JtdWxhcyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckdyb3csXHJcbiAgICBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJIYWNrLFxyXG4gICAgd3JpdGVUb1BvcnQsXHJcbn0gZnJvbSBcIi4vbGliXCI7XHJcbmltcG9ydCB7IHByZXBhcmVTZXJ2ZXIgfSBmcm9tIFwiLi9sb29wL3ByZXBhcmVTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgU2VydmVyTWFuYWdlciB9IGZyb20gXCIuL3BhcmFsbGVsL1NlcnZlck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgcGFyYWxsZWxDeWNsZSB9IGZyb20gXCIuL3BhcmFsbGVsL21hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIC8vIGVpdGhlciBzdGFydCBsb29wIG9yIHBhcmFsbGVsaXplLCBkZXBlbmRpbmcgb24gdGhlIG51bWJlciBvZiBzZXJ2ZXJzIGFuZCBtb25leSB0aGUgcGxheWVyIGhhc1xyXG5cclxuICAgIGxldCBoYWNrVGhyZXNob2xkID0gMC41O1xyXG4gICAgbGV0IGxhc3RUYXJnZXQgPSBcIlwiO1xyXG5cclxuICAgIGNvbnN0IHRpbWUgPSBUaW1lLmdldEluc3RhbmNlKCk7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHRpbWUuc3RhcnRUaW1lKCk7XHJcblxyXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci1jb25zdCAqL1xyXG4gICAgICAgIGxldCB0YXJnZXQgPSBnZXRCZXN0U2VydmVyTGlzdChucywgZmFsc2UpWzBdLm5hbWU7XHJcbiAgICAgICAgLy8gdGFyZ2V0ID0gXCJwaGFudGFzeVwiO1xyXG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLWNvbnN0ICovXHJcblxyXG4gICAgICAgIHdyaXRlVG9Qb3J0KG5zLCAxLCB0YXJnZXQpO1xyXG4gICAgICAgIG5zLnByaW50KFwibGFzdFRhcmdldDogXCIgKyBsYXN0VGFyZ2V0ICsgXCIgdGFyZ2V0OiBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGb3JtdWxhcy5leGVcIiwgXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFBSRVBBUkUgU0VSVkVSIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSAhPSBwYXJzZUZsb2F0KG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkudG9GaXhlZCg1KSkgfHxcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KS50b0ZpeGVkKDUpKSAhPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByZXBhcmVTZXJ2ZXIobnMsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoYWNrVGhyZXNob2xkID0gZ2V0SGFja1RocmVzaG9sZEJhdGNoKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJoYWNrVGhyZXNob2xkOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpID09IHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUodGFyZ2V0KS50b0ZpeGVkKDUpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQobnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpLnRvRml4ZWQoNSkpID09IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJQcmVwYXJhdGlvbiBmaW5pc2hlZCwgc3RhcnRpbmcgcGFyYWxsZWwgbW9kZVwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMudHByaW50KENvbG9ycy5SRUQgKyBcIlByZXBhcmF0aW9uIGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcmVwYXJhdGlvbiBmYWlsZWRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gQ0hFQ0sgV0hJQ0ggTU9ERSBUTyBVU0UgLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHBhcmFsbGVsQ3ljbGUobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCwgQ29uZmlnLkxPT1BfQkFUQ0hfQ09VTlQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFBSRVBBUkUgU0VSVkVSIC0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcHJlcGFyZSB3aGVuIG1vbmV5IGlzIG5vdCBhdCBtYXggb3Igc2VjIGx2bCBpcyBub3QgYXQgbWluXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSAhPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbCh0YXJnZXQpICE9IG5zLmdldFNlcnZlck1pblNlY3VyaXR5TGV2ZWwodGFyZ2V0KVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcHJlcGFyZVNlcnZlcihucywgdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgPSBnZXRIYWNrVGhyZXNob2xkKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJoYWNrVGhyZXNob2xkOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpID09IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkgJiZcclxuICAgICAgICAgICAgICAgICAgICBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkgPT0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIlByZXBhcmF0aW9uIGZpbmlzaGVkLCBzdGFydGluZyBwYXJhbGxlbCBtb2RlXCIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiUHJlcGFyYXRpb24gZmFpbGVkLCBzdGFydGluZyBsb29wIG1vZGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJlcGFyYXRpb24gZmFpbGVkLCBzdGFydGluZyBsb29wIG1vZGVcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGFzdFRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBDSEVDSyBXSElDSCBNT0RFIFRPIFVTRSAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgcGFyYWxsZWxDeWNsZShucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGltZS5lbmRUaW1lKCk7XHJcbiAgICAgICAgbnMucHJpbnQoXCJDeWNsZSB0b29rOiBcIiArIHRpbWUuZ2V0VGltZShucykpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogTmVlZHMgdXBkYXRlOiBoYWNrIGFzIG11Y2ggYXMgcG9zc2libGUsIHdpdGhvdXQgaGF2aW5nIHRvIGJ1eSBhIGV4dHJhIHNlcnZlclxyXG4gKlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGFja1RocmVzaG9sZChuczogTlMsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICBjb25zdCB0b3RhbE1heFJhbSA9IGFsbEhvc3RzLnJlZHVjZSgoYWNjLCBzZXJ2ZXIpID0+IHtcclxuICAgICAgICByZXR1cm4gYWNjICsgc2VydmVyLm1heFJhbTtcclxuICAgIH0sIDApO1xyXG5cclxuICAgIGxldCBoYWNrVGhyZXNob2xkID0gMC45O1xyXG4gICAgY29uc3QgVEhSRVNIT0xEX1NURVAgPSBDb25maWcuVEhSRVNIT0xEX1NURVA7XHJcbiAgICBjb25zdCBNSU5fSEFDS19USFJFU0hPTEQgPSBDb25maWcuTUlOX0hBQ0tfVEhSRVNIT0xEO1xyXG5cclxuICAgIGNvbnN0IFJBTV9XRUFLRU4gPSBDb25maWcuV0VBS0VOX1NDUklQVF9SQU07XHJcbiAgICBjb25zdCBSQU1fR1JPVyA9IENvbmZpZy5HUk9XX1NDUklQVF9SQU07XHJcbiAgICBjb25zdCBSQU1fSEFDSyA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIGhvdyBtYW55IHRocmVhZHMgaSBuZWVkIHRvIGdyb3cgdGhlIHNlcnZlciBmcm9tICgxIC0gVGhyZXNob2xkKSB0byAxXHJcbiAgICAgICAgLy8gbmVlZHMgdGhyZXNob2xkIGdyb3cgY2FsY3VsYXRpb24sIGNhdXNlIHdoZW4gdGhlIHNlcnZlciBpcyBhdCBtYXggbW9uZXksIGl0IHdvdWxkIHJldHVybiAwIG90aGVyd2lzZVxyXG4gICAgICAgIGNvbnN0IHNlcnZlckdyb3dUaHJlYWRzID0gZ2V0R3Jvd1RocmVhZHNUaHJlc2hvbGQobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCArIFRIUkVTSE9MRF9TVEVQKTtcclxuXHJcbiAgICAgICAgLy8gaG93IG1hbnkgdGhyZWFkcyBpIG5lZWQgdG8gd2Vha2VuIHNlY3VyaXR5IHRvIDAgYWZ0ZXIgZ3Jvd2luZ3NcclxuICAgICAgICBjb25zdCBzZWNJbmNyZWFzZSA9IG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eShzZXJ2ZXJHcm93VGhyZWFkcyk7XHJcbiAgICAgICAgY29uc3Qgc2Vjb25kV2Vha2VuVGhyZWFkcyA9IE1hdGguY2VpbChzZWNJbmNyZWFzZSAvIG5zLndlYWtlbkFuYWx5emUoMSkpO1xyXG5cclxuICAgICAgICAvLyBob3cgbWFueSB0aHJlYWRzIGkgbmVlZCB0byBoYWNrIHRoZSBzZXJ2ZXJcclxuICAgICAgICBjb25zdCBoYWNrQW1vdW50ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSAqIGhhY2tUaHJlc2hvbGQ7XHJcbiAgICAgICAgY29uc3Qgc2VydmVySGFja1RocmVhZHMgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVUaHJlYWRzKHRhcmdldCwgaGFja0Ftb3VudCkpO1xyXG5cclxuICAgICAgICAvLyBob3cgbWFueSB0byB3ZWFrIHRvIG1pbiBzZWMgbHZsIGFmdGVyIFt0aHJlc2hvbGRdLWhhY2tcclxuICAgICAgICBjb25zdCBmaXJzdFdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJIYWNrKG5zLCBzZXJ2ZXJIYWNrVGhyZWFkcyk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgdmFyIGRlc2NyaWJlcyB0aGUgdG90YWwgYW1vdW50IG9mIHRocmVhZHMgaSBuZWVkIHRvIHJ1biBwYXJhbGxlbCBtb2RlXHJcbiAgICAgICAgY29uc3QgdG90YWxSYW1OZWVkZWQgPVxyXG4gICAgICAgICAgICBmaXJzdFdlYWtlblRocmVhZHMgKiBSQU1fV0VBS0VOICtcclxuICAgICAgICAgICAgc2VydmVyR3Jvd1RocmVhZHMgKiBSQU1fR1JPVyArXHJcbiAgICAgICAgICAgIHNlY29uZFdlYWtlblRocmVhZHMgKiBSQU1fV0VBS0VOICtcclxuICAgICAgICAgICAgc2VydmVySGFja1RocmVhZHMgKiBSQU1fSEFDSztcclxuXHJcbiAgICAgICAgLy8gbG9nIGFsbFxyXG4gICAgICAgIG5zLnByaW50KFwicHJlZGljdGVkIHRocmVhZHMgbmVlZGVkOlwiKTtcclxuICAgICAgICBucy5wcmludChcImZpcnN0V2Vha2VuVGhyZWFkczogXCIgKyBmaXJzdFdlYWtlblRocmVhZHMpO1xyXG4gICAgICAgIG5zLnByaW50KFwic2VydmVyR3Jvd1RocmVhZHM6IFwiICsgc2VydmVyR3Jvd1RocmVhZHMpO1xyXG4gICAgICAgIG5zLnByaW50KFwic2Vjb25kV2Vha2VuVGhyZWFkczogXCIgKyBzZWNvbmRXZWFrZW5UaHJlYWRzKTtcclxuICAgICAgICBucy5wcmludChcInNlcnZlckhhY2tUaHJlYWRzOiBcIiArIHNlcnZlckhhY2tUaHJlYWRzKTtcclxuXHJcbiAgICAgICAgaWYgKHRvdGFsUmFtTmVlZGVkIDwgdG90YWxNYXhSYW0pIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBcIm5lZWRzIFwiICsgdG90YWxSYW1OZWVkZWQgKyBcIkdCIG9mIFJBTSBhbmQgZ290IFwiICsgdG90YWxNYXhSYW0gKyBcIi4gUnVubmluZyBwYXJhbGxlbCBtb2RlIG9uIFwiICsgdGFyZ2V0LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhhY2tUaHJlc2hvbGQgPCBNSU5fSEFDS19USFJFU0hPTEQpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFwiRXJyb3IhIE5vdCBlbm91Z2ggUkFNIHRvIHJ1biBwYXJhbGxlbCBtb2RlIG9uIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIE5vdCBlbm91Z2ggUkFNIHRvIHJ1biBwYXJhbGxlbCBtb2RlIG9uIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHJ1biBsb29wIG1vcmUgaW5zdGVhZFxyXG4gICAgICAgIH1cclxuICAgICAgICBoYWNrVGhyZXNob2xkID0gTWF0aC5yb3VuZCgoaGFja1RocmVzaG9sZCAtIFRIUkVTSE9MRF9TVEVQKSAqIDEwMCkgLyAxMDA7XHJcbiAgICAgICAgbnMucHJpbnQoXCJUaHJlc2hvbGQgaXMgdG9vIGhpZ2gsIHRyeWluZyB3aXRoOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhY2tUaHJlc2hvbGQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEhhY2tUaHJlc2hvbGRCYXRjaChuczogTlMsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICBjb25zdCB0b3RhbE1heFJhbSA9IGFsbEhvc3RzLnJlZHVjZSgoYWNjLCBzZXJ2ZXIpID0+IHtcclxuICAgICAgICByZXR1cm4gYWNjICsgc2VydmVyLm1heFJhbTtcclxuICAgIH0sIDApO1xyXG5cclxuICAgIGxldCBoYWNrVGhyZXNob2xkID0gMC45O1xyXG4gICAgY29uc3QgVEhSRVNIT0xEX1NURVAgPSBDb25maWcuVEhSRVNIT0xEX1NURVA7XHJcblxyXG4gICAgLy8gY29uc3QgTUlOX0hBQ0tfVEhSRVNIT0xEID0gQ29uZmlnLk1JTl9IQUNLX1RIUkVTSE9MRDtcclxuICAgIC8vIGNvbnN0IG1vbmV5QWxsb3dlZFRvVXNlID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpICogKDIgLyAzKTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIGhvdyBtYW55IHRocmVhZHMgaSBuZWVkIHRvIGdyb3cgdGhlIHNlcnZlciBmcm9tICgxIC0gVGhyZXNob2xkKSB0byAxXHJcbiAgICAgICAgLy8gbmVlZHMgdGhyZXNob2xkIGdyb3cgY2FsY3VsYXRpb24sIGNhdXNlIHdoZW4gdGhlIHNlcnZlciBpcyBhdCBtYXggbW9uZXksIGl0IHdvdWxkIHJldHVybiAwIG90aGVyd2lzZVxyXG4gICAgICAgIGNvbnN0IHNlcnZlckdyb3dUaHJlYWRzID0gZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyhucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuXHJcbiAgICAgICAgLy8gaG93IG1hbnkgdGhyZWFkcyBpIG5lZWQgdG8gd2Vha2VuIHNlY3VyaXR5IHRvIDAgYWZ0ZXIgZ3Jvd2luZ3NcclxuICAgICAgICBjb25zdCBzZWNvbmRXZWFrZW5UaHJlYWRzID0gZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3Jvdyhucywgc2VydmVyR3Jvd1RocmVhZHMpO1xyXG5cclxuICAgICAgICAvLyBob3cgbWFueSB0aHJlYWRzIGkgbmVlZCB0byBoYWNrIHRoZSBzZXJ2ZXJcclxuICAgICAgICBjb25zdCBzZXJ2ZXJIYWNrVGhyZWFkcyA9IGdldEhhY2tUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCk7XHJcblxyXG4gICAgICAgIC8vIGhvdyBtYW55IHRvIHdlYWsgdG8gbWluIHNlYyBsdmwgYWZ0ZXIgW3RocmVzaG9sZF0taGFja1xyXG4gICAgICAgIGNvbnN0IGZpcnN0V2Vha2VuVGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHNBZnRlckhhY2sobnMsIHNlcnZlckhhY2tUaHJlYWRzKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcyB2YXIgZGVzY3JpYmVzIHRoZSB0b3RhbCBhbW91bnQgb2YgdGhyZWFkcyBpIG5lZWQgdG8gcnVuIHBhcmFsbGVsIG1vZGVcclxuICAgICAgICBjb25zdCB3ZWFrZW4xUmFtTmVlZGVkID0gQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNICogZmlyc3RXZWFrZW5UaHJlYWRzO1xyXG4gICAgICAgIGNvbnN0IHdlYWtlbjJSYW1OZWVkZWQgPSBDb25maWcuV0VBS0VOX1NDUklQVF9SQU0gKiBzZWNvbmRXZWFrZW5UaHJlYWRzO1xyXG4gICAgICAgIGNvbnN0IGdyb3dSYW1OZWVkZWQgPSBDb25maWcuR1JPV19TQ1JJUFRfUkFNICogc2VydmVyR3Jvd1RocmVhZHM7XHJcbiAgICAgICAgY29uc3QgaGFja1JhbU5lZWRlZCA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU0gKiBzZXJ2ZXJIYWNrVGhyZWFkcztcclxuXHJcbiAgICAgICAgY29uc3QgdG90YWxSYW1OZWVkZWQgPSB3ZWFrZW4xUmFtTmVlZGVkICsgd2Vha2VuMlJhbU5lZWRlZCArIGdyb3dSYW1OZWVkZWQgKyBoYWNrUmFtTmVlZGVkO1xyXG5cclxuICAgICAgICAvLyBsb2cgYWxsXHJcbiAgICAgICAgbnMucHJpbnQoXCJwcmVkaWN0ZWQgdGhyZWFkcyBuZWVkZWQ6XCIpO1xyXG4gICAgICAgIG5zLnByaW50KFwiZmlyc3RXZWFrZW5UaHJlYWRzOiBcIiArIGZpcnN0V2Vha2VuVGhyZWFkcyArIFwiIHdpdGggXCIgKyB3ZWFrZW4xUmFtTmVlZGVkICsgXCJHQiBvZiBSQU1cIik7XHJcbiAgICAgICAgbnMucHJpbnQoXCJzZXJ2ZXJHcm93VGhyZWFkczogXCIgKyBzZXJ2ZXJHcm93VGhyZWFkcyArIFwiIHdpdGggXCIgKyBncm93UmFtTmVlZGVkICsgXCJHQiBvZiBSQU1cIik7XHJcbiAgICAgICAgbnMucHJpbnQoXCJzZWNvbmRXZWFrZW5UaHJlYWRzOiBcIiArIHNlY29uZFdlYWtlblRocmVhZHMgKyBcIiB3aXRoIFwiICsgd2Vha2VuMlJhbU5lZWRlZCArIFwiR0Igb2YgUkFNXCIpO1xyXG4gICAgICAgIG5zLnByaW50KFwic2VydmVySGFja1RocmVhZHM6IFwiICsgc2VydmVySGFja1RocmVhZHMgKyBcIiB3aXRoIFwiICsgaGFja1JhbU5lZWRlZCArIFwiR0Igb2YgUkFNXCIpO1xyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBcInRvdGFsVGhyZWFkczogXCIgK1xyXG4gICAgICAgICAgICAgICAgKGZpcnN0V2Vha2VuVGhyZWFkcyArIHNlcnZlckdyb3dUaHJlYWRzICsgc2Vjb25kV2Vha2VuVGhyZWFkcyArIHNlcnZlckhhY2tUaHJlYWRzKSArXHJcbiAgICAgICAgICAgICAgICBcIiB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIHRvdGFsUmFtTmVlZGVkICtcclxuICAgICAgICAgICAgICAgIFwiR0Igb2YgUkFNXCIsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKHRvdGFsUmFtTmVlZGVkIDwgdG90YWxNYXhSYW0pIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBcIm5lZWRzIFwiICsgdG90YWxSYW1OZWVkZWQgKyBcIkdCIG9mIFJBTSBhbmQgZ290IFwiICsgdG90YWxNYXhSYW0gKyBcIi4gUnVubmluZyBwYXJhbGxlbCBtb2RlIG9uIFwiICsgdGFyZ2V0LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gaGFja1RocmVzaG9sZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICAgICAgXCJOb3QgZW5vdWdoIFJBTSB0byBydW4gcGFyYWxsZWwgbW9kZSBvbiBcIiArXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgK1xyXG4gICAgICAgICAgICAgICAgXCIuIEF0dGVtcHRpbmcgdG8gdXBncmFkZS9idXkgc2VydmVyLi4uXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBpIG5lZWQgc29tZSBzb3J0IG9mIGxvZ2ljLCB0byBmaW5kXHJcbiAgICAgICAgY29uc3QgaGFja1NlcnZlciA9IFNlcnZlck1hbmFnZXIuYnV5T3JVcGdyYWRlU2VydmVyKG5zLCBoYWNrUmFtTmVlZGVkLCBDb25maWcuSEFDS19TRVJWRVJfTkFNRSk7XHJcbiAgICAgICAgY29uc3QgU2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIGdyb3dSYW1OZWVkZWQsIENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKTtcclxuICAgICAgICBjb25zdCB3ZWFrZW4xU2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIHdlYWtlbjFSYW1OZWVkZWQsIENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKTtcclxuICAgICAgICBjb25zdCB3ZWFrZW4yU2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIHdlYWtlbjJSYW1OZWVkZWQsIENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICAgICAgaWYgKGhhY2tTZXJ2ZXIgIT09IFwiXCIgJiYgU2VydmVyICE9PSBcIlwiICYmIHdlYWtlbjFTZXJ2ZXIgIT09IFwiXCIgJiYgd2Vha2VuMlNlcnZlciAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIlNlcnZlcnMgYm91Z2h0LCBydW5uaW5nIHBhcmFsbGVsIG1vZGUgb24gXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gaGFja1RocmVzaG9sZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhhY2tUaHJlc2hvbGQgPSBNYXRoLnJvdW5kKChoYWNrVGhyZXNob2xkIC0gVEhSRVNIT0xEX1NURVApICogMTAwKSAvIDEwMDtcclxuICAgICAgICBucy5wcmludChcIlRocmVzaG9sZCBpcyB0b28gaGlnaCwgdHJ5aW5nIHdpdGg6IFwiICsgaGFja1RocmVzaG9sZCk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxZQUFZO0FBQ3JCLFNBQVMsMkJBQTJCLHlCQUF5QjtBQUM3RDtBQUFBLEVBQ0k7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNHO0FBQ1AsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFFOUIsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUdu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\",\"filename\":\"hackingDeamon.js\",\"server\":\"home\"}}],[\"loop/prepareServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads, getWeakenThreadsAfterGrow } from \\\"/lib.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await prepareServer(ns, \\\"foodnstuff\\\");\\n}\\nexport async function prepareServer(ns, target, threshold = 0.8) {\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const sumAvailableRam = allHosts.reduce((acc, server) => {\\n    return acc + server.availableRam;\\n  }, 0);\\n  const weakenThreads = getWeakenThreads(ns, target);\\n  const growThreads = getGrowThreads(ns, target);\\n  const weakenAfterGrowThreads = getWeakenThreadsAfterGrow(ns, growThreads);\\n  const totalRamNeeded = weakenThreads * Config.WEAKEN_SCRIPT_RAM + growThreads * Config.GROW_SCRIPT_RAM + weakenAfterGrowThreads * Config.WEAKEN_SCRIPT_RAM;\\n  ns.print(\\n    \\\"needs \\\" + totalRamNeeded + \\\"GB of RAM and got \\\" + sumAvailableRam + \\\" to running parallel mode on \\\" + target\\n  );\\n  if (totalRamNeeded < sumAvailableRam) {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in parallel mode\\\");\\n    const weakTime = ns.getWeakenTime(target);\\n    const growTime = ns.getGrowTime(target);\\n    WGHAlgorithms.weakenServer(ns, target, 1, false, 0, false);\\n    const growDelay = weakTime - growTime + Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.growServer(ns, target, 0, false, growDelay, false);\\n    const weak2delay = 2 * Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.weakenServer(ns, target, 2, false, weak2delay, false);\\n    await ns.sleep(weakTime + 4 * Config.DELAY_MARGIN_MS);\\n  } else {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in loop mode\\\");\\n    const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n    while (true) {\\n      const totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n      ns.print(Colors.CYAN + \\\"------------ WEAKENING ------------\\\");\\n      ns.print(\\\"total weaken threads needed: \\\" + totalWeakenThreadsNeeded);\\n      let threadsDispatched = 0;\\n      let threadsRemaining = totalWeakenThreadsNeeded;\\n      while (threadsDispatched < totalWeakenThreadsNeeded) {\\n        const weakenTime = ns.getWeakenTime(target);\\n        for (let i = 0; i < allHosts.length; i++) {\\n          if (threadsDispatched >= totalWeakenThreadsNeeded)\\n            break;\\n          const host = allHosts[i];\\n          const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n          if (freeRam < Config.WEAKEN_SCRIPT_RAM)\\n            continue;\\n          const numThreadsOnHost = Math.floor(freeRam / Config.WEAKEN_SCRIPT_RAM);\\n          const threadsToDispatch = Math.min(threadsRemaining, numThreadsOnHost);\\n          ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, 0);\\n          threadsRemaining -= threadsToDispatch;\\n          threadsDispatched += threadsToDispatch;\\n        }\\n        ns.print(\\\"dispatched \\\" + threadsDispatched + \\\" weaken threads\\\");\\n        await ns.sleep(weakenTime + safetyMarginMs + 1e3);\\n        ns.print(\\\"done with \\\" + threadsDispatched + \\\"/\\\" + totalWeakenThreadsNeeded + \\\" weakens\\\");\\n      }\\n      printServerStats(ns, target, threshold);\\n      ns.print(Colors.CYAN + \\\"------------- GROWING -------------\\\");\\n      const totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n      if (totalGrowThreadsNeeded === 0) {\\n        ns.print(\\\"No growth needed\\\");\\n        break;\\n      }\\n      ns.print(\\\"total growing threads needed: \\\" + totalGrowThreadsNeeded);\\n      const growingTime = ns.getGrowTime(target);\\n      threadsDispatched = 0;\\n      for (let i = 0; i < allHosts.length; i++) {\\n        const host = allHosts[i];\\n        const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n        if (freeRam < Config.GROW_SCRIPT_RAM)\\n          continue;\\n        const numThreadsOnHost = Math.floor(freeRam / Config.GROW_SCRIPT_RAM);\\n        ns.exec(\\\"grow.js\\\", host.name, numThreadsOnHost, target, 0);\\n        threadsDispatched += numThreadsOnHost;\\n      }\\n      ns.print(\\\"dispatched \\\" + threadsDispatched + \\\" grow threads\\\");\\n      await ns.sleep(growingTime + safetyMarginMs);\\n      ns.print(\\\"done with \\\" + threadsDispatched + \\\"/\\\" + totalGrowThreadsNeeded + \\\" grows\\\");\\n      printServerStats(ns, target, threshold);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmVTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xuaW1wb3J0IHsgQ29sb3JzLCBnZXRHcm93VGhyZWFkcywgZ2V0V2Vha2VuVGhyZWFkcywgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyB9IGZyb20gXCJAL2xpYlwiO1xuaW1wb3J0IHsgV0dIQWxnb3JpdGhtcyB9IGZyb20gXCJAL3BhcmFsbGVsL1dHSEFsZ29yaXRobXNcIjtcbmltcG9ydCB7IHByaW50U2VydmVyU3RhdHMgfSBmcm9tIFwiQC9zZXJ2ZXJTdGF0c1wiO1xuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5pbXBvcnQgeyBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIH0gZnJvbSBcIi4uL2Jlc3RTZXJ2ZXJcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XG4gICAgbnMudGFpbCgpO1xuICAgIGF3YWl0IHByZXBhcmVTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVTZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZXNob2xkID0gMC44KSB7XG4gICAgLy8gZWl0aGVyIHByZXBhcmUgaW4gbG9vcCBvciBwYXJhbGxlbCBtb2RlXG4gICAgY29uc3QgYWxsSG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcbiAgICBjb25zdCBzdW1BdmFpbGFibGVSYW0gPSBhbGxIb3N0cy5yZWR1Y2UoKGFjYywgc2VydmVyKSA9PiB7XG4gICAgICAgIHJldHVybiBhY2MgKyBzZXJ2ZXIuYXZhaWxhYmxlUmFtO1xuICAgIH0sIDApO1xuXG4gICAgLy8gaG93IG11Y2ggdGhyZWFkcyBhcmUgbmVlZGVkOiB3ZWFrZW4gZnJvbSB1bmtub3duIHRvIG1pbiArIGdyb3cgZnJvbSB1bmtub3duIHRvIG1heCArIHdlYWtlbiBncm93IGVmZmVjdFxuICAgIGNvbnN0IHdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xuICAgIGNvbnN0IGdyb3dUaHJlYWRzID0gZ2V0R3Jvd1RocmVhZHMobnMsIHRhcmdldCk7XG4gICAgY29uc3Qgd2Vha2VuQWZ0ZXJHcm93VGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnMsIGdyb3dUaHJlYWRzKTtcblxuICAgIGNvbnN0IHRvdGFsUmFtTmVlZGVkID1cbiAgICAgICAgd2Vha2VuVGhyZWFkcyAqIENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTSArXG4gICAgICAgIGdyb3dUaHJlYWRzICogQ29uZmlnLkdST1dfU0NSSVBUX1JBTSArXG4gICAgICAgIHdlYWtlbkFmdGVyR3Jvd1RocmVhZHMgKiBDb25maWcuV0VBS0VOX1NDUklQVF9SQU07XG5cbiAgICBucy5wcmludChcbiAgICAgICAgXCJuZWVkcyBcIiArIHRvdGFsUmFtTmVlZGVkICsgXCJHQiBvZiBSQU0gYW5kIGdvdCBcIiArIHN1bUF2YWlsYWJsZVJhbSArIFwiIHRvIHJ1bm5pbmcgcGFyYWxsZWwgbW9kZSBvbiBcIiArIHRhcmdldCxcbiAgICApO1xuXG4gICAgaWYgKHRvdGFsUmFtTmVlZGVkIDwgc3VtQXZhaWxhYmxlUmFtKSB7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBBUkFMTEVMIE1PREUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIlByZXBhcmluZyBcIiArIHRhcmdldCArIFwiIGluIHBhcmFsbGVsIG1vZGVcIik7XG5cbiAgICAgICAgY29uc3Qgd2Vha1RpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XG4gICAgICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcblxuICAgICAgICBXR0hBbGdvcml0aG1zLndlYWtlblNlcnZlcihucywgdGFyZ2V0LCAxLCBmYWxzZSwgMCwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGdyb3dEZWxheSA9IHdlYWtUaW1lIC0gZ3Jvd1RpbWUgKyBDb25maWcuREVMQVlfTUFSR0lOX01TO1xuICAgICAgICBXR0hBbGdvcml0aG1zLmdyb3dTZXJ2ZXIobnMsIHRhcmdldCwgMCwgZmFsc2UsIGdyb3dEZWxheSwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IHdlYWsyZGVsYXkgPSAyICogQ29uZmlnLkRFTEFZX01BUkdJTl9NUztcbiAgICAgICAgV0dIQWxnb3JpdGhtcy53ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMiwgZmFsc2UsIHdlYWsyZGVsYXksIGZhbHNlKTtcblxuICAgICAgICAvLyB3YWl0IGZvciBwcmVwIHRvIGZpbmlzaFxuICAgICAgICBhd2FpdCBucy5zbGVlcCh3ZWFrVGltZSArIDQgKiBDb25maWcuREVMQVlfTUFSR0lOX01TKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExPT1AgTU9ERSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCJQcmVwYXJpbmcgXCIgKyB0YXJnZXQgKyBcIiBpbiBsb29wIG1vZGVcIik7XG5cbiAgICAgICAgY29uc3Qgc2FmZXR5TWFyZ2luTXMgPSBDb25maWcuREVMQVlfTUFSR0lOX01TO1xuXG4gICAgICAgIC8vIFRPRE86IHVzZSBzaW1pbGFyIG1ldGhvZCBhcyBpbiBwYXJhbGxlbC9tYW5hZ2VyLnRzIHRvIGxldCB0aGUgZ3JvdyBmaW5pc2ggcmlnaHQgYWZ0ZXIgdGhlIHdlYWtlblxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gZ2V0V2Vha2VuVGhyZWFkcyhucywgdGFyZ2V0KTtcblxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLSBXRUFLRU5JTkcgLS0tLS0tLS0tLS0tXCIpO1xuICAgICAgICAgICAgbnMucHJpbnQoXCJ0b3RhbCB3ZWFrZW4gdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcbiAgICAgICAgICAgIC8vIHdlYWtlbiB0byBtaW4gc2VjIGx2bFxuICAgICAgICAgICAgbGV0IHRocmVhZHNEaXNwYXRjaGVkID0gMDtcbiAgICAgICAgICAgIGxldCB0aHJlYWRzUmVtYWluaW5nID0gdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkO1xuICAgICAgICAgICAgd2hpbGUgKHRocmVhZHNEaXNwYXRjaGVkIDwgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2Vha2VuVGltZSA9IG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5tYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3QubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtVGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoZnJlZVJhbSAvIENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhyZWFkc1RvRGlzcGF0Y2ggPSBNYXRoLm1pbih0aHJlYWRzUmVtYWluaW5nLCBudW1UaHJlYWRzT25Ib3N0KTtcblxuICAgICAgICAgICAgICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBucy5wcmludChcImRpc3BhdGNoZWQgXCIgKyB0aHJlYWRzRGlzcGF0Y2hlZCArIFwiIHdlYWtlbiB0aHJlYWRzXCIpO1xuICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKHdlYWtlblRpbWUgKyBzYWZldHlNYXJnaW5NcyArIDEwMDApO1xuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgdGhyZWFkc0Rpc3BhdGNoZWQgKyBcIi9cIiArIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCArIFwiIHdlYWtlbnNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmludFNlcnZlclN0YXRzKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XG5cbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0tIEdST1dJTkcgLS0tLS0tLS0tLS0tLVwiKTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGdyb3cgaXMgbmVlZGVkXG4gICAgICAgICAgICBpZiAodG90YWxHcm93VGhyZWFkc05lZWRlZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiTm8gZ3Jvd3RoIG5lZWRlZFwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5zLnByaW50KFwidG90YWwgZ3Jvd2luZyB0aHJlYWRzIG5lZWRlZDogXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKTtcblxuICAgICAgICAgICAgLy8gZ3JvdyBvbmUgYmF0Y2hcbiAgICAgICAgICAgIGNvbnN0IGdyb3dpbmdUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcbiAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBpZiAodGhyZWFkc0Rpc3BhdGNoZWQgPj0gdG90YWxHcm93VGhyZWFkc05lZWRlZCkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgZnJlZVJhbSA9IGhvc3QubWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShob3N0Lm5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgQ29uZmlnLkdST1dfU0NSSVBUX1JBTSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtVGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoZnJlZVJhbSAvIENvbmZpZy5HUk9XX1NDUklQVF9SQU0pO1xuXG4gICAgICAgICAgICAgICAgbnMuZXhlYyhcImdyb3cuanNcIiwgaG9zdC5uYW1lLCBudW1UaHJlYWRzT25Ib3N0LCB0YXJnZXQsIDApO1xuICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IG51bVRocmVhZHNPbkhvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBucy5wcmludChcImRpc3BhdGNoZWQgXCIgKyB0aHJlYWRzRGlzcGF0Y2hlZCArIFwiIGdyb3cgdGhyZWFkc1wiKTtcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGdyb3dpbmdUaW1lICsgc2FmZXR5TWFyZ2luTXMpO1xuICAgICAgICAgICAgbnMucHJpbnQoXCJkb25lIHdpdGggXCIgKyB0aHJlYWRzRGlzcGF0Y2hlZCArIFwiL1wiICsgdG90YWxHcm93VGhyZWFkc05lZWRlZCArIFwiIGdyb3dzXCIpO1xuICAgICAgICAgICAgcHJpbnRTZXJ2ZXJTdGF0cyhucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxRQUFRLGdCQUFnQixrQkFBa0IsaUNBQWlDO0FBQ3BGLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMsd0JBQXdCO0FBRWpDLFNBQVMsaUNBQWlDO0FBRTFDLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsUUFBTSxjQUFjLElBQUksWUFBWTtBQUN4QztBQUVBLHNCQUFzQixjQUFjLElBQVEsUUFBZ0IsWUFBWSxLQUFLO0FBRXpFLFFBQU0sV0FBVywwQkFBMEIsRUFBRTtBQUM3QyxRQUFNLGtCQUFrQixTQUFTLE9BQU8sQ0FBQyxLQUFLLFdBQVc7QUFDckQsV0FBTyxNQUFNLE9BQU87QUFBQSxFQUN4QixHQUFHLENBQUM7QUFHSixRQUFNLGdCQUFnQixpQkFBaUIsSUFBSSxNQUFNO0FBQ2pELFFBQU0sY0FBYyxlQUFlLElBQUksTUFBTTtBQUM3QyxRQUFNLHlCQUF5QiwwQkFBMEIsSUFBSSxXQUFXO0FBRXhFLFFBQU0saUJBQ0YsZ0JBQWdCLE9BQU8sb0JBQ3ZCLGNBQWMsT0FBTyxrQkFDckIseUJBQXlCLE9BQU87QUFFcEMsS0FBRztBQUFBLElBQ0MsV0FBVyxpQkFBaUIsdUJBQXVCLGtCQUFrQixrQ0FBa0M7QUFBQSxFQUMzRztBQUVBLE1BQUksaUJBQWlCLGlCQUFpQjtBQUVsQyxPQUFHLE1BQU0sT0FBTyxPQUFPLGVBQWUsU0FBUyxtQkFBbUI7QUFFbEUsVUFB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\",\"filename\":\"loop/prepareServer.js\",\"server\":\"home\"}}],[\"sm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  let isUpgrade = false;\\n  let upgradeName = \\\"\\\";\\n  let upgradeRam = 0;\\n  let upgradeUnit = \\\"\\\";\\n  let isBuy = false;\\n  let buyName = \\\"\\\";\\n  let buyRam = 0;\\n  let buyUnit = \\\"\\\";\\n  let isRename = false;\\n  let oldName = \\\"\\\";\\n  let newName = \\\"\\\";\\n  if (ns.args.length == 3 || ns.args.length == 0) {\\n    if (ns.args[0] == \\\"-u\\\") {\\n      isUpgrade = true;\\n      upgradeName = ns.args[1].toString();\\n      upgradeRam = Number(String(ns.args[2]).slice(0, -1));\\n      upgradeUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-b\\\") {\\n      isBuy = true;\\n      buyName = ns.args[1].toString();\\n      buyRam = Number(String(ns.args[2]).slice(0, -1));\\n      buyUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-r\\\") {\\n      isRename = true;\\n      oldName = ns.args[1].toString();\\n      newName = ns.args[2].toString();\\n    }\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r <old name> <new name>\\\"\\n    );\\n    return;\\n  }\\n  if (isUpgrade) {\\n    const exponent = Math.ceil(Math.log2(upgradeRam));\\n    upgradeRam = Math.pow(2, exponent);\\n    upgradeRam = getGBfromAnyUnit(ns, upgradeRam, upgradeUnit);\\n    const servers = ns.getPurchasedServers();\\n    if (!servers.includes(upgradeName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + upgradeName);\\n    }\\n    const price = ns.getPurchasedServerUpgradeCost(upgradeName, upgradeRam);\\n    const answer = await ns.prompt(\\n      \\\"upgrading the server (\\\" + upgradeName + \\\") to \\\" + upgradeRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.upgradePurchasedServer(upgradeName, upgradeRam);\\n  } else if (isBuy) {\\n    buyRam = getGBfromAnyUnit(ns, buyRam, buyUnit);\\n    if (buyRam < 1)\\n      return;\\n    const price = ns.getPurchasedServerCost(buyRam);\\n    const answer = await ns.prompt(\\n      \\\"buying the server (\\\" + buyName + \\\") with \\\" + buyRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.purchaseServer(buyName, buyRam);\\n  } else if (isRename) {\\n    if (!ns.getPurchasedServers().includes(oldName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + oldName);\\n    }\\n    ns.renamePurchasedServer(oldName, newName);\\n  } else {\\n    const playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let ramSize = 16;\\n    while (ns.getPurchasedServerCost(ramSize) < playerMoney) {\\n      ramSize *= 2;\\n    }\\n    ramSize = ramSize / 2;\\n    ns.tprint(\\n      \\\"you can buy a server with \\\" + ramSize + \\\"GB of ram. This costs \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize))\\n    );\\n    const answer = await ns.prompt(\\\"buy Server for \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize)) + \\\"?\\\");\\n    if (answer) {\\n      ns.purchaseServer(\\\"hacker\\\", ramSize);\\n    }\\n  }\\n}\\nfunction getGBfromAnyUnit(ns, ram, unit) {\\n  if (unit == \\\"G\\\") {\\n    return ram;\\n  } else if (unit == \\\"T\\\") {\\n    return ram * 1024;\\n  } else if (unit == \\\"P\\\") {\\n    return ram * 1024 * 1024;\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r <old name> <new name>\\\"\\n    );\\n    return 0;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBsZXQgaXNVcGdyYWRlID0gZmFsc2U7XG4gICAgbGV0IHVwZ3JhZGVOYW1lID0gXCJcIjtcbiAgICBsZXQgdXBncmFkZVJhbSA9IDA7XG4gICAgbGV0IHVwZ3JhZGVVbml0ID0gXCJcIjtcblxuICAgIGxldCBpc0J1eSA9IGZhbHNlO1xuICAgIGxldCBidXlOYW1lID0gXCJcIjtcbiAgICBsZXQgYnV5UmFtID0gMDtcbiAgICBsZXQgYnV5VW5pdCA9IFwiXCI7XG5cbiAgICBsZXQgaXNSZW5hbWUgPSBmYWxzZTtcbiAgICBsZXQgb2xkTmFtZSA9IFwiXCI7XG4gICAgbGV0IG5ld05hbWUgPSBcIlwiO1xuXG4gICAgaWYgKG5zLmFyZ3MubGVuZ3RoID09IDMgfHwgbnMuYXJncy5sZW5ndGggPT0gMCkge1xuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi11XCIpIHtcbiAgICAgICAgICAgIGlzVXBncmFkZSA9IHRydWU7XG4gICAgICAgICAgICB1cGdyYWRlTmFtZSA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHVwZ3JhZGVSYW0gPSBOdW1iZXIoU3RyaW5nKG5zLmFyZ3NbMl0pLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgICAgICB1cGdyYWRlVW5pdCA9IFN0cmluZyhucy5hcmdzWzJdKS5zbGljZSgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmFyZ3NbMF0gPT0gXCItYlwiKSB7XG4gICAgICAgICAgICBpc0J1eSA9IHRydWU7XG4gICAgICAgICAgICBidXlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xuICAgICAgICAgICAgYnV5UmFtID0gTnVtYmVyKFN0cmluZyhucy5hcmdzWzJdKS5zbGljZSgwLCAtMSkpO1xuICAgICAgICAgICAgYnV5VW5pdCA9IFN0cmluZyhucy5hcmdzWzJdKS5zbGljZSgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5zLmFyZ3NbMF0gPT0gXCItclwiKSB7XG4gICAgICAgICAgICBpc1JlbmFtZSA9IHRydWU7XG4gICAgICAgICAgICBvbGROYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xuICAgICAgICAgICAgbmV3TmFtZSA9IG5zLmFyZ3NbMl0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG5zLnRwcmludChcbiAgICAgICAgICAgIFwiXFxudXNhZ2U6IHNtLmpzIFtvcHRpb25zXVxcblxcbk9wdGlvbnM6XFxuXFx0LXUgPE5hbWU+IDxSYW0+PEd8VHxQPlxcblxcdC1iIDxOYW1lPiA8UmFtPjxHfFR8UD5cXG5cXHQtciA8b2xkIG5hbWU+IDxuZXcgbmFtZT5cIixcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1VwZ3JhZGUpIHtcbiAgICAgICAgLy8gZ2V0IGN1cnJlbnQgcmFtXG4gICAgICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5jZWlsKE1hdGgubG9nMih1cGdyYWRlUmFtKSk7XG4gICAgICAgIHVwZ3JhZGVSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XG5cbiAgICAgICAgdXBncmFkZVJhbSA9IGdldEdCZnJvbUFueVVuaXQobnMsIHVwZ3JhZGVSYW0sIHVwZ3JhZGVVbml0KTtcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcbiAgICAgICAgaWYgKCFzZXJ2ZXJzLmluY2x1ZGVzKHVwZ3JhZGVOYW1lKSkge1xuICAgICAgICAgICAgbnMudHByaW50KFwiWW91IGRvIG5vdCBvd24gYSBzZXJ2ZXIgY2FsbGVkIFwiICsgdXBncmFkZU5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJpY2UgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJVcGdyYWRlQ29zdCh1cGdyYWRlTmFtZSwgdXBncmFkZVJhbSk7XG5cbiAgICAgICAgY29uc3QgYW5zd2VyID0gYXdhaXQgbnMucHJvbXB0KFxuICAgICAgICAgICAgXCJ1cGdyYWRpbmcgdGhlIHNlcnZlciAoXCIgK1xuICAgICAgICAgICAgICAgIHVwZ3JhZGVOYW1lICtcbiAgICAgICAgICAgICAgICBcIikgdG8gXCIgK1xuICAgICAgICAgICAgICAgIHVwZ3JhZGVSYW0gK1xuICAgICAgICAgICAgICAgIFwiR0Igb2YgUmFtLCB3aWxsIGNvc3QgXCIgK1xuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihwcmljZSksXG4gICAgICAgICk7XG4gICAgICAgIGlmIChhbnN3ZXIpIG5zLnVwZ3JhZGVQdXJjaGFzZWRTZXJ2ZXIodXBncmFkZU5hbWUsIHVwZ3JhZGVSYW0pO1xuICAgIH0gZWxzZSBpZiAoaXNCdXkpIHtcbiAgICAgICAgYnV5UmFtID0gZ2V0R0Jmcm9tQW55VW5pdChucywgYnV5UmFtLCBidXlVbml0KTtcbiAgICAgICAgaWYgKGJ1eVJhbSA8IDEpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwcmljZSA9IG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QoYnV5UmFtKTtcblxuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBucy5wcm9tcHQoXG4gICAgICAgICAgICBcImJ1eWluZyB0aGUgc2VydmVyIChcIiArIGJ1eU5hbWUgKyBcIikgd2l0aCBcIiArIGJ1eVJhbSArIFwiR0Igb2YgUmFtLCB3aWxsIGNvc3QgXCIgKyBucy5mb3JtYXROdW1iZXIocHJpY2UpLFxuICAgICAgICApO1xuICAgICAgICBpZiAoYW5zd2VyKSBucy5wdXJjaGFzZVNlcnZlcihidXlOYW1lLCBidXlSYW0pO1xuICAgIH0gZWxzZSBpZiAoaXNSZW5hbWUpIHtcbiAgICAgICAgaWYgKCFucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuaW5jbHVkZXMob2xkTmFtZSkpIHtcbiAgICAgICAgICAgIG5zLnRwcmludChcIllvdSBkbyBub3Qgb3duIGEgc2VydmVyIGNhbGxlZCBcIiArIG9sZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIG5zLnJlbmFtZVB1cmNoYXNlZFNlcnZlcihvbGROYW1lLCBuZXdOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwbGF5ZXJNb25leSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKTtcbiAgICAgICAgbGV0IHJhbVNpemUgPSAxNjtcbiAgICAgICAgd2hpbGUgKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkgPCBwbGF5ZXJNb25leSkge1xuICAgICAgICAgICAgcmFtU2l6ZSAqPSAyO1xuICAgICAgICB9XG4gICAgICAgIHJhbVNpemUgPSByYW1TaXplIC8gMjtcbiAgICAgICAgbnMudHByaW50KFxuICAgICAgICAgICAgXCJ5b3UgY2FuIGJ1eSBhIHNlcnZlciB3aXRoIFwiICtcbiAgICAgICAgICAgICAgICByYW1TaXplICtcbiAgICAgICAgICAgICAgICBcIkdCIG9mIHJhbS4gVGhpcyBjb3N0cyBcIiArXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IG5zLnByb21wdChcImJ1eSBTZXJ2ZXIgZm9yIFwiICsgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpICsgXCI/XCIpO1xuXG4gICAgICAgIGlmIChhbnN3ZXIpIHtcbiAgICAgICAgICAgIG5zLnB1cmNoYXNlU2VydmVyKFwiaGFja2VyXCIsIHJhbVNpemUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRHQmZyb21BbnlVbml0KG5zOiBOUywgcmFtOiBudW1iZXIsIHVuaXQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgaWYgKHVuaXQgPT0gXCJHXCIpIHtcbiAgICAgICAgcmV0dXJuIHJhbTtcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT0gXCJUXCIpIHtcbiAgICAgICAgcmV0dXJuIHJhbSAqIDEwMjQ7XG4gICAgfSBlbHNlIGlmICh1bml0ID09IFwiUFwiKSB7XG4gICAgICAgIHJldHVybiByYW0gKiAxMDI0ICogMTAyNDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBucy50cHJpbnQoXG4gICAgICAgICAgICBcIlxcbnVzYWdlOiBzbS5qcyBbb3B0aW9uc11cXG5cXG5PcHRpb25zOlxcblxcdC11IDxOYW1lPiA8UmFtPjxHfFR8UD5cXG5cXHQtYiA8TmFtZT4gPFJhbT48R3xUfFA+XFxuXFx0LXIgPG9sZCBuYW1lPiA8bmV3IG5hbWU+XCIsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBRUEsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLFlBQVk7QUFDaEIsTUFBSSxjQUFjO0FBQ2xCLE1BQUksYUFBYTtBQUNqQixNQUFJLGNBQWM7QUFFbEIsTUFBSSxRQUFRO0FBQ1osTUFBSSxVQUFVO0FBQ2QsTUFBSSxTQUFTO0FBQ2IsTUFBSSxVQUFVO0FBRWQsTUFBSSxXQUFXO0FBQ2YsTUFBSSxVQUFVO0FBQ2QsTUFBSSxVQUFVO0FBRWQsTUFBSSxHQUFHLEtBQUssVUFBVSxLQUFLLEdBQUcsS0FBSyxVQUFVLEdBQUc7QUFDNUMsUUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLE1BQU07QUFDcEIsa0JBQVk7QUFDWixvQkFBYyxHQUFHLEtBQUssQ0FBQyxFQUFFLFNBQVM7QUFDbEMsbUJBQWEsT0FBTyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ25ELG9CQUFjLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRTtBQUFBLElBQzdDO0FBQ0EsUUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLE1BQU07QUFDcEIsY0FBUTtBQUNSLGdC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\",\"filename\":\"sm.js\",\"server\":\"home\"}}],[\"parallel/WGHAlgorithms.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreads,\\n  getGrowThreadsFormulas,\\n  getHackThreadsFormulas,\\n  getWeakenThreads,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack\\n} from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport class WGHAlgorithms {\\n  static currentGrowThreads = 0;\\n  static currentHackThreads = 0;\\n  /**\\n   * Weakens a server by executing the weaken.js script with the specified number of threads.\\n   * The number of threads dispatched depends on the order, batch mode, and available resources.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param target - The name of the target server to weaken.\\n   * @param order - wether it is weaken I or weaken II.\\n   * @param batchId - The ID of the parallel batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the weaken script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A boolean indicating whether the weakening process was successful.\\n   * @throws An error if the weaken order is not 1 or 2.\\n   */\\n  static weakenServer(ns, target, order, batchMode, delay = 0, filterNotAllowedHosts = true) {\\n    let totalWeakenThreadsNeeded = 0;\\n    if (order == 1 && !batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    } else if (order == 2 && !batchMode) {\\n      const growThreads = getGrowThreads(ns, target);\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, growThreads);\\n    } else if (order == 1 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterHack(ns, this.currentHackThreads);\\n    } else if (order == 2 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, this.currentGrowThreads);\\n    } else {\\n      throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n    }\\n    if (totalWeakenThreadsNeeded < 1) {\\n      ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n      return false;\\n    }\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.GROW_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const weakenScriptRam = Config.WEAKEN_SCRIPT_RAM;\\n    let threadsDispatched = 0;\\n    let threadsRemaining = totalWeakenThreadsNeeded;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= totalWeakenThreadsNeeded)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay);\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining <= 0) {\\n      ns.print(\\\"Done deploying weaken\\\" + order + \\\"!\\\");\\n      return true;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n    );\\n    const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n    if (server === \\\"\\\") {\\n      ns.tprint(\\\"Error! Could not buy server to weak \\\" + target);\\n      throw new Error(\\\"Error! Could not buy server to weak \\\" + target);\\n    }\\n    ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay);\\n    return true;\\n  }\\n  /**\\n   * Grows the specified server by executing the \\\"grow.js\\\" script with the specified number of threads.\\n   * If batchMode is enabled, it calculates the number of threads needed using the getGrowThreadsFormulas function.\\n   * Otherwise, it uses the getGrowThreads function to determine the number of threads needed.\\n   * If there are no threads needed, the growth process is skipped.\\n   * If there is an available host with enough RAM to execute the \\\"grow.js\\\" script, it is executed immediately.\\n   * Otherwise, it attempts to upgrade or buy a server with enough RAM to execute the script.\\n   *\\n   * @param ns - The NetScript instance.\\n   * @param target - The name of the server to grow.\\n   * @param batchId - The ID of the batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param hackThreshold - The hack threshold.\\n   * @param delay - Time in ms, by how much the weaken script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A boolean indicating whether the growth process was successful.\\n   */\\n  static growServer(ns, target, hackThreshold, batchMode, delay, filterNotAllowedHosts = true) {\\n    let totalGrowThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n    } else {\\n      totalGrowThreadsNeeded = getGrowThreadsFormulas(ns, target, hackThreshold);\\n      this.currentGrowThreads = totalGrowThreadsNeeded;\\n    }\\n    if (totalGrowThreadsNeeded < 1) {\\n      ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n      return false;\\n    }\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const growingScriptRam = Config.GROW_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n      if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n        ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying grow!\\\");\\n        return true;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n    const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n    if (server === \\\"\\\") {\\n      ns.tprint(\\\"Error! Could not buy server to grow \\\" + target);\\n      throw new Error(\\\"Error! Could not buy server to grow \\\" + target);\\n    }\\n    ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n    return true;\\n  }\\n  /**\\n   * Hacks a given server by executing the \\\"hack.js\\\" script with the specified number of threads, on certain hosts.\\n   *\\n   * @param ns - The NetScript object.\\n   * @param target - The name of the server to hack.\\n   * @param threshold - The hacking threshold for the server.\\n   * @param batchId - The ID of the current hacking batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the weaken script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A boolean indicating whether the hacking was successful.\\n   */\\n  static hackServer(ns, target, threshold, batchMode, delay) {\\n    let totalHackThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n    } else {\\n      totalHackThreadsNeeded = getHackThreadsFormulas(ns, target, threshold);\\n      this.currentHackThreads = totalHackThreadsNeeded;\\n    }\\n    const allHosts = getBestHostByRamOptimized(ns).filter(\\n      (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.GROW_SERVER_NAME)\\n    );\\n    const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n      if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n        ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying hack!\\\");\\n        return true;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to hack \\\" + target + \\\". Buying server...\\\");\\n    const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n    if (server === \\\"\\\") {\\n      ns.tprint(\\\"Error! Could not buy server to hack \\\" + target);\\n      throw new Error(\\\"Error! Could not buy server to hack \\\" + target);\\n    }\\n    ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n    return true;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldHSEFsZ29yaXRobXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiQC9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IFNlcnZlciwgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIENvbG9ycyxcclxuICAgIGdldEdyb3dUaHJlYWRzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyxcclxuICAgIGdldEhhY2tUaHJlYWRzRm9ybXVsYXMsXHJcbiAgICBnZXRXZWFrZW5UaHJlYWRzLFxyXG4gICAgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2ssXHJcbn0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IFNlcnZlck1hbmFnZXIgfSBmcm9tIFwiLi9TZXJ2ZXJNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgV0dIQWxnb3JpdGhtcyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBjdXJyZW50R3Jvd1RocmVhZHMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3VycmVudEhhY2tUaHJlYWRzID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICAgICAqIFRoZSBudW1iZXIgb2YgdGhyZWFkcyBkaXNwYXRjaGVkIGRlcGVuZHMgb24gdGhlIG9yZGVyLCBiYXRjaCBtb2RlLCBhbmQgYXZhaWxhYmxlIHJlc291cmNlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICAgICAqIEBwYXJhbSBvcmRlciAtIHdldGhlciBpdCBpcyB3ZWFrZW4gSSBvciB3ZWFrZW4gSUkuXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCAtIFRoZSBJRCBvZiB0aGUgcGFyYWxsZWwgYmF0Y2guXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hNb2RlIC0gU2V0IHRvIHRydWUsIG9mIG1vcmUgdGhhbiBvbmUgYmF0Y2ggc2hvdWxkIHJ1biBpbiBwYXJhbGxlbCBtb2RlLlxyXG4gICAgICogQHBhcmFtIGRlbGF5IC0gVGltZSBpbiBtcywgYnkgaG93IG11Y2ggdGhlIHdlYWtlbiBzY3JpcHQgc2hvdWxkIGJlIGRlbGF5ZWQgdG8gZW5hYmxlIHByZWNpc2UgcGFyYWxsZWwgYmF0Y2ggbW9kZSB0aW1pbmcgKGRlZmF1bHQ6IDApLlxyXG4gICAgICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgd2Vha2VuaW5nIHByb2Nlc3Mgd2FzIHN1Y2Nlc3NmdWwuXHJcbiAgICAgKiBAdGhyb3dzIEFuIGVycm9yIGlmIHRoZSB3ZWFrZW4gb3JkZXIgaXMgbm90IDEgb3IgMi5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHdlYWtlblNlcnZlcihcclxuICAgICAgICBuczogTlMsXHJcbiAgICAgICAgdGFyZ2V0OiBzdHJpbmcsXHJcbiAgICAgICAgb3JkZXI6IG51bWJlcixcclxuICAgICAgICBiYXRjaE1vZGU6IGJvb2xlYW4sXHJcbiAgICAgICAgZGVsYXkgPSAwLFxyXG4gICAgICAgIGZpbHRlck5vdEFsbG93ZWRIb3N0cyA9IHRydWUsXHJcbiAgICApOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gMDtcclxuICAgICAgICAvLyBjYWxjdWxhdGUgd2Vha2VuaW5nIHRocmVhZHMgYmFzZWQgb24gdGhlIG9yZGVyXHJcblxyXG4gICAgICAgIGlmIChvcmRlciA9PSAxICYmICFiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgLy8gZmlyc3Qgd2VhayBoYXMgdG8gd2Vha2VuIHNlcnZlciB0byBtaW4gZnJvbSB1bmtub3duIHNlYyBsdmxcclxuICAgICAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gZ2V0V2Vha2VuVGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09IDIgJiYgIWJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICAvLyBzZWNvbmQgd2VhayBvbmx5IGhhcyB0byByZW1vdmUgdGhlIHNlYyBpbmNyZWFzZSBmcm9tIHRoZSBncm93IGJlZm9yZSAobW9yZSByYW0gZWZmaWNpZW50KVxyXG4gICAgICAgICAgICBjb25zdCBncm93VGhyZWFkcyA9IGdldEdyb3dUaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyhucywgZ3Jvd1RocmVhZHMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMSAmJiBiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgLy8gd2VhayBhZnRlciBwcmV2aW91cyBoYWNrXHJcbiAgICAgICAgICAgIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCA9IGdldFdlYWtlblRocmVhZHNBZnRlckhhY2sobnMsIHRoaXMuY3VycmVudEhhY2tUaHJlYWRzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09IDIgJiYgYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHdlYWsgYWZ0ZXIgcHJldmlvdXMgZ3Jvd1xyXG4gICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zLCB0aGlzLmN1cnJlbnRHcm93VGhyZWFkcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2Vha2VuIG9yZGVyIGNhbiBvbmx5IGJlIGVpdGhlciAxIG9yIDIhXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCA8IDEpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJXZWFrZW50aHJlYWRzIGFyZSAwLCBza2lwcGluZyB3ZWFrIFwiICsgb3JkZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICAgICAgbGV0IGFsbEhvc3RzOiBTZXJ2ZXJbXSA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgICAgIGlmIChmaWx0ZXJOb3RBbGxvd2VkSG9zdHMpIHtcclxuICAgICAgICAgICAgYWxsSG9zdHMgPSBhbGxIb3N0cy5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAoaG9zdCkgPT4gIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSkgJiYgIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuSEFDS19TRVJWRVJfTkFNRSksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHdlYWtlblNjcmlwdFJhbSA9IENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTTtcclxuXHJcbiAgICAgICAgbGV0IHRocmVhZHNEaXNwYXRjaGVkID0gMDtcclxuICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgd2Vha2VuU2NyaXB0UmFtKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkU3BhY2UgPSBNYXRoLmZsb29yKGZyZWVSYW0gLyB3ZWFrZW5TY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgICAgICBjb25zdCB0aHJlYWRzVG9EaXNwYXRjaCA9IE1hdGgubWluKHRocmVhZHNSZW1haW5pbmcsIHRocmVhZFNwYWNlKTtcclxuXHJcbiAgICAgICAgICAgIG5zLmV4ZWMoXCJ3ZWFrZW4uanNcIiwgaG9zdC5uYW1lLCB0aHJlYWRzVG9EaXNwYXRjaCwgdGFyZ2V0LCBkZWxheSk7XHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPD0gMCkge1xyXG4gICAgICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIHdlYWtlblwiICsgb3JkZXIgKyBcIiFcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgQ29sb3JzLllFTExPVyArXHJcbiAgICAgICAgICAgICAgICBcIlRoZXJlIGFyZSBcIiArXHJcbiAgICAgICAgICAgICAgICB0aHJlYWRzUmVtYWluaW5nICtcclxuICAgICAgICAgICAgICAgIFwiIHRocmVhZHMgcmVtYWluaW5nIGFmdGVyIGRpc3BhdGNoaW5nIGFsbCB0aHJlYWRzLCBhdHRlbXB0aW5nIHRvIGRpc3BhdGNoIHJlbWFpbmluZyB0aHJlYWRzIG9uIHB1cmNoYXNlZCBzZXJ2ZXJcIixcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBuZWVkZWRXZWFrZW5SYW0gPSB0aHJlYWRzUmVtYWluaW5nICogd2Vha2VuU2NyaXB0UmFtO1xyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IFNlcnZlck1hbmFnZXIuYnV5T3JVcGdyYWRlU2VydmVyKG5zLCBuZWVkZWRXZWFrZW5SYW0sIENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICAgICAgaWYgKHNlcnZlciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICBucy50cHJpbnQoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gd2VhayBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byB3ZWFrIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5zLmV4ZWMoXCJ3ZWFrZW4uanNcIiwgc2VydmVyLCB0aHJlYWRzUmVtYWluaW5nLCB0YXJnZXQsIGRlbGF5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHcm93cyB0aGUgc3BlY2lmaWVkIHNlcnZlciBieSBleGVjdXRpbmcgdGhlIFwiZ3Jvdy5qc1wiIHNjcmlwdCB3aXRoIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIHRocmVhZHMuXHJcbiAgICAgKiBJZiBiYXRjaE1vZGUgaXMgZW5hYmxlZCwgaXQgY2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIHRocmVhZHMgbmVlZGVkIHVzaW5nIHRoZSBnZXRHcm93VGhyZWFkc0Zvcm11bGFzIGZ1bmN0aW9uLlxyXG4gICAgICogT3RoZXJ3aXNlLCBpdCB1c2VzIHRoZSBnZXRHcm93VGhyZWFkcyBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIG51bWJlciBvZiB0aHJlYWRzIG5lZWRlZC5cclxuICAgICAqIElmIHRoZXJlIGFyZSBubyB0aHJlYWRzIG5lZWRlZCwgdGhlIGdyb3d0aCBwcm9jZXNzIGlzIHNraXBwZWQuXHJcbiAgICAgKiBJZiB0aGVyZSBpcyBhbiBhdmFpbGFibGUgaG9zdCB3aXRoIGVub3VnaCBSQU0gdG8gZXhlY3V0ZSB0aGUgXCJncm93LmpzXCIgc2NyaXB0LCBpdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseS5cclxuICAgICAqIE90aGVyd2lzZSwgaXQgYXR0ZW1wdHMgdG8gdXBncmFkZSBvciBidXkgYSBzZXJ2ZXIgd2l0aCBlbm91Z2ggUkFNIHRvIGV4ZWN1dGUgdGhlIHNjcmlwdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0IGluc3RhbmNlLlxyXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSBzZXJ2ZXIgdG8gZ3Jvdy5cclxuICAgICAqIEBwYXJhbSBiYXRjaElkIC0gVGhlIElEIG9mIHRoZSBiYXRjaC5cclxuICAgICAqIEBwYXJhbSBiYXRjaE1vZGUgLSBTZXQgdG8gdHJ1ZSwgb2YgbW9yZSB0aGFuIG9uZSBiYXRjaCBzaG91bGQgcnVuIGluIHBhcmFsbGVsIG1vZGUuXHJcbiAgICAgKiBAcGFyYW0gaGFja1RocmVzaG9sZCAtIFRoZSBoYWNrIHRocmVzaG9sZC5cclxuICAgICAqIEBwYXJhbSBkZWxheSAtIFRpbWUgaW4gbXMsIGJ5IGhvdyBtdWNoIHRoZSB3ZWFrZW4gc2NyaXB0IHNob3VsZCBiZSBkZWxheWVkIHRvIGVuYWJsZSBwcmVjaXNlIHBhcmFsbGVsIGJhdGNoIG1vZGUgdGltaW5nIChkZWZhdWx0OiAwKS5cclxuICAgICAqIEByZXR1cm5zIEEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGdyb3d0aCBwcm9jZXNzIHdhcyBzdWNjZXNzZnVsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ3Jvd1NlcnZlcihcclxuICAgICAgICBuczogTlMsXHJcbiAgICAgICAgdGFyZ2V0OiBzdHJpbmcsXHJcbiAgICAgICAgaGFja1RocmVzaG9sZDogbnVtYmVyLFxyXG4gICAgICAgIGJhdGNoTW9kZTogYm9vbGVhbixcclxuICAgICAgICBkZWxheTogbnVtYmVyLFxyXG4gICAgICAgIGZpbHRlck5vdEFsbG93ZWRIb3N0cyA9IHRydWUsXHJcbiAgICApOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgdG90YWxHcm93VGhyZWFkc05lZWRlZCA9IDA7XHJcbiAgICAgICAgaWYgKCFiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgdG90YWxHcm93VGhyZWFkc05lZWRlZCA9IGdldEdyb3dUaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkc0Zvcm11bGFzKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm93VGhyZWFkcyA9IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG90YWxHcm93VGhyZWFkc05lZWRlZCA8IDEpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJObyBncm93IHRocmVhZHMgbmVlZGVkLCBza2lwcGluZyBncm93dGggcHJvY2Vzc1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZXhlYyBncm93LmpzIHdpdGggbnVtIG9mIHRocmVhZHNcclxuICAgICAgICBsZXQgYWxsSG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcclxuICAgICAgICBpZiAoZmlsdGVyTm90QWxsb3dlZEhvc3RzKSB7XHJcbiAgICAgICAgICAgIGFsbEhvc3RzID0gYWxsSG9zdHMuZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgKGhvc3QpID0+ICFob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLldFQUtfU0VSVkVSX05BTUUpICYmICFob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBncm93aW5nU2NyaXB0UmFtID0gQ29uZmlnLkdST1dfU0NSSVBUX1JBTTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihob3N0LmF2YWlsYWJsZVJhbSAvIGdyb3dpbmdTY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFRocmVhZHNPbkhvc3QgPj0gdG90YWxHcm93VGhyZWFkc05lZWRlZCkge1xyXG4gICAgICAgICAgICAgICAgbnMuZXhlYyhcImdyb3cuanNcIiwgaG9zdC5uYW1lLCB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiRG9uZSBkZXBsb3lpbmcgZ3JvdyFcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLllFTExPVyArIFwiTm8gYXZhaWxhYmxlIGhvc3QgdG8gZ3JvdyBcIiArIHRhcmdldCArIFwiLiBBdHRlbXB0aW5nIHRvIHVwZ3JhZGUvYnV5IHNlcnZlci4uLlwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVlZGVkR3Jvd1JhbSA9IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKiBncm93aW5nU2NyaXB0UmFtO1xyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IFNlcnZlck1hbmFnZXIuYnV5T3JVcGdyYWRlU2VydmVyKG5zLCBuZWVkZWRHcm93UmFtLCBDb25maWcuR1JPV19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGdyb3cgXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gZ3JvdyBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBucy5leGVjKFwiZ3Jvdy5qc1wiLCBzZXJ2ZXIsIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhY2tzIGEgZ2l2ZW4gc2VydmVyIGJ5IGV4ZWN1dGluZyB0aGUgXCJoYWNrLmpzXCIgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcywgb24gY2VydGFpbiBob3N0cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0IG9iamVjdC5cclxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIHRvIGhhY2suXHJcbiAgICAgKiBAcGFyYW0gdGhyZXNob2xkIC0gVGhlIGhhY2tpbmcgdGhyZXNob2xkIGZvciB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgSUQgb2YgdGhlIGN1cnJlbnQgaGFja2luZyBiYXRjaC5cclxuICAgICAqIEBwYXJhbSBiYXRjaE1vZGUgLSBTZXQgdG8gdHJ1ZSwgb2YgbW9yZSB0aGFuIG9uZSBiYXRjaCBzaG91bGQgcnVuIGluIHBhcmFsbGVsIG1vZGUuXHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgLSBUaW1lIGluIG1zLCBieSBob3cgbXVjaCB0aGUgd2Vha2VuIHNjcmlwdCBzaG91bGQgYmUgZGVsYXllZCB0byBlbmFibGUgcHJlY2lzZSBwYXJhbGxlbCBiYXRjaCBtb2RlIHRpbWluZyAoZGVmYXVsdDogMCkuXHJcbiAgICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBoYWNraW5nIHdhcyBzdWNjZXNzZnVsLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlciwgYmF0Y2hNb2RlOiBib29sZWFuLCBkZWxheTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgICAgIGlmICghYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSBNYXRoLmNlaWwodGhyZXNob2xkIC8gbnMuaGFja0FuYWx5emUodGFyZ2V0KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdG90YWxIYWNrVGhyZWFkc05lZWRlZCA9IGdldEhhY2tUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgdGhyZXNob2xkKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SGFja1RocmVhZHMgPSB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWxsSG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKS5maWx0ZXIoXHJcbiAgICAgICAgICAgIChob3N0KSA9PiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKSAmJiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGhhY2tpbmdTY3JpcHRSYW0gPSBDb25maWcuSEFDS19TQ1JJUFRfUkFNO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBhbGxIb3N0c1tpXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWF4VGhyZWFkc09uSG9zdCA+PSB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBucy5leGVjKFwiaGFjay5qc1wiLCBob3N0Lm5hbWUsIHRvdGFsSGFja1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJEb25lIGRlcGxveWluZyBoYWNrIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJObyBhdmFpbGFibGUgaG9zdCB0byBoYWNrIFwiICsgdGFyZ2V0ICsgXCIuIEJ1eWluZyBzZXJ2ZXIuLi5cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IG5lZWRlZEdyb3dSYW0gPSB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkICogaGFja2luZ1NjcmlwdFJhbTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkR3Jvd1JhbSwgQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpO1xyXG5cclxuICAgICAgICBpZiAoc2VydmVyID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byBoYWNrIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGhhY2sgXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnMuZXhlYyhcImhhY2suanNcIiwgc2VydmVyLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLGNBQWM7QUFDdkIsU0FBaUIsaUNBQWlDO0FBQ2xEO0FBQUEsRUFDSTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLE9BQ0c7QUFDUCxTQUFTLHFCQUFxQjtBQUV2QixhQUFNLGNBQWM7QUFBQSxFQUN2QixPQUFlLHFCQUFxQjtBQUFBLEVBQ3BDLE9BQWUscUJBQXFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWVwQyxPQUFPLGFBQ0gsSUFDQSxRQUNBLE9BQ0EsV0FDQSxRQUFRLEdBQ1Isd0JBQXdCLE1BQ2pCO0FBQ1AsUUFBSSwyQkFBMkI7QUFHL0IsUUFBSSxTQUFTLEtBQUssQ0FBQyxXQUFXO0FBRTFCLGlDQUEyQixpQkFBaUIsSUFBSSxNQUFNO0FBQUEsSUFDMUQsV0FBVyxTQUFTLEtBQUssQ0FBQyxXQUFXO0FBRWpDLFlBQU0sY0FBYyxlQUFlLElBQUksTUFBTTtBQUU3QyxpQ0FBMkIsMEJBQTBCLElBQUksV0FBVztBQUFBLElBQ3hFLFdBQVcsU0FBUyxLQUFLLFdBQVc7QUFFaEMsaUNBQTJCLDBCQUEwQixJQUFJLEtBQUssa0JBQWtCO0FBQUEsSUFDcEYsV0FBVyxTQUFTLEtBQUssV0FBVztBQUVoQyxpQ0FBMkIsMEJBQTBCLElBQUksS0FBSyxrQkFBa0I7QUFBQSxJQUNwRixPQUFPO0FBQ0gsWUFBTSxJQUFJLE1BQU0seUNBQXlDO0FBQUEsSUFDN0Q7QUFFQSxRQUFJLDJCQUEyQixHQUFHO0FBQzlCLFNBQUcsTUFBTSx3Q0FBd0MsS0FBSztBQUN0RCxhQUFPO0FBQUEsSUFDWDtBQUdBLFFBQUksV0FBcUIsMEJBQTBCLEVBQUU7QUFDckQsUUFBSSx1QkFBdUI7QUFDdkIsaUJBQVcsU0FBUztBQUFBLFFBQ2hCLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxTQUFTLE9BQU8sZ0JBQWdCLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxPQUFPLGdCQUFnQjtBQUFBLE1BQ3pHO0FBQUEsSUFDSjtBQUNBLFVBQU0sa0JBQWtCLE9BQU87QUFFL0IsUUFBSSxvQkFBb0I7QUFDeEIsUUFBSSxtQkFBbUI7QUFDdkIsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFJLHFCQUFxQjtBQUEwQjtBQUNuRCxZQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFlBQU0sVUFBVSxLQUFLO0FBQ3JCLFVBQUksVUFBVTtBQUFpQjtBQUMvQixZQUFNLGNBQWMsS0FBSyxNQUFNLFVBQVUsZUFBZTtBQUd4RCxZQUFNLG9CQUFvQixLQUFLLElBQUksa0JBQWtCLFdBQVc7QUFFaEUsU0FBRyxLQUFLLGFBQWEsS0FBSyxNQUFNLG1CQUFtQixRQUFRLEtBQUs7QUFDaEUsMEJBQW9CO0FBQ3BCLDJCQUFxQjtBQUFBLElBQ3pCO0FBRUEsUUFBSSxvQkFBb0IsR0FBRztBQUN2QixTQUFHLE1BQU0sMEJBQTBCLFFBQVEsR0FBRztBQUM5QyxhQUFPO0FBQUEsSUFDWDtBQUNBLE9BQUc7QUFBQSxNQUNDLE9BQU8sU0FDSCxlQUNBLG1CQUNBO0FBQUEsSUFDUjtBQUVBLFVBQU0sa0JBQWtCLG1CQUFtQjtBQUMzQyxVQUFNLFNBQVMsY0FBYyxtQkFBbUIsSUFBSSxpQkFBaUIsT0FBTyxnQkFBZ0I7QUFFNUYsUUFBSSxXQUFXLElBQUk7QUFDZixTQUFHLE9BQU8seUNBQXlDLE1BQU07QUFDekQsWUFBTSxJQUFJLE1BQU0seUNBQXlDLE1BQU07QUFBQSxJQUNuRTtBQUVBLE9BQUcsS0FBSyxhQUFhLFFBQVEsa0JBQWtCLFFBQVEsS0FBSztBQUU1RCxXQUFPO0FBQUEsRUFDWDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFrQkEsT0FBTyxXQUNILElBQ0EsUUFDQSxlQUNBLFdBQ0EsT0FDQSx3QkFBd0IsTUFDakI7QUFDUCxRQUFJLHlCQUF5QjtBQUM3QixRQUFJLENBQUMsV0FBVztBQUNaLCtCQUF5QixlQUFlLElBQUksTUFBTTtBQUFBLElBQ3RELE9BQU87QUFDSCwrQkFBeUIsdUJBQXVCLElBQUksUUFBUSxhQUFhO0FBQ3pFLFdBQUsscUJBQXFCO0FBQUEsSUFDOUI7QUFFQSxRQUFJLHlCQUF5QixHQUFHO0FBQzVCLFNBQUcsTUFBTSxpREFBaUQ7QUFDMUQsYUFBTztBQUFBLElBQ1g7QUFHQSxRQUFJLFdBQVcsMEJBQTBCLEVBQUU7QUFDM0MsUUFBSSx1QkFBdUI7QUFDdkIsaUJBQVcsU0FBUztBQUFBLFFBQ2hCLENBQUMsU0FBUyxDQUFDLEtBQUssS0FBSyxTQUFTLE9BQU8sZ0JBQWdCLEtBQUssQ0FBQyxLQUFLLEtBQUssU0FBUyxPQUFPLGdCQUFnQjtBQUFBLE1BQ3pHO0FBQUEsSUFDSjtBQUNBLFVBQU0sbUJBQW1CLE9BQU87QUFFaEMsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxZQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFlBQU0sbUJBQW1CLEtBQUssTUFBTSxLQUFLLGVBQWUsZ0JBQWdCO0FBRXhFLFVBQUksb0JBQW9CLHdCQUF3QjtBQUM1QyxXQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sd0JBQXdCLFFBQVEsS0FBSztBQUNuRSxXQUFHLE1BQU0sc0JBQXNCO0FBQy9CLGVBQU87QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUVBLE9BQUcsTUFBTSxPQUFPLFNBQVMsK0JBQStCLFNBQVMsdUNBQXVDO0FBRXhHLFVBQU0sZ0JBQWdCLHlCQUF5QjtBQUMvQyxVQUFNLFNBQVMsY0FBYyxtQkFBbUIsSUFBSSxlQUFlLE9BQU8sZ0JBQWdCO0FBRTFGLFFBQUksV0FBVyxJQUFJO0FBQ2YsU0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFlBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsSUFDbkU7QUFFQSxPQUFHLEtBQUssV0FBVyxRQUFRLHdCQUF3QixRQUFRLEtBQUs7QUFFaEUsV0FBTztBQUFBLEVBQ1g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFhQSxPQUFPLFdBQVcsSUFBUSxRQUFnQixXQUFtQixXQUFvQixPQUFlO0FBQzVGLFFBQUkseUJBQXlCO0FBQzdCLFFBQUksQ0FBQyxXQUFXO0FBQ1osK0JBQXlCLEtBQUssS0FBSyxZQUFZLEdBQUcsWUFBWSxNQUFNLENBQUM7QUFBQSxJQUN6RSxPQUFPO0FBQ0gsK0JBQXlCLHVCQUF1QixJQUFJLFFBQVEsU0FBUztBQUNyRSxXQUFLLHFCQUFxQjtBQUFBLElBQzlCO0FBRUEsVUFBTSxXQUFXLDBCQUEwQixFQUFFLEVBQUU7QUFBQSxNQUMzQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEtBQUssU0FBUyxPQUFPLGdCQUFnQixLQUFLLENBQUMsS0FBSyxLQUFLLFNBQVMsT0FBTyxnQkFBZ0I7QUFBQSxJQUN6RztBQUNBLFVBQU0sbUJBQW1CLE9BQU87QUFFaEMsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxZQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFlBQU0sbUJBQW1CLEtBQUssTUFBTSxLQUFLLGVBQWUsZ0JBQWdCO0FBRXhFLFVBQUksb0JBQW9CLHdCQUF3QjtBQUM1QyxXQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sd0JBQXdCLFFBQVEsS0FBSztBQUNuRSxXQUFHLE1BQU0sc0JBQXNCO0FBQy9CLGVBQU87QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUVBLE9BQUcsTUFBTSxPQUFPLFNBQVMsK0JBQStCLFNBQVMsb0JBQW9CO0FBRXJGLFVBQU0sZ0JBQWdCLHlCQUF5QjtBQUMvQyxVQUFNLFNBQVMsY0FBYyxtQkFBbUIsSUFBSSxlQUFlLE9BQU8sZ0JBQWdCO0FBRTFGLFFBQUksV0FBVyxJQUFJO0FBQ2YsU0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFlBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsSUFDbkU7QUFFQSxPQUFHLEtBQUssV0FBVyxRQUFRLHdCQUF3QixRQUFRLEtBQUs7QUFFaEUsV0FBTztBQUFBLEVBQ1g7QUFDSjsiLCJuYW1lcyI6W119\",\"filename\":\"parallel/WGHAlgorithms.js\",\"server\":\"home\"}}],[\"Config/Config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Config {\\n  /**\\n   * The target the daemon should hack, leave empty to hack the best server.\\n   * Default: \\\"\\\"\\n   */\\n  static TARGET = \\\"\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to use to buy servers.\\n   * Default: 0\\n   */\\n  static MAX_MONEY_TO_BUY = 0;\\n  /**\\n   * The name of the grow/weak/hack servers.\\n   * When the Daemon needs to buy a new server, the servername will start with the value of this property, appended with a trailing number.\\n   * Example: \\\"daemon-grow-0\\\", \\\"daemon-grow-1\\\", ...\\n   * Default: \\\"daemon-grow\\\", \\\"daemon-weak\\\", \\\"daemon-hack\\\"\\n   */\\n  static GROW_SERVER_NAME = \\\"daemon-grow\\\";\\n  static WEAK_SERVER_NAME = \\\"daemon-weak\\\";\\n  static HACK_SERVER_NAME = \\\"daemon-hack\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to hack from a server, leave at 0 to let the daemon decide.\\n   * Default: 0\\n   */\\n  static HACK_THRESHOLD = 0;\\n  /**\\n   * The step value which is used to decrease the hack threshold to calculate the optimal HACK_THRESHOLD.\\n   * Default: 0.05\\n   */\\n  static THRESHOLD_STEP = 0.05;\\n  /**\\n   * The minimum hack threshold value.\\n   * This value represents the minimum threshold required for a successful hack.\\n   * Default: 0.15\\n   */\\n  static MIN_HACK_THRESHOLD = 0.15;\\n  /**\\n   * The maximum amount of RAM the daemon should leave free on the Home server.\\n   * Default: 50\\n   */\\n  static HOME_FREE_RAM = 50;\\n  /**\\n   * The delay time in milliseconds.\\n   * This constant represents the amount of time to add as a margin when calling weak/grow/hack in parallel mode.\\n   * This value devided by 2 should not be less than 200ms.\\n   * Default: 1000\\n   */\\n  static DELAY_MARGIN_MS = 400;\\n  /**\\n   * The amount of time in milliseconds to wait before executing the next loop cycle.\\n   * Default: 10000 (10 seconds)\\n   */\\n  static LOOP_SAFETY_MARGIN_MS = 1e4;\\n  /**\\n   * The number of batches to use in parallel mode.\\n   * Default: 2\\n   */\\n  static LOOP_BATCH_COUNT = 2;\\n  /**\\n   * The amount of RAM (in gigabytes) required by the weaken, grow and hack script.\\n   * Default: 1.75, 1.75, 1.7\\n   */\\n  static WEAKEN_SCRIPT_RAM = 1.75;\\n  static GROW_SCRIPT_RAM = 1.75;\\n  static HACK_SCRIPT_RAM = 1.7;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUmVwcmVzZW50cyB0aGUgc2V0dGluZ3MgZm9yIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVG8gbW9kaWZ5IHRoZSBzZXR0aW5ncywgdXBkYXRlIHRoZSBjbGFzcyBwcm9wZXJ0aWVzIGFjY29yZGluZ2x5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0YXJnZXQgdGhlIGRhZW1vbiBzaG91bGQgaGFjaywgbGVhdmUgZW1wdHkgdG8gaGFjayB0aGUgYmVzdCBzZXJ2ZXIuXHJcbiAgICAgKiBEZWZhdWx0OiBcIlwiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVEFSR0VUID0gXCJcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leSB0aGUgZGFlbW9uIGlzIGFsbG93ZWQgdG8gdXNlIHRvIGJ1eSBzZXJ2ZXJzLlxyXG4gICAgICogRGVmYXVsdDogMFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1BWF9NT05FWV9UT19CVVkgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGdyb3cvd2Vhay9oYWNrIHNlcnZlcnMuXHJcbiAgICAgKiBXaGVuIHRoZSBEYWVtb24gbmVlZHMgdG8gYnV5IGEgbmV3IHNlcnZlciwgdGhlIHNlcnZlcm5hbWUgd2lsbCBzdGFydCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5LCBhcHBlbmRlZCB3aXRoIGEgdHJhaWxpbmcgbnVtYmVyLlxyXG4gICAgICogRXhhbXBsZTogXCJkYWVtb24tZ3Jvdy0wXCIsIFwiZGFlbW9uLWdyb3ctMVwiLCAuLi5cclxuICAgICAqIERlZmF1bHQ6IFwiZGFlbW9uLWdyb3dcIiwgXCJkYWVtb24td2Vha1wiLCBcImRhZW1vbi1oYWNrXCJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBHUk9XX1NFUlZFUl9OQU1FID0gXCJkYWVtb24tZ3Jvd1wiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBXRUFLX1NFUlZFUl9OQU1FID0gXCJkYWVtb24td2Vha1wiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIQUNLX1NFUlZFUl9OQU1FID0gXCJkYWVtb24taGFja1wiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5IHRoZSBkYWVtb24gaXMgYWxsb3dlZCB0byBoYWNrIGZyb20gYSBzZXJ2ZXIsIGxlYXZlIGF0IDAgdG8gbGV0IHRoZSBkYWVtb24gZGVjaWRlLlxyXG4gICAgICogRGVmYXVsdDogMFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhBQ0tfVEhSRVNIT0xEID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGVwIHZhbHVlIHdoaWNoIGlzIHVzZWQgdG8gZGVjcmVhc2UgdGhlIGhhY2sgdGhyZXNob2xkIHRvIGNhbGN1bGF0ZSB0aGUgb3B0aW1hbCBIQUNLX1RIUkVTSE9MRC5cclxuICAgICAqIERlZmF1bHQ6IDAuMDVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSFJFU0hPTERfU1RFUCA9IDAuMDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWluaW11bSBoYWNrIHRocmVzaG9sZCB2YWx1ZS5cclxuICAgICAqIFRoaXMgdmFsdWUgcmVwcmVzZW50cyB0aGUgbWluaW11bSB0aHJlc2hvbGQgcmVxdWlyZWQgZm9yIGEgc3VjY2Vzc2Z1bCBoYWNrLlxyXG4gICAgICogRGVmYXVsdDogMC4xNVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1JTl9IQUNLX1RIUkVTSE9MRCA9IDAuMTU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWF4aW11bSBhbW91bnQgb2YgUkFNIHRoZSBkYWVtb24gc2hvdWxkIGxlYXZlIGZyZWUgb24gdGhlIEhvbWUgc2VydmVyLlxyXG4gICAgICogRGVmYXVsdDogNTBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIT01FX0ZSRUVfUkFNID0gNTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGVsYXkgdGltZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICAgKiBUaGlzIGNvbnN0YW50IHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIGFkZCBhcyBhIG1hcmdpbiB3aGVuIGNhbGxpbmcgd2Vhay9ncm93L2hhY2sgaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIFRoaXMgdmFsdWUgZGV2aWRlZCBieSAyIHNob3VsZCBub3QgYmUgbGVzcyB0aGFuIDIwMG1zLlxyXG4gICAgICogRGVmYXVsdDogMTAwMFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERFTEFZX01BUkdJTl9NUyA9IDQwMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBuZXh0IGxvb3AgY3ljbGUuXHJcbiAgICAgKiBEZWZhdWx0OiAxMDAwMCAoMTAgc2Vjb25kcylcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBMT09QX1NBRkVUWV9NQVJHSU5fTVMgPSAxMDAwMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgYmF0Y2hlcyB0byB1c2UgaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIERlZmF1bHQ6IDJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBMT09QX0JBVENIX0NPVU5UID0gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBhbW91bnQgb2YgUkFNIChpbiBnaWdhYnl0ZXMpIHJlcXVpcmVkIGJ5IHRoZSB3ZWFrZW4sIGdyb3cgYW5kIGhhY2sgc2NyaXB0LlxyXG4gICAgICogRGVmYXVsdDogMS43NSwgMS43NSwgMS43XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV0VBS0VOX1NDUklQVF9SQU0gPSAxLjc1O1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBHUk9XX1NDUklQVF9SQU0gPSAxLjc1O1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIQUNLX1NDUklQVF9SQU0gPSAxLjc7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFLTyxhQUFNLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS2hCLE9BQXVCLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTWhDLE9BQXVCLG1CQUFtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUTFDLE9BQXVCLG1CQUFtQjtBQUFBLEVBQzFDLE9BQXVCLG1CQUFtQjtBQUFBLEVBQzFDLE9BQXVCLG1CQUFtQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNMUMsT0FBdUIsaUJBQWlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU14QyxPQUF1QixpQkFBaUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPeEMsT0FBdUIscUJBQXFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU01QyxPQUF1QixnQkFBZ0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVF2QyxPQUF1QixrQkFBa0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXpDLE9BQXVCLHdCQUF3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNL0MsT0FBdUIsbUJBQW1CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU0xQyxPQUF1QixvQkFBb0I7QUFBQSxFQUMzQyxPQUF1QixrQkFBa0I7QUFBQSxFQUN6QyxPQUF1QixrQkFBa0I7QUFDN0M7IiwibmFtZXMiOltdfQ==\",\"filename\":\"Config/Config.js\",\"server\":\"home\"}}],[\"parallel/ServerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, nukeServer } from \\\"/lib.js\\\";\\nexport class ServerManager {\\n  /**\\n   * Buys or upgrades a server based on the desired RAM and server type.\\n   * If the server exists and can be upgraded successfully, it returns the upgraded server name.\\n   * If the server cannot be upgraded, it attempts to buy a new server with the desired RAM and name.\\n   *\\n   * @param ns - The Bitburner namespace object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param serverType - The type of server to buy or upgrade (`weak`, `grow`, `hack`).\\n   * @param batchId - The batch ID of the server.\\n   * @returns The name of the upgraded server or an empty string if a new server cannot be bought/upgraded.\\n   */\\n  static buyOrUpgradeServer(ns, desiredRam, serverType) {\\n    const server = this.getBestServerToUpgrade(ns, desiredRam, serverType);\\n    if (server.name !== \\\"\\\") {\\n      const upgradeSuccessful = this.upgradeServer(ns, server.totalRam, server.name);\\n      if (upgradeSuccessful) {\\n        ns.print(Colors.GREEN + \\\"[server Manager] Upgraded Server '\\\" + serverType + \\\"'!\\\");\\n        return server.name;\\n      }\\n    }\\n    const name = this.buyServer(ns, desiredRam, serverType);\\n    return name;\\n  }\\n  static buyServer(ns, desiredRam, serverName) {\\n    const purchasedServerLimit = ns.getPurchasedServerLimit();\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (purchasedServers.length >= purchasedServerLimit) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to buy a new server, but the limit has been reached\\\");\\n      return \\\"\\\";\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerCost(desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.tprint(\\n        Colors.RED + \\\"[server Manager] attempted to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB, for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      throw new Error(\\\"Not enough money to buy a new server\\\");\\n    }\\n    const name = ns.purchaseServer(serverName, desiredRam);\\n    if (name === \\\"\\\") {\\n      ns.tprint(\\n        Colors.RED + \\\"[server Manager] Failed to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost)\\n      );\\n      throw new Error(\\\"Failed to buy a new server\\\");\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Bought Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    nukeServer(ns, name);\\n    return name;\\n  }\\n  static upgradeServer(ns, desiredRam, serverName) {\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (!purchasedServers.includes(serverName)) {\\n      ns.print(Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the server does not exist\\\");\\n      return false;\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerUpgradeCost(serverName, desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to upgrade Server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      return false;\\n    }\\n    if (!ns.upgradePurchasedServer(serverName, desiredRam)) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to upgrade Server, but the upgrade failed\\\");\\n      return false;\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Upgraded Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    return true;\\n  }\\n  /**\\n   * Upgrades an existing server to meet the desired RAM requirement, that is cheapest to upgrade.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param name - The name of the server to upgrade.\\n   * @returns The name of the upgraded server, or an empty string if the upgrade failed.\\n   */\\n  static getBestServerToUpgrade(ns, desiredRam, name) {\\n    const purchasedServers = ns.getPurchasedServers().filter((server) => server.includes(name));\\n    if (purchasedServers.length === 0) {\\n      return {\\n        cost: 0,\\n        name: \\\"\\\",\\n        totalRam: 0\\n      };\\n    }\\n    let minUpgradeCost = Number.MAX_VALUE;\\n    let serverToUpgrade = \\\"\\\";\\n    let totalRequiredRam = 0;\\n    for (let i = 0; i < purchasedServers.length; i++) {\\n      const server = purchasedServers[i];\\n      const serverMaxRam = ns.getServerMaxRam(server);\\n      totalRequiredRam = desiredRam + serverMaxRam;\\n      const exponent = Math.ceil(Math.log2(totalRequiredRam));\\n      totalRequiredRam = Math.pow(2, exponent);\\n      const cost = ns.getPurchasedServerUpgradeCost(server, totalRequiredRam);\\n      if (cost < minUpgradeCost) {\\n        minUpgradeCost = cost;\\n        serverToUpgrade = server;\\n      }\\n    }\\n    return {\\n      cost: minUpgradeCost,\\n      name: serverToUpgrade,\\n      totalRam: totalRequiredRam\\n    };\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlcnZlck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzLCBudWtlU2VydmVyIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlck1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCdXlzIG9yIHVwZ3JhZGVzIGEgc2VydmVyIGJhc2VkIG9uIHRoZSBkZXNpcmVkIFJBTSBhbmQgc2VydmVyIHR5cGUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGV4aXN0cyBhbmQgY2FuIGJlIHVwZ3JhZGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyB0aGUgdXBncmFkZWQgc2VydmVyIG5hbWUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGNhbm5vdCBiZSB1cGdyYWRlZCwgaXQgYXR0ZW1wdHMgdG8gYnV5IGEgbmV3IHNlcnZlciB3aXRoIHRoZSBkZXNpcmVkIFJBTSBhbmQgbmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgQml0YnVybmVyIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gZGVzaXJlZFJhbSAtIEhvdyBtdWNoIFJBTSBuZWVkcyB0aGUgc2VydmVyIGF0IGxlYXN0LlxyXG4gICAgICogQHBhcmFtIHNlcnZlclR5cGUgLSBUaGUgdHlwZSBvZiBzZXJ2ZXIgdG8gYnV5IG9yIHVwZ3JhZGUgKGB3ZWFrYCwgYGdyb3dgLCBgaGFja2ApLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgYmF0Y2ggSUQgb2YgdGhlIHNlcnZlci5cclxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB1cGdyYWRlZCBzZXJ2ZXIgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIGEgbmV3IHNlcnZlciBjYW5ub3QgYmUgYm91Z2h0L3VwZ3JhZGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnV5T3JVcGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuZ2V0QmVzdFNlcnZlclRvVXBncmFkZShucywgZGVzaXJlZFJhbSwgc2VydmVyVHlwZSk7XHJcbiAgICAgICAgaWYgKHNlcnZlci5uYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZ3JhZGVTdWNjZXNzZnVsID0gdGhpcy51cGdyYWRlU2VydmVyKG5zLCBzZXJ2ZXIudG90YWxSYW0sIHNlcnZlci5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHVwZ3JhZGVTdWNjZXNzZnVsKSB7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIltzZXJ2ZXIgTWFuYWdlcl0gVXBncmFkZWQgU2VydmVyICdcIiArIHNlcnZlclR5cGUgKyBcIichXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlci5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5idXlTZXJ2ZXIobnMsIGRlc2lyZWRSYW0sIHNlcnZlclR5cGUpO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBidXlTZXJ2ZXIobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIHNlcnZlck5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyTGltaXQgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpO1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7XHJcbiAgICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID49IHB1cmNoYXNlZFNlcnZlckxpbWl0KSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIGJ1dCB0aGUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVzaXJlZFJhbSkpO1xyXG4gICAgICAgIGRlc2lyZWRSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KGRlc2lyZWRSYW0pO1xyXG4gICAgICAgIGlmIChjb3N0ID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5SRUQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gYnV5IGEgbmV3IHNlcnZlcjogJ1wiICtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgICAgICBcIicgd2l0aCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJHQiwgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIoY29zdCkgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiLCBidXQgdGhlIHBsYXllciBkb2VzIG5vdCBoYXZlIGVub3VnaCBtb25leVwiLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgZW5vdWdoIG1vbmV5IHRvIGJ1eSBhIG5ldyBzZXJ2ZXJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuYW1lID0gbnMucHVyY2hhc2VTZXJ2ZXIoc2VydmVyTmFtZSwgZGVzaXJlZFJhbSk7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFxyXG4gICAgICAgICAgICAgICAgQ29sb3JzLlJFRCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJbc2VydmVyIE1hbmFnZXJdIEZhaWxlZCB0byBidXkgYSBuZXcgc2VydmVyOiAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBkZXNpcmVkUmFtICtcclxuICAgICAgICAgICAgICAgICAgICBcIkdCIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gYnV5IGEgbmV3IHNlcnZlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5HUkVFTiArXHJcbiAgICAgICAgICAgICAgICBcIltzZXJ2ZXIgTWFuYWdlcl0gQm91Z2h0IFNlcnZlciAnXCIgK1xyXG4gICAgICAgICAgICAgICAgc2VydmVyTmFtZSArXHJcbiAgICAgICAgICAgICAgICBcIicgd2l0aCBcIiArXHJcbiAgICAgICAgICAgICAgICBkZXNpcmVkUmFtICtcclxuICAgICAgICAgICAgICAgIFwiR0IgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihjb3N0KSArXHJcbiAgICAgICAgICAgICAgICBcIiFcIixcclxuICAgICAgICApO1xyXG4gICAgICAgIG51a2VTZXJ2ZXIobnMsIG5hbWUpO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB1cGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBwdXJjaGFzZWRTZXJ2ZXJzID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVycygpO1xyXG4gICAgICAgIGlmICghcHVyY2hhc2VkU2VydmVycy5pbmNsdWRlcyhzZXJ2ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJbc2VydmVyIE1hbmFnZXJdIGF0dGVtcHRlZCB0byB1cGdyYWRlIFNlcnZlciwgYnV0IHRoZSBzZXJ2ZXIgZG9lcyBub3QgZXhpc3RcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cG9uZW50ID0gTWF0aC5jZWlsKE1hdGgubG9nMihkZXNpcmVkUmFtKSk7XHJcbiAgICAgICAgZGVzaXJlZFJhbSA9IE1hdGgucG93KDIsIGV4cG9uZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHNlcnZlck5hbWUsIGRlc2lyZWRSYW0pO1xyXG5cclxuICAgICAgICBpZiAoY29zdCA+IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5SRUQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXI6ICdcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyTmFtZSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCInIHdpdGggXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc2lyZWRSYW0gK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiR0IgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIoY29zdCkgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiLCBidXQgdGhlIHBsYXllciBkb2VzIG5vdCBoYXZlIGVub3VnaCBtb25leVwiLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIW5zLnVwZ3JhZGVQdXJjaGFzZWRTZXJ2ZXIoc2VydmVyTmFtZSwgZGVzaXJlZFJhbSkpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLlJFRCArIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXIsIGJ1dCB0aGUgdXBncmFkZSBmYWlsZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5HUkVFTiArXHJcbiAgICAgICAgICAgICAgICBcIltzZXJ2ZXIgTWFuYWdlcl0gVXBncmFkZWQgU2VydmVyICdcIiArXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIGRlc2lyZWRSYW0gK1xyXG4gICAgICAgICAgICAgICAgXCJHQiBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpICtcclxuICAgICAgICAgICAgICAgIFwiIVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGdyYWRlcyBhbiBleGlzdGluZyBzZXJ2ZXIgdG8gbWVldCB0aGUgZGVzaXJlZCBSQU0gcmVxdWlyZW1lbnQsIHRoYXQgaXMgY2hlYXBlc3QgdG8gdXBncmFkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIGRlc2lyZWRSYW0gLSBIb3cgbXVjaCBSQU0gbmVlZHMgdGhlIHNlcnZlciBhdCBsZWFzdC5cclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZlciB0byB1cGdyYWRlLlxyXG4gICAgICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIHVwZ3JhZGVkIHNlcnZlciwgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSB1cGdyYWRlIGZhaWxlZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEJlc3RTZXJ2ZXJUb1VwZ3JhZGUobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuZmlsdGVyKChzZXJ2ZXIpID0+IHNlcnZlci5pbmNsdWRlcyhuYW1lKSk7XHJcblxyXG4gICAgICAgIGlmIChwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29zdDogMCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFJhbTogMCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtaW5VcGdyYWRlQ29zdCA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgbGV0IHNlcnZlclRvVXBncmFkZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbFJlcXVpcmVkUmFtID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IHB1cmNoYXNlZFNlcnZlcnNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJNYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcclxuICAgICAgICAgICAgdG90YWxSZXF1aXJlZFJhbSA9IGRlc2lyZWRSYW0gKyBzZXJ2ZXJNYXhSYW07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIodG90YWxSZXF1aXJlZFJhbSkpO1xyXG4gICAgICAgICAgICB0b3RhbFJlcXVpcmVkUmFtID0gTWF0aC5wb3coMiwgZXhwb25lbnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHNlcnZlciwgdG90YWxSZXF1aXJlZFJhbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29zdCA8IG1pblVwZ3JhZGVDb3N0KSB7XHJcbiAgICAgICAgICAgICAgICBtaW5VcGdyYWRlQ29zdCA9IGNvc3Q7XHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb1VwZ3JhZGUgPSBzZXJ2ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29zdDogbWluVXBncmFkZUNvc3QsXHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlclRvVXBncmFkZSxcclxuICAgICAgICAgICAgdG90YWxSYW06IHRvdGFsUmVxdWlyZWRSYW0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsUUFBUSxrQkFBa0I7QUFHNUIsYUFBTSxjQUFjO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBWXZCLE9BQU8sbUJBQW1CLElBQVEsWUFBb0IsWUFBNEI7QUFDOUUsVUFBTSxTQUFTLEtBQUss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\",\"filename\":\"parallel/ServerManager.js\",\"server\":\"home\"}}],[\"Time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Time {\\n  static instance;\\n  startTimeMillis = 0;\\n  endTimeMillis = 0;\\n  sleepTimeMillis = 0;\\n  startTime() {\\n    this.sleepTimeMillis = 0;\\n    this.startTimeMillis = Date.now();\\n  }\\n  endTime() {\\n    this.endTimeMillis = Date.now();\\n  }\\n  accumulateSleepTime(time) {\\n    this.sleepTimeMillis += time;\\n  }\\n  getTime(ns) {\\n    const runningTime = this.endTimeMillis - this.startTimeMillis - this.sleepTimeMillis;\\n    ns.write(\\\"timelog.txt\\\", \\\"Time: \\\" + runningTime + \\\"ms\\\\n\\\", \\\"a\\\");\\n    return runningTime;\\n  }\\n  constructor() {\\n  }\\n  static getInstance() {\\n    if (!Time.instance) {\\n      Time.instance = new Time();\\n    }\\n    return Time.instance;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVGltZTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXJ0VGltZU1pbGxpcyA9IDA7XHJcbiAgICBwcml2YXRlIGVuZFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG5cclxuICAgIHB1YmxpYyBzdGFydFRpbWUoKSB7XHJcbiAgICAgICAgdGhpcy5zbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lTWlsbGlzID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5kVGltZSgpIHtcclxuICAgICAgICB0aGlzLmVuZFRpbWVNaWxsaXMgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY2N1bXVsYXRlU2xlZXBUaW1lKHRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2xlZXBUaW1lTWlsbGlzICs9IHRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbWUobnM6IE5TKSB7XHJcbiAgICAgICAgY29uc3QgcnVubmluZ1RpbWUgPSB0aGlzLmVuZFRpbWVNaWxsaXMgLSB0aGlzLnN0YXJ0VGltZU1pbGxpcyAtIHRoaXMuc2xlZXBUaW1lTWlsbGlzO1xyXG4gICAgICAgIG5zLndyaXRlKFwidGltZWxvZy50eHRcIiwgXCJUaW1lOiBcIiArIHJ1bm5pbmdUaW1lICsgXCJtc1xcblwiLCBcImFcIik7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5pbmdUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy9cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIGlmICghVGltZS5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBUaW1lLmluc3RhbmNlID0gbmV3IFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFRpbWUuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFTyxhQUFNLEtBQUs7QUFBQSxFQUNkLE9BQWU7QUFBQSxFQUVQLGtCQUFrQjtBQUFBLEVBQ2xCLGdCQUFnQjtBQUFBLEVBQ2hCLGtCQUFrQjtBQUFBLEVBRW5CLFlBQVk7QUFDZixTQUFLLGtCQUFrQjtBQUN2QixTQUFLLGtCQUFrQixLQUFLLElBQUk7QUFBQSxFQUNwQztBQUFBLEVBRU8sVUFBVTtBQUNiLFNBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLEVBQ2xDO0FBQUEsRUFFTyxvQkFBb0IsTUFBYztBQUNyQyxTQUFLLG1CQUFtQjtBQUFBLEVBQzVCO0FBQUEsRUFFTyxRQUFRLElBQVE7QUFDbkIsVUFBTSxjQUFjLEtBQUssZ0JBQWdCLEtBQUssa0JBQWtCLEtBQUs7QUFDckUsT0FBRyxNQUFNLGVBQWUsV0FBVyxjQUFjLFFBQVEsR0FBRztBQUM1RCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRVEsY0FBYztBQUFBLEVBRXRCO0FBQUEsRUFFQSxPQUFjLGNBQWM7QUFDeEIsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNoQixXQUFLLFdBQVcsSUFBSSxLQUFLO0FBQUEsSUFDN0I7QUFDQSxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"Time.js\",\"server\":\"home\"}}],[\"gorg.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getBestHostByRam, getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const start = Date.now();\\n  for (let i = 0; i < 400; i++) {\\n    const element = getBestHostByRam(ns);\\n  }\\n  const end = Date.now();\\n  for (let i = 0; i < 400; i++) {\\n    const element = getBestHostByRamOptimized(ns);\\n  }\\n  const end2 = Date.now();\\n  ns.print(Colors.GREEN + \\\"normal: \\\" + (end - start));\\n  ns.print(Colors.GREEN + \\\"optimized: \\\" + (end2 - end));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvcmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW0sIGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQgfSBmcm9tIFwiLi9iZXN0U2VydmVyXCI7XHJcbmltcG9ydCB7IENvbG9ycyB9IGZyb20gXCIuL2xpYlwiO1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcblxyXG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDA7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRCZXN0SG9zdEJ5UmFtKG5zKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGVuZCA9IERhdGUubm93KCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwMDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW5kMiA9IERhdGUubm93KCk7XHJcblxyXG4gICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJub3JtYWw6IFwiICsgKGVuZCAtIHN0YXJ0KSk7XHJcbiAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIm9wdGltaXplZDogXCIgKyAoZW5kMiAtIGVuZCkpO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxrQkFBa0IsaUNBQWlDO0FBQzVELFNBQVMsY0FBYztBQUN2QixzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLEtBQUcsV0FBVyxLQUFLO0FBRW5CLFFBQU0sUUFBUSxLQUFLLElBQUk7QUFDdkIsV0FBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLEtBQUs7QUFDMUIsVUFBTSxVQUFVLGlCQUFpQixFQUFFO0FBQUEsRUFDdkM7QUFDQSxRQUFNLE1BQU0sS0FBSyxJQUFJO0FBQ3JCLFdBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxLQUFLO0FBQzFCLFVBQU0sVUFBVSwwQkFBMEIsRUFBRTtBQUFBLEVBQ2hEO0FBQ0EsUUFBTSxPQUFPLEtBQUssSUFBSTtBQUV0QixLQUFHLE1BQU0sT0FBTyxRQUFRLGNBQWMsTUFBTSxNQUFNO0FBQ2xELEtBQUcsTUFBTSxPQUFPLFFBQVEsaUJBQWlCLE9BQU8sSUFBSTtBQUN4RDsiLCJuYW1lcyI6W119\",\"filename\":\"gorg.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"daemon-grow\",\"daemon-hack\",\"daemon-weak\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"notes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"notes.txt\",\"text\":\"grow being 3.2x hacktime and weaken 4x hacktime\\r\\ngrow can not safely be distributed, cause:\\r\\n    multiple instances cant finish at the same time, effect is calculated at the end, \\r\\n    thus if its spread across multiple instances they'll increase security for one another\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44210.106927853914\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.381316829908698\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44148.70400156523\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.34294000097827\\r\\nnum_batches: 21\"}}],[\"timelog.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"timelog.txt\",\"text\":\"Time: 96.45164398458292ms\\nTime: 171.8585117433904ms\\nTime: 119.57338754956436ms\\nTime: 97.57338754956436ms\\nTime: 96.89307214608561ms\\nTime: 108.29599843476899ms\\nTime: 100.591577386469ms\\nTime: 114.48564159480156ms\\nTime: 91.76981913522468ms\\nTime: 133.16132076175563ms\\nTime: 90.44659185857017ms\\nTime: 123.3417268491612ms\\n------------------------------- NEW\\nTime: 72.3693717616261ms\\nTime: 83.3693717616261ms\\nTime: 68.28995765039144ms\\nTime: 85.05043325141014ms\\nTime: 87.65145030262647ms\\nTime: 95.0936570095364ms\\nTime: 95.5042146932974ms\\nTime: 74.47384463297931ms\\nTime: 105.2872222008591ms\\nTime: 86.94497829479951ms\\nTime: 111.44774042075005ms\\nTime: 119.79613271548442ms\\nTime: 108.99077596921416ms\\nTime: 70.0322876479695ms\\nTime: 149.2441584973858ms\\nTime: 90.2441584973858ms\\nTime: 82.96425382052257ms\\nTime: 97.96425382052257ms\\nTime: 104.92466075898847ms\\n\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"serverStats.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5080.60999999757,\"ramUsage\":5.1,\"server\":\"home\",\"scriptKey\":\"serverStats.js*[]\",\"title\":\"serverStats.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hackingDeamon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":44.6,\"server\":\"home\",\"scriptKey\":\"hackingDeamon.js*[]\",\"title\":\"hackingDeamon.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",317784.79947622586],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"grow.js*[\\\"alpha-ent\\\",317784.79947622586]\",\"title\":\"grow.js alpha-ent 317784.79947622586\",\"threads\":10592,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",800],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",800]\",\"title\":\"weaken.js alpha-ent 800\",\"threads\":570,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"96.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":48009203685,\"moneyMax\":1200230092125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1093,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"6.4.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50600839979,\"moneyMax\":1265020999475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1206,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"43.6.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":27731258750,\"moneyMax\":693281468750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1035,\"serverGrowth\":60,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"6.8.0.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":11429056827,\"moneyMax\":285726420675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":938,\"serverGrowth\":70,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-425107.cct\",\"type\":\"Total Ways to Sum\",\"data\":52,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"37.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34513132051,\"moneyMax\":862828301275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1044,\"serverGrowth\":92,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"95.0.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":24070014526,\"moneyMax\":601750363150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1133,\"serverGrowth\":51,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"45.6.8.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":18130789549,\"moneyMax\":453269738725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":912,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"47.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":24199285287,\"moneyMax\":604982132175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1076,\"serverGrowth\":91,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"64.1.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":22191414327,\"moneyMax\":554785358175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1028,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-156972.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"vsssssssssHHHHHHHHHHHHHHoooooooooooo88JJJJMMtttt00RkqqAAAAAAAAAAAr7uf\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"97.7.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":1673476748,\"moneyMax\":41836918700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1140,\"serverGrowth\":89,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"21.4.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1325,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"95.4.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1058460486,\"moneyMax\":26461512150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":931,\"serverGrowth\":71,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"66.8.4.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":801905524,\"moneyMax\":20047638100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":954,\"serverGrowth\":62,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"27.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":604162317,\"moneyMax\":15104057925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":63,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"27.6.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":708021824,\"moneyMax\":17700545600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"6.3.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":728211133,\"moneyMax\":18205278325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":899,\"serverGrowth\":61,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"69.7.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":921377744,\"moneyMax\":23034443600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":916,\"serverGrowth\":94,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"88.1.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1143926340,\"moneyMax\":28598158500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":894,\"serverGrowth\":87,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"86.8.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":774463092,\"moneyMax\":19361577300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":65,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"91.0.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":604939133,\"moneyMax\":15123478325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":81,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"32.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":830681354,\"moneyMax\":20767033850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":890,\"serverGrowth\":71,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"89.5.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":816970485,\"moneyMax\":20424262125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":84,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"5.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1177287593,\"moneyMax\":29432189825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":56,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"19.3.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":921030701,\"moneyMax\":23025767525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"64.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":949602279,\"moneyMax\":23740056975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":71,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"26.6.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":732153060,\"moneyMax\":18303826500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"82.1.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":754919800,\"moneyMax\":18872995000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":76,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"80.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1412264674,\"moneyMax\":35306616850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":844,\"serverGrowth\":53,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"99.8.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1582631247,\"moneyMax\":39565781175,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":80,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"72.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1174068965,\"moneyMax\":29351724125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":777,\"serverGrowth\":70,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"57.2.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1453309214,\"moneyMax\":36332730350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":77,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"31.8.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1030298779,\"moneyMax\":25757469475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"12.7.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":764876553,\"moneyMax\":19121913825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":708,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"14.7.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":571125167,\"moneyMax\":14278129175,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":519,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"75.9.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":713770417,\"moneyMax\":17844260425,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":504,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":73,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"99.6.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":252236894,\"moneyMax\":6305922350,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"13.3.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":185361310,\"moneyMax\":4634032750,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":373,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"13.8.7.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1060728226,\"moneyMax\":26518205650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":77,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"98.7.1.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":203571844,\"moneyMax\":5089296100,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":435,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":36,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"14.7.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"syscore\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"syscore\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":475801146,\"moneyMax\":11895028650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":584,\"serverGrowth\":68,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"87.6.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":509278354,\"moneyMax\":12731958850,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":424,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":73,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-106666.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[37,65,41]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"10.4.3.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":4766944050,\"moneyMax\":4766944050,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":277,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":36,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"89.9.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"computek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"computek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":242070870,\"moneyMax\":6051771750,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":337,\"serverGrowth\":52,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"49.8.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":386,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":36,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-431739.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":54702229345,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"14.4.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"johnson-ortho\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"johnson-ortho\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":77716420,\"moneyMax\":1942910500,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":273,\"serverGrowth\":53,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"81.3.5.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"90.2.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.248,\"minDifficulty\":3,\"moneyAvailable\":4714120.359736331,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"42.7.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"17.3.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"59.9.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"64.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"3.7.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"70.7.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"36.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"73.4.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"11.9.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"51.5.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"52.4.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":62390659,\"moneyMax\":1559766475,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":201,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"12.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"crush-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"crush-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":49234491,\"moneyMax\":1230862275,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":268,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"12.6.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.346,\"minDifficulty\":10,\"moneyAvailable\":43326917.33867645,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433918.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[200,180,99,95,66,182,56,196,32,131,189,164,172,184,12,84,34,109,16,144,46,107,38,157,183,139,123,102,47,127,134,86,138,28,46,54,63,199,121,91,34]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"13.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":511,\"serverGrowth\":39,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-978129.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[50,173,166,193,64,86,167,163,187,24,102,182,188,78,155,184,113,16,31,111,164,159,61,43,13,50,181,91,62,38,29,195,5,46,112,138,6,25,13,94,90,162,67,161,23,74,38,117,57,178],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.7.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1082,\"serverGrowth\":58,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"0.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":53,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":745,\"serverGrowth\":53,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"77.5.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":529,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":73,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"26.6.7.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":353,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":146,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"43.5.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":205,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"80.4.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":523,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"84.7.8.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":51,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"9.7.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"83.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-135044-TianDiHui.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[65,[1,2,4,5,6,8,10,13,14,16,17,18]],\"reward\":{\"type\":0,\"name\":\"Tian Di Hui\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"86.3.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow\",\"httpPortOpen\":true,\"ip\":\"19.2.5.0\",\"isConnectedTo\":false,\"maxRam\":524288,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"daemon-grow\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack\",\"httpPortOpen\":true,\"ip\":\"61.6.0.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"daemon-hack\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"daemon-hack\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",800],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"daemon-hack\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",800]\",\"title\":\"weaken.js alpha-ent 800\",\"threads\":278,\"temporary\":false}}]}},\"daemon-weak\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-weak\",\"httpPortOpen\":true,\"ip\":\"26.9.8.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMuaGFjayhucy5hcmdzWzBdLCB7IGFkZGl0aW9uYWxNc2VjOiBucy5hcmdzWzFdIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-weak\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"grow.js\",\"server\":\"daemon-weak\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xuICAgIGlmICh0eXBlb2YgbnMuYXJnc1swXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIltXRUFLRU5dIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUNBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwwQ0FBMEM7QUFDbEcsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU07QUFBVSxVQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFDbkcsUUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDOUQ7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-weak\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\",0],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"alpha-ent\\\",0]\",\"title\":\"weaken.js alpha-ent 0\",\"threads\":146,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0912,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":5.3551,\"discovery\":\"known\",\"playerReputation\":29620.955697512047}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":22.0649,\"discovery\":\"known\",\"playerReputation\":4485.744529365247}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":143.2018,\"discovery\":\"known\",\"playerReputation\":18857.630935244546}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":48748.207677325976}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":1231.4545733793034}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":1231.056985343885}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":81.9073,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":5.8965,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":8.1073,\"discovery\":\"known\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":105.6587,\"discovery\":\"known\",\"playerReputation\":24857.44327651824}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":71.3463,\"discovery\":\"known\",\"playerReputation\":16624.387600257134}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":11201.675661399406,\"lastPrice\":11197.776832620299,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":19.410129045309933,\"otlkMagForecast\":68.06498877865354,\"cap\":338078770,\"spreadPerc\":0.5,\"shareTxForMovement\":30869,\"shareTxUntilMovement\":30869,\"totalShares\":99300000,\"maxShares\":19900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":34189.13697736483,\"lastPrice\":34202.14825355668,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":17.811689421844086,\"otlkMagForecast\":32.11777460551818,\"cap\":276503498,\"spreadPerc\":0.5,\"shareTxForMovement\":74976,\"shareTxUntilMovement\":74976,\"totalShares\":81300000,\"maxShares\":16300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":38354.050540755656,\"lastPrice\":38331.70326882896,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":11.72918223293384,\"otlkMagForecast\":63.62447020585003,\"cap\":314483040,\"spreadPerc\":0.4,\"shareTxForMovement\":65941,\"shareTxUntilMovement\":65941,\"totalShares\":74600000,\"maxShares\":14900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":16063.56839697045,\"lastPrice\":16073.06348043275,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":12.01306178238593,\"otlkMagForecast\":38.6288184749946,\"cap\":265989623,\"spreadPerc\":0.2,\"shareTxForMovement\":66998,\"shareTxUntilMovement\":66998,\"totalShares\":101800000,\"maxShares\":20400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":38721.31354024706,\"lastPrice\":38700.94458184093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":9.148340896039935,\"otlkMagForecast\":62.4981663111384,\"cap\":65576960,\"spreadPerc\":0.3,\"shareTxForMovement\":42548,\"shareTxUntilMovement\":42548,\"totalShares\":42400000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":31951.685547033045,\"lastPrice\":31923.510085756323,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.09,\"b\":true,\"otlkMag\":9.77813680770357,\"otlkMagForecast\":60.502727957724055,\"cap\":177216092,\"spreadPerc\":0.4,\"shareTxForMovement\":61975,\"shareTxUntilMovement\":61975,\"totalShares\":39800000,\"maxShares\":8000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":11327.25323187922,\"lastPrice\":11334.499019503697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":10.370672298448078,\"otlkMagForecast\":60.07419187687657,\"cap\":64180226,\"spreadPerc\":0.2,\"shareTxForMovement\":69282,\"shareTxUntilMovement\":69282,\"totalShares\":105500000,\"maxShares\":21100000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":76472.99920614422,\"lastPrice\":76547.92431681974,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":14.095429516119447,\"otlkMagForecast\":65.00128544601996,\"cap\":473454372,\"spreadPerc\":0.9,\"shareTxForMovement\":35422,\"shareTxUntilMovement\":35422,\"totalShares\":56500000,\"maxShares\":11300000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":13364.41873158015,\"lastPrice\":13373.508718538185,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":9.036265380607885,\"otlkMagForecast\":42.79710085589741,\"cap\":376056538,\"spreadPerc\":0.3,\"shareTxForMovement\":100990,\"shareTxUntilMovement\":100990,\"totalShares\":49600000,\"maxShares\":9900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":10820.820150679172,\"lastPrice\":10814.865395226012,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":11.716735199290856,\"otlkMagForecast\":61.67323736374239,\"cap\":56511156,\"spreadPerc\":1,\"shareTxForMovement\":51820,\"shareTxUntilMovement\":51820,\"totalShares\":61600000,\"maxShares\":12300000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":16767.588953144295,\"lastPrice\":16760.12491516987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":8.351629925567318,\"otlkMagForecast\":40.60906958358862,\"cap\":13588143,\"spreadPerc\":0.7,\"shareTxForMovement\":62773,\"shareTxUntilMovement\":62773,\"totalShares\":70200000,\"maxShares\":14000000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":4205.014220438064,\"lastPrice\":4202.564137724116,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":8.482122575636309,\"otlkMagForecast\":42.2371480948329,\"cap\":121829383,\"spreadPerc\":0.8,\"shareTxForMovement\":54174,\"shareTxUntilMovement\":54174,\"totalShares\":109600000,\"maxShares\":21900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":31180.82102179086,\"lastPrice\":31198.49439652577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":7.75323782891468,\"otlkMagForecast\":57.14058578349189,\"cap\":464982953,\"spreadPerc\":0.3,\"shareTxForMovement\":103581,\"shareTxUntilMovement\":103581,\"totalShares\":38200000,\"maxShares\":7600000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":23751.361550870613,\"lastPrice\":23740.98085858832,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.54,\"b\":true,\"otlkMag\":10.551458090359175,\"otlkMagForecast\":60.532984820521854,\"cap\":339794516,\"spreadPerc\":0.6,\"shareTxForMovement\":57814,\"shareTxUntilMovement\":57814,\"totalShares\":40900000,\"maxShares\":8200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":14495.582747619048,\"lastPrice\":14502.038283042399,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":5.657636349877992,\"otlkMagForecast\":44.09863374953167,\"cap\":38987960,\"spreadPerc\":0.5,\"shareTxForMovement\":102591,\"shareTxUntilMovement\":102591,\"totalShares\":42000000,\"maxShares\":8400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7093.840607209677,\"lastPrice\":7097.631655017117,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":6.197846657856553,\"otlkMagForecast\":55.115072871600375,\"cap\":149606324,\"spreadPerc\":0.9,\"shareTxForMovement\":48743,\"shareTxUntilMovement\":48743,\"totalShares\":95300000,\"maxShares\":19100000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":25750.54348782101,\"lastPrice\":25733.873739135077,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":8.983897371008798,\"otlkMagForecast\":39.3654740060226,\"cap\":264511012,\"spreadPerc\":1.2,\"shareTxForMovement\":60181,\"shareTxUntilMovement\":60181,\"totalShares\":45800000,\"maxShares\":9200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":12390.9974316917,\"lastPrice\":12397.017361354685,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.934251442755354,\"otlkMagForecast\":40.32616543361367,\"cap\":308570537,\"spreadPerc\":0.8,\"shareTxForMovement\":92676,\"shareTxUntilMovement\":92676,\"totalShares\":26600000,\"maxShares\":5300000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":23210.221569895188,\"lastPrice\":23225.068623525032,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":5.531640664342848,\"otlkMagForecast\":44.510436097520014,\"cap\":543610352,\"spreadPerc\":1.1,\"shareTxForMovement\":46397,\"shareTxUntilMovement\":46397,\"totalShares\":25300000,\"maxShares\":5100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":37845.240548033544,\"lastPrice\":37922.4633775291,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":false,\"otlkMag\":6.787262387423376,\"otlkMagForecast\":40.59643896345004,\"cap\":64713223,\"spreadPerc\":1,\"shareTxForMovement\":34040,\"shareTxUntilMovement\":34040,\"totalShares\":54300000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5554.683315912594,\"lastPrice\":5548.797535249488,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":true,\"otlkMag\":6.6007021701613064,\"otlkMagForecast\":59.19708983488832,\"cap\":110251477,\"spreadPerc\":0.9,\"shareTxForMovement\":102814,\"shareTxUntilMovement\":102814,\"totalShares\":46400000,\"maxShares\":9300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2925.5584020593806,\"lastPrice\":2927.0271063424047,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":1.7744507238054787,\"otlkMagForecast\":53.12282543937937,\"cap\":49033673,\"spreadPerc\":0.4,\"shareTxForMovement\":97099,\"shareTxUntilMovement\":97099,\"totalShares\":53600000,\"maxShares\":10700000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":6559.787921965191,\"lastPrice\":6549.3937219385325,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.96,\"b\":false,\"otlkMag\":7.052882096384963,\"otlkMagForecast\":39.35220004509617,\"cap\":28077449,\"spreadPerc\":1.3,\"shareTxForMovement\":60351,\"shareTxUntilMovement\":60351,\"totalShares\":51300000,\"maxShares\":10300000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":10061.591611449903,\"lastPrice\":10048.816976798664,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.57,\"b\":true,\"otlkMag\":5.131943541763613,\"otlkMagForecast\":49.18578050292577,\"cap\":77937638,\"spreadPerc\":0.7,\"shareTxForMovement\":40922,\"shareTxUntilMovement\":40922,\"totalShares\":25400000,\"maxShares\":5100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":1994.4933520154152,\"lastPrice\":1993.0248045239234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":true,\"otlkMag\":5.122911770924409,\"otlkMagForecast\":54.90441009907584,\"cap\":21503023,\"spreadPerc\":0.6,\"shareTxForMovement\":77430,\"shareTxUntilMovement\":77430,\"totalShares\":104600000,\"maxShares\":20900000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":897.876910997169,\"lastPrice\":899.9998306369663,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.92,\"b\":true,\"otlkMag\":2.9398116351406656,\"otlkMagForecast\":57.049226388000505,\"cap\":23034706,\"spreadPerc\":1.6,\"shareTxForMovement\":28098,\"shareTxUntilMovement\":28098,\"totalShares\":51500000,\"maxShares\":10300000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4600.708655237853,\"lastPrice\":4604.471185532351,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":2.2714432594517366,\"otlkMagForecast\":46.899603602776004,\"cap\":84055303,\"spreadPerc\":0.7,\"shareTxForMovement\":82215,\"shareTxUntilMovement\":82215,\"totalShares\":10100000,\"maxShares\":2000000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2812.500108166319,\"lastPrice\":2810.679421546463,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":6.1628038787371775,\"otlkMagForecast\":54.17062180246214,\"cap\":24082495,\"spreadPerc\":0.6,\"shareTxForMovement\":172271,\"shareTxUntilMovement\":172271,\"totalShares\":12900000,\"maxShares\":2600000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":5471.865022317266,\"lastPrice\":5465.580698502562,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.42,\"b\":false,\"otlkMag\":5.010193642623405,\"otlkMagForecast\":49.61112939004189,\"cap\":57788887,\"spreadPerc\":1,\"shareTxForMovement\":27967,\"shareTxUntilMovement\":27967,\"totalShares\":10700000,\"maxShares\":2100000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":175.3758068118958,\"lastPrice\":175.86146385090964,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.42,\"b\":false,\"otlkMag\":8.264002272340775,\"otlkMagForecast\":42.152208122364414,\"cap\":1143528,\"spreadPerc\":1,\"shareTxForMovement\":39560,\"shareTxUntilMovement\":39560,\"totalShares\":82500000,\"maxShares\":16500000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":4514.967499438896,\"lastPrice\":4510.438790823311,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":13.242135420680786,\"otlkMagForecast\":63.31357992294719,\"cap\":766159,\"spreadPerc\":1.2,\"shareTxForMovement\":55887,\"shareTxUntilMovement\":55887,\"totalShares\":158700000,\"maxShares\":31700000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":43973.061272853534,\"lastPrice\":44001.54590318165,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.081311311803559,\"otlkMagForecast\":58.67391542606988,\"cap\":330299399,\"spreadPerc\":0.9,\"shareTxForMovement\":142753,\"shareTxUntilMovement\":142753,\"totalShares\":20400000,\"maxShares\":4100000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22807.81974300542,\"lastPrice\":22819.82388235394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":10.503074420746662,\"otlkMagForecast\":39.59987326074924,\"cap\":85016287,\"spreadPerc\":0.2,\"shareTxForMovement\":146129,\"shareTxUntilMovement\":146129,\"totalShares\":23900000,\"maxShares\":4800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":27,\"lastUpdate\":1709216227153,\"ticksUntilCycle\":22}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":500,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"37","AllGangsSave":"","LastExportBonus":"1709216232621","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}