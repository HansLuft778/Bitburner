{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":35,\"max\":35},\"skills\":{\"hacking\":416,\"strength\":253,\"defense\":253,\"dexterity\":254,\"agility\":264,\"charisma\":189,\"intelligence\":0},\"exp\":{\"hacking\":170817364.79060495,\"strength\":251173.55059177513,\"defense\":251173.55059177513,\"dexterity\":253964.5905917647,\"agility\":323614.87155161705,\"charisma\":52043.75321600763,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28128,\"hacking_speed\":1.28128,\"hacking_money\":1.28128,\"hacking_grow\":1.28128,\"hacking\":1.28128,\"hacking_exp\":1.28128,\"strength\":1.28128,\"strength_exp\":1.28128,\"defense\":1.28128,\"defense_exp\":1.28128,\"dexterity\":1.28128,\"dexterity_exp\":1.28128,\"agility\":1.28128,\"agility_exp\":1.28128,\"charisma\":1.28128,\"charisma_exp\":1.28128,\"hacknet_node_money\":1.4808785753239762,\"hacknet_node_purchase_cost\":0.78046875,\"hacknet_node_ram_cost\":0.78046875,\"hacknet_node_core_cost\":0.78046875,\"hacknet_node_level_cost\":0.78046875,\"company_rep\":1.28128,\"faction_rep\":1.28128,\"work_money\":1.28128,\"crime_success\":1.4102169296296798,\"crime_money\":1.28128,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Speech Enhancement\"}],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"Yoy.Kun\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"Lettuce begin\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Lettuce begin\",\"type\":\"Agriculture\",\"researchPoints\":8509.747161352341,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\"]},\"requiredMaterials\":{\"Water\":0.5,\"Chemicals\":0.2},\"producedMaterials\":[\"Plants\",\"Food\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":805.759310104374,\"popularity\":238.59402002983504,\"startingCost\":40000000000,\"realEstateFactor\":0.72,\"researchFactor\":0.5,\"hardwareFactor\":0.2,\"robotFactor\":0.3,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":1127.4661483667055,\"lastCycleRevenue\":204782207.30406538,\"lastCycleExpenses\":52918306.400270715,\"thisCycleRevenue\":2045658206.1881077,\"thisCycleExpenses\":528581794.0885518,\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":70.08778865072784,\"demandRange\":[65,85],\"competition\":54.89814336999399,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1649.95,\"actualSellAmount\":0,\"productionAmount\":-1649.95,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1720.561240265048,\"averagePrice\":1720.561240265048,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":97.9437787712371,\"demand\":86.5678522444276,\"demandRange\":[70,90],\"competition\":60.70938490851429,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3299.9,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":10752.164018536252,\"averagePrice\":10752.164018536252,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":10752.164018536252,\"maxSellPerCycle\":10491.804286058576,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":97.9437787712371,\"demand\":23.627019631540033,\"demandRange\":[20,90],\"competition\":54.166550749181255,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2177.159750585616,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"Sector-12\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"Sector-12\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":1122.740249414384,\"marketPrice\":2491.686959688243,\"averagePrice\":2491.686959688243,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2491.686959688243,\"maxSellPerCycle\":3340.3824567693086,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":12861,\"quality\":1,\"demand\":85.57025764426888,\"demandRange\":[80,90],\"competition\":85.95964132680969,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8708.356738145516,\"averagePrice\":8586.813920934334,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":4173.174576977045,\"quality\":804.5397170000268,\"demand\":48.88197222435515,\"demandRange\":[40,70],\"competition\":63.771945361503406,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":242.0347496325585,\"actualSellAmount\":0,\"productionAmount\":-659.98,\"importAmount\":417.3174576977045,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8163.763665669153,\"averagePrice\":8163.763665669153,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1905,\"quality\":1,\"demand\":88.66698966227473,\"demandRange\":[80,99],\"competition\":83.59404298538401,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":37687.578631941375,\"averagePrice\":47411.33019143986,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":11525,\"quality\":1,\"demand\":96.07360732163548,\"demandRange\":[80,99],\"competition\":92.99607049350163,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":21799.316293216572,\"averagePrice\":23527.91156713134,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":14648.155320954058,\"maxSellPerCycle\":6.2445854568365995,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":576684,\"quality\":1,\"demand\":32.54988178706535,\"demandRange\":[5,99],\"competition\":51.93371860031963,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":414871.8908024022,\"averagePrice\":242100.05527526856,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":87543.50140314754,\"maxSellPerCycle\":52.745668291135964,\"name\":\"Real Estate\"}}},\"size\":8400.000000000005,\"sizeUsed\":5968.738728848853,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3299.9}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":83.72287054626776,\"demandRange\":[65,85],\"competition\":52.972392957768,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1649.95,\"actualSellAmount\":0,\"productionAmount\":-1649.95,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1764.8752381244271,\"averagePrice\":1764.8752381244271,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.33844410544928,\"demand\":83.12662193773104,\"demandRange\":[70,90],\"competition\":55.273884972024284,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3299.9,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7784.00658759841,\"averagePrice\":7784.00658759841,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":7784.00658759841,\"maxSellPerCycle\":11620.865056842507,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.33844410544928,\"demand\":81.1195929192602,\"demandRange\":[20,90],\"competition\":53.344697388309235,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2843.563207152161,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"Aevum\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"Aevum\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":456.3367928478392,\"marketPrice\":6561.970750322616,\"averagePrice\":6561.970750322616,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":6561.970750322616,\"maxSellPerCycle\":11829.432835090163,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":12861,\"quality\":1,\"demand\":87.1804366552637,\"demandRange\":[80,90],\"competition\":93.92207509375547,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13965.91725586491,\"averagePrice\":11561.713597872711,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":2631.773125048099,\"quality\":804.6956768994983,\"demand\":42.638617166030265,\"demandRange\":[40,70],\"competition\":64.59746235570155,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":396.8030280851002,\"actualSellAmount\":0,\"productionAmount\":-659.98,\"importAmount\":263.1773125048099,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1573.027751356808,\"averagePrice\":1573.027751356808,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1905,\"quality\":1,\"demand\":82.51883719147959,\"demandRange\":[80,99],\"competition\":85.54943824405413,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":86032.57292855655,\"averagePrice\":87673.7529741862,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":11525,\"quality\":1,\"demand\":89.77532579600367,\"demandRange\":[80,99],\"competition\":80.65887576897345,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12007.624703097625,\"averagePrice\":12949.249826155534,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":15317.621468465983,\"maxSellPerCycle\":26.375536026620335,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":576684,\"quality\":1,\"demand\":12.162525114560358,\"demandRange\":[5,99],\"competition\":39.129808053968304,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":17656.742167082764,\"averagePrice\":54154.78614045964,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":8400.000000000005,\"sizeUsed\":5891.668656252405,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3299.9}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":65.94966567766046,\"demandRange\":[65,85],\"competition\":47.752008220713805,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1649.95,\"actualSellAmount\":0,\"productionAmount\":-1649.95,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1488.954077868113,\"averagePrice\":1488.954077868113,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":97.95530450017236,\"demand\":75.62091183104042,\"demandRange\":[70,90],\"competition\":57.72088551431523,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3299.9,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2849.987241703808,\"averagePrice\":2849.987241703808,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2849.987241703808,\"maxSellPerCycle\":9820.967191487622,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":97.95530450017236,\"demand\":56.76966663895396,\"demandRange\":[20,90],\"competition\":46.81662908513689,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2845.8155987485156,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"Chongqing\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"Chongqing\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":454.0844012514846,\"marketPrice\":4055.576567618905,\"averagePrice\":4055.576567618905,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4055.576567618905,\"maxSellPerCycle\":9274.247304593391,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":12861,\"quality\":1,\"demand\":89.298877278653,\"demandRange\":[80,90],\"competition\":93.38850697981847,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12385.555793723051,\"averagePrice\":10334.504555940439,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":2604.3458575263903,\"quality\":804.4974019189488,\"demand\":69.32033453397948,\"demandRange\":[40,70],\"competition\":71.176103064199,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":399.54576155226533,\"actualSellAmount\":0,\"productionAmount\":-659.98,\"importAmount\":260.434585752639,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":45343.500903201,\"averagePrice\":45343.500903201,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1905,\"quality\":1,\"demand\":97.02713387853846,\"demandRange\":[80,99],\"competition\":94.6962837878032,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":99314.86968390168,\"averagePrice\":83080.48029343628,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":11525,\"quality\":1,\"demand\":83.3016064714812,\"demandRange\":[80,99],\"competition\":94.35021359546808,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":15343.809539802076,\"averagePrice\":14353.786065017846,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":13249.765579240478,\"maxSellPerCycle\":16.545957180091964,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":576684,\"quality\":1,\"demand\":85.09873711706817,\"demandRange\":[5,99],\"competition\":25.31758493858918,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":459837.2314003764,\"averagePrice\":209653.25859225215,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":8400.000000000005,\"sizeUsed\":5890.297292876319,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3299.9}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":65.77125674544477,\"demandRange\":[65,85],\"competition\":40.72828993453778,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1649.95,\"actualSellAmount\":0,\"productionAmount\":-1649.95,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1686.7830036353116,\"averagePrice\":1686.7830036353116,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.52009230923939,\"demand\":87.71889327164291,\"demandRange\":[70,90],\"competition\":66.73983127087067,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3299.9,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9583.35535004524,\"averagePrice\":9583.35535004524,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":9583.35535004524,\"maxSellPerCycle\":9048.889290461364,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.637978807091713e-12,\"quality\":98.52009230923939,\"demand\":39.17974413166003,\"demandRange\":[20,90],\"competition\":52.26814209323758,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2846.4998800821713,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"New Tokyo\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"New Tokyo\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":453.4001199178286,\"marketPrice\":2998.1328791307865,\"averagePrice\":2998.1328791307865,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2998.1328791307865,\"maxSellPerCycle\":5800.262085610088,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":12861,\"quality\":1,\"demand\":80,\"demandRange\":[80,90],\"competition\":82.76688918973191,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12318.446837751937,\"averagePrice\":11354.02894529456,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":2623.131729859888,\"quality\":804.7859266733404,\"demand\":51.595963829462534,\"demandRange\":[40,70],\"competition\":51.17487661953882,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":397.66716895112876,\"actualSellAmount\":0,\"productionAmount\":-659.98,\"importAmount\":262.3131729859888,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":17496.678328991988,\"averagePrice\":17496.678328991988,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1905,\"quality\":1,\"demand\":84.94549327825278,\"demandRange\":[80,99],\"competition\":87.25455356553857,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67808.709756311,\"averagePrice\":73071.86449254851,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":11525,\"quality\":1,\"demand\":97.00463233098803,\"demandRange\":[80,99],\"competition\":88.44082759764247,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":50900.815439010825,\"averagePrice\":27063.504723026177,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":16839.62760232898,\"maxSellPerCycle\":24.66108961345483,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":576684,\"quality\":1,\"demand\":18.703011932905696,\"demandRange\":[5,99],\"competition\":42.341292073287455,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":32344.884707933277,\"averagePrice\":69115.39071124763,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":8400.000000000005,\"sizeUsed\":5891.236586492994,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3299.9}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":22,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":65.48052118204633,\"demandRange\":[65,85],\"competition\":43.838416435725485,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1700.05,\"actualSellAmount\":0,\"productionAmount\":-1700.05,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1413.3780193760201,\"averagePrice\":1413.3780193760201,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.42642213957643,\"demand\":76.29887112878664,\"demandRange\":[70,90],\"competition\":43.52090731439193,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3400.1,\"productionAmount\":3400.1,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6589.89113319819,\"averagePrice\":6589.89113319819,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":6589.89113319819,\"maxSellPerCycle\":13571.65508993236,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.42642213957643,\"demand\":38.67466589975316,\"demandRange\":[20,90],\"competition\":48.2142024787753,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2946.8657956442366,\"productionAmount\":3400.1,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"Ishima\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"Ishima\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":453.2342043557634,\"marketPrice\":4268.228827006172,\"averagePrice\":4268.228827006172,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4268.228827006172,\"maxSellPerCycle\":6307.601238032352,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":13563,\"quality\":1,\"demand\":80.03196905611051,\"demandRange\":[80,90],\"competition\":87.15042358750082,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6199.384270357021,\"averagePrice\":7361.735286707703,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":2597.1006959260103,\"quality\":804.7069001641718,\"demand\":69.07275678036308,\"demandRange\":[40,70],\"competition\":78.70070649316801,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":420.31027803567196,\"actualSellAmount\":0,\"productionAmount\":-680.0200000000001,\"importAmount\":259.71006959260103,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6964.304056426492,\"averagePrice\":6964.304056426493,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":2031,\"quality\":1,\"demand\":91.37326794624938,\"demandRange\":[80,99],\"competition\":80,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":44009.25891946663,\"averagePrice\":55799.74439893378,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":12156,\"quality\":1,\"demand\":87.98805588518769,\"demandRange\":[80,99],\"competition\":91.9985696323757,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8829.228012276613,\"averagePrice\":12022.840935316752,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":16431.51023597351,\"maxSellPerCycle\":8.778661676319716,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":607000,\"quality\":1,\"demand\":83.62972848255635,\"demandRange\":[5,99],\"competition\":33.06905432800124,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":46726.607450500676,\"averagePrice\":30198.47116953293,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":8800.000000000005,\"sizeUsed\":6209.7350347963,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3400.1}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":21,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.5030115544058,\"demandRange\":[65,85],\"competition\":42.56759961356791,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1649.95,\"actualSellAmount\":0,\"productionAmount\":-1649.95,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1778.740471539103,\"averagePrice\":1778.740471539103,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.32595342926923,\"demand\":84.31689177451904,\"demandRange\":[70,90],\"competition\":52.76346408003961,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":3299.9,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3051.95078323308,\"averagePrice\":3051.95078323308,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP-10\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3041.95078323308,\"maxSellPerCycle\":12415.413388347799,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":98.32595342926923,\"demand\":39.4282637412206,\"demandRange\":[20,90],\"competition\":55.590840591901646,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":2847.247102909709,\"productionAmount\":3299.9,\"importAmount\":0,\"exports\":[{\"division\":\"Tobacco\",\"city\":\"Volhaven\",\"amount\":\"(IPROD+IINV/10)*(-1)\"},{\"division\":\"BASF\",\"city\":\"Volhaven\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":452.6528970902908,\"marketPrice\":4631.637746892082,\"averagePrice\":4631.637746892082,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4631.637746892082,\"maxSellPerCycle\":5440.3071261608475,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":12861,\"quality\":1,\"demand\":85.80772660337108,\"demandRange\":[80,90],\"competition\":76.10242445836496,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":23742.013913694347,\"averagePrice\":13912.227115380409,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":2623.2449557620525,\"quality\":804.6698499252755,\"demand\":40.69058862718267,\"demandRange\":[40,70],\"competition\":79.64755597499686,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":397.6558473461384,\"actualSellAmount\":0,\"productionAmount\":-659.98,\"importAmount\":262.32449557620527,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14790.734034821164,\"averagePrice\":14790.734034821166,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":1905,\"quality\":1,\"demand\":96.35754764642385,\"demandRange\":[80,99],\"competition\":90.66189353468421,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":70790.1891703343,\"averagePrice\":73243.66849301128,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":11525,\"quality\":1,\"demand\":94.2674241943473,\"demandRange\":[80,99],\"competition\":81.36185235877569,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":10750.566704595672,\"averagePrice\":15733.371413804256,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":15177.338353241214,\"maxSellPerCycle\":12.5991024416263,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":576684,\"quality\":1,\"demand\":76.87706486583865,\"demandRange\":[5,99],\"competition\":29.884876630626923,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":37282.36849378457,\"averagePrice\":41414.78033424597,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":8400.000000000005,\"sizeUsed\":5891.242247788103,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":3299.9}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.39846364443842,\"avgMorale\":99.39958049992943,\"avgIntelligence\":67.91666666666667,\"avgCharisma\":77.5,\"avgCreativity\":76.41666666666667,\"avgEfficiency\":73.5,\"totalExperience\":1510.41200000104,\"numEmployees\":12,\"totalSalary\":15163.236000003122,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":5779.558045516855,\"Operations\":1439.8271450688487,\"Engineer\":514.8486773753111,\"Business\":847.2750820749026,\"Management\":1140.123684129171,\"Research & Development\":1837.4834568686208,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.1997662176723,\"avgMorale\":99.79843146844574,\"avgIntelligence\":78.5,\"avgCharisma\":75.83333333333333,\"avgCreativity\":76,\"avgEfficiency\":74.75,\"totalExperience\":1558.9430000010136,\"numEmployees\":12,\"totalSalary\":15659.82900000304,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":6043.039789296167,\"Operations\":1506.7630114664896,\"Engineer\":550.2256441811237,\"Business\":876.5125202983374,\"Management\":1140.2704147252753,\"Research & Development\":1969.2681986249415,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":98.99876842015958,\"avgMorale\":98.99749761502405,\"avgIntelligence\":66.25,\"avgCharisma\":77.66666666666667,\"avgCreativity\":69.75,\"avgEfficiency\":79.41666666666667,\"totalExperience\":1488.8380000010134,\"numEmployees\":12,\"totalSalary\":15017.51400000304,\"autoTea\":false,\"autoParty\":false,\"teaPending\":true,\"partyMult\":1.02,\"employeeProductionByJob\":{\"total\":5682.398545681714,\"Operations\":1425.9887743633635,\"Engineer\":515.6076503247137,\"Business\":833.8912878265148,\"Management\":1138.4310930421852,\"Research & Development\":1768.4797401249361,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":99.79906974237731,\"avgIntelligence\":82.5,\"avgCharisma\":68.16666666666667,\"avgCreativity\":75.16666666666667,\"avgEfficiency\":78.16666666666667,\"totalExperience\":1529.7360000010133,\"numEmployees\":12,\"totalSalary\":15533.208000003042,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":6075.023397118237,\"Operations\":1542.3537052501003,\"Engineer\":566.293520738522,\"Business\":846.0136800481155,\"Management\":1092.1238413134788,\"Research & Development\":2028.2386497680202,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.39844428966876,\"avgMorale\":99.39669012768995,\"avgIntelligence\":82.66666666666667,\"avgCharisma\":77.5,\"avgCreativity\":75.33333333333333,\"avgEfficiency\":73,\"totalExperience\":1570.6475000010132,\"numEmployees\":12,\"totalSalary\":15817.942500003039,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":6120.709706636124,\"Operations\":1513.2629959877672,\"Engineer\":557.7166538203592,\"Business\":898.4077238493512,\"Management\":1147.5554615071128,\"Research & Development\":2003.766871471533,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":12,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":98.9997271598234,\"avgMorale\":99.19881635806439,\"avgIntelligence\":77.91666666666667,\"avgCharisma\":73.66666666666667,\"avgCreativity\":73.66666666666667,\"avgEfficiency\":75.66666666666667,\"totalExperience\":1581.553000001013,\"numEmployees\":12,\"totalSalary\":15577.659000003041,\"autoTea\":false,\"autoParty\":false,\"teaPending\":true,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":5954.55011766609,\"Operations\":1493.1946164899762,\"Engineer\":548.5351413857751,\"Business\":857.7794072002526,\"Management\":1118.041229229816,\"Research & Development\":1936.9997233602705,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":3,\"Management\":2,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":34}}],[\"BASF\",{\"ctor\":\"Division\",\"data\":{\"name\":\"BASF\",\"type\":\"Chemical\",\"researchPoints\":7420.187615963812,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Plants\":1,\"Water\":0.5},\"producedMaterials\":[\"Chemicals\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":130.75999999997595,\"popularity\":31.055599999996442,\"startingCost\":70000000000,\"realEstateFactor\":0.25,\"researchFactor\":0.75,\"hardwareFactor\":0.2,\"robotFactor\":0.25,\"aiCoreFactor\":0.2,\"advertisingFactor\":0.07,\"productionMult\":115.55663708949712,\"lastCycleRevenue\":0,\"lastCycleExpenses\":1285200.1393716165,\"thisCycleRevenue\":0,\"thisCycleExpenses\":12855966.591660988,\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":3.138963348685138,\"quality\":1,\"demand\":78.77166634789373,\"demandRange\":[65,85],\"competition\":59.31170895477519,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":208.65840090496232,\"actualSellAmount\":0,\"productionAmount\":-208.65872884885226,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1360.7968122141692,\"averagePrice\":1360.7941503039624,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":4173.174576977046,\"quality\":97.94375670805994,\"demand\":49.85732946324645,\"demandRange\":[20,90],\"competition\":39.891561287344324,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-417.3174576977045,\"importAmount\":416.6896650279676,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2359.3828962754174,\"averagePrice\":2359.3828962754174,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":6175336502730.451,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":89.1327688368163,\"demandRange\":[80,90],\"competition\":76.61554076799338,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8905.050055596606,\"averagePrice\":7985.539390180141,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.5397170000268,\"demand\":53.91536548257351,\"demandRange\":[40,70],\"competition\":57.410417693306776,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":417.3174576977045,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"Sector-12\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":417.3174576977045,\"marketPrice\":14542.195536959156,\"averagePrice\":14542.195536959156,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":14542.195536959156,\"maxSellPerCycle\":38617.970708461224,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":80.16700211478316,\"demandRange\":[80,99],\"competition\":99,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":59896.329336217284,\"averagePrice\":63644.34756786719,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":84.88166796888156,\"demandRange\":[80,99],\"competition\":97.64459048339322,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":19332.61532912826,\"averagePrice\":22009.926262449735,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":50.17504702769878,\"demandRange\":[5,99],\"competition\":41.54531139249227,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":35210.41600542974,\"averagePrice\":36100.93475004151,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10768.690677016286,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":417.3174576977045}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":76.94494118014619,\"demandRange\":[65,85],\"competition\":47.36902254048476,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":131.58865625240495,\"actualSellAmount\":0,\"productionAmount\":-131.58865625240495,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1569.0468727777952,\"averagePrice\":1569.0468727777952,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":2631.773125048099,\"quality\":98.33844410544928,\"demand\":69.34816183278076,\"demandRange\":[20,90],\"competition\":59.866495013034786,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.0003405899100926035,\"actualSellAmount\":0,\"productionAmount\":-263.1773125048099,\"importAmount\":263.1773125048099,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4194.555426620351,\"averagePrice\":4194.555426620351,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":90,\"demandRange\":[80,90],\"competition\":67.52146564988952,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":7336.39228595419,\"averagePrice\":6841.930284897432,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.6956768994983,\"demand\":67.23150075294097,\"demandRange\":[40,70],\"competition\":40.477639683585494,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":263.1773125048099,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"Aevum\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":263.1773125048099,\"marketPrice\":9379.498804451858,\"averagePrice\":9379.498804451858,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":9379.498804451858,\"maxSellPerCycle\":68300.7273103403,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":96.88625526685728,\"demandRange\":[80,99],\"competition\":94.46658434525497,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":50902.13366369028,\"averagePrice\":50177.030920362144,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":81.24733963797222,\"demandRange\":[80,99],\"competition\":91.00046367090768,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6421.665254496598,\"averagePrice\":7420.717124323077,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":52.58666561785877,\"demandRange\":[5,99],\"competition\":73.78230923881861,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":228977.1630498658,\"averagePrice\":190104.41837347313,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10691.463656252405,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":263.1776530939159}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":73.02166221044374,\"demandRange\":[65,85],\"competition\":51.55415399829785,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":130.2172928763195,\"actualSellAmount\":0,\"productionAmount\":-130.2172928763195,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1269.9093233369692,\"averagePrice\":1269.9093233369692,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":2604.3458575263903,\"quality\":97.95530450017236,\"demand\":72.39287710214188,\"demandRange\":[20,90],\"competition\":35.77917377591878,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.0003473049043350329,\"actualSellAmount\":0,\"productionAmount\":-260.434585752639,\"importAmount\":260.434585752639,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3648.70210013529,\"averagePrice\":3648.70210013529,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":84.85489077222091,\"demandRange\":[80,90],\"competition\":88.70329094863745,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6333.510642786063,\"averagePrice\":6252.405667171301,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.4974019189488,\"demand\":69.14773674260898,\"demandRange\":[40,70],\"competition\":56.75880154419206,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":260.434585752639,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"Chongqing\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":260.434585752639,\"marketPrice\":9243.404849813114,\"averagePrice\":9243.404849813114,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":9243.404849813114,\"maxSellPerCycle\":49939.942078514774,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":91.96547634052351,\"demandRange\":[80,99],\"competition\":92.63760725785441,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72865.84023868013,\"averagePrice\":74634.1411964153,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":93.37712539710947,\"demandRange\":[80,99],\"competition\":85.11725352137775,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":12393.886955833295,\"averagePrice\":11471.385867245972,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":5.483914537710589,\"demandRange\":[5,99],\"competition\":63.11664804939738,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":32626.229460745806,\"averagePrice\":40418.42745555911,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10690.09229287632,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":260.43493305669523}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.48136955961517,\"demandRange\":[65,85],\"competition\":56.89599068936686,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":131.1565864929944,\"actualSellAmount\":0,\"productionAmount\":-131.1565864929944,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1605.7405231300763,\"averagePrice\":1605.740523130076,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":2623.131729859888,\"quality\":98.52009230923939,\"demand\":57.314990996980804,\"demandRange\":[20,90],\"competition\":50.618950815839305,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.0003419371175368724,\"actualSellAmount\":0,\"productionAmount\":-262.3131729859888,\"importAmount\":262.3131729859888,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2452.866059163999,\"averagePrice\":2452.866059163999,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":81.02889647448336,\"demandRange\":[80,90],\"competition\":90.95965625512503,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6117.291076950434,\"averagePrice\":6277.6460398067475,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.7859266733404,\"demand\":48.98785157825673,\"demandRange\":[40,70],\"competition\":43.824136788294666,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":262.3131729859888,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"New Tokyo\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":262.3131729859888,\"marketPrice\":3298.1980276743893,\"averagePrice\":3298.1980276743893,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3298.1980276743893,\"maxSellPerCycle\":46542.8006312848,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":96.83701776653184,\"demandRange\":[80,99],\"competition\":91.7122972658903,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":67301.45161082572,\"averagePrice\":65527.570608401984,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":86.61786846793967,\"demandRange\":[80,99],\"competition\":96.93523850990455,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14432.974693375356,\"averagePrice\":13897.180718715317,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":96.33223168558393,\"demandRange\":[5,99],\"competition\":39.811286953399296,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":101155.31515929896,\"averagePrice\":92456.44553570345,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10691.031586492994,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":262.31351492229726}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80.53734686097944,\"demandRange\":[65,85],\"competition\":58.701657257883,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":129.85503479630052,\"actualSellAmount\":0,\"productionAmount\":-129.85503479630052,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1554.2151865752257,\"averagePrice\":1554.2151865752257,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":2597.1006959260103,\"quality\":98.42642213957643,\"demand\":44.242897069994044,\"demandRange\":[20,90],\"competition\":60.574050064349706,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.00034762827294798626,\"actualSellAmount\":0,\"productionAmount\":-259.71006959260103,\"importAmount\":259.71006959260103,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2855.9392034120806,\"averagePrice\":2855.9392034120806,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":81.22514138080862,\"demandRange\":[80,90],\"competition\":76.46201598448009,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8489.21252532942,\"averagePrice\":8040.293788409509,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.7069001641718,\"demand\":42.684147716243515,\"demandRange\":[40,70],\"competition\":44.43456400768491,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":259.71006959260103,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"Ishima\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":259.71006959260103,\"marketPrice\":30035.92332440364,\"averagePrice\":30035.923324403637,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":30035.92332440364,\"maxSellPerCycle\":40312.66647064142,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":95.40697793727585,\"demandRange\":[80,99],\"competition\":93.21523234501309,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":140450.9615540131,\"averagePrice\":141178.15154272513,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":81.91948420739314,\"demandRange\":[80,99],\"competition\":85.71884621328604,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13288.591906234773,\"averagePrice\":14332.714475213976,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":8.194574002518927,\"demandRange\":[5,99],\"competition\":27.9945004710694,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":130249.05224990715,\"averagePrice\":116175.5061322199,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10689.730034796301,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":259.71041722003145}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":33,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":68.72831959182159,\"demandRange\":[65,85],\"competition\":55.251755672998165,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":131.16224778810263,\"actualSellAmount\":0,\"productionAmount\":-131.16224778810263,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1478.3873162187103,\"averagePrice\":1478.3873162187103,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":2623.2449557620525,\"quality\":98.32595342926923,\"demand\":31.03090729075865,\"demandRange\":[20,90],\"competition\":30.099107702257044,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.00034292234363419993,\"actualSellAmount\":0,\"productionAmount\":-262.32449557620527,\"importAmount\":262.32449557620527,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2767.2434536307524,\"averagePrice\":2767.2434536307524,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":39843,\"quality\":1,\"demand\":88.84156712399717,\"demandRange\":[80,90],\"competition\":69.06414593452011,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9600.374440436166,\"averagePrice\":8914.99293891297,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":804.6698499252755,\"demand\":44.76778970335174,\"demandRange\":[40,70],\"competition\":72.21871560627469,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":262.32449557620527,\"importAmount\":0,\"exports\":[{\"division\":\"Lettuce begin\",\"city\":\"Volhaven\",\"amount\":\"(IPROD+IINV/10)*(-1)\"}],\"exportedLastCycle\":262.32449557620527,\"marketPrice\":11120.931978052131,\"averagePrice\":11120.931978052131,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":11120.931978052131,\"maxSellPerCycle\":20545.924140848103,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5551,\"quality\":1,\"demand\":93.31257267879333,\"demandRange\":[80,99],\"competition\":95.41707535571966,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":72807.51787546648,\"averagePrice\":71764.19214678918,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":23706,\"quality\":1,\"demand\":89.23129992403501,\"demandRange\":[80,99],\"competition\":91.95888970737134,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14632.73902307698,\"averagePrice\":14073.8066240743,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":604639,\"quality\":1,\"demand\":20.010184948437765,\"demandRange\":[5,99],\"competition\":51.244240569336185,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77462.9726669525,\"averagePrice\":78227.40610319813,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":13200.00000000001,\"sizeUsed\":10691.037247788103,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":262.32483849772836}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":9,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":98.99752093877935,\"avgMorale\":99.19892444142621,\"avgIntelligence\":70.55555555555556,\"avgCharisma\":72.88888888888889,\"avgCreativity\":79.33333333333333,\"avgEfficiency\":64.88888888888889,\"totalExperience\":1048.976000000606,\"numEmployees\":9,\"totalSalary\":10913.928000001817,\"autoTea\":false,\"autoParty\":false,\"teaPending\":true,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":4487.622485934707,\"Operations\":1372.6288394487947,\"Engineer\":486.67563163511835,\"Business\":269.67909329758226,\"Management\":528.9485121397004,\"Research & Development\":1829.6904094135107,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":75,\"avgCharisma\":77,\"avgCreativity\":86.16666666666667,\"avgEfficiency\":64,\"totalExperience\":671.5380000003097,\"numEmployees\":6,\"totalSalary\":7453.614000000929,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":3209.8925333336133,\"Operations\":475.53133333338513,\"Engineer\":498.78450000007757,\"Business\":284.9615000000259,\"Management\":0,\"Research & Development\":1950.6152000001248,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":62.333333333333336,\"avgCharisma\":73.33333333333333,\"avgCreativity\":81,\"avgEfficiency\":73.66666666666667,\"totalExperience\":645.0445000002992,\"numEmployees\":6,\"totalSalary\":7161.133500000898,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":2993.8733833336037,\"Operations\":464.2574166667167,\"Engineer\":479.0944583334083,\"Business\":262.75370833335836,\"Management\":0,\"Research & Development\":1787.7678000001206,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":77.5,\"avgCharisma\":72,\"avgCreativity\":76.66666666666667,\"avgEfficiency\":67,\"totalExperience\":644.0265000002992,\"numEmployees\":6,\"totalSalary\":7209.079500000898,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":3151.6321833336037,\"Operations\":467.82108333338334,\"Engineer\":503.15662500007494,\"Business\":275.168875000025,\"Management\":0,\"Research & Development\":1905.4856000001205,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74,\"avgCharisma\":78.5,\"avgCreativity\":66.16666666666667,\"avgEfficiency\":72.5,\"totalExperience\":594.0040000002991,\"numEmployees\":6,\"totalSalary\":7023.012000000898,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":3011.961933333604,\"Operations\":453.40900000005,\"Engineer\":494.20100000007494,\"Business\":280.50033333335836,\"Management\":0,\"Research & Development\":1783.8516000001205,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":66.16666666666667,\"avgCharisma\":64.5,\"avgCreativity\":85.83333333333333,\"avgEfficiency\":70.33333333333333,\"totalExperience\":679.9815000002991,\"numEmployees\":6,\"totalSalary\":7202.944500000896,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":3085.3666833336038,\"Operations\":473.43858333338335,\"Engineer\":488.97870833340824,\"Business\":251.8317916666917,\"Management\":0,\"Research & Development\":1871.1176000001205,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":0,\"Research & Development\":3,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":0}}],[\"Tobacco\",{\"ctor\":\"Division\",\"data\":{\"name\":\"Tobacco\",\"type\":\"Tobacco\",\"researchPoints\":17312.55520031742,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[\"Hi-Tech R&D Laboratory\",\"Market-TA.I\",\"Market-TA.II\"]},\"requiredMaterials\":{\"Plants\":1},\"producedMaterials\":[],\"products\":{\"ctor\":\"JSONMap\",\"data\":[[\"gorg9\",{\"ctor\":\"Product\",\"data\":{\"name\":\"gorg9\",\"demand\":36.05919201763601,\"competition\":63.82799999999108,\"markup\":0.48698872957151157,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":60000000000,\"advertisingInvestment\":60000000000,\"creationJobFactors\":{\"Operations\":11363.440990400277,\"Engineer\":14352.909965929197,\"Business\":2551.10277000097,\"Management\":12301.485734910251,\"Research & Development\":3796.7415376354206,\"total\":44365.68099887609,\"Intern\":null,\"Unassigned\":null},\"rating\":14863.076127023503,\"stats\":{\"quality\":16342.337713034893,\"performance\":17865.282082061116,\"durability\":12738.698115708932,\"reliability\":13752.467185871508,\"aesthetics\":10747.849581640932,\"features\":16449.24853764875},\"cityData\":{\"Aevum\":{\"stored\":1.1368683772161603e-13,\"productionAmount\":64.48092498745903,\"actualSellAmount\":64.48092498745903,\"effectiveRating\":12109.164838317593,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":12747.827929328176},\"Chongqing\":{\"stored\":0,\"productionAmount\":64.64468280382452,\"actualSellAmount\":64.64468280382452,\"effectiveRating\":12027.628410956331,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":15983.107579697215},\"Sector-12\":{\"stored\":4.547473508864641e-13,\"productionAmount\":235.7027371575346,\"actualSellAmount\":235.70273715753456,\"effectiveRating\":12060.86522585382,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":16247.433039817242},\"New Tokyo\":{\"stored\":0,\"productionAmount\":63.78902664338358,\"actualSellAmount\":63.78902664338359,\"effectiveRating\":12087.32472804832,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":10406.9028739002},\"Ishima\":{\"stored\":0,\"productionAmount\":64.60278345182924,\"actualSellAmount\":64.60278345182924,\"effectiveRating\":12119.946243484665,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":13598.287842185604},\"Volhaven\":{\"stored\":0,\"productionAmount\":63.90963685617068,\"actualSellAmount\":63.90963685617068,\"effectiveRating\":12107.642834801547,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"productionCost\":12994.601588973725}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":868468.24355321,\"Chongqing\":868475.6577537679,\"Sector-12\":747243.8308472912,\"New Tokyo\":870470.7033615384,\"Ishima\":879330.2231087725,\"Volhaven\":876301.5183516766},\"maxSellAmount\":63.90963685617068}}],[\"gorg10\",{\"ctor\":\"Product\",\"data\":{\"name\":\"gorg10\",\"demand\":42.67070328229969,\"competition\":65.20079999999487,\"markup\":0.49515584721480455,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":50000000000,\"advertisingInvestment\":50000000000,\"creationJobFactors\":{\"Operations\":11525.360448664482,\"Engineer\":14625.956223807472,\"Business\":2582.3139760674794,\"Management\":12447.216954965848,\"Research & Development\":3833.5226806637083,\"total\":45014.37028416898,\"Intern\":null,\"Unassigned\":null},\"rating\":14580.864900504172,\"stats\":{\"quality\":16042.742625169816,\"performance\":17565.492458305445,\"durability\":12491.110346440773,\"reliability\":13466.121598584086,\"aesthetics\":10509.170141206114,\"features\":16141.210464069274},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":64.48092498745903,\"actualSellAmount\":64.48092498745903,\"effectiveRating\":11993.653092920702,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":12747.827929328176},\"Chongqing\":{\"stored\":2.2737367544323206e-13,\"productionAmount\":64.64468280382452,\"actualSellAmount\":64.64468280382451,\"effectiveRating\":11912.894457848479,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":15983.107579697215},\"Sector-12\":{\"stored\":0,\"productionAmount\":235.7027371575346,\"actualSellAmount\":235.7027371575346,\"effectiveRating\":11945.814220120828,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":16247.433039817242},\"New Tokyo\":{\"stored\":0,\"productionAmount\":63.78902664338358,\"actualSellAmount\":63.78902664338359,\"effectiveRating\":11972.021319831616,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":10406.9028739002},\"Ishima\":{\"stored\":0,\"productionAmount\":64.60278345182924,\"actualSellAmount\":64.60278345182924,\"effectiveRating\":12004.331652107454,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":13598.287842185604},\"Volhaven\":{\"stored\":0,\"productionAmount\":63.90963685617068,\"actualSellAmount\":63.90963685617068,\"effectiveRating\":11992.145608100618,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":12994.601588973725}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":899390.394568167,\"Chongqing\":899281.167233625,\"Sector-12\":773658.9783553851,\"New Tokyo\":901549.8061100532,\"Ishima\":910614.1485031048,\"Volhaven\":907497.8137362276},\"maxSellAmount\":63.90963685617068}}],[\"gorg11\",{\"ctor\":\"Product\",\"data\":{\"name\":\"gorg11\",\"demand\":44.00326567697026,\"competition\":69.93119999999783,\"markup\":0.4397659785252126,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":70000000000,\"advertisingInvestment\":70000000000,\"creationJobFactors\":{\"Operations\":11644.203411953129,\"Engineer\":14828.046221607128,\"Business\":2605.095554628873,\"Management\":12553.452075364705,\"Research & Development\":3860.0930963118976,\"total\":45490.89035986573,\"Intern\":null,\"Unassigned\":null},\"rating\":17448.450796321624,\"stats\":{\"quality\":19207.30114915772,\"performance\":21054.934795391317,\"durability\":14942.655156580704,\"reliability\":16092.161800506363,\"aesthetics\":12545.372381265757,\"features\":19319.461394746762},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":64.48092498745903,\"actualSellAmount\":64.48092498745905,\"effectiveRating\":13120.134179830016,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":12747.827929328176},\"Chongqing\":{\"stored\":0,\"productionAmount\":64.64468280382452,\"actualSellAmount\":64.64468280382452,\"effectiveRating\":13031.790443345515,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":15983.107579697215},\"Sector-12\":{\"stored\":4.547473508864641e-13,\"productionAmount\":235.7027371575346,\"actualSellAmount\":235.70273715753456,\"effectiveRating\":13067.802131763972,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":16247.433039817242},\"New Tokyo\":{\"stored\":1.1368683772161603e-13,\"productionAmount\":63.78902664338358,\"actualSellAmount\":63.789026643383565,\"effectiveRating\":13096.4706835393,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":10406.9028739002},\"Ishima\":{\"stored\":0,\"productionAmount\":64.60278345182924,\"actualSellAmount\":64.60278345182924,\"effectiveRating\":13131.81570240633,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":13598.287842185604},\"Volhaven\":{\"stored\":1.1368683772161603e-13,\"productionAmount\":62.50912780174425,\"actualSellAmount\":62.50912780174425,\"effectiveRating\":13118.48510736141,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP*20\",\"productionCost\":12994.601588973725}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":true,\"uiMarketPrice\":{\"Aevum\":1074143.5545330846,\"Chongqing\":1073375.1402994138,\"Sector-12\":922941.3001364933,\"New Tokyo\":1077189.9616590738,\"Ishima\":1087411.836869671,\"Volhaven\":1095729.4552134422},\"maxSellAmount\":62.50912780174425}}]]},\"makesProducts\":true,\"awareness\":3140.0967710601212,\"popularity\":1256.1421102098982,\"startingCost\":20000000000,\"realEstateFactor\":0.15,\"researchFactor\":0.75,\"hardwareFactor\":0.15,\"robotFactor\":0.2,\"aiCoreFactor\":0.15,\"advertisingFactor\":0.2,\"productionMult\":43.91539165842219,\"lastCycleRevenue\":1493874640.1066732,\"lastCycleExpenses\":133791.86295736808,\"thisCycleRevenue\":14930683934.5204,\"thisCycleExpenses\":1349691.680059886,\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":7071.0821147260385,\"quality\":97.94375683490507,\"demand\":68.82431343376211,\"demandRange\":[20,90],\"competition\":42.81931833738988,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":9.094947017729283e-14,\"actualSellAmount\":0,\"productionAmount\":-707.1082114726039,\"importAmount\":706.0505843864163,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3249.4866079634485,\"averagePrice\":3249.4866077376996,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2878.5263955900887,\"maxSellPerCycle\":2.463029398448313,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":82.75790104137849,\"demandRange\":[80,90],\"competition\":94.1215520322661,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6191.501921836679,\"averagePrice\":7142.629166462475,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":91.45521431279838,\"demandRange\":[80,99],\"competition\":91.2604985119313,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":66369.17322504958,\"averagePrice\":77518.48679450776,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":81.7735853153666,\"demandRange\":[80,99],\"competition\":82.74643518680674,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":18564.810919327545,\"averagePrice\":16259.158675420329,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":10.50302526628291,\"demandRange\":[5,99],\"competition\":71.71691857776104,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":27703.562067276856,\"averagePrice\":82751.50790269706,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9633.384105736302,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":707.1082114726039}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1934.427749623771,\"quality\":98.33842484085379,\"demand\":65.22419646104636,\"demandRange\":[20,90],\"competition\":66.08236651127946,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-193.4427749623771,\"importAmount\":193.15948034302934,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2549.565585865635,\"averagePrice\":2549.565585865598,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":85.81223411673045,\"demandRange\":[80,90],\"competition\":87.1110951862158,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8631.218405152822,\"averagePrice\":8095.849488467937,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":83.94615886903179,\"demandRange\":[80,99],\"competition\":92.89075182636219,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":93817.22142546692,\"averagePrice\":72793.32482373834,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":81.20068566528802,\"demandRange\":[80,99],\"competition\":81.00849262725418,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8551.000600658272,\"averagePrice\":14063.182413224788,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":84.77902843461918,\"demandRange\":[5,99],\"competition\":66.65322934621443,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":104422.69548848382,\"averagePrice\":92814.75622756415,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9376.551387481188,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":193.4427749623771}},\"Chongqing\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"Chongqing\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1939.3404841147355,\"quality\":97.9548665497894,\"demand\":57.966379425392255,\"demandRange\":[20,90],\"competition\":50.80679002972956,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.569409413670769,\"actualSellAmount\":0,\"productionAmount\":-193.93404841147355,\"importAmount\":193.64981549884558,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3196.621515939443,\"averagePrice\":3196.621515939443,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":82.68988944031351,\"demandRange\":[80,90],\"competition\":92.40137993161531,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6336.403503004601,\"averagePrice\":7437.072288822317,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":93.52516802507704,\"demandRange\":[80,99],\"competition\":89.40289513355577,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77752.90890060498,\"averagePrice\":77697.12373023898,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":98.64565660961598,\"demandRange\":[80,99],\"competition\":84.94101586953835,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":21015.958911650985,\"averagePrice\":16163.556963333729,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":21.702190221293257,\"demandRange\":[5,99],\"competition\":66.98869793117943,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":37217.991308432625,\"averagePrice\":67631.87718407054,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9376.797024205736,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":193.93404841147355}},\"New Tokyo\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"New Tokyo\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1913.6707993015073,\"quality\":98.51954490786744,\"demand\":46.14467661648726,\"demandRange\":[20,90],\"competition\":63.59659898403475,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0.5622232844088331,\"actualSellAmount\":0,\"productionAmount\":-191.36707993015074,\"importAmount\":191.0869469318398,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2081.38057478004,\"averagePrice\":2081.3817398385195,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":84.20233947527268,\"demandRange\":[80,90],\"competition\":70.57590181866067,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6514.792955878914,\"averagePrice\":7772.503805508611,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":81.83058600854619,\"demandRange\":[80,99],\"competition\":80.81088543498335,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":71091.54851607594,\"averagePrice\":75039.28423650401,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":90.80614991060537,\"demandRange\":[80,99],\"competition\":86.79851699278818,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":25692.93184079941,\"averagePrice\":15038.509549881113,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":25.1076690977104,\"demandRange\":[5,99],\"competition\":68.9894591485737,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":95380.0291817552,\"averagePrice\":100686.28812495655,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9375.513539965075,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":191.36707993015074}},\"Ishima\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"Ishima\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1938.0835035548773,\"quality\":98.42640351799471,\"demand\":34.91768881514655,\"demandRange\":[20,90],\"competition\":44.35033018197761,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-193.80835035548773,\"importAmount\":193.52413476316232,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2719.657568437121,\"averagePrice\":2719.6575464532784,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":82.25734060434918,\"demandRange\":[80,90],\"competition\":92.18001278556379,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6098.719622574487,\"averagePrice\":7664.356755605643,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":83.20520543919885,\"demandRange\":[80,99],\"competition\":81.74649561475553,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":77934.5086957262,\"averagePrice\":72740.47437495759,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":83.36170488531918,\"demandRange\":[80,99],\"competition\":80.34111871410443,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":16398.771387993736,\"averagePrice\":16440.222632745725,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":41.50514925995672,\"demandRange\":[5,99],\"competition\":27.42031002560328,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":82334.5800833277,\"averagePrice\":82019.80755492384,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9376.734175177744,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":193.80835035548773}},\"Volhaven\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":29,\"city\":\"Volhaven\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[60,90],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":1903.2840151408561,\"quality\":98.32595342926925,\"demand\":50.835648508526766,\"demandRange\":[20,90],\"competition\":54.19511045713648,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-190.3284015140856,\"importAmount\":190.3284015140856,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2598.9203177947447,\"averagePrice\":2598.9203177947447,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":36471,\"quality\":1,\"demand\":82.44278802558641,\"demandRange\":[80,90],\"competition\":75.8633559685155,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6816.710402462105,\"averagePrice\":7854.038551146183,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"averagePrice\":0,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":5415,\"quality\":1,\"demand\":98.54928361635689,\"demandRange\":[80,99],\"competition\":91.20876585254005,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":63826.16847891275,\"averagePrice\":73459.36494121868,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":21683,\"quality\":1,\"demand\":87.1224274946389,\"demandRange\":[80,99],\"competition\":98.35516969329731,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8230.118498681402,\"averagePrice\":13077.020912997668,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":443154,\"quality\":1,\"demand\":45.07642019118193,\"demandRange\":[5,99],\"competition\":53.081844123571166,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":89065.42068604156,\"averagePrice\":76900.7762240294,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":\"\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":11600.000000000007,\"sizeUsed\":9374.994200757043,\"smartSupplyEnabled\":true,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":191.72891056851205}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":144,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":98.99840890911642,\"avgMorale\":98.8013419746537,\"avgIntelligence\":75.84027777777777,\"avgCharisma\":75.1597222222222,\"avgCreativity\":77.45833333333331,\"avgEfficiency\":78.16666666666664,\"totalExperience\":14442.836000005784,\"numEmployees\":144,\"totalSalary\":175790.50800001732,\"autoTea\":false,\"autoParty\":false,\"teaPending\":true,\"partyMult\":1.02,\"employeeProductionByJob\":{\"total\":66100.43174517775,\"Operations\":15565.881042798504,\"Engineer\":16507.300818996617,\"Business\":8918.651166240337,\"Management\":18260.830199803193,\"Research & Development\":6847.768517339095,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":33,\"Engineer\":33,\"Business\":33,\"Management\":34,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":33,\"Engineer\":33,\"Business\":33,\"Management\":34,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.00125746074308,\"avgMorale\":99.20048369802551,\"avgIntelligence\":71.33333333333333,\"avgCharisma\":74.46666666666667,\"avgCreativity\":78.66666666666666,\"avgEfficiency\":82.4,\"totalExperience\":1358.8665000004798,\"numEmployees\":15,\"totalSalary\":17885.599500001437,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8433.936444624323,\"Operations\":467.10290672621835,\"Engineer\":485.07091630049297,\"Business\":260.8079260600727,\"Management\":533.4272085326658,\"Research & Development\":6687.527487004873,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}},\"Chongqing\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Chongqing\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.59879501076256,\"avgMorale\":99.79857173234223,\"avgIntelligence\":70.86666666666666,\"avgCharisma\":78.33333333333333,\"avgCreativity\":75.46666666666668,\"avgEfficiency\":76.13333333333334,\"totalExperience\":1439.8095000004798,\"numEmployees\":15,\"totalSalary\":17855.428500001442,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8412.605059203126,\"Operations\":461.75816421497154,\"Engineer\":486.1375380022676,\"Business\":273.86879274454077,\"Management\":550.3086849460647,\"Research & Development\":6640.531879295281,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}},\"New Tokyo\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"New Tokyo\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.39784020915458,\"avgMorale\":99.79963043321646,\"avgIntelligence\":69.93333333333334,\"avgCharisma\":73.4,\"avgCreativity\":66,\"avgEfficiency\":73.46666666666667,\"totalExperience\":1509.7525000004798,\"numEmployees\":15,\"totalSalary\":17255.25750000144,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8062.721800009689,\"Operations\":446.06024379430545,\"Engineer\":483.516093654537,\"Business\":264.9184166507915,\"Management\":525.8556597237979,\"Research & Development\":6342.371386186257,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}},\"Ishima\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Ishima\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":99.19895908233815,\"avgMorale\":99.199024598604,\"avgIntelligence\":76.46666666666667,\"avgCharisma\":84.13333333333334,\"avgCreativity\":77.86666666666666,\"avgEfficiency\":73.26666666666667,\"totalExperience\":1326.919500000501,\"numEmployees\":15,\"totalSalary\":18008.758500001506,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8547.912596911989,\"Operations\":456.45336797660445,\"Engineer\":479.44455555021733,\"Business\":284.3532734999094,\"Management\":557.4622042468652,\"Research & Development\":6770.199195638393,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}},\"Volhaven\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Volhaven\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.53333333333333,\"avgCharisma\":75.46666666666667,\"avgCreativity\":68.73333333333333,\"avgEfficiency\":73.66666666666667,\"totalExperience\":1334.6700000004796,\"numEmployees\":15,\"totalSalary\":17162.01000000144,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":8287.65506666708,\"Operations\":449.12133333336544,\"Engineer\":482.22700000004806,\"Business\":269.95566666668276,\"Management\":528.3446666666988,\"Research & Development\":6558.006400000284,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":1,\"Engineer\":1,\"Business\":1,\"Management\":1,\"Research & Development\":11,\"Intern\":0,\"Unassigned\":0}}}},\"numAdVerts\":71}}]]},\"maxDivisions\":20,\"funds\":13770673976349.51,\"revenue\":1698656847.4107387,\"expenses\":54337298.4025997,\"fundingRound\":1,\"public\":false,\"totalShares\":1500000000,\"numShares\":900000000,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"investorShares\":600000000,\"issuedShares\":0,\"sharePrice\":590161.031376448,\"storedCycles\":93465,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\",\"Smart Supply\",\"Export\",\"Market Research - Demand\",\"Market Data - Competition\"]},\"upgrades\":{\"Smart Factories\":{\"level\":50,\"value\":2.499999999999998},\"Smart Storage\":{\"level\":30,\"value\":4.000000000000003},\"DreamSense\":{\"level\":2,\"value\":0.002},\"Wilson Analytics\":{\"level\":12,\"value\":1.0599999999999987},\"Nuoptimal Nootropic Injector Implants\":{\"level\":15,\"value\":2.5000000000000013},\"Speech Processor Implants\":{\"level\":10,\"value\":2.000000000000001},\"Neural Accelerators\":{\"level\":15,\"value\":2.5000000000000013},\"FocusWires\":{\"level\":10,\"value\":2.000000000000001},\"ABC SalesBots\":{\"level\":0,\"value\":1},\"Project Insight\":{\"level\":10,\"value\":1.5000000000000004}},\"previousTotalAssets\":14833787740265.807,\"totalAssets\":14850214124773.025,\"cycleValuation\":694823762000000,\"valuationsList\":[691753019000000,693400784000000,693550819000000,691860045000000,689853319000000,692750910000000,693682420000000,694588157000000,695337862000000,694823762000000],\"valuation\":693160109700000,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":0}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"The Syndicate\",\"Tetrads\",\"Slum Snakes\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"Netburners\",\"Speakers for the Dead\"]},\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":21,\"moneyGainRatePerSecond\":11.550229183088113,\"onlineTimeSeconds\":450970.6000059031,\"ram\":1,\"totalMoneyGenerated\":4310478.4041249845,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":29,\"moneyGainRatePerSecond\":15.950316490931204,\"onlineTimeSeconds\":366134.8000038269,\"ram\":1,\"totalMoneyGenerated\":5839926.007512061,\"name\":\"hacknet-node-1\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Alpha Enterprises\":\"Software Consultant\",\"Omnia Cybersystems\":\"Software Engineering Intern\",\"Solaris Space Systems\":\"Software Engineering Intern\",\"Storm Technologies\":\"Software Engineering Intern\",\"Icarus Microsystems\":\"Software Consultant\"},\"karma\":-21613.900000011017,\"numPeopleKilled\":670,\"location\":\"Alpha Enterprises\",\"money\":529171768.9807762,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-8500073,\"class\":0,\"codingcontract\":27375000000,\"corporation\":0,\"crime\":1042506137.5987911,\"gang\":0,\"gang_expenses\":0,\"hacking\":45780270786.6919,\"hacknet\":10150404.411493672,\"hacknet_expenses\":-34623.23750687806,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-5200000000,\"total\":529170655.9807762,\"work\":2973147.091203903,\"servers\":-62992370123.8033,\"other\":-5316199999.862499,\"augmentations\":-164625000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-8500073,\"class\":0,\"codingcontract\":27375000000,\"corporation\":0,\"crime\":1042506137.5987911,\"gang\":0,\"gang_expenses\":0,\"hacking\":45780270786.6919,\"hacknet\":10150404.411493672,\"hacknet_expenses\":-34623.23750687806,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-5200000000,\"total\":529170655.9807762,\"work\":2973147.091203903,\"servers\":-62992370123.8033,\"other\":-5316199999.862499,\"augmentations\":-164625000}},\"playtimeSinceLastAug\":502612600,\"playtimeSinceLastBitnode\":502612600,\"lastAugReset\":1709666450609,\"lastNodeReset\":1709666450609,\"purchasedServers\":[\"daemon-hack\",\"daemon-grow\",\"daemon-grow-0\",\"daemon-grow-1\",\"daemon-weak\",\"daemon-grow-2\",\"daemon-grow-3\",\"daemon-grow-4\",\"daemon-hack-0\",\"daemon-grow-5\",\"daemon-grow-6\",\"daemon-hack-1\",\"daemon-hack-2\",\"daemon-hack-3\",\"daemon-hack-4\",\"daemon-weak-0\",\"daemon-hack-5\",\"daemon-hack-6\",\"daemon-hack-7\",\"daemon-hack-8\",\"daemon-hack-9\",\"daemon-hack-10\",\"daemon-hack-11\",\"daemon-hack-12\",\"daemon-hack-13\"],\"scriptProdSinceLastAug\":38988157941.484604,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3]]},\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1708793459067},{\"ID\":\"FROZE\",\"unlockedOn\":1708804573260},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1708819127725},{\"ID\":\"TOR\",\"unlockedOn\":1708819187737},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1708819727725},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1708823028666},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1708823028668},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1708823328667},{\"ID\":\"NITESEC\",\"unlockedOn\":1708889793992},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1708898400757},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1708942188632},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1708946531579},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1708946951570},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1708947071581},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1708979204993},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1709031428692},{\"ID\":\"TRAVEL\",\"unlockedOn\":1709139381830},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1709150990586},{\"ID\":\"4S\",\"unlockedOn\":1709151830586},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1709154050587},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1709215419160},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1709218179165},{\"ID\":\"DONATION\",\"unlockedOn\":1709244468432},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1709295506626},{\"ID\":\"SF1.1\",\"unlockedOn\":1709322955281},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1709473001825},{\"ID\":\"FAST_BN\",\"unlockedOn\":1709473329024},{\"ID\":\"WORKOUT\",\"unlockedOn\":1709496302063},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1709547847094},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1709659648765},{\"ID\":\"CORPORATION\",\"unlockedOn\":1709666908752},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1709756505735},{\"ID\":\"N00DLES\",\"unlockedOn\":1709808817341},{\"ID\":\"CORPORATION_PROD_1000\",\"unlockedOn\":1710168333140}],\"terminalCommandHistory\":[\"ls\",\"cd Coorporation/ \",\"rm teaParty.js \",\"ls\",\"rm LaunchCoorp.js \",\"rm lib.js \",\"cd ..\",\"ls\",\"run Corporation/teaParty.js \",\"run CodingContracts/manager.js \",\"clear\",\"run hackingDeamon.js \",\"run Corporation/gorg2.js \",\"run hackingDeamon.js Phantasy\",\"run hackingDeamon.js phantasy\",\"free\",\"serverHackThreads: 719 serverGrowThreads: 2233 firstWeakenThreads: 29 secondWeakenThreads: 179\",\"run hackingDeamon.js \",\"run hackingDeamon.js phantasy\",\"run Corporation/teaParty.js \",\"run hackingDeamon.js \",\"run Corporation/teaParty.js \",\"run CodingContracts/manager.js \",\"run Corporation/gorg2.js \",\"scan-analyze 10\",\"backdoor \",\"scan-analyze 10\",\"backdoor \",\"scan-analyze 10\",\"home\",\"scan-analyze 10\",\"backdoor \",\"home\",\"run serverStats.js \",\"run Corporation/gorg2.js \",\"run Corporation/teaParty.js \",\"run hackingDeamon.js \",\"run serverStats.js \",\"run CodingContracts/manager.js \",\"home\",\"clear\",\"run Corporation/gorg2.js \",\"run hackingDeamon.js \",\"run Corporation/teaParty.js \",\"run CodingContracts/manager.js \",\"run hackingDeamon.js \",\"run Corporation/teaParty.js \",\"run hackingDeamon.js \",\"run Corporation/gorg2.js \",\"run CodingContracts/manager.js \"],\"lastUpdate\":1710169065539,\"lastSave\":1710169041152,\"totalPlaytime\":1375660800,\"currentWork\":{\"ctor\":\"CrimeWork\",\"data\":{\"type\":\"CRIME\",\"singularity\":false,\"cyclesWorked\":1267616,\"crimeType\":\"Mug\",\"unitCompleted\":3200}},\"focus\":false,\"entropy\":0,\"identifier\":\"1a1ebb4b422ad0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"87.8.7.3\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"parallel/growingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  growServer(ns, \\\"foodnstuff\\\", 0);\\n}\\nexport function growServer(ns, target, batchId, delay = 0) {\\n  const serverMaxMoney = ns.getServerMaxMoney(target);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(target);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  const totalGrowThreadsNeeded = Math.ceil(ns.growthAnalyze(target, moneyMultiplier));\\n  ns.print(\\\"Actual grow threads needed: \\\" + totalGrowThreadsNeeded);\\n  if (totalGrowThreadsNeeded < 1) {\\n    ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const growingScriptRam = 1.75;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n    if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n      ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n  const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to grow \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to grow \\\" + target);\\n  }\\n  ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3dpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBncm93U2VydmVyKG5zLCBcImZvb2Ruc3R1ZmZcIiwgMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBncm93U2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGJhdGNoSWQ6IG51bWJlciwgZGVsYXkgPSAwKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcbiAgICBjb25zdCBzZXJ2ZXJDdXJyZW50TW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpO1xyXG4gICAgbGV0IG1vbmV5TXVsdGlwbGllciA9IHNlcnZlck1heE1vbmV5IC8gc2VydmVyQ3VycmVudE1vbmV5O1xyXG4gICAgaWYgKGlzTmFOKG1vbmV5TXVsdGlwbGllcikgfHwgbW9uZXlNdWx0aXBsaWVyID09IEluZmluaXR5KSBtb25leU11bHRpcGxpZXIgPSAxO1xyXG4gICAgY29uc3QgdG90YWxHcm93VGhyZWFkc05lZWRlZCA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHRhcmdldCwgbW9uZXlNdWx0aXBsaWVyKSk7XHJcblxyXG4gICAgbnMucHJpbnQoXCJBY3R1YWwgZ3JvdyB0aHJlYWRzIG5lZWRlZDogXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKTtcclxuXHJcbiAgICBpZiAodG90YWxHcm93VGhyZWFkc05lZWRlZCA8IDEpIHtcclxuICAgICAgICBucy5wcmludChcIk5vIGdyb3cgdGhyZWFkcyBuZWVkZWQsIHNraXBwaW5nIGdyb3d0aCBwcm9jZXNzXCIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjIGdyb3cuanMgd2l0aCBudW0gb2YgdGhyZWFkc1xyXG4gICAgY29uc3QgYWxsSG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcclxuICAgIGNvbnN0IGdyb3dpbmdTY3JpcHRSYW0gPSAxLjc1O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gZ3Jvd2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQpIHtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImdyb3cuanNcIiwgaG9zdC5uYW1lLCB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIk5vIGF2YWlsYWJsZSBob3N0IHRvIGdyb3cgXCIgKyB0YXJnZXQgKyBcIi4gQXR0ZW1wdGluZyB0byB1cGdyYWRlL2J1eSBzZXJ2ZXIuLi5cIik7XHJcblxyXG4gICAgY29uc3QgbmVlZGVkR3Jvd1JhbSA9IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKiBncm93aW5nU2NyaXB0UmFtO1xyXG4gICAgY29uc3Qgc2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIG5lZWRlZEdyb3dSYW0sIENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICBpZiAoc2VydmVyID09PSBcIlwiKSB7XHJcbiAgICAgICAgbnMudHByaW50KFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGdyb3cgXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byBncm93IFwiICsgdGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBucy5leGVjKFwiZ3Jvdy5qc1wiLCBzZXJ2ZXIsIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsY0FBYztBQUV2QixTQUFTLHFCQUFxQjtBQUU5QixzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLGFBQVcsSUFBSSxjQUFjLENBQUM7QUFDbEM7QUFFTyxnQkFBUyxXQUFXLElBQVEsUUFBZ0IsU0FBaUIsUUFBUSxHQUFZO0FBQ3BGLFFBQU0saUJBQWlCLEdBQUcsa0JBQWtCLE1BQU07QUFDbEQsUUFBTSxxQkFBcUIsR0FBRyx3QkFBd0IsTUFBTTtBQUM1RCxNQUFJLGtCQUFrQixpQkFBaUI7QUFDdkMsTUFBSSxNQUFNLGVBQWUsS0FBSyxtQkFBbUI7QUFBVSxzQkFBa0I7QUFDN0UsUUFBTSx5QkFBeUIsS0FBSyxLQUFLLEdBQUcsY0FBYyxRQUFRLGVBQWUsQ0FBQztBQUVsRixLQUFHLE1BQU0saUNBQWlDLHNCQUFzQjtBQUVoRSxNQUFJLHlCQUF5QixHQUFHO0FBQzVCLE9BQUcsTUFBTSxpREFBaUQ7QUFDMUQsV0FBTztBQUFBLEVBQ1g7QUFHQSxRQUFNLFdBQVcsMEJBQTBCLEVBQUU7QUFDN0MsUUFBTSxtQkFBbUI7QUFFekIsV0FBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFNLE9BQU8sU0FBUyxDQUFDO0FBRXZCLFVBQU0sbUJBQW1CLEtBQUssTUFBTSxLQUFLLGVBQWUsZ0JBQWdCO0FBRXhFLFFBQUksb0JBQW9CLHdCQUF3QjtBQUM1QyxTQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sd0JBQXdCLFFBQVEsS0FBSztBQUNuRSxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFFQSxLQUFHLE1BQU0sT0FBTyxTQUFTLCtCQUErQixTQUFTLHVDQUF1QztBQUV4RyxRQUFNLGdCQUFnQix5QkFBeUI7QUFDL0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksZUFBZSxPQUFPLGdCQUFnQjtBQUUxRixNQUFJLFdBQVcsSUFBSTtBQUNmLE9BQUcsT0FBTyx5Q0FBeUMsTUFBTTtBQUN6RCxVQUFNLElBQUksTUFBTSx5Q0FBeUMsTUFBTTtBQUFBLEVBQ25FO0FBRUEsS0FBRyxLQUFLLFdBQVcsUUFBUSx3QkFBd0IsUUFBUSxLQUFLO0FBRWhFLFNBQU87QUFDWDsiLCJuYW1lcyI6W119\",\"filename\":\"parallel/growingAlgo.js\",\"server\":\"home\"}}],[\"parallel/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  hackServer(ns, \\\"silver-helix\\\", 0.8, 0);\\n}\\nexport function hackServer(ns, target, threshold, batchId, delay = 0) {\\n  const totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n  ns.print(\\\"actual hack threads needed: \\\" + totalHackThreadsNeeded);\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const hackingScriptRam = 1.7;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    const host = allHosts[i];\\n    const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n    if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n      ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n      return true;\\n    }\\n  }\\n  ns.print(Colors.YELLOW + \\\"No available host to hack \\\" + target + \\\". Buying server...\\\");\\n  const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to hack \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to hack \\\" + target);\\n  }\\n  ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBoYWNrU2VydmVyKG5zLCBcInNpbHZlci1oZWxpeFwiLCAwLjgsIDApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlciwgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApIHtcclxuICAgIGNvbnN0IHRvdGFsSGFja1RocmVhZHNOZWVkZWQgPSBNYXRoLmNlaWwodGhyZXNob2xkIC8gbnMuaGFja0FuYWx5emUodGFyZ2V0KSk7XHJcbiAgICBucy5wcmludChcImFjdHVhbCBoYWNrIHRocmVhZHMgbmVlZGVkOiBcIiArIHRvdGFsSGFja1RocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICBjb25zdCBoYWNraW5nU2NyaXB0UmFtID0gMS43O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGhvc3QuYXZhaWxhYmxlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHRvdGFsSGFja1RocmVhZHNOZWVkZWQpIHtcclxuICAgICAgICAgICAgbnMuZXhlYyhcImhhY2suanNcIiwgaG9zdC5uYW1lLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5zLnByaW50KENvbG9ycy5ZRUxMT1cgKyBcIk5vIGF2YWlsYWJsZSBob3N0IHRvIGhhY2sgXCIgKyB0YXJnZXQgKyBcIi4gQnV5aW5nIHNlcnZlci4uLlwiKTtcclxuXHJcbiAgICBjb25zdCBuZWVkZWRHcm93UmFtID0gdG90YWxIYWNrVGhyZWFkc05lZWRlZCAqIGhhY2tpbmdTY3JpcHRSYW07XHJcbiAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkR3Jvd1JhbSwgQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpO1xyXG5cclxuICAgIGlmIChzZXJ2ZXIgPT09IFwiXCIpIHtcclxuICAgICAgICBucy50cHJpbnQoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gaGFjayBcIiArIHRhcmdldCk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IhIENvdWxkIG5vdCBidXkgc2VydmVyIHRvIGhhY2sgXCIgKyB0YXJnZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIG5zLmV4ZWMoXCJoYWNrLmpzXCIsIHNlcnZlciwgdG90YWxIYWNrVGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxpQ0FBaUM7QUFDMUMsU0FBUyxjQUFjO0FBRXZCLFNBQVMscUJBQXFCO0FBRTlCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsYUFBVyxJQUFJLGdCQUFnQixLQUFLLENBQUM7QUFDekM7QUFFTyxnQkFBUyxXQUFXLElBQVEsUUFBZ0IsV0FBbUIsU0FBaUIsUUFBUSxHQUFHO0FBQzlGLFFBQU0seUJBQXlCLEtBQUssS0FBSyxZQUFZLEdBQUcsWUFBWSxNQUFNLENBQUM7QUFDM0UsS0FBRyxNQUFNLGlDQUFpQyxzQkFBc0I7QUFFaEUsUUFBTSxXQUFXLDBCQUEwQixFQUFFO0FBQzdDLFFBQU0sbUJBQW1CO0FBRXpCLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDdEMsVUFBTSxPQUFPLFNBQVMsQ0FBQztBQUV2QixVQUFNLG1CQUFtQixLQUFLLE1BQU0sS0FBSyxlQUFlLGdCQUFnQjtBQUV4RSxRQUFJLG9CQUFvQix3QkFBd0I7QUFDNUMsU0FBRyxLQUFLLFdBQVcsS0FBSyxNQUFNLHdCQUF3QixRQUFRLEtBQUs7QUFDbkUsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBRUEsS0FBRyxNQUFNLE9BQU8sU0FBUywrQkFBK0IsU0FBUyxvQkFBb0I7QUFFckYsUUFBTSxnQkFBZ0IseUJBQXlCO0FBQy9DLFFBQU0sU0FBUyxjQUFjLG1CQUFtQixJQUFJLGVBQWUsT0FBTyxnQkFBZ0I7QUFFMUYsTUFBSSxXQUFXLElBQUk7QUFDZixPQUFHLE9BQU8seUNBQXlDLE1BQU07QUFDekQsVUFBTSxJQUFJLE1BQU0seUNBQXlDLE1BQU07QUFBQSxFQUNuRTtBQUVBLEtBQUcsS0FBSyxXQUFXLFFBQVEsd0JBQXdCLFFBQVEsS0FBSztBQUVoRSxTQUFPO0FBQ1g7IiwibmFtZXMiOltdfQ==\",\"filename\":\"parallel/hackingAlgo.js\",\"server\":\"home\"}}],[\"parallel/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestServer } from \\\"/bestServer.js\\\";\\nimport { Colors, getTimeH } from \\\"/lib.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { growServer } from \\\"/parallel/growingAlgo.js\\\";\\nimport { hackServer } from \\\"/parallel/hackingAlgo.js\\\";\\nimport { weakenServer } from \\\"/parallel/weakenAlgo.js\\\";\\nconst DELAY_MARGIN_MS = Config.DELAY_MARGIN_MS;\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServer(ns);\\n    await parallelCycle(ns, target, 0.8);\\n  }\\n}\\nexport async function parallelCycle(ns, target, hackThreshold = 0.8, num_batches = 1) {\\n  const weakTime = ns.getWeakenTime(target);\\n  const growTime = ns.getGrowTime(target);\\n  const hackTime = ns.getHackTime(target);\\n  ns.getPortHandle(2).clear();\\n  if (num_batches > 1) {\\n    ns.print(Colors.CYAN + \\\"------------ MULTI BATCH MODE ------------\\\");\\n    num_batches = Math.floor((Math.floor(weakTime) - Config.LOOP_SAFETY_MARGIN_MS) / (4 * DELAY_MARGIN_MS));\\n    ns.tprint(Colors.E_ORANGE + \\\"num_batches: \\\" + num_batches);\\n    const previousPids = [];\\n    for (let batchId = 0; batchId < num_batches; batchId++) {\\n      ns.print(Colors.CYAN + \\\"------------ BATCH \\\" + batchId + \\\" ------------\\\");\\n      const pids = [];\\n      const hackDelay = weakTime - hackTime - DELAY_MARGIN_MS;\\n      const hackPid = WGHAlgorithms.hackServer(ns, target, hackThreshold, true, hackDelay);\\n      pids.push(hackPid);\\n      const weak1Pid = WGHAlgorithms.weakenServer(ns, target, 1, true);\\n      pids.push(weak1Pid);\\n      const growDelay = weakTime - growTime + DELAY_MARGIN_MS;\\n      const growPid = WGHAlgorithms.growServer(ns, target, true, growDelay);\\n      pids.push(growPid);\\n      let isLastWeaken = false;\\n      if (batchId === num_batches - 1)\\n        isLastWeaken = true;\\n      const weak2delay = 2 * DELAY_MARGIN_MS;\\n      const weak2Pid = WGHAlgorithms.weakenServer(ns, target, 2, true, weak2delay, isLastWeaken);\\n      pids.push(weak2Pid);\\n      if (weak1Pid == 0 || weak2Pid == 0 || growPid == 0 || hackPid == 0) {\\n        ns.print(Colors.RED + \\\"could not start all processes, killing batch \\\" + batchId);\\n        for (const pid of pids) {\\n          ns.kill(pid);\\n        }\\n        const port2 = ns.getPortHandle(2);\\n        port2.clear();\\n        port2.write(previousPids[pids.length - 1]);\\n        break;\\n      }\\n      previousPids.length = 0;\\n      previousPids.push(...pids);\\n      pids.length = 0;\\n      ns.print(Colors.GREEN + \\\"Cycle done. Beginning new cycle..\\\" + Colors.RESET);\\n      await ns.sleep(4 * DELAY_MARGIN_MS);\\n    }\\n    ns.print(\\\"Waiting for all processes to finish..\\\");\\n    const port = ns.getPortHandle(2);\\n    await port.nextWrite();\\n    const data = port.read();\\n    if (data !== previousPids[previousPids.length - 1])\\n      throw new Error(\\n        \\\"Invalid data from port 2 received: \\\" + data + \\\" vs \\\" + previousPids[previousPids.length - 1]\\n      );\\n    port.clear();\\n    ns.print(\\\"All processes finished, beginning new cycle.. \\\" + data);\\n  } else {\\n    ns.print(Colors.CYAN + \\\"------------ SINGLE BATCH MODE ------------\\\");\\n    const weakTime2 = ns.getWeakenTime(target);\\n    const growTime2 = ns.getGrowTime(target);\\n    const hackTime2 = ns.getHackTime(target);\\n    ns.print(\\\"Attempting to start Weak I at \\\" + getTimeH());\\n    const weak1Dispatched = weakenServer(ns, target, 1, 0);\\n    let weak2StartTime = 0;\\n    if (weak1Dispatched == true) {\\n      weak2StartTime = 2 * DELAY_MARGIN_MS;\\n      await ns.sleep(weak2StartTime);\\n    }\\n    ns.print(\\\"Attempting to start Weak II at \\\" + getTimeH());\\n    const weak2Dispatched = weakenServer(ns, target, 2, 0);\\n    let growStartTime = 0;\\n    if (weak2Dispatched == true) {\\n      growStartTime = weakTime2 + DELAY_MARGIN_MS - growTime2;\\n      const growDelay = growStartTime - weak2StartTime;\\n      await ns.sleep(growDelay);\\n    }\\n    ns.print(\\\"Attempting to start Grow at \\\" + getTimeH());\\n    const growDispatched = growServer(ns, target, 0);\\n    if (weak1Dispatched == true && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 2 was skipped. Did the last hack attempt fail?\\\\nHacking is about to start earlier than planned.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == false && growDispatched == false) {\\n      ns.print(Colors.YELLOW + \\\"Weak 1 and Weak 2 were skipped? Hacking now. \\\" + getTimeH() + Colors.RESET);\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == true && growDispatched == true && weak2Dispatched == true) {\\n      ns.print(Colors.GREEN + \\\"Hack is about to start as expected\\\" + Colors.RESET);\\n      const hackStartTime = weakTime2 + 3 * DELAY_MARGIN_MS - hackTime2;\\n      const hackDelayDiff = hackStartTime - growStartTime;\\n      await ns.sleep(hackDelayDiff);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else if (weak1Dispatched == false && weak2Dispatched == true && growDispatched == true) {\\n      ns.print(\\n        Colors.YELLOW + \\\"Weak 1 was skipped. Perhaps the server is already at the min sec lvl.\\\" + Colors.RESET\\n      );\\n      const hackStartTime = weakTime2 + 2 * DELAY_MARGIN_MS - hackTime2;\\n      await ns.sleep(hackStartTime - growStartTime);\\n      ns.print(\\\"Attempting to start Hack at \\\" + getTimeH());\\n      hackServer(ns, target, hackThreshold, 0);\\n      await ns.sleep(hackTime2 + DELAY_MARGIN_MS);\\n    } else {\\n      ns.print(Colors.RED + \\\"could not start hack!\\\" + Colors.RESET);\\n      ns.print(\\n        \\\"weak1Dispatched: \\\" + weak1Dispatched + \\\" | weak2Dispatched: \\\" + weak2Dispatched + \\\" | growDispatched: \\\" + growDispatched\\n      );\\n      printServerStats(ns, target, hackThreshold);\\n      return;\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiQC9Db25maWcvQ29uZmlnLmpzXCI7XHJcbmltcG9ydCB7IGdldEJlc3RTZXJ2ZXIgfSBmcm9tIFwiLi4vYmVzdFNlcnZlci5qc1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldFRpbWVIIH0gZnJvbSBcIi4uL2xpYi5qc1wiO1xyXG5pbXBvcnQgeyBwcmludFNlcnZlclN0YXRzIH0gZnJvbSBcIi4uL3NlcnZlclN0YXRzLmpzXCI7XHJcbmltcG9ydCB7IFdHSEFsZ29yaXRobXMgfSBmcm9tIFwiLi9XR0hBbGdvcml0aG1zLmpzXCI7XHJcbmltcG9ydCB7IGdyb3dTZXJ2ZXIgfSBmcm9tIFwiLi9ncm93aW5nQWxnby5qc1wiO1xyXG5pbXBvcnQgeyBoYWNrU2VydmVyIH0gZnJvbSBcIi4vaGFja2luZ0FsZ28uanNcIjtcclxuaW1wb3J0IHsgd2Vha2VuU2VydmVyIH0gZnJvbSBcIi4vd2Vha2VuQWxnby5qc1wiO1xyXG5cclxuY29uc3QgREVMQVlfTUFSR0lOX01TID0gQ29uZmlnLkRFTEFZX01BUkdJTl9NUztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICAvLyB0aW1pbmcgb3JkZXIgKGFsd2F5cyBzYW1lKTogd2Vha2VuID4gZ3JvdyA+IGhhY2tcclxuICAgIC8vIGZvciBub3csIGVhY2ggaGFzIG93biBzZXJ2ZXI6ICAgIGF3cy0wICAgYXdzLSAgICBhd3MtMiAgIGF3cy0zXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWFrICAgIHdlYWsgICAgZ3JvdyAgICBoYWNrXHJcblxyXG4gICAgLy8gc3RlcHM6IFdHV0gtV0dXSC0uLlxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRCZXN0U2VydmVyKG5zKTtcclxuICAgICAgICBhd2FpdCBwYXJhbGxlbEN5Y2xlKG5zLCB0YXJnZXQsIDAuOCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJhbGxlbEN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQgPSAwLjgsIG51bV9iYXRjaGVzID0gMSkge1xyXG4gICAgLy8gY29uc3QgdGltZSA9IFRpbWUuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBjb25zdCB3ZWFrVGltZSA9IG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KTtcclxuICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcclxuICAgIGNvbnN0IGhhY2tUaW1lID0gbnMuZ2V0SGFja1RpbWUodGFyZ2V0KTtcclxuXHJcbiAgICAvLyBjb25zdCB3ZWFrZW5Eb25lUG9ydCA9IFBvcnRNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2V0UG9ydChucyk7XHJcbiAgICBucy5nZXRQb3J0SGFuZGxlKDIpLmNsZWFyKCk7XHJcblxyXG4gICAgaWYgKG51bV9iYXRjaGVzID4gMSkge1xyXG4gICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0gTVVMVEkgQkFUQ0ggTU9ERSAtLS0tLS0tLS0tLS1cIik7XHJcblxyXG4gICAgICAgIG51bV9iYXRjaGVzID0gTWF0aC5mbG9vcigoTWF0aC5mbG9vcih3ZWFrVGltZSkgLSBDb25maWcuTE9PUF9TQUZFVFlfTUFSR0lOX01TKSAvICg0ICogREVMQVlfTUFSR0lOX01TKSk7XHJcblxyXG4gICAgICAgIG5zLnRwcmludChDb2xvcnMuRV9PUkFOR0UgKyBcIm51bV9iYXRjaGVzOiBcIiArIG51bV9iYXRjaGVzKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJldmlvdXNQaWRzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGJhdGNoSWQgPSAwOyBiYXRjaElkIDwgbnVtX2JhdGNoZXM7IGJhdGNoSWQrKykge1xyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tIEJBVENIIFwiICsgYmF0Y2hJZCArIFwiIC0tLS0tLS0tLS0tLVwiKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBpZHMgPSBbXTtcclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgLy8gaGFja2luZ1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrRGVsYXkgPSB3ZWFrVGltZSAtIGhhY2tUaW1lIC0gREVMQVlfTUFSR0lOX01TO1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrUGlkID0gV0dIQWxnb3JpdGhtcy5oYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIHRydWUsIGhhY2tEZWxheSk7XHJcbiAgICAgICAgICAgIHBpZHMucHVzaChoYWNrUGlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIHdlYWsgSVxyXG4gICAgICAgICAgICBjb25zdCB3ZWFrMVBpZCA9IFdHSEFsZ29yaXRobXMud2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDEsIHRydWUpO1xyXG4gICAgICAgICAgICBwaWRzLnB1c2god2VhazFQaWQpO1xyXG5cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgLy8gZ3Jvd1xyXG4gICAgICAgICAgICBjb25zdCBncm93RGVsYXkgPSB3ZWFrVGltZSAtIGdyb3dUaW1lICsgREVMQVlfTUFSR0lOX01TO1xyXG4gICAgICAgICAgICBjb25zdCBncm93UGlkID0gV0dIQWxnb3JpdGhtcy5ncm93U2VydmVyKG5zLCB0YXJnZXQsIHRydWUsIGdyb3dEZWxheSk7XHJcbiAgICAgICAgICAgIHBpZHMucHVzaChncm93UGlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIHdlYWsgSUlcclxuICAgICAgICAgICAgbGV0IGlzTGFzdFdlYWtlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoYmF0Y2hJZCA9PT0gbnVtX2JhdGNoZXMgLSAxKSBpc0xhc3RXZWFrZW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgd2VhazJkZWxheSA9IDIgKiBERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgICAgIGNvbnN0IHdlYWsyUGlkID0gV0dIQWxnb3JpdGhtcy53ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMiwgdHJ1ZSwgd2VhazJkZWxheSwgaXNMYXN0V2Vha2VuKTtcclxuICAgICAgICAgICAgcGlkcy5wdXNoKHdlYWsyUGlkKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBwcm9jZXNzZXMgd2VyZSBkaXNwYXRjaGVkLCBraWxsIHRoZW0gaWYgbm90XHJcbiAgICAgICAgICAgIGlmICh3ZWFrMVBpZCA9PSAwIHx8IHdlYWsyUGlkID09IDAgfHwgZ3Jvd1BpZCA9PSAwIHx8IGhhY2tQaWQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLlJFRCArIFwiY291bGQgbm90IHN0YXJ0IGFsbCBwcm9jZXNzZXMsIGtpbGxpbmcgYmF0Y2ggXCIgKyBiYXRjaElkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBpZCBvZiBwaWRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnMua2lsbChwaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKDIpOyAvL1BvcnRNYW5hZ2VyLmdldEluc3RhbmNlKCkuZ2V0UG9ydChucyk7IC8vXHJcbiAgICAgICAgICAgICAgICBwb3J0LmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBwb3J0LndyaXRlKHByZXZpb3VzUGlkc1twaWRzLmxlbmd0aCAtIDFdKTsgLy8gcHJldmlvdXMgUElELCBzbyB3ZWFrZW4yIGtub3dzIGl0IGhhcyB0byBza2lwXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHJldmlvdXNQaWRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHByZXZpb3VzUGlkcy5wdXNoKC4uLnBpZHMpO1xyXG4gICAgICAgICAgICBwaWRzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIkN5Y2xlIGRvbmUuIEJlZ2lubmluZyBuZXcgY3ljbGUuLlwiICsgQ29sb3JzLlJFU0VUKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKDQgKiBERUxBWV9NQVJHSU5fTVMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnMucHJpbnQoXCJXYWl0aW5nIGZvciBhbGwgcHJvY2Vzc2VzIHRvIGZpbmlzaC4uXCIpO1xyXG4gICAgICAgIGNvbnN0IHBvcnQgPSBucy5nZXRQb3J0SGFuZGxlKDIpO1xyXG4gICAgICAgIGF3YWl0IHBvcnQubmV4dFdyaXRlKCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHBvcnQucmVhZCgpO1xyXG4gICAgICAgIGlmIChkYXRhICE9PSBwcmV2aW91c1BpZHNbcHJldmlvdXNQaWRzLmxlbmd0aCAtIDFdKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBcIkludmFsaWQgZGF0YSBmcm9tIHBvcnQgMiByZWNlaXZlZDogXCIgKyBkYXRhICsgXCIgdnMgXCIgKyBwcmV2aW91c1BpZHNbcHJldmlvdXNQaWRzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5wcmludChcIkFsbCBwcm9jZXNzZXMgZmluaXNoZWQsIGJlZ2lubmluZyBuZXcgY3ljbGUuLiBcIiArIGRhdGEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tIFNJTkdMRSBCQVRDSCBNT0RFIC0tLS0tLS0tLS0tLVwiKTtcclxuICAgICAgICBjb25zdCB3ZWFrVGltZSA9IG5zLmdldFdlYWtlblRpbWUodGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBncm93VGltZSA9IG5zLmdldEdyb3dUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgaGFja1RpbWUgPSBucy5nZXRIYWNrVGltZSh0YXJnZXQpO1xyXG4gICAgICAgIC8vIHdlYWsgSVxyXG4gICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBXZWFrIEkgYXQgXCIgKyBnZXRUaW1lSCgpKTtcclxuICAgICAgICBjb25zdCB3ZWFrMURpc3BhdGNoZWQgPSB3ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMSwgMCk7XHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gd2VhayBJSSBkZWxheVxyXG5cclxuICAgICAgICAvLyBpZiB3ZWFrIEkgc2tpcCwgc3RhcnQgSUkgaW1tZWRpYXRlbHlcclxuICAgICAgICBsZXQgd2VhazJTdGFydFRpbWUgPSAwO1xyXG4gICAgICAgIGlmICh3ZWFrMURpc3BhdGNoZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvLyB3ZWFrMlN0YXJ0VGltZSA9IHdlYWtUaW1lICsgMiAqIERFTEFZX01BUkdJTl9NUyAtIHdlYWtUaW1lO1xyXG4gICAgICAgICAgICB3ZWFrMlN0YXJ0VGltZSA9IDIgKiBERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKHdlYWsyU3RhcnRUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2VhayBJSVxyXG4gICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBXZWFrIElJIGF0IFwiICsgZ2V0VGltZUgoKSk7XHJcbiAgICAgICAgY29uc3Qgd2VhazJEaXNwYXRjaGVkID0gd2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDIsIDApO1xyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vIGdyb3cgZGVsYXlcclxuXHJcbiAgICAgICAgbGV0IGdyb3dTdGFydFRpbWUgPSAwO1xyXG4gICAgICAgIGlmICh3ZWFrMkRpc3BhdGNoZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBncm93U3RhcnRUaW1lID0gd2Vha1RpbWUgKyBERUxBWV9NQVJHSU5fTVMgLSBncm93VGltZTtcclxuICAgICAgICAgICAgY29uc3QgZ3Jvd0RlbGF5ID0gZ3Jvd1N0YXJ0VGltZSAtIHdlYWsyU3RhcnRUaW1lO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChncm93RGVsYXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ3Jvd1xyXG4gICAgICAgIG5zLnByaW50KFwiQXR0ZW1wdGluZyB0byBzdGFydCBHcm93IGF0IFwiICsgZ2V0VGltZUgoKSk7XHJcbiAgICAgICAgY29uc3QgZ3Jvd0Rpc3BhdGNoZWQgPSBncm93U2VydmVyKG5zLCB0YXJnZXQsIDApO1xyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vIGhhY2tpbmdcclxuXHJcbiAgICAgICAgLy8gaGFja2luZyBzdGFydCBsb2dpYywgZm9yIGZ1cnRoZXIgdGltZSBvcHRpbWl6YXRpb25zXHJcbiAgICAgICAgLy8gbm90ZTogd2hlbiB3ZWFrMiBmYWlscywgdGhlIGdyb3cgbXVzdCBhbHNvIGZhaWwgKGFuZCB2aWNlIHZlcnNhOiB3aGVuIGdyb3cgZmFpbHMsIHdlYWsyIHNob3VsZCBub3QgaGF2ZSBzdGFydGVkKVxyXG4gICAgICAgIGlmICh3ZWFrMURpc3BhdGNoZWQgPT0gdHJ1ZSAmJiB3ZWFrMkRpc3BhdGNoZWQgPT0gZmFsc2UgJiYgZ3Jvd0Rpc3BhdGNoZWQgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gc2NlbmFyaW86IHdlYWsxIHdvcmtzLCByZXN0IHNraXBcclxuICAgICAgICAgICAgLy8gaGFjayBmaW5pc2hlcyAxIG1hcmdpbiB1bml0IGFmdGVyIHdlYWsxIGVuZHNcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBDb2xvcnMuWUVMTE9XICtcclxuICAgICAgICAgICAgICAgICAgICBcIldlYWsgMiB3YXMgc2tpcHBlZC4gRGlkIHRoZSBsYXN0IGhhY2sgYXR0ZW1wdCBmYWlsP1xcbkhhY2tpbmcgaXMgYWJvdXQgdG8gc3RhcnQgZWFybGllciB0aGFuIHBsYW5uZWQuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIENvbG9ycy5SRVNFVCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QgaGFja1N0YXJ0VGltZSA9IHdlYWtUaW1lICsgREVMQVlfTUFSR0lOX01TIC0gaGFja1RpbWU7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tTdGFydFRpbWUpO1xyXG4gICAgICAgICAgICBucy5wcmludChcIkF0dGVtcHRpbmcgdG8gc3RhcnQgSGFjayBhdCBcIiArIGdldFRpbWVIKCkpO1xyXG4gICAgICAgICAgICBoYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIDApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh3ZWFrMURpc3BhdGNoZWQgPT0gZmFsc2UgJiYgd2VhazJEaXNwYXRjaGVkID09IGZhbHNlICYmIGdyb3dEaXNwYXRjaGVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIC8vIHNjZW5hcmlvOiB3ZWFrMSBhbmQgd2VhazIgc2tpcHBlZFxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJXZWFrIDEgYW5kIFdlYWsgMiB3ZXJlIHNraXBwZWQ/IEhhY2tpbmcgbm93LiBcIiArIGdldFRpbWVIKCkgKyBDb2xvcnMuUkVTRVQpO1xyXG4gICAgICAgICAgICBoYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIDApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh3ZWFrMURpc3BhdGNoZWQgPT0gdHJ1ZSAmJiBncm93RGlzcGF0Y2hlZCA9PSB0cnVlICYmIHdlYWsyRGlzcGF0Y2hlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vIGhhY2sgbm9ybWFsXHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5HUkVFTiArIFwiSGFjayBpcyBhYm91dCB0byBzdGFydCBhcyBleHBlY3RlZFwiICsgQ29sb3JzLlJFU0VUKTtcclxuICAgICAgICAgICAgY29uc3QgaGFja1N0YXJ0VGltZSA9IHdlYWtUaW1lICsgMyAqIERFTEFZX01BUkdJTl9NUyAtIGhhY2tUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrRGVsYXlEaWZmID0gaGFja1N0YXJ0VGltZSAtIGdyb3dTdGFydFRpbWU7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tEZWxheURpZmYpO1xyXG4gICAgICAgICAgICBucy5wcmludChcIkF0dGVtcHRpbmcgdG8gc3RhcnQgSGFjayBhdCBcIiArIGdldFRpbWVIKCkpO1xyXG4gICAgICAgICAgICBoYWNrU2VydmVyKG5zLCB0YXJnZXQsIGhhY2tUaHJlc2hvbGQsIDApO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChoYWNrVGltZSArIERFTEFZX01BUkdJTl9NUyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh3ZWFrMURpc3BhdGNoZWQgPT0gZmFsc2UgJiYgd2VhazJEaXNwYXRjaGVkID09IHRydWUgJiYgZ3Jvd0Rpc3BhdGNoZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvLyBjYXNlIHdlYWsxIHdhcyBza2lwcGVkLCBidXQgd2VhazIgYW5kIGdyb3cgd2VyZSBkaXNwYXRjaGVkXHJcblxyXG4gICAgICAgICAgICBucy5wcmludChcclxuICAgICAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgKyBcIldlYWsgMSB3YXMgc2tpcHBlZC4gUGVyaGFwcyB0aGUgc2VydmVyIGlzIGFscmVhZHkgYXQgdGhlIG1pbiBzZWMgbHZsLlwiICsgQ29sb3JzLlJFU0VULFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBjb25zdCBoYWNrU3RhcnRUaW1lID0gd2Vha1RpbWUgKyAyICogREVMQVlfTUFSR0lOX01TIC0gaGFja1RpbWU7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tTdGFydFRpbWUgLSBncm93U3RhcnRUaW1lKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJBdHRlbXB0aW5nIHRvIHN0YXJ0IEhhY2sgYXQgXCIgKyBnZXRUaW1lSCgpKTtcclxuICAgICAgICAgICAgaGFja1NlcnZlcihucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCAwKTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoaGFja1RpbWUgKyBERUxBWV9NQVJHSU5fTVMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcImNvdWxkIG5vdCBzdGFydCBoYWNrIVwiICsgQ29sb3JzLlJFU0VUKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBcIndlYWsxRGlzcGF0Y2hlZDogXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHdlYWsxRGlzcGF0Y2hlZCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgfCB3ZWFrMkRpc3BhdGNoZWQ6IFwiICtcclxuICAgICAgICAgICAgICAgICAgICB3ZWFrMkRpc3BhdGNoZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIHwgZ3Jvd0Rpc3BhdGNoZWQ6IFwiICtcclxuICAgICAgICAgICAgICAgICAgICBncm93RGlzcGF0Y2hlZCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcHJpbnRTZXJ2ZXJTdGF0cyhucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiBub3RlczpcclxuIHdlYWtlbiByZW1vdmVzIDAuMDUgc2VjIGx2bFxyXG4gZ3JvdyBhZGRzIDAuMDA0IHNlYyBsdmxcclxuXHJcbiBncm93IGFkZHMgbW9uZXk6XHJcblxyXG4gKi9cclxuIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxRQUFRLGdCQUFnQjtBQUNqQyxTQUFTLHdCQUF3QjtBQUNqQyxTQUFTLHFCQUFxQjtBQUM5QixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLGtCQUFrQjtBQUMzQixTQUFTLG9CQUFvQjtBQUU3QixNQUFNLGtCQUFrQixPQUFPO0FBRS9CLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFPbkIsU0FBTyxNQUFNO0FBQ1QsVUFBTSxTQUFTLGNBQWMsRUFBRTtBQUMvQixVQUFNLGNBQWMsSUFBSSxRQUFRLEdBQUc7QUFBQSxFQUN2QztBQUNKO0FBRUEsc0JB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\",\"filename\":\"parallel/manager.js\",\"server\":\"home\"}}],[\"parallel/weakenAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads } from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  weakenServer(ns, \\\"foodnstuff\\\", 1, 0);\\n}\\nexport function weakenServer(ns, target, order, batchId, delay = 0) {\\n  let totalWeakenThreadsNeeded = 0;\\n  if (order == 1) {\\n    totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    ns.print(\\\"Actual weaken1 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else if (order == 2) {\\n    const growThreads = getGrowThreads(ns, target);\\n    const secIncrease = ns.growthAnalyzeSecurity(growThreads, target);\\n    totalWeakenThreadsNeeded = Math.ceil(secIncrease / ns.weakenAnalyze(1));\\n    ns.print(\\\"Actual weaken2 threads needed: \\\" + totalWeakenThreadsNeeded);\\n  } else {\\n    throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n  }\\n  if (totalWeakenThreadsNeeded < 1) {\\n    ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n    return false;\\n  }\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const weakenScriptRam = 1.75;\\n  let threadsDispatched = 0;\\n  let threadsRemaining = totalWeakenThreadsNeeded;\\n  for (let i = 0; i < allHosts.length; i++) {\\n    if (threadsDispatched >= totalWeakenThreadsNeeded)\\n      break;\\n    const host = allHosts[i];\\n    const freeRam = host.availableRam;\\n    if (freeRam < weakenScriptRam)\\n      continue;\\n    const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n    const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n    ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay);\\n    threadsRemaining -= threadsToDispatch;\\n    threadsDispatched += threadsToDispatch;\\n  }\\n  if (threadsRemaining <= 0) {\\n    ns.print(\\\"Done deploying weaken\\\" + order + \\\"!\\\");\\n    return true;\\n  }\\n  ns.print(\\n    Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n  );\\n  const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n  const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n  if (server === \\\"\\\") {\\n    ns.tprint(\\\"Error! Could not buy server to weak \\\" + target);\\n    throw new Error(\\\"Error! Could not buy server to weak \\\" + target);\\n  }\\n  ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay);\\n  return true;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbkFsZ28udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIH0gZnJvbSBcIkAvYmVzdFNlcnZlclwiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldEdyb3dUaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBTZXJ2ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vU2VydmVyTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICB3ZWFrZW5TZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAxLCAwKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICogVGhlIG51bWJlciBvZiB0aHJlYWRzIGlzIGNhbGN1bGF0ZWQgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHdlYWtlbmluZyBhbmQgdGhlIHRhcmdldCBzZXJ2ZXIncyBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0QVBJIG9iamVjdC5cclxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICogQHBhcmFtIGhvc3QgLSBUaGUgbmFtZSBvZiB0aGUgY3VycmVudCBzZXJ2ZXIgaG9zdGluZyB0aGUgd2Vha2VuIHNjcmlwdC5cclxuICogQHBhcmFtIG9yZGVyIC0gVGhlIG9yZGVyIG9mIHdlYWtlbmluZy4gQ2FuIG9ubHkgYmUgZWl0aGVyIDEgb3IgMi5cclxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgd2Vha2VuIG9wZXJhdGlvbiB3YXMgc3VjY2Vzc2Z1bC5cclxuICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgd2Vha2VuIG9yZGVyIGlzIG5vdCAxIG9yIDIsIG9yIGlmIHRoZXJlIGlzIG5vdCBlbm91Z2ggZnJlZSBSQU0gdG8gZXhlY3V0ZSB0aGUgd2Vha2VuIG9wZXJhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB3ZWFrZW5TZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgb3JkZXI6IG51bWJlciwgYmF0Y2hJZDogbnVtYmVyLCBkZWxheSA9IDApOiBib29sZWFuIHtcclxuICAgIGxldCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgLy8gY2FsY3VsYXRlIHdlYWtlbmluZyB0aHJlYWRzIGJhc2VkIG9uIHRoZSBvcmRlclxyXG5cclxuICAgIGlmIChvcmRlciA9PSAxKSB7XHJcbiAgICAgICAgLy8gZmlyc3Qgd2VhayBoYXMgdG8gd2Vha2VuIHNlcnZlciB0byBtaW4gZnJvbSB1bmtub3duIHNlYyBsdmxcclxuICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjEgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMikge1xyXG4gICAgICAgIC8vIHNlY29uZCB3ZWFrIG9ubHkgaGFzIHRvIHJlbW92ZSB0aGUgc2VjIGluY3JlYXNlIGZyb20gdGhlIGdyb3cgYmVmb3JlIChtb3JlIHJhbSBlZmZpY2llbnQpXHJcbiAgICAgICAgY29uc3QgZ3Jvd1RocmVhZHMgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBzZWNJbmNyZWFzZSA9IG5zLmdyb3d0aEFuYWx5emVTZWN1cml0eShncm93VGhyZWFkcywgdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gTWF0aC5jZWlsKHNlY0luY3JlYXNlIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgICAgIG5zLnByaW50KFwiQWN0dWFsIHdlYWtlbjIgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2Vha2VuIG9yZGVyIGNhbiBvbmx5IGJlIGVpdGhlciAxIG9yIDIhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPCAxKSB7XHJcbiAgICAgICAgbnMucHJpbnQoXCJXZWFrZW50aHJlYWRzIGFyZSAwLCBza2lwcGluZyB3ZWFrIFwiICsgb3JkZXIpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgY29uc3Qgd2Vha2VuU2NyaXB0UmFtID0gMS43NTtcclxuXHJcbiAgICBsZXQgdGhyZWFkc0Rpc3BhdGNoZWQgPSAwO1xyXG4gICAgbGV0IHRocmVhZHNSZW1haW5pbmcgPSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQ7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XHJcbiAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG5cclxuICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgaWYgKGZyZWVSYW0gPCB3ZWFrZW5TY3JpcHRSYW0pIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHRocmVhZFNwYWNlID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gd2Vha2VuU2NyaXB0UmFtKTtcclxuXHJcbiAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgdGhyZWFkU3BhY2UpO1xyXG5cclxuICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgKz0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPD0gMCkge1xyXG4gICAgICAgIG5zLnByaW50KFwiRG9uZSBkZXBsb3lpbmcgd2Vha2VuXCIgKyBvcmRlciArIFwiIVwiKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIG5zLnByaW50KFxyXG4gICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICBcIlRoZXJlIGFyZSBcIiArXHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgK1xyXG4gICAgICAgICAgICBcIiB0aHJlYWRzIHJlbWFpbmluZyBhZnRlciBkaXNwYXRjaGluZyBhbGwgdGhyZWFkcywgYXR0ZW1wdGluZyB0byBkaXNwYXRjaCByZW1haW5pbmcgdGhyZWFkcyBvbiBwdXJjaGFzZWQgc2VydmVyXCIsXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IG5lZWRlZFdlYWtlblJhbSA9IHRocmVhZHNSZW1haW5pbmcgKiB3ZWFrZW5TY3JpcHRSYW07XHJcbiAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkV2Vha2VuUmFtLCBDb25maWcuV0VBS19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgaWYgKHNlcnZlciA9PT0gXCJcIikge1xyXG4gICAgICAgIG5zLnRwcmludChcIkVycm9yISBDb3VsZCBub3QgYnV5IHNlcnZlciB0byB3ZWFrIFwiICsgdGFyZ2V0KTtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciEgQ291bGQgbm90IGJ1eSBzZXJ2ZXIgdG8gd2VhayBcIiArIHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbnMuZXhlYyhcIndlYWtlbi5qc1wiLCBzZXJ2ZXIsIHRocmVhZHNSZW1haW5pbmcsIHRhcmdldCwgZGVsYXkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsUUFBUSxnQkFBZ0Isd0JBQXdCO0FBRXpELFNBQVMscUJBQXFCO0FBRTlCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsZUFBYSxJQUFJLGNBQWMsR0FBRyxDQUFDO0FBQ3ZDO0FBYU8sZ0JBQVMsYUFBYSxJQUFRLFFBQWdCLE9BQWUsU0FBaUIsUUFBUSxHQUFZO0FBQ3JHLE1BQUksMkJBQTJCO0FBRy9CLE1BQUksU0FBUyxHQUFHO0FBRVosK0JBQTJCLGlCQUFpQixJQUFJLE1BQU07QUFDdEQsT0FBRyxNQUFNLG9DQUFvQyx3QkFBd0I7QUFBQSxFQUN6RSxXQUFXLFNBQVMsR0FBRztBQUVuQixVQUFNLGNBQWMsZUFBZSxJQUFJLE1BQU07QUFDN0MsVUFBTSxjQUFjLEdBQUcsc0JBQXNCLGFBQWEsTUFBTTtBQUVoRSwrQkFBMkIsS0FBSyxLQUFLLGNBQWMsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUV0RSxPQUFHLE1BQU0sb0NBQW9DLHdCQUF3QjtBQUFBLEVBQ3pFLE9BQU87QUFDSCxVQUFNLElBQUksTUFBTSx5Q0FBeUM7QUFBQSxFQUM3RDtBQUVBLE1BQUksMkJBQTJCLEdBQUc7QUFDOUIsT0FBRyxNQUFNLHdDQUF3QyxLQUFLO0FBQ3RELFdBQU87QUFBQSxFQUNYO0FBR0EsUUFBTSxXQUFXLDBCQUEwQixFQUFFO0FBQzdDLFFBQU0sa0JBQWtCO0FBRXhCLE1BQUksb0JBQW9CO0FBQ3hCLE1BQUksbUJBQW1CO0FBQ3ZCLFdBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEtBQUs7QUFDdEMsUUFBSSxxQkFBcUI7QUFBMEI7QUFDbkQsVUFBTSxPQUFPLFNBQVMsQ0FBQztBQUV2QixVQUFNLFVBQVUsS0FBSztBQUNyQixRQUFJLFVBQVU7QUFBaUI7QUFDL0IsVUFBTSxjQUFjLEtBQUssTUFBTSxVQUFVLGVBQWU7QUFHeEQsVUFBTSxvQkFBb0IsS0FBSyxJQUFJLGtCQUFrQixXQUFXO0FBRWhFLE9BQUcsS0FBSyxhQUFhLEtBQUssTUFBTSxtQkFBbUIsUUFBUSxLQUFLO0FBQ2hFLHdCQUFvQjtBQUNwQix5QkFBcUI7QUFBQSxFQUN6QjtBQUVBLE1BQUksb0JBQW9CLEdBQUc7QUFDdkIsT0FBRyxNQUFNLDBCQUEwQixRQUFRLEdBQUc7QUFDOUMsV0FBTztBQUFBLEVBQ1g7QUFDQSxLQUFHO0FBQUEsSUFDQyxPQUFPLFNBQ0gsZUFDQSxtQkFDQTtBQUFBLEVBQ1I7QUFFQSxRQUFNLGtCQUFrQixtQkFBbUI7QUFDM0MsUUFBTSxTQUFTLGNBQWMsbUJBQW1CLElBQUksaUJBQWlCLE9BQU8sZ0JBQWdCO0FBRTVGLE1BQUksV0FBVyxJQUFJO0FBQ2YsT0FBRyxPQUFPLHlDQUF5QyxNQUFNO0FBQ3pELFVBQU0sSUFBSSxNQUFNLHlDQUF5QyxNQUFNO0FBQUEsRUFDbkU7QUFFQSxLQUFHLEtBQUssYUFBYSxRQUFRLGtCQUFrQixRQUFRLEtBQUs7QUFFNUQsU0FBTztBQUNYOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/weakenAlgo.js\",\"server\":\"home\"}}],[\"serverStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors } from \\\"/lib.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { Config } from \\\"/Config/Config.js\\\";\\nconst BORDER_COLOR = Colors.CYAN;\\nlet maxMoney = 0;\\nlet curMoney = 0;\\nlet hackingChance = 0;\\nlet minSec = 0;\\nlet curSec = 0;\\nlet maxRam = 0;\\nlet useRam = 0;\\nlet freeRam = 0;\\nlet moneyMultiplier = 0;\\nlet growingThreads = 0;\\nlet serverWeakenThreadsCur = 0;\\nlet hackThreads = 0;\\nlet headerString = \\\"\\\";\\nlet footerString = \\\"\\\";\\nlet hackingPercent = 0;\\nexport function printServerStats(ns, server, hackThreshold) {\\n  setStats(ns, server, hackThreshold);\\n  ns.print(BORDER_COLOR + headerString + Colors.RESET);\\n  printStatLine(ns, \\\"Money:\\\", false);\\n  printStatLine(ns, \\\"Max Money: \\\" + ns.formatNumber(maxMoney) + \\\" | Current Money: \\\" + ns.formatNumber(curMoney));\\n  printStatLine(\\n    ns,\\n    \\\"Percent: \\\" + ns.formatNumber(curMoney / maxMoney) + \\\" | Hack Chance: \\\" + ns.formatNumber(hackingChance)\\n  );\\n  printStatLine(ns, \\\"Security:\\\", false);\\n  printStatLine(ns, \\\"Min Seclvl: \\\" + minSec + \\\" | Current Seclvl: \\\" + ns.formatNumber(curSec));\\n  printStatLine(ns, \\\"Ram:\\\", false);\\n  printStatLine(ns, \\\"Server Max Ram: \\\" + maxRam);\\n  printStatLine(ns, \\\"Used Ram: \\\" + useRam + \\\" | free Ram: \\\" + freeRam);\\n  printStatLine(ns, \\\"Threads:\\\", false);\\n  printStatLine(ns, \\\"Grow Threads: \\\" + growingThreads);\\n  printStatLine(ns, \\\"Weaken Threads \\\" + serverWeakenThreadsCur);\\n  printStatLine(ns, \\\"Hack Threads: \\\" + hackThreads + \\\" | Hack percent: \\\" + ns.formatNumber(hackingPercent, 5));\\n  ns.print(BORDER_COLOR + footerString + Colors.RESET);\\n  return footerString.length;\\n}\\nexport function printServerStatsConsole() {\\n}\\nfunction setStats(ns, server, hackThreshold) {\\n  maxMoney = ns.getServerMaxMoney(server);\\n  curMoney = ns.getServerMoneyAvailable(server);\\n  hackingChance = ns.hackAnalyzeChance(server);\\n  minSec = ns.getServerMinSecurityLevel(server);\\n  curSec = ns.getServerSecurityLevel(server);\\n  maxRam = ns.getServerMaxRam(server);\\n  useRam = ns.getServerUsedRam(server);\\n  freeRam = maxRam - useRam;\\n  moneyMultiplier = maxMoney / curMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = 1;\\n  growingThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier));\\n  serverWeakenThreadsCur = Math.ceil((curSec - ns.getServerMinSecurityLevel(server)) / 0.05);\\n  hackingPercent = ns.hackAnalyze(server);\\n  hackThreads = Math.ceil(hackThreshold / hackingPercent);\\n  if (isNaN(hackThreads) || hackThreads == Infinity)\\n    hackThreads = 0;\\n  if (isNaN(hackingPercent) || hackingPercent == Infinity)\\n    hackingPercent = 0;\\n  headerString = \\\"┌───────────────── stats for \\\" + server + \\\" ─────────────────┐\\\";\\n  footerString = \\\"└\\\" + \\\"─\\\".repeat(headerString.length - 2) + \\\"┘\\\";\\n}\\nfunction printStatLine(ns, value, indent = true) {\\n  if (indent)\\n    value = \\\"\\t\\\" + value;\\n  const offset = indent ? 8 : 3;\\n  ns.print(\\n    BORDER_COLOR + \\\"│ \\\" + Colors.RESET + value + \\\" \\\".repeat(headerString.length - value.length - offset) + BORDER_COLOR + \\\"│\\\" + Colors.RESET\\n  );\\n}\\nexport function getNumThreadsActive(ns) {\\n  const hosts = getBestHostByRamOptimized(ns);\\n  let totalThreads = 0;\\n  for (let i = 0; i < hosts.length; i++) {\\n    const host = hosts[i];\\n    const processes = ns.ps(host.name);\\n    processes.forEach((process) => {\\n      totalThreads += process.threads;\\n    });\\n  }\\n  return totalThreads;\\n}\\nexport function autocomplete(data) {\\n  return [...data.servers];\\n}\\nexport async function main(ns) {\\n  ns.clearLog();\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  if (ns.args.length == 1) {\\n    while (true) {\\n      ns.clearLog();\\n      const width = printServerStats(ns, ns.args[0].toString(), 0.9);\\n      ns.resizeTail((width - 1) * 10, 375);\\n      await ns.sleep(100);\\n    }\\n  } else {\\n    while (true) {\\n      ns.clearLog();\\n      const server = ns.peek(1);\\n      if (server === \\\"NULL PORT DATA\\\") {\\n        ns.print(\\\"No server found, waiting for data...\\\");\\n        await ns.getPortHandle(1).nextWrite();\\n        continue;\\n      }\\n      const width = printServerStats(ns, server.toString(), 0.9);\\n      ns.resizeTail((width - 1) * 10, 375);\\n      await ns.sleep(Config.DELAY_MARGIN_MS);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlclN0YXRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tIFwiLi9saWJcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCIuL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vQ29uZmlnL0NvbmZpZ1wiO1xyXG5cclxuY29uc3QgQk9SREVSX0NPTE9SID0gQ29sb3JzLkNZQU47XHJcblxyXG5sZXQgbWF4TW9uZXkgPSAwO1xyXG5sZXQgY3VyTW9uZXkgPSAwO1xyXG5sZXQgaGFja2luZ0NoYW5jZSA9IDA7XHJcbmxldCBtaW5TZWMgPSAwO1xyXG5sZXQgY3VyU2VjID0gMDtcclxubGV0IG1heFJhbSA9IDA7XHJcbmxldCB1c2VSYW0gPSAwO1xyXG5sZXQgZnJlZVJhbSA9IDA7XHJcbmxldCBtb25leU11bHRpcGxpZXIgPSAwO1xyXG5sZXQgZ3Jvd2luZ1RocmVhZHMgPSAwO1xyXG5sZXQgc2VydmVyV2Vha2VuVGhyZWFkc0N1ciA9IDA7XHJcbmxldCBoYWNrVGhyZWFkcyA9IDA7XHJcbmxldCBoZWFkZXJTdHJpbmcgPSBcIlwiO1xyXG5sZXQgZm9vdGVyU3RyaW5nID0gXCJcIjtcclxubGV0IGhhY2tpbmdQZXJjZW50ID0gMDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmludFNlcnZlclN0YXRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgc2V0U3RhdHMobnMsIHNlcnZlciwgaGFja1RocmVzaG9sZCk7XHJcblxyXG4gICAgbnMucHJpbnQoQk9SREVSX0NPTE9SICsgaGVhZGVyU3RyaW5nICsgQ29sb3JzLlJFU0VUKTtcclxuXHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIk1vbmV5OlwiLCBmYWxzZSk7XHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIk1heCBNb25leTogXCIgKyBucy5mb3JtYXROdW1iZXIobWF4TW9uZXkpICsgXCIgfCBDdXJyZW50IE1vbmV5OiBcIiArIG5zLmZvcm1hdE51bWJlcihjdXJNb25leSkpO1xyXG4gICAgcHJpbnRTdGF0TGluZShcclxuICAgICAgICBucyxcclxuICAgICAgICBcIlBlcmNlbnQ6IFwiICsgbnMuZm9ybWF0TnVtYmVyKGN1ck1vbmV5IC8gbWF4TW9uZXkpICsgXCIgfCBIYWNrIENoYW5jZTogXCIgKyBucy5mb3JtYXROdW1iZXIoaGFja2luZ0NoYW5jZSksXHJcbiAgICApO1xyXG5cclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiU2VjdXJpdHk6XCIsIGZhbHNlKTtcclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiTWluIFNlY2x2bDogXCIgKyBtaW5TZWMgKyBcIiB8IEN1cnJlbnQgU2VjbHZsOiBcIiArIG5zLmZvcm1hdE51bWJlcihjdXJTZWMpKTtcclxuXHJcbiAgICBwcmludFN0YXRMaW5lKG5zLCBcIlJhbTpcIiwgZmFsc2UpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJTZXJ2ZXIgTWF4IFJhbTogXCIgKyBtYXhSYW0pO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJVc2VkIFJhbTogXCIgKyB1c2VSYW0gKyBcIiB8IGZyZWUgUmFtOiBcIiArIGZyZWVSYW0pO1xyXG5cclxuICAgIHByaW50U3RhdExpbmUobnMsIFwiVGhyZWFkczpcIiwgZmFsc2UpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJHcm93IFRocmVhZHM6IFwiICsgZ3Jvd2luZ1RocmVhZHMpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJXZWFrZW4gVGhyZWFkcyBcIiArIHNlcnZlcldlYWtlblRocmVhZHNDdXIpO1xyXG4gICAgcHJpbnRTdGF0TGluZShucywgXCJIYWNrIFRocmVhZHM6IFwiICsgaGFja1RocmVhZHMgKyBcIiB8IEhhY2sgcGVyY2VudDogXCIgKyBucy5mb3JtYXROdW1iZXIoaGFja2luZ1BlcmNlbnQsIDUpKTtcclxuXHJcbiAgICBucy5wcmludChCT1JERVJfQ09MT1IgKyBmb290ZXJTdHJpbmcgKyBDb2xvcnMuUkVTRVQpO1xyXG5cclxuICAgIHJldHVybiBmb290ZXJTdHJpbmcubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTZXJ2ZXJTdGF0c0NvbnNvbGUoKSB7XHJcbiAgICAvLyB0b2RvXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFN0YXRzKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIGhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgLy8gbW9uZXlcclxuICAgIG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyKTtcclxuICAgIGN1ck1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKTtcclxuICAgIGhhY2tpbmdDaGFuY2UgPSBucy5oYWNrQW5hbHl6ZUNoYW5jZShzZXJ2ZXIpO1xyXG4gICAgLy8gc2VjIGx2bFxyXG4gICAgbWluU2VjID0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xyXG4gICAgY3VyU2VjID0gbnMuZ2V0U2VydmVyU2VjdXJpdHlMZXZlbChzZXJ2ZXIpO1xyXG4gICAgLy8gcmFtXHJcbiAgICBtYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcclxuICAgIHVzZVJhbSA9IG5zLmdldFNlcnZlclVzZWRSYW0oc2VydmVyKTtcclxuICAgIGZyZWVSYW0gPSBtYXhSYW0gLSB1c2VSYW07XHJcbiAgICAvLyB0aHJlYWRzXHJcblxyXG4gICAgbW9uZXlNdWx0aXBsaWVyID0gbWF4TW9uZXkgLyBjdXJNb25leTtcclxuICAgIGlmIChpc05hTihtb25leU11bHRpcGxpZXIpIHx8IG1vbmV5TXVsdGlwbGllciA9PSBJbmZpbml0eSkgbW9uZXlNdWx0aXBsaWVyID0gMTtcclxuXHJcbiAgICBncm93aW5nVGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHNlcnZlciwgbW9uZXlNdWx0aXBsaWVyKSk7XHJcblxyXG4gICAgc2VydmVyV2Vha2VuVGhyZWFkc0N1ciA9IE1hdGguY2VpbCgoY3VyU2VjIC0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbChzZXJ2ZXIpKSAvIDAuMDUpO1xyXG5cclxuICAgIGhhY2tpbmdQZXJjZW50ID0gbnMuaGFja0FuYWx5emUoc2VydmVyKTtcclxuICAgIGhhY2tUaHJlYWRzID0gTWF0aC5jZWlsKGhhY2tUaHJlc2hvbGQgLyBoYWNraW5nUGVyY2VudCk7XHJcbiAgICBpZiAoaXNOYU4oaGFja1RocmVhZHMpIHx8IGhhY2tUaHJlYWRzID09IEluZmluaXR5KSBoYWNrVGhyZWFkcyA9IDA7XHJcbiAgICBpZiAoaXNOYU4oaGFja2luZ1BlcmNlbnQpIHx8IGhhY2tpbmdQZXJjZW50ID09IEluZmluaXR5KSBoYWNraW5nUGVyY2VudCA9IDA7XHJcblxyXG4gICAgaGVhZGVyU3RyaW5nID0gXCLilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgc3RhdHMgZm9yIFwiICsgc2VydmVyICsgXCIg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXCI7XHJcbiAgICBmb290ZXJTdHJpbmcgPSBcIuKUlFwiICsgXCLilIBcIi5yZXBlYXQoaGVhZGVyU3RyaW5nLmxlbmd0aCAtIDIpICsgXCLilJhcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJpbnRTdGF0TGluZShuczogTlMsIHZhbHVlOiBzdHJpbmcsIGluZGVudCA9IHRydWUpIHtcclxuICAgIGlmIChpbmRlbnQpIHZhbHVlID0gXCJcXHRcIiArIHZhbHVlO1xyXG4gICAgY29uc3Qgb2Zmc2V0ID0gaW5kZW50ID8gOCA6IDM7IC8vIHRoZSBvZmZzZXQgdG8gc3VidHJhY3QgdGhlIGJvcmRlciBhbmQgaW5kZW50XHJcbiAgICBucy5wcmludChcclxuICAgICAgICBCT1JERVJfQ09MT1IgK1xyXG4gICAgICAgICAgICBcIuKUgiBcIiArXHJcbiAgICAgICAgICAgIENvbG9ycy5SRVNFVCArXHJcbiAgICAgICAgICAgIHZhbHVlICtcclxuICAgICAgICAgICAgXCIgXCIucmVwZWF0KGhlYWRlclN0cmluZy5sZW5ndGggLSB2YWx1ZS5sZW5ndGggLSBvZmZzZXQpICtcclxuICAgICAgICAgICAgQk9SREVSX0NPTE9SICtcclxuICAgICAgICAgICAgXCLilIJcIiArXHJcbiAgICAgICAgICAgIENvbG9ycy5SRVNFVCxcclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROdW1UaHJlYWRzQWN0aXZlKG5zOiBOUykge1xyXG4gICAgY29uc3QgaG9zdHMgPSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkKG5zKTtcclxuXHJcbiAgICBsZXQgdG90YWxUaHJlYWRzID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBob3N0ID0gaG9zdHNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlcyA9IG5zLnBzKGhvc3QubmFtZSk7XHJcblxyXG4gICAgICAgIHByb2Nlc3Nlcy5mb3JFYWNoKChwcm9jZXNzKSA9PiB7XHJcbiAgICAgICAgICAgIHRvdGFsVGhyZWFkcyArPSBwcm9jZXNzLnRocmVhZHM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWxUaHJlYWRzO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQXV0b2NvbXBsZXRlRGF0YSB7XHJcbiAgICBzZXJ2ZXJzOiBzdHJpbmdbXTtcclxuICAgIHR4dHM6IHN0cmluZ1tdO1xyXG4gICAgc2NyaXB0czogc3RyaW5nW107XHJcbiAgICBmbGFnczogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogQXV0b2NvbXBsZXRlRGF0YSkge1xyXG4gICAgcmV0dXJuIFsuLi5kYXRhLnNlcnZlcnNdO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLmNsZWFyTG9nKCk7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgLy8gd2hpbGUgKHRydWUpIHtcclxuICAgIC8vICAgICBucy5jbGVhckxvZygpO1xyXG4gICAgLy8gICAgIG5zLnByaW50KGdldE51bVRocmVhZHNBY3RpdmUobnMpKTtcclxuICAgIC8vICAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgIC8vIH1cclxuICAgIGlmIChucy5hcmdzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgbnMuY2xlYXJMb2coKTtcclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwcmludFNlcnZlclN0YXRzKG5zLCBucy5hcmdzWzBdLnRvU3RyaW5nKCksIDAuOSk7XHJcbiAgICAgICAgICAgIG5zLnJlc2l6ZVRhaWwoKHdpZHRoIC0gMSkgKiAxMCwgMzc1KTtcclxuICAgICAgICAgICAgYXdhaXQgbnMuc2xlZXAoMTAwKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgIG5zLmNsZWFyTG9nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IG5zLnBlZWsoMSk7XHJcbiAgICAgICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiTlVMTCBQT1JUIERBVEFcIikge1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJObyBzZXJ2ZXIgZm91bmQsIHdhaXRpbmcgZm9yIGRhdGEuLi5cIik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBucy5nZXRQb3J0SGFuZGxlKDEpLm5leHRXcml0ZSgpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwcmludFNlcnZlclN0YXRzKG5zLCBzZXJ2ZXIudG9TdHJpbmcoKSwgMC45KTtcclxuICAgICAgICAgICAgbnMucmVzaXplVGFpbCgod2lkdGggLSAxKSAqIDEwLCAzNzUpO1xyXG4gICAgICAgICAgICBhd2FpdCBucy5zbGVlcChDb25maWcuREVMQVlfTUFSR0lOX01TKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxpQ0FBaUM7QUFDMUMsU0FBUyxjQUFjO0FBRXZCLE1BQU0sZUFBZSxPQUFPO0FBRTVCLElBQUksV0FBVztBQUNmLElBQUksV0FBVztBQUNmLElBQUksZ0JBQWdCO0FBQ3BCLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksU0FBUztBQUNiLElBQUksVUFBVTtBQUNkLElBQUksa0JBQWtCO0FBQ3RCLElBQUksaUJBQWlCO0FBQ3JCLElBQUkseUJBQXlCO0FBQzdCLElBQUksY0FBYztBQUNsQixJQUFJLGVBQWU7QUFDbkIsSUFBSSxlQUFlO0FBQ25CLElBQUksaUJBQWlCO0FBRWQsZ0JBQVMsaUJBQWlCLElBQVEsUUFBZ0IsZUFBdUI7QUFDNUUsV0FBUyxJQUFJLFFBQVEsYUFBYTtBQUVsQyxLQUFHLE1BQU0sZUFBZSxlQUFlLE9BQU8sS0FBSztBQUVuRCxnQkFBYyxJQUFJLFVBQVUsS0FBSztBQUNqQyxnQkFBYyxJQUFJLGdCQUFnQixHQUFHLGFBQWEsUUFBUSxJQUFJLHVCQUF1QixHQUFHLGFBQWEsUUFBUSxDQUFDO0FBQzlHO0FBQUEsSUFDSTtBQUFBLElBQ0EsY0FBYyxHQUFHLGFBQWEsV0FBVyxRQUFRLElBQUkscUJBQXFCLEdBQUcsYUFBYSxhQUFhO0FBQUEsRUFDM0c7QUFFQSxnQkFBYyxJQUFJLGFBQWEsS0FBSztBQUNwQyxnQkFBYyxJQUFJLGlCQUFpQixT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\",\"filename\":\"serverStats.js\",\"server\":\"home\"}}],[\"bestServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { isHackable, nukeServer, serverScanner } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  getBestServerList(ns, true);\\n}\\nexport function getBestServerList(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName) && !ns.hasRootAccess(serverName))\\n      continue;\\n    nukeServer(ns, serverName);\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const hackingChance = ns.hackAnalyzeChance(serverName);\\n    let weakeningTime = ns.getWeakenTime(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverName) > ns.getHackingLevel())\\n      continue;\\n    let score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    if (ns.fileExists(\\\"formulas.exe\\\", \\\"home\\\")) {\\n      const server2 = ns.getServer(serverName);\\n      const player = ns.getPlayer();\\n      server2.hackDifficulty = server2.minDifficulty;\\n      const maxMoney2 = server2.moneyMax == void 0 ? 0 : server2.moneyMax;\\n      weakeningTime = ns.formulas.hacking.weakenTime(server2, player);\\n      score = maxMoney2 / weakeningTime * ns.formulas.hacking.hackChance(server2, player) / 1e3;\\n    } else {\\n      const serverLvl = ns.getServerRequiredHackingLevel(serverName);\\n      const playerLvl = ns.getHackingLevel();\\n      if (playerLvl / serverLvl < 2)\\n        score = 0;\\n    }\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      hackingChance,\\n      weakeningTime,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function getBestServer(ns) {\\n  const best = getBestServerList(ns, false)[0].name;\\n  if (Config.TARGET !== \\\"\\\")\\n    return Config.TARGET;\\n  return best;\\n}\\nexport function getBestHostByRamOptimized(ns) {\\n  const allHosts = [];\\n  const allServers = serverScanner(ns);\\n  for (let i = 0; i < allServers.length; i++) {\\n    const server = ns.getServer(allServers[i]);\\n    if (server.maxRam - server.ramUsed < 2)\\n      continue;\\n    if (!server.hasAdminRights)\\n      continue;\\n    const serverObj = {\\n      name: server.hostname,\\n      maxRam: server.maxRam,\\n      availableRam: server.maxRam - server.ramUsed,\\n      score: 0\\n    };\\n    if (serverObj.name === \\\"home\\\") {\\n      serverObj.availableRam -= Config.HOME_FREE_RAM;\\n    }\\n    allHosts.push(serverObj);\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  return allHosts;\\n}\\nexport function getBestHostByRam(ns) {\\n  const allHosts = getBestServerListCheap(ns, false).filter((server) => {\\n    return server.availableRam > 2;\\n  });\\n  const home = {\\n    name: \\\"home\\\",\\n    maxRam: ns.getServerMaxRam(\\\"home\\\") - Config.HOME_FREE_RAM,\\n    availableRam: ns.getServerMaxRam(\\\"home\\\") - ns.getServerUsedRam(\\\"home\\\") - Config.HOME_FREE_RAM,\\n    score: 0\\n  };\\n  allHosts.push(home);\\n  const purchasedServers = ns.getPurchasedServers();\\n  for (let i = 0; i < purchasedServers.length; i++) {\\n    const server = {\\n      name: purchasedServers[i],\\n      maxRam: ns.getServerMaxRam(purchasedServers[i]),\\n      availableRam: ns.getServerMaxRam(purchasedServers[i]) - ns.getServerUsedRam(purchasedServers[i]),\\n      score: 0\\n    };\\n    if (server.maxRam > 2) {\\n      allHosts.push(server);\\n    }\\n  }\\n  allHosts.sort((a, b) => {\\n    return a.availableRam - b.availableRam;\\n  });\\n  return allHosts;\\n}\\nexport function getBestServerListCheap(ns, shouldPrint) {\\n  const serverList = serverScanner(ns);\\n  const servers = [];\\n  for (let i = 0; i < serverList.length; i++) {\\n    const serverName = serverList[i];\\n    if (!isHackable(ns, serverName))\\n      continue;\\n    const maxMoney = ns.getServerMaxMoney(serverName);\\n    const maxRam = ns.getServerMaxRam(serverName);\\n    if (maxMoney < 1 || ns.getServerRequiredHackingLevel(serverList[i]) > ns.getHackingLevel())\\n      continue;\\n    const score = maxMoney / ns.getServerMinSecurityLevel(serverName) / 1e6;\\n    const server = {\\n      name: serverName,\\n      maxMoney,\\n      maxRam,\\n      availableRam: maxRam - ns.getServerUsedRam(serverName),\\n      score\\n    };\\n    servers.push(server);\\n  }\\n  servers.sort((a, b) => {\\n    return (b.score || 0) - (a.score || 0);\\n  });\\n  if (shouldPrint)\\n    printTable(ns, servers);\\n  return servers;\\n}\\nexport function printTable(ns, array) {\\n  const tableArray = [];\\n  for (let i = 0; i < array.length; i++) {\\n    if (array[i].maxMoney === void 0)\\n      array[i].maxMoney = 0;\\n    if (array[i].hackingChance === void 0)\\n      array[i].hackingChance = 0;\\n    if (array[i].weakeningTime === void 0)\\n      array[i].weakeningTime = 0;\\n    const server = {\\n      name: array[i].name,\\n      maxMoney: ns.formatNumber(Number(array[i].maxMoney)),\\n      hackingChance: ns.formatNumber(Number(array[i].hackingChance)),\\n      weakeningTime: ns.formatNumber(Number(array[i].weakeningTime) / 1e3),\\n      //ns.formatNumber(Number(array[i].weakeningTime), 4),\\n      score: ns.formatNumber(Number(array[i].score))\\n    };\\n    tableArray.push(server);\\n  }\\n  ns.print(\\\"╔════════════════════╦══════════╦════════╦═══════════╦═════════╗\\\");\\n  ns.print(\\\"║       server       ║   Max $  ║ chance ║ Weak time ║  score  ║\\\");\\n  ns.print(\\\"╠════════════════════╬══════════╬════════╬═══════════╬═════════╣\\\");\\n  for (let i = 0; i < tableArray.length; i++) {\\n    ns.print(\\n      \\\"║ \\\" + tableArray[i].name + space(tableArray[i].name.length, 0) + \\\"║ \\\" + tableArray[i].maxMoney + space(tableArray[i].maxMoney.length, 1) + \\\"║ \\\" + tableArray[i].hackingChance + space(tableArray[i].hackingChance.length, 2) + \\\"║ \\\" + tableArray[i].weakeningTime + space(tableArray[i].weakeningTime.length, 3) + \\\"║ \\\" + tableArray[i].score + space(tableArray[i].score.length, 4) + \\\"║\\\"\\n    );\\n  }\\n  ns.print(\\\"╚════════════════════╩══════════╩════════╩═══════════╩═════════╝\\\");\\n}\\nfunction space(len, colIndex) {\\n  const colLen = [19, 9, 7, 10, 8];\\n  const real = colLen[colIndex] - len;\\n  let str = \\\"\\\";\\n  for (let i = 0; i < real; i++) {\\n    str += \\\" \\\";\\n  }\\n  return str;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlc3RTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9Db25maWcvQ29uZmlnLmpzXCI7XHJcbmltcG9ydCB7IGlzSGFja2FibGUsIG51a2VTZXJ2ZXIsIHNlcnZlclNjYW5uZXIgfSBmcm9tIFwiLi9saWIuanNcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIG1heE1vbmV5PzogbnVtYmVyO1xyXG4gICAgaGFja2luZ0NoYW5jZT86IG51bWJlcjtcclxuICAgIHdlYWtlbmluZ1RpbWU/OiBudW1iZXI7XHJcbiAgICBtYXhSYW06IG51bWJlcjtcclxuICAgIGF2YWlsYWJsZVJhbTogbnVtYmVyO1xyXG4gICAgc2NvcmU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgZ2V0QmVzdFNlcnZlckxpc3QobnMsIHRydWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFNlcnZlckxpc3QobnM6IE5TLCBzaG91bGRQcmludDogYm9vbGVhbikge1xyXG4gICAgY29uc3Qgc2VydmVyTGlzdCA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcnM6IFNlcnZlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyTmFtZSA9IHNlcnZlckxpc3RbaV07XHJcbiAgICAgICAgaWYgKCFpc0hhY2thYmxlKG5zLCBzZXJ2ZXJOYW1lKSAmJiAhbnMuaGFzUm9vdEFjY2VzcyhzZXJ2ZXJOYW1lKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIG51a2VTZXJ2ZXIobnMsIHNlcnZlck5hbWUpOyAvLyA1MCBtcyBmb3IgNTAwIGl0dGVyYXRpb25zXHJcblxyXG4gICAgICAgIGNvbnN0IG1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgaGFja2luZ0NoYW5jZSA9IG5zLmhhY2tBbmFseXplQ2hhbmNlKHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGxldCB3ZWFrZW5pbmdUaW1lID0gbnMuZ2V0V2Vha2VuVGltZShzZXJ2ZXJOYW1lKTtcclxuICAgICAgICBjb25zdCBtYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyTmFtZSk7XHJcblxyXG4gICAgICAgIC8vIGZpbHRlciBzZXJ2ZXIgd2l0aCBubyBtb25leSBvciB0aGUgaGFja2luZyBsZXZlbCBhYm92ZSBwbGF5ZXJzIGhhY2tpbmcgbGV2ZWxcclxuICAgICAgICBpZiAobWF4TW9uZXkgPCAxIHx8IG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlck5hbWUpID4gbnMuZ2V0SGFja2luZ0xldmVsKCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBzY29yZSA9IChtYXhNb25leSAvICh3ZWFrZW5pbmdUaW1lICsgMykpICogaGFja2luZ0NoYW5jZSAqICgxIC8gd2Vha2VuaW5nVGltZSlcclxuICAgICAgICAvLyBjb25zdCBzY29yZSA9IG5zLmZvcm1hdE51bWJlcigoKG1heE1vbmV5IC8gKHdlYWtlbmluZ1RpbWUpKSAqIGhhY2tpbmdDaGFuY2UpIC8gMTAwMClcclxuXHJcbiAgICAgICAgbGV0IHNjb3JlID0gbWF4TW9uZXkgLyBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlck5hbWUpIC8gMTAwMDAwMDtcclxuXHJcbiAgICAgICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJmb3JtdWxhcy5leGVcIiwgXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IG5zLmdldFNlcnZlcihzZXJ2ZXJOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcbiAgICAgICAgICAgIHNlcnZlci5oYWNrRGlmZmljdWx0eSA9IHNlcnZlci5taW5EaWZmaWN1bHR5O1xyXG4gICAgICAgICAgICBjb25zdCBtYXhNb25leSA9IHNlcnZlci5tb25leU1heCA9PSB1bmRlZmluZWQgPyAwIDogc2VydmVyLm1vbmV5TWF4O1xyXG4gICAgICAgICAgICB3ZWFrZW5pbmdUaW1lID0gbnMuZm9ybXVsYXMuaGFja2luZy53ZWFrZW5UaW1lKHNlcnZlciwgcGxheWVyKTtcclxuICAgICAgICAgICAgc2NvcmUgPSAoKG1heE1vbmV5IC8gd2Vha2VuaW5nVGltZSkgKiBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tDaGFuY2Uoc2VydmVyLCBwbGF5ZXIpKSAvIDEwMDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VydmVyTHZsID0gbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllckx2bCA9IG5zLmdldEhhY2tpbmdMZXZlbCgpO1xyXG4gICAgICAgICAgICBpZiAocGxheWVyTHZsIC8gc2VydmVyTHZsIDwgMikgc2NvcmUgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlck5hbWUsXHJcbiAgICAgICAgICAgIG1heE1vbmV5OiBtYXhNb25leSxcclxuICAgICAgICAgICAgaGFja2luZ0NoYW5jZTogaGFja2luZ0NoYW5jZSxcclxuICAgICAgICAgICAgd2Vha2VuaW5nVGltZTogd2Vha2VuaW5nVGltZSxcclxuICAgICAgICAgICAgbWF4UmFtOiBtYXhSYW0sXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVJhbTogbWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXJOYW1lKSxcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNlcnZlcnMucHVzaChzZXJ2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcnZlcnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiAoYi5zY29yZSB8fCAwKSAtIChhLnNjb3JlIHx8IDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHNob3VsZFByaW50KSBwcmludFRhYmxlKG5zLCBzZXJ2ZXJzKTtcclxuXHJcbiAgICByZXR1cm4gc2VydmVycztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RTZXJ2ZXIobnM6IE5TKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGJlc3QgPSBnZXRCZXN0U2VydmVyTGlzdChucywgZmFsc2UpWzBdLm5hbWU7XHJcbiAgICBpZiAoQ29uZmlnLlRBUkdFVCAhPT0gXCJcIikgcmV0dXJuIENvbmZpZy5UQVJHRVQ7XHJcbiAgICByZXR1cm4gYmVzdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnM6IE5TKTogU2VydmVyW10ge1xyXG4gICAgY29uc3QgYWxsSG9zdHM6IFNlcnZlcltdID0gW107XHJcbiAgICBjb25zdCBhbGxTZXJ2ZXJzID0gc2VydmVyU2Nhbm5lcihucyk7XHJcbiAgICAvLyBsZXQgaG9tZUlkeCA9IC0xO1xyXG4gICAgLy8gbGV0IGhvbWU6IFNlcnZlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBucy5nZXRTZXJ2ZXIoYWxsU2VydmVyc1tpXSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQgPCAyKSBjb250aW51ZTtcclxuICAgICAgICBpZiAoIXNlcnZlci5oYXNBZG1pblJpZ2h0cykgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlcnZlck9iajogU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBzZXJ2ZXIuaG9zdG5hbWUsXHJcbiAgICAgICAgICAgIG1heFJhbTogc2VydmVyLm1heFJhbSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBzZXJ2ZXIubWF4UmFtIC0gc2VydmVyLnJhbVVzZWQsXHJcbiAgICAgICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHNlcnZlck9iai5uYW1lID09PSBcImhvbWVcIikge1xyXG4gICAgICAgICAgICBzZXJ2ZXJPYmouYXZhaWxhYmxlUmFtIC09IENvbmZpZy5IT01FX0ZSRUVfUkFNO1xyXG4gICAgICAgICAgICAvLyBob21lSWR4ID0gaTtcclxuICAgICAgICAgICAgLy8gaG9tZSA9IHNlcnZlck9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWxsSG9zdHMucHVzaChzZXJ2ZXJPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnQgYnkgcmFtIGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgYWxsSG9zdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmF2YWlsYWJsZVJhbSAtIGIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaWYgKGhvbWUgIT09IHVuZGVmaW5lZCAmJiBob21lSWR4ICE9PSAtMSkge1xyXG4gICAgLy8gICAgIGFsbEhvc3RzLnNwbGljZShob21lSWR4LCAxKTtcclxuICAgIC8vICAgICBhbGxIb3N0cy51bnNoaWZ0KGhvbWUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHJldHVybiBhbGxIb3N0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBkZXByZWNhdGVkIHVzZSBnZXRCZXN0SG9zdEJ5UmFtT3B0aW1pemVkIGluc3RlYWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0SG9zdEJ5UmFtKG5zOiBOUyk6IFNlcnZlcltdIHtcclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdFNlcnZlckxpc3RDaGVhcChucywgZmFsc2UpLmZpbHRlcigoc2VydmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZlci5hdmFpbGFibGVSYW0gPiAyO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgaG9tZTogU2VydmVyID0ge1xyXG4gICAgICAgIG5hbWU6IFwiaG9tZVwiLFxyXG4gICAgICAgIG1heFJhbTogbnMuZ2V0U2VydmVyTWF4UmFtKFwiaG9tZVwiKSAtIENvbmZpZy5IT01FX0ZSRUVfUkFNLFxyXG4gICAgICAgIGF2YWlsYWJsZVJhbTogbnMuZ2V0U2VydmVyTWF4UmFtKFwiaG9tZVwiKSAtIG5zLmdldFNlcnZlclVzZWRSYW0oXCJob21lXCIpIC0gQ29uZmlnLkhPTUVfRlJFRV9SQU0sXHJcbiAgICAgICAgc2NvcmU6IDAsXHJcbiAgICB9OyAvLyAxMCBzb21lIHNhZmV0eSBtYXJnaW5cclxuICAgIGFsbEhvc3RzLnB1c2goaG9tZSk7XHJcblxyXG4gICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHVyY2hhc2VkU2VydmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlcjogU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBwdXJjaGFzZWRTZXJ2ZXJzW2ldLFxyXG4gICAgICAgICAgICBtYXhSYW06IG5zLmdldFNlcnZlck1heFJhbShwdXJjaGFzZWRTZXJ2ZXJzW2ldKSxcclxuICAgICAgICAgICAgYXZhaWxhYmxlUmFtOiBucy5nZXRTZXJ2ZXJNYXhSYW0ocHVyY2hhc2VkU2VydmVyc1tpXSkgLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKHB1cmNoYXNlZFNlcnZlcnNbaV0pLFxyXG4gICAgICAgICAgICBzY29yZTogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChzZXJ2ZXIubWF4UmFtID4gMikge1xyXG4gICAgICAgICAgICBhbGxIb3N0cy5wdXNoKHNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHNvcnQgYnkgcmFtIGluIGFzY2VuZGluZyBvcmRlclxyXG4gICAgYWxsSG9zdHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhLmF2YWlsYWJsZVJhbSAtIGIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbEhvc3RzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmVzdFNlcnZlckxpc3RDaGVhcChuczogTlMsIHNob3VsZFByaW50OiBib29sZWFuKTogU2VydmVyW10ge1xyXG4gICAgY29uc3Qgc2VydmVyTGlzdCA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGNvbnN0IHNlcnZlcnM6IFNlcnZlcltdID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJ2ZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmVyTmFtZSA9IHNlcnZlckxpc3RbaV07XHJcbiAgICAgICAgLy8gY29uc3Qgc28gPSBucy5nZXRTZXJ2ZXIoc2VydmVyTmFtZSk7XHJcbiAgICAgICAgLy8gY29uc3QgcGxheWVyID0gbnMuZ2V0UGxheWVyKCk7XHJcblxyXG4gICAgICAgIGlmICghaXNIYWNrYWJsZShucywgc2VydmVyTmFtZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBjYW5PcGVuUG9ydHMgPSBzby5udW1PcGVuUG9ydHNSZXF1aXJlZCA8PSBnZXROdW1IYWNrcyhucyk7XHJcbiAgICAgICAgLy8gY29uc3QgY2FuSGFjayA9IHNvLnJlcXVpcmVkSGFja2luZ1NraWxsIDw9IHBsYXllci5za2lsbHMuaGFja2luZztcclxuICAgICAgICAvLyBpZiAoIShjYW5PcGVuUG9ydHMgJiYgY2FuSGFjaykpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlck5hbWUpO1xyXG4gICAgICAgIGNvbnN0IG1heFJhbSA9IG5zLmdldFNlcnZlck1heFJhbShzZXJ2ZXJOYW1lKTtcclxuXHJcbiAgICAgICAgLy8gZmlsdGVyIHNlcnZlciB3aXRoIG5vIG1vbmV5IG9yIHRoZSBoYWNraW5nIGxldmVsIGFib3ZlIHBsYXllcnMgaGFja2luZyBsZXZlbFxyXG4gICAgICAgIGlmIChtYXhNb25leSA8IDEgfHwgbnMuZ2V0U2VydmVyUmVxdWlyZWRIYWNraW5nTGV2ZWwoc2VydmVyTGlzdFtpXSkgPiBucy5nZXRIYWNraW5nTGV2ZWwoKSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGNvbnN0IHNjb3JlID0gbWF4TW9uZXkgLyBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlck5hbWUpIC8gMTAwMDAwMDtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyOiBTZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlck5hbWUsXHJcbiAgICAgICAgICAgIG1heE1vbmV5OiBtYXhNb25leSxcclxuICAgICAgICAgICAgbWF4UmFtOiBtYXhSYW0sXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZVJhbTogbWF4UmFtIC0gbnMuZ2V0U2VydmVyVXNlZFJhbShzZXJ2ZXJOYW1lKSxcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2VydmVycy5wdXNoKHNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgc2VydmVycy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChiLnNjb3JlIHx8IDApIC0gKGEuc2NvcmUgfHwgMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoc2hvdWxkUHJpbnQpIHByaW50VGFibGUobnMsIHNlcnZlcnMpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRUYWJsZShuczogTlMsIGFycmF5OiBTZXJ2ZXJbXSkge1xyXG4gICAgLy8gc2FuaXR5IGNoZWNrICsgbnVtYmVyIGZvcm1hdHRpbmdcclxuICAgIGludGVyZmFjZSBUYWJsZVNlcnZlciB7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIG1heE1vbmV5OiBzdHJpbmc7XHJcbiAgICAgICAgaGFja2luZ0NoYW5jZTogc3RyaW5nO1xyXG4gICAgICAgIHdlYWtlbmluZ1RpbWU6IHN0cmluZztcclxuICAgICAgICBzY29yZTogc3RyaW5nO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdGFibGVBcnJheTogVGFibGVTZXJ2ZXJbXSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0ubWF4TW9uZXkgPT09IHVuZGVmaW5lZCkgYXJyYXlbaV0ubWF4TW9uZXkgPSAwO1xyXG4gICAgICAgIGlmIChhcnJheVtpXS5oYWNraW5nQ2hhbmNlID09PSB1bmRlZmluZWQpIGFycmF5W2ldLmhhY2tpbmdDaGFuY2UgPSAwO1xyXG4gICAgICAgIGlmIChhcnJheVtpXS53ZWFrZW5pbmdUaW1lID09PSB1bmRlZmluZWQpIGFycmF5W2ldLndlYWtlbmluZ1RpbWUgPSAwO1xyXG5cclxuICAgICAgICBjb25zdCBzZXJ2ZXI6IFRhYmxlU2VydmVyID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBhcnJheVtpXS5uYW1lLFxyXG4gICAgICAgICAgICBtYXhNb25leTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS5tYXhNb25leSkpLFxyXG4gICAgICAgICAgICBoYWNraW5nQ2hhbmNlOiBucy5mb3JtYXROdW1iZXIoTnVtYmVyKGFycmF5W2ldLmhhY2tpbmdDaGFuY2UpKSxcclxuICAgICAgICAgICAgd2Vha2VuaW5nVGltZTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS53ZWFrZW5pbmdUaW1lKSAvIDEwMDApLCAvL25zLmZvcm1hdE51bWJlcihOdW1iZXIoYXJyYXlbaV0ud2Vha2VuaW5nVGltZSksIDQpLFxyXG4gICAgICAgICAgICBzY29yZTogbnMuZm9ybWF0TnVtYmVyKE51bWJlcihhcnJheVtpXS5zY29yZSkpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGFibGVBcnJheS5wdXNoKHNlcnZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCLilZTilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilabilZDilZDilZDilZDilZDilZDilZDilZDilZDilZdcIik7XHJcbiAgICBucy5wcmludChcIuKVkSAgICAgICBzZXJ2ZXIgICAgICAg4pWRICAgTWF4ICQgIOKVkSBjaGFuY2Ug4pWRIFdlYWsgdGltZSDilZEgIHNjb3JlICDilZFcIik7XHJcbiAgICBucy5wcmludChcIuKVoOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVrOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVo1wiKTtcclxuICAgIC8vIHBvbGx1dGluZyB0YWJsZSB3aXRoIGRhdGFcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFibGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLm5hbWUgK1xyXG4gICAgICAgICAgICAgICAgc3BhY2UodGFibGVBcnJheVtpXS5uYW1lLmxlbmd0aCwgMCkgK1xyXG4gICAgICAgICAgICAgICAgXCLilZEgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGFibGVBcnJheVtpXS5tYXhNb25leSArXHJcbiAgICAgICAgICAgICAgICBzcGFjZSh0YWJsZUFycmF5W2ldLm1heE1vbmV5Lmxlbmd0aCwgMSkgK1xyXG4gICAgICAgICAgICAgICAgXCLilZEgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGFibGVBcnJheVtpXS5oYWNraW5nQ2hhbmNlICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0uaGFja2luZ0NoYW5jZS5sZW5ndGgsIDIpICtcclxuICAgICAgICAgICAgICAgIFwi4pWRIFwiICtcclxuICAgICAgICAgICAgICAgIHRhYmxlQXJyYXlbaV0ud2Vha2VuaW5nVGltZSArXHJcbiAgICAgICAgICAgICAgICBzcGFjZSh0YWJsZUFycmF5W2ldLndlYWtlbmluZ1RpbWUubGVuZ3RoLCAzKSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkSBcIiArXHJcbiAgICAgICAgICAgICAgICB0YWJsZUFycmF5W2ldLnNjb3JlICtcclxuICAgICAgICAgICAgICAgIHNwYWNlKHRhYmxlQXJyYXlbaV0uc2NvcmUubGVuZ3RoLCA0KSArXHJcbiAgICAgICAgICAgICAgICBcIuKVkVwiLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCLilZrilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilZDilanilZDilZDilZDilZDilZDilZDilZDilZDilZDilZ1cIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNwYWNlKGxlbjogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKSB7XHJcbiAgICAvLyB3aXRoIG9mIHRoZSBjZWxsIGNvbnRlbnRcclxuICAgIGNvbnN0IGNvbExlbiA9IFsxOSwgOSwgNywgMTAsIDhdO1xyXG4gICAgY29uc3QgcmVhbCA9IGNvbExlbltjb2xJbmRleF0gLSBsZW47XHJcbiAgICBsZXQgc3RyID0gXCJcIjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVhbDsgaSsrKSB7XHJcbiAgICAgICAgc3RyICs9IFwiIFwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsY0FBYztBQUN2QixTQUFTLFlBQVksWUFBWSxxQkFBcUI7QUFZdEQsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUNuQixvQkFBa0IsSUFBSSxJQUFJO0FBQzlCO0FBRU8sZ0JBQVMsa0JBQWtCLElBQVEsYUFBc0I7QUFDNUQsUUFBTSxhQUFhLGNBQWMsRUFBRTtBQUVuQyxRQUFNLFVBQW9CLENBQUM7QUFFM0IsV0FBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxVQUFNLGFBQWEsV0FBVyxDQUFDO0FBQy9CLFFBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxLQUFLLENBQUMsR0FBRyxjQUFjLFVBQVU7QUFBRztBQUVsRSxlQUFXLElBQUksVUFBVTtBQUV6QixVQUFNLFdBQVcsR0FBRyxrQkFBa0IsVUFBVTtBQUNoRCxVQUFNLGdCQUFnQixHQUFHLGtCQUFrQixVQUFVO0FBQ3JELFFBQUksZ0JBQWdCLEdBQUcsY0FBYyxVQUFVO0FBQy9DLFVBQU0sU0FBUyxHQUFHLGdCQUFnQixVQUFV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\",\"filename\":\"bestServer.js\",\"server\":\"home\"}}],[\"loop/hackingAlgo.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport { getHackThreads } from \\\"/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await hackServer(ns, \\\"foodnstuff\\\", 0.8);\\n}\\nexport async function hackServer(ns, target, threshold) {\\n  const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n  const targetHackThreads = getHackThreads(ns, target, threshold);\\n  const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n  ns.print(\\n    \\\"total hack threads needed: \\\" + targetHackThreads + \\\" money available: \\\" + ns.getServerMoneyAvailable(target)\\n  );\\n  const allHosts = getBestHostByRamOptimized(ns);\\n  const totalMaxRam = allHosts.reduce((acc, server) => {\\n    return acc + server.maxRam;\\n  }, 0);\\n  const numRuns = Math.ceil(targetHackThreads / totalMaxRam);\\n  ns.print(\\\"total RAM: \\\" + totalMaxRam + \\\" numRuns: \\\" + numRuns + \\\"\\\\nthreads to finish: \\\" + targetHackThreads);\\n  let sumThreadsDone = 0;\\n  while (sumThreadsDone < targetHackThreads) {\\n    const hackingTime = ns.getHackTime(target);\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (sumThreadsDone >= targetHackThreads)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n      const numThreadsOnHost = Math.floor(freeRam / hackingScriptRam);\\n      ns.exec(\\\"hack.js\\\", host.name, numThreadsOnHost, target, 0);\\n      sumThreadsDone += numThreadsOnHost;\\n    }\\n    await ns.sleep(hackingTime + safetyMarginMs);\\n    ns.print(\\\"done with \\\" + sumThreadsDone + \\\"/\\\" + targetHackThreads + \\\" hacks\\\");\\n  }\\n  ns.print(\\\"Done hacking!\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdBbGdvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJAL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHsgZ2V0SGFja1RocmVhZHMgfSBmcm9tIFwiQC9saWJcIjtcclxuaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIGF3YWl0IGhhY2tTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiLCAwLjgpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgY29uc3Qgc2FmZXR5TWFyZ2luTXMgPSBDb25maWcuREVMQVlfTUFSR0lOX01TO1xyXG5cclxuICAgIC8vY29uc3QgaGFja0NoYW5jZSA9IG5zLmhhY2tBbmFseXplQ2hhbmNlKHRhcmdldCkgLy8gdG9kb1xyXG4gICAgY29uc3QgdGFyZ2V0SGFja1RocmVhZHMgPSBnZXRIYWNrVGhyZWFkcyhucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xyXG4gICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XHJcblxyXG4gICAgbnMucHJpbnQoXHJcbiAgICAgICAgXCJ0b3RhbCBoYWNrIHRocmVhZHMgbmVlZGVkOiBcIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgbW9uZXkgYXZhaWxhYmxlOiBcIiArIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCksXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcblxyXG4gICAgY29uc3QgdG90YWxNYXhSYW0gPSBhbGxIb3N0cy5yZWR1Y2UoKGFjYywgc2VydmVyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFjYyArIHNlcnZlci5tYXhSYW07XHJcbiAgICB9LCAwKTtcclxuICAgIGNvbnN0IG51bVJ1bnMgPSBNYXRoLmNlaWwodGFyZ2V0SGFja1RocmVhZHMgLyB0b3RhbE1heFJhbSk7XHJcblxyXG4gICAgbnMucHJpbnQoXCJ0b3RhbCBSQU06IFwiICsgdG90YWxNYXhSYW0gKyBcIiBudW1SdW5zOiBcIiArIG51bVJ1bnMgKyBcIlxcbnRocmVhZHMgdG8gZmluaXNoOiBcIiArIHRhcmdldEhhY2tUaHJlYWRzKTtcclxuXHJcbiAgICBsZXQgc3VtVGhyZWFkc0RvbmUgPSAwO1xyXG4gICAgd2hpbGUgKHN1bVRocmVhZHNEb25lIDwgdGFyZ2V0SGFja1RocmVhZHMpIHtcclxuICAgICAgICBjb25zdCBoYWNraW5nVGltZSA9IG5zLmdldEhhY2tUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3VtVGhyZWFkc0RvbmUgPj0gdGFyZ2V0SGFja1RocmVhZHMpIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5tYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3QubmFtZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBudW1UaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gaGFja2luZ1NjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgICAgICBucy5leGVjKFwiaGFjay5qc1wiLCBob3N0Lm5hbWUsIG51bVRocmVhZHNPbkhvc3QsIHRhcmdldCwgMCk7XHJcbiAgICAgICAgICAgIHN1bVRocmVhZHNEb25lICs9IG51bVRocmVhZHNPbkhvc3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IG5zLnNsZWVwKGhhY2tpbmdUaW1lICsgc2FmZXR5TWFyZ2luTXMpO1xyXG4gICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgc3VtVGhyZWFkc0RvbmUgKyBcIi9cIiArIHRhcmdldEhhY2tUaHJlYWRzICsgXCIgaGFja3NcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbnMucHJpbnQoXCJEb25lIGhhY2tpbmchXCIpO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBQ3ZCLFNBQVMsaUNBQWlDO0FBQzFDLFNBQVMsc0JBQXNCO0FBRy9CLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsUUFBTSxXQUFXLElBQUksY0FBYyxHQUFHO0FBQzFDO0FBRUEsc0JBQXNCLFdBQVcsSUFBUSxRQUFnQixXQUFtQjtBQUN4RSxRQUFNLGlCQUFpQixPQUFPO0FBRzlCLFFBQU0sb0JBQW9CLGVBQWUsSUFBSSxRQUFRLFNBQVM7QUFDOUQsUUFBTSxtQkFBbUIsT0FBTztBQUVoQyxLQUFHO0FBQUEsSUFDQyxnQ0FBZ0Msb0JBQW9CLHVCQUF1QixHQUFHLHdCQUF3QixNQUFNO0FBQUEsRUFDaEg7QUFFQSxRQUFNLFdBQVcsMEJBQTBCLEVBQUU7QUFFN0MsUUFBTSxjQUFjLFNBQVMsT0FBTyxDQUFDLEtBQUssV0FBVztBQUNqRCxXQUFPLE1BQU0sT0FBTztBQUFBLEVBQ3hCLEdBQUcsQ0FBQztBQUNKLFFBQU0sVUFBVSxLQUFLLEtBQUssb0JBQW9CLFdBQVc7QUFFekQsS0FBRyxNQUFNLGdCQUFnQixjQUFjLGVBQWUsVUFBVSwwQkFBMEIsaUJBQWlCO0FBRTNHLE1BQUksaUJBQWlCO0FBQ3JCLFNBQU8saUJBQWlCLG1CQUFtQjtBQUN2QyxVQUFNLGNBQWMsR0FBRyxZQUFZLE1BQU07QUFDekMsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFJLGtCQUFrQjtBQUFtQjtBQUV6QyxZQUFNLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLFlBQU0sVUFBVSxLQUFLLFNBQVMsR0FBRyxpQkFBaUIsS0FBSyxJQUFJO0FBRTNELFlBQU0sbUJBQW1CLEtBQUssTUFBTSxVQUFVLGdCQUFnQjtBQUU5RCxTQUFHLEtBQUssV0FBVyxLQUFLLE1BQU0sa0JBQWtCLFFBQVEsQ0FBQztBQUN6RCx3QkFBa0I7QUFBQSxJQUN0QjtBQUNBLFVBQU0sR0FBRyxNQUFNLGNBQWMsY0FBYztBQUMzQyxPQUFHLE1BQU0sZUFBZSxpQkFBaUIsTUFBTSxvQkFBb0IsUUFBUTtBQUFBLEVBQy9FO0FBRUEsS0FBRyxNQUFNLGVBQWU7QUFDNUI7IiwibmFtZXMiOltdfQ==\",\"filename\":\"loop/hackingAlgo.js\",\"server\":\"home\"}}],[\"loop/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getBestServerListCheap } from \\\"/bestServer.js\\\";\\nimport { Colors, nukeAll } from \\\"/lib.js\\\";\\nimport { hackServer } from \\\"/loop/hackingAlgo.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nlet lastTarget = \\\"\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  while (true) {\\n    const target = getBestServerListCheap(ns, true)[0].name;\\n    if (lastTarget != target) {\\n      nukeAll(ns);\\n      ns.print(\\\"found new best Server: \\\" + target);\\n    }\\n    lastTarget = target;\\n    await loopCycle(ns, target, 0.8);\\n  }\\n}\\nexport async function loopCycle(ns, target, threshold) {\\n  ns.print(Colors.CYAN + \\\"------------ PREPARING ------------\\\" + Colors.RESET);\\n  await prepareServer(ns, target, threshold);\\n  ns.print(Colors.CYAN + \\\"------------- HACKING -------------\\\" + Colors.RESET);\\n  await hackServer(ns, target, threshold);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBnZXRCZXN0U2VydmVyTGlzdENoZWFwIH0gZnJvbSBcIi4uL2Jlc3RTZXJ2ZXIuanNcIjtcclxuaW1wb3J0IHsgQ29sb3JzLCBudWtlQWxsIH0gZnJvbSBcIi4uL2xpYi5qc1wiO1xyXG5pbXBvcnQgeyBoYWNrU2VydmVyIH0gZnJvbSBcIi4vaGFja2luZ0FsZ28uanNcIjtcclxuaW1wb3J0IHsgcHJlcGFyZVNlcnZlciB9IGZyb20gXCIuL3ByZXBhcmVTZXJ2ZXIuanNcIjtcclxuXHJcbmxldCBsYXN0VGFyZ2V0ID0gXCJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICAvLyBzdGVwczogV0dXSC1XR1dILS4uXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldEJlc3RTZXJ2ZXJMaXN0Q2hlYXAobnMsIHRydWUpWzBdLm5hbWU7XHJcbiAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIG51a2VBbGwobnMpO1xyXG4gICAgICAgICAgICBucy5wcmludChcImZvdW5kIG5ldyBiZXN0IFNlcnZlcjogXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0VGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIGF3YWl0IGxvb3BDeWNsZShucywgdGFyZ2V0LCAwLjgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9vcEN5Y2xlKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIHRocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tIFBSRVBBUklORyAtLS0tLS0tLS0tLS1cIiArIENvbG9ycy5SRVNFVCk7XHJcbiAgICBhd2FpdCBwcmVwYXJlU2VydmVyKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XHJcblxyXG4gICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIi0tLS0tLS0tLS0tLS0gSEFDS0lORyAtLS0tLS0tLS0tLS0tXCIgKyBDb2xvcnMuUkVTRVQpO1xyXG4gICAgYXdhaXQgaGFja1NlcnZlcihucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xyXG59XHJcblxyXG4vKipcclxuIG5vdGVzOlxyXG4gd2Vha2VuIHJlbW92ZXMgMC4wNSBzZWMgbHZsXHJcbiBncm93IGFkZHMgMC4wMDQgc2VjIGx2bFxyXG5cclxuICovXHJcbiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyw4QkFBOEI7QUFDdkMsU0FBUyxRQUFRLGVBQWU7QUFDaEMsU0FBUyxrQkFBa0I7QUFDM0IsU0FBUyxxQkFBcUI7QUFFOUIsSUFBSSxhQUFhO0FBRWpCLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFHbkIsU0FBTyxNQUFNO0FBQ1QsVUFBTSxTQUFTLHVCQUF1QixJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7QUFDbkQsUUFBSSxjQUFjLFFBQVE7QUFDdEIsY0FBUSxFQUFFO0FBQ1YsU0FBRyxNQUFNLDRCQUE0QixNQUFNO0FBQUEsSUFDL0M7QUFDQSxpQkFBYTtBQUNiLFVBQU0sVUFBVSxJQUFJLFFBQVEsR0FBRztBQUFBLEVBQ25DO0FBQ0o7QUFFQSxzQkFBc0IsVUFBVSxJQUFRLFFBQWdCLFdBQW1CO0FBQ3ZFLEtBQUcsTUFBTSxPQUFPLE9BQU8sd0NBQXdDLE9BQU8sS0FBSztBQUMzRSxRQUFNLGNBQWMsSUFBSSxRQUFRLFNBQVM7QUFFekMsS0FBRyxNQUFNLE9BQU8sT0FBTyx3Q0FBd0MsT0FBTyxLQUFLO0FBQzNFLFFBQU0sV0FBVyxJQUFJLFFBQVEsU0FBUztBQUMxQzsiLCJuYW1lcyI6W119\",\"filename\":\"loop/manager.js\",\"server\":\"home\"}}],[\"lib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nexport var Colors = /* @__PURE__ */ ((Colors2) => {\\n  Colors2[\\\"RESET\\\"] = \\\"\\\\x1B[0m\\\";\\n  Colors2[\\\"BLACK\\\"] = \\\"\\\\x1B[30m\\\";\\n  Colors2[\\\"RED\\\"] = \\\"\\\\x1B[31m\\\";\\n  Colors2[\\\"GREEN\\\"] = \\\"\\\\x1B[32m\\\";\\n  Colors2[\\\"YELLOW\\\"] = \\\"\\\\x1B[33m\\\";\\n  Colors2[\\\"BLUE\\\"] = \\\"\\\\x1B[34m\\\";\\n  Colors2[\\\"MAGENTA\\\"] = \\\"\\\\x1B[35m\\\";\\n  Colors2[\\\"CYAN\\\"] = \\\"\\\\x1B[36m\\\";\\n  Colors2[\\\"WHITE\\\"] = \\\"\\\\x1B[37m\\\";\\n  Colors2[\\\"E_ORANGE\\\"] = \\\"\\\\x1B[38;5;178m\\\";\\n  return Colors2;\\n})(Colors || {});\\nexport function serverScanner(ns) {\\n  const uncheckedHosts = [\\\"home\\\"];\\n  const checkedHosts = [];\\n  for (let i = 0; i < uncheckedHosts.length; i++) {\\n    const newHosts = ns.scan(uncheckedHosts[i]);\\n    checkedHosts.push(uncheckedHosts[i]);\\n    for (let n = 0; n < newHosts.length; n++) {\\n      if (checkedHosts.includes(newHosts[n]) == false || uncheckedHosts.includes(newHosts[n]) == false) {\\n        uncheckedHosts.push(newHosts[n]);\\n      }\\n    }\\n  }\\n  return checkedHosts.sort();\\n}\\nexport function isHackable(ns, server) {\\n  if (ns.getServerNumPortsRequired(server) <= getNumHacks(ns) && ns.getServerRequiredHackingLevel(server) <= ns.getHackingLevel())\\n    return true;\\n  else\\n    return false;\\n}\\nexport function getNumHacks(ns) {\\n  let i = 0;\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    i++;\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    i++;\\n  return i;\\n}\\nexport function nukeAll(ns) {\\n  const hosts = serverScanner(ns);\\n  for (let i = 0; i < hosts.length; i++) {\\n    if (isHackable(ns, hosts[i]) || ns.getPurchasedServers().includes(hosts[i])) {\\n      openPorts(ns, hosts[i]);\\n      ns.nuke(hosts[i]);\\n      ns.scp(\\\"hack.js\\\", hosts[i]);\\n      ns.scp(\\\"grow.js\\\", hosts[i]);\\n      ns.scp(\\\"weaken.js\\\", hosts[i]);\\n    } else {\\n      continue;\\n    }\\n  }\\n}\\nexport function nukeServer(ns, server) {\\n  openPorts(ns, server);\\n  ns.nuke(server);\\n  ns.scp(\\\"hack.js\\\", server);\\n  ns.scp(\\\"grow.js\\\", server);\\n  ns.scp(\\\"weaken.js\\\", server);\\n}\\nexport function openPorts(ns, target) {\\n  if (ns.fileExists(\\\"BruteSSH.exe\\\"))\\n    ns.brutessh(target);\\n  if (ns.fileExists(\\\"FTPCrack.exe\\\"))\\n    ns.ftpcrack(target);\\n  if (ns.fileExists(\\\"HTTPWorm.exe\\\"))\\n    ns.httpworm(target);\\n  if (ns.fileExists(\\\"SQLInject.exe\\\"))\\n    ns.sqlinject(target);\\n}\\nexport function getTimeH(timestamp) {\\n  if (timestamp == void 0 || timestamp == null)\\n    timestamp = Date.now();\\n  const date = new Date(timestamp);\\n  date.setUTCHours(date.getUTCHours() + 1);\\n  const hours = date.getUTCHours().toString().padStart(2, \\\"0\\\");\\n  const minutes = date.getUTCMinutes().toString().padStart(2, \\\"0\\\");\\n  const seconds = date.getUTCSeconds().toString().padStart(2, \\\"0\\\");\\n  const milliseconds = date.getUTCMilliseconds().toString().padStart(3, \\\"0\\\");\\n  const formattedTime = `${hours}:${minutes}:${seconds}:${milliseconds}`;\\n  return formattedTime;\\n}\\nexport function killWGH(ns) {\\n  const servers = serverScanner(ns);\\n  for (const server of servers) {\\n    const processes = ns.ps(server);\\n    processes.forEach((p) => {\\n      if (p.filename == \\\"weaken.js\\\" || p.filename == \\\"grow.js\\\" || p.filename == \\\"hack.js\\\") {\\n        ns.kill(p.pid);\\n      }\\n    });\\n  }\\n}\\nexport function getGrowThreads(ns, server) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const serverCurrentMoney = ns.getServerMoneyAvailable(server);\\n  let moneyMultiplier = serverMaxMoney / serverCurrentMoney;\\n  if (isNaN(moneyMultiplier) || moneyMultiplier == Infinity)\\n    moneyMultiplier = serverMaxMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier) * 1.01);\\n  return serverGrowThreads;\\n}\\nexport function getGrowThreadsThreshold(ns, server, threshold) {\\n  const maxMoney = ns.getServerMaxMoney(server);\\n  const minMoney = maxMoney * (1 - threshold);\\n  const moneyMultiplier = maxMoney / minMoney;\\n  const serverGrowThreads = Math.ceil(ns.growthAnalyze(server, moneyMultiplier) * 1.01);\\n  ns.print(serverGrowThreads + \\\" grows needed\\\");\\n  return serverGrowThreads;\\n}\\nexport function getWeakenThreadsAfterHack(ns, numHackThreads) {\\n  const hackSecLvlIncrease = ns.hackAnalyzeSecurity(numHackThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreadsAfterGrow(ns, numGrowThreads) {\\n  const hackSecLvlIncrease = ns.growthAnalyzeSecurity(numGrowThreads);\\n  const serverWeakenThreads = Math.ceil(hackSecLvlIncrease / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getWeakenThreads(ns, server) {\\n  const serverSecLvl = ns.getServerSecurityLevel(server);\\n  const serverWeakenThreads = Math.ceil((serverSecLvl - ns.getServerMinSecurityLevel(server)) / ns.weakenAnalyze(1));\\n  return serverWeakenThreads;\\n}\\nexport function getHackThreads(ns, server, moneyHackThreshold) {\\n  const serverMaxMoney = ns.getServerMaxMoney(server);\\n  const lowerMoneyBound = serverMaxMoney * (1 - moneyHackThreshold);\\n  const hackAmount = serverMaxMoney - lowerMoneyBound;\\n  const serverHackThreads = Math.floor(ns.hackAnalyzeThreads(server, hackAmount));\\n  return serverHackThreads;\\n}\\nexport function getGrowThreadsFormulas(ns, server, hackThreads) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = PlayerManager.getInstance(ns).getPlayer();\\n  if (serverObject.moneyMax == void 0)\\n    return 0;\\n  serverObject.moneyAvailable = serverObject.moneyMax;\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  const percentPerHack = ns.formulas.hacking.hackPercent(serverObject, playerObject);\\n  const hackPercent = percentPerHack * hackThreads;\\n  serverObject.moneyAvailable = serverObject.moneyMax * (1 - hackPercent);\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  return Math.ceil(ns.formulas.hacking.growThreads(serverObject, playerObject, serverObject.moneyMax) * 1.01);\\n}\\nexport function getHackThreadsFormulas(ns, server, hackThreshold) {\\n  const serverObject = ns.getServer(server);\\n  const playerObject = PlayerManager.getInstance(ns).getPlayer();\\n  serverObject.baseDifficulty = serverObject.minDifficulty;\\n  serverObject.moneyAvailable = serverObject.moneyMax;\\n  return Math.floor(hackThreshold / ns.formulas.hacking.hackPercent(serverObject, playerObject));\\n}\\nexport function writeToPort(ns, port, data) {\\n  const currentData = ns.peek(port);\\n  if (currentData == \\\"NULL PORT DATA\\\") {\\n    ns.writePort(port, data);\\n  } else {\\n    ns.writePort(port, data);\\n    ns.readPort(port);\\n  }\\n}\\nexport function isPreparationNeeded(ns, target) {\\n  if (ns.getServerMaxMoney(target) != parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) != ns.getServerMinSecurityLevel(target)) {\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgUGxheWVyTWFuYWdlciB9IGZyb20gXCIuL3BhcmFsbGVsL1BsYXllck1hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBlbnVtIENvbG9ycyB7XHJcbiAgICBSRVNFVCA9IFwiXFx4MWJbMG1cIixcclxuICAgIEJMQUNLID0gXCJcXHgxYlszMG1cIixcclxuICAgIFJFRCA9IFwiXFx4MWJbMzFtXCIsXHJcbiAgICBHUkVFTiA9IFwiXFx4MWJbMzJtXCIsXHJcbiAgICBZRUxMT1cgPSBcIlxceDFiWzMzbVwiLFxyXG4gICAgQkxVRSA9IFwiXFx4MWJbMzRtXCIsXHJcbiAgICBNQUdFTlRBID0gXCJcXHgxYlszNW1cIixcclxuICAgIENZQU4gPSBcIlxceDFiWzM2bVwiLFxyXG4gICAgV0hJVEUgPSBcIlxceDFiWzM3bVwiLFxyXG4gICAgRV9PUkFOR0UgPSBcIlxceDFiWzM4OzU7MTc4bVwiLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VydmVyU2Nhbm5lcihuczogTlMpIHtcclxuICAgIGNvbnN0IHVuY2hlY2tlZEhvc3RzID0gW1wiaG9tZVwiXTtcclxuICAgIGNvbnN0IGNoZWNrZWRIb3N0cyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW5jaGVja2VkSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBuZXdIb3N0cyA9IG5zLnNjYW4odW5jaGVja2VkSG9zdHNbaV0pO1xyXG4gICAgICAgIGNoZWNrZWRIb3N0cy5wdXNoKHVuY2hlY2tlZEhvc3RzW2ldKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBuZXdIb3N0cy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZEhvc3RzLmluY2x1ZGVzKG5ld0hvc3RzW25dKSA9PSBmYWxzZSB8fCB1bmNoZWNrZWRIb3N0cy5pbmNsdWRlcyhuZXdIb3N0c1tuXSkgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHVuY2hlY2tlZEhvc3RzLnB1c2gobmV3SG9zdHNbbl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaGVja2VkSG9zdHMuc29ydCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNIYWNrYWJsZShuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgbnMuZ2V0U2VydmVyTnVtUG9ydHNSZXF1aXJlZChzZXJ2ZXIpIDw9IGdldE51bUhhY2tzKG5zKSAmJlxyXG4gICAgICAgIG5zLmdldFNlcnZlclJlcXVpcmVkSGFja2luZ0xldmVsKHNlcnZlcikgPD0gbnMuZ2V0SGFja2luZ0xldmVsKClcclxuICAgIClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnVtSGFja3MobnM6IE5TKSB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiKSkgaSsrO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJGVFBDcmFjay5leGVcIikpIGkrKztcclxuICAgIGlmIChucy5maWxlRXhpc3RzKFwiSFRUUFdvcm0uZXhlXCIpKSBpKys7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIikpIGkrKztcclxuICAgIHJldHVybiBpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnVrZUFsbChuczogTlMpIHtcclxuICAgIGNvbnN0IGhvc3RzID0gc2VydmVyU2Nhbm5lcihucyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGhvc3QgaXMgaGFja2FibGVcclxuICAgICAgICBpZiAoaXNIYWNrYWJsZShucywgaG9zdHNbaV0pIHx8IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5pbmNsdWRlcyhob3N0c1tpXSkpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogZ2V0UHVyY2hhc2VkU2VydmVycygpIGlzIG5vdCBuZWVkZWRcclxuICAgICAgICAgICAgb3BlblBvcnRzKG5zLCBob3N0c1tpXSk7XHJcbiAgICAgICAgICAgIG5zLm51a2UoaG9zdHNbaV0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY29weSBhbGwgc2NyaXB0cyB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgIG5zLnNjcChcImhhY2suanNcIiwgaG9zdHNbaV0pO1xyXG4gICAgICAgICAgICBucy5zY3AoXCJncm93LmpzXCIsIGhvc3RzW2ldKTtcclxuICAgICAgICAgICAgbnMuc2NwKFwid2Vha2VuLmpzXCIsIGhvc3RzW2ldKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBudWtlU2VydmVyKG5zOiBOUywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIG9wZW5Qb3J0cyhucywgc2VydmVyKTtcclxuICAgIG5zLm51a2Uoc2VydmVyKTtcclxuXHJcbiAgICBucy5zY3AoXCJoYWNrLmpzXCIsIHNlcnZlcik7XHJcbiAgICBucy5zY3AoXCJncm93LmpzXCIsIHNlcnZlcik7XHJcbiAgICBucy5zY3AoXCJ3ZWFrZW4uanNcIiwgc2VydmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5Qb3J0cyhuczogTlMsIHRhcmdldDogc3RyaW5nKSB7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkJydXRlU1NILmV4ZVwiKSkgbnMuYnJ1dGVzc2godGFyZ2V0KTtcclxuICAgIGlmIChucy5maWxlRXhpc3RzKFwiRlRQQ3JhY2suZXhlXCIpKSBucy5mdHBjcmFjayh0YXJnZXQpO1xyXG4gICAgaWYgKG5zLmZpbGVFeGlzdHMoXCJIVFRQV29ybS5leGVcIikpIG5zLmh0dHB3b3JtKHRhcmdldCk7XHJcbiAgICBpZiAobnMuZmlsZUV4aXN0cyhcIlNRTEluamVjdC5leGVcIikpIG5zLnNxbGluamVjdCh0YXJnZXQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZUgodGltZXN0YW1wPzogbnVtYmVyKSB7XHJcbiAgICBpZiAodGltZXN0YW1wID09IHVuZGVmaW5lZCB8fCB0aW1lc3RhbXAgPT0gbnVsbCkgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuICAgIGRhdGUuc2V0VVRDSG91cnMoZGF0ZS5nZXRVVENIb3VycygpICsgMSk7XHJcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBkYXRlLmdldFVUQ01pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IHNlY29uZHMgPSBkYXRlLmdldFVUQ1NlY29uZHMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcclxuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgzLCBcIjBcIik7XHJcbiAgICBjb25zdCBmb3JtYXR0ZWRUaW1lID0gYCR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfToke21pbGxpc2Vjb25kc31gO1xyXG4gICAgcmV0dXJuIGZvcm1hdHRlZFRpbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBraWxsV0dIKG5zOiBOUykge1xyXG4gICAgY29uc3Qgc2VydmVycyA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIHNlcnZlcnMpIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzZXMgPSBucy5wcyhzZXJ2ZXIpO1xyXG4gICAgICAgIHByb2Nlc3Nlcy5mb3JFYWNoKChwKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwLmZpbGVuYW1lID09IFwid2Vha2VuLmpzXCIgfHwgcC5maWxlbmFtZSA9PSBcImdyb3cuanNcIiB8fCBwLmZpbGVuYW1lID09IFwiaGFjay5qc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBucy5raWxsKHAucGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3Jvd1RocmVhZHMobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3Qgc2VydmVyTWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIpO1xyXG4gICAgY29uc3Qgc2VydmVyQ3VycmVudE1vbmV5ID0gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoc2VydmVyKTtcclxuICAgIGxldCBtb25leU11bHRpcGxpZXIgPSBzZXJ2ZXJNYXhNb25leSAvIHNlcnZlckN1cnJlbnRNb25leTtcclxuICAgIGlmIChpc05hTihtb25leU11bHRpcGxpZXIpIHx8IG1vbmV5TXVsdGlwbGllciA9PSBJbmZpbml0eSkgbW9uZXlNdWx0aXBsaWVyID0gc2VydmVyTWF4TW9uZXk7XHJcbiAgICBjb25zdCBzZXJ2ZXJHcm93VGhyZWFkcyA9IE1hdGguY2VpbChucy5ncm93dGhBbmFseXplKHNlcnZlciwgbW9uZXlNdWx0aXBsaWVyKSAqIDEuMDEpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJHcm93VGhyZWFkcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdyb3dUaHJlYWRzVGhyZXNob2xkKG5zOiBOUywgc2VydmVyOiBzdHJpbmcsIHRocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBtYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHNlcnZlcik7XHJcbiAgICBjb25zdCBtaW5Nb25leSA9IG1heE1vbmV5ICogKDEgLSB0aHJlc2hvbGQpO1xyXG4gICAgY29uc3QgbW9uZXlNdWx0aXBsaWVyID0gbWF4TW9uZXkgLyBtaW5Nb25leTtcclxuICAgIGNvbnN0IHNlcnZlckdyb3dUaHJlYWRzID0gTWF0aC5jZWlsKG5zLmdyb3d0aEFuYWx5emUoc2VydmVyLCBtb25leU11bHRpcGxpZXIpICogMS4wMSk7XHJcbiAgICBucy5wcmludChzZXJ2ZXJHcm93VGhyZWFkcyArIFwiIGdyb3dzIG5lZWRlZFwiKTtcclxuXHJcbiAgICByZXR1cm4gc2VydmVyR3Jvd1RocmVhZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJIYWNrKG5zOiBOUywgbnVtSGFja1RocmVhZHM6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBoYWNrU2VjTHZsSW5jcmVhc2UgPSBucy5oYWNrQW5hbHl6ZVNlY3VyaXR5KG51bUhhY2tUaHJlYWRzKTtcclxuXHJcbiAgICBjb25zdCBzZXJ2ZXJXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKGhhY2tTZWNMdmxJbmNyZWFzZSAvIG5zLndlYWtlbkFuYWx5emUoMSkpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJXZWFrZW5UaHJlYWRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyhuczogTlMsIG51bUdyb3dUaHJlYWRzOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgaGFja1NlY0x2bEluY3JlYXNlID0gbnMuZ3Jvd3RoQW5hbHl6ZVNlY3VyaXR5KG51bUdyb3dUaHJlYWRzKTtcclxuXHJcbiAgICBjb25zdCBzZXJ2ZXJXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKGhhY2tTZWNMdmxJbmNyZWFzZSAvIG5zLndlYWtlbkFuYWx5emUoMSkpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJXZWFrZW5UaHJlYWRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vha2VuVGhyZWFkcyhuczogTlMsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzZXJ2ZXJTZWNMdmwgPSBucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHNlcnZlcik7XHJcbiAgICBjb25zdCBzZXJ2ZXJXZWFrZW5UaHJlYWRzID0gTWF0aC5jZWlsKChzZXJ2ZXJTZWNMdmwgLSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHNlcnZlcikpIC8gbnMud2Vha2VuQW5hbHl6ZSgxKSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcnZlcldlYWtlblRocmVhZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRIYWNrVGhyZWFkcyhuczogTlMsIHNlcnZlcjogc3RyaW5nLCBtb25leUhhY2tUaHJlc2hvbGQ6IG51bWJlcikge1xyXG4gICAgY29uc3Qgc2VydmVyTWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leShzZXJ2ZXIpO1xyXG4gICAgY29uc3QgbG93ZXJNb25leUJvdW5kID0gc2VydmVyTWF4TW9uZXkgKiAoMSAtIG1vbmV5SGFja1RocmVzaG9sZCk7XHJcbiAgICBjb25zdCBoYWNrQW1vdW50ID0gc2VydmVyTWF4TW9uZXkgLSBsb3dlck1vbmV5Qm91bmQ7XHJcbiAgICBjb25zdCBzZXJ2ZXJIYWNrVGhyZWFkcyA9IE1hdGguZmxvb3IobnMuaGFja0FuYWx5emVUaHJlYWRzKHNlcnZlciwgaGFja0Ftb3VudCkpO1xyXG5cclxuICAgIHJldHVybiBzZXJ2ZXJIYWNrVGhyZWFkcztcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gRm9ybXVsYXNBUEkgLS0tLS0tLS0tLS0tLS0tLS1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdyb3dUaHJlYWRzRm9ybXVsYXMobnM6IE5TLCBzZXJ2ZXI6IHN0cmluZywgaGFja1RocmVhZHM6IG51bWJlcikge1xyXG4gICAgY29uc3Qgc2VydmVyT2JqZWN0ID0gbnMuZ2V0U2VydmVyKHNlcnZlcik7XHJcbiAgICBjb25zdCBwbGF5ZXJPYmplY3QgPSBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKS5nZXRQbGF5ZXIoKTtcclxuXHJcbiAgICBpZiAoc2VydmVyT2JqZWN0Lm1vbmV5TWF4ID09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcblxyXG4gICAgc2VydmVyT2JqZWN0Lm1vbmV5QXZhaWxhYmxlID0gc2VydmVyT2JqZWN0Lm1vbmV5TWF4O1xyXG4gICAgc2VydmVyT2JqZWN0LmJhc2VEaWZmaWN1bHR5ID0gc2VydmVyT2JqZWN0Lm1pbkRpZmZpY3VsdHk7XHJcblxyXG4gICAgY29uc3QgcGVyY2VudFBlckhhY2sgPSBucy5mb3JtdWxhcy5oYWNraW5nLmhhY2tQZXJjZW50KHNlcnZlck9iamVjdCwgcGxheWVyT2JqZWN0KTtcclxuICAgIGNvbnN0IGhhY2tQZXJjZW50ID0gcGVyY2VudFBlckhhY2sgKiBoYWNrVGhyZWFkcztcclxuXHJcbiAgICBzZXJ2ZXJPYmplY3QubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXJPYmplY3QubW9uZXlNYXggKiAoMSAtIGhhY2tQZXJjZW50KTtcclxuICAgIHNlcnZlck9iamVjdC5iYXNlRGlmZmljdWx0eSA9IHNlcnZlck9iamVjdC5taW5EaWZmaWN1bHR5O1xyXG5cclxuICAgIHJldHVybiBNYXRoLmNlaWwobnMuZm9ybXVsYXMuaGFja2luZy5ncm93VGhyZWFkcyhzZXJ2ZXJPYmplY3QsIHBsYXllck9iamVjdCwgc2VydmVyT2JqZWN0Lm1vbmV5TWF4KSAqIDEuMDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFja1RocmVhZHNGb3JtdWxhcyhuczogTlMsIHNlcnZlcjogc3RyaW5nLCBoYWNrVGhyZXNob2xkOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHNlcnZlck9iamVjdCA9IG5zLmdldFNlcnZlcihzZXJ2ZXIpO1xyXG4gICAgY29uc3QgcGxheWVyT2JqZWN0ID0gUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucykuZ2V0UGxheWVyKCk7XHJcblxyXG4gICAgc2VydmVyT2JqZWN0LmJhc2VEaWZmaWN1bHR5ID0gc2VydmVyT2JqZWN0Lm1pbkRpZmZpY3VsdHk7XHJcbiAgICBzZXJ2ZXJPYmplY3QubW9uZXlBdmFpbGFibGUgPSBzZXJ2ZXJPYmplY3QubW9uZXlNYXg7XHJcblxyXG4gICAgLy8gdGhyZWFkcyAqIHBlcmNlbnQgPT0gaGFja1RocmVzaG9sZCA9PiB0aHJlYWRzID09IGhhY2tUaHJlc2hvbGQgLyBwZXJjZW50XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcihoYWNrVGhyZXNob2xkIC8gbnMuZm9ybXVsYXMuaGFja2luZy5oYWNrUGVyY2VudChzZXJ2ZXJPYmplY3QsIHBsYXllck9iamVjdCkpO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBQb3J0cyAtLS0tLS0tLS0tLS0tLS0tLVxyXG5leHBvcnQgZnVuY3Rpb24gd3JpdGVUb1BvcnQobnM6IE5TLCBwb3J0OiBudW1iZXIsIGRhdGE6IHN0cmluZykge1xyXG4gICAgY29uc3QgY3VycmVudERhdGEgPSBucy5wZWVrKHBvcnQpO1xyXG4gICAgaWYgKGN1cnJlbnREYXRhID09IFwiTlVMTCBQT1JUIERBVEFcIikge1xyXG4gICAgICAgIG5zLndyaXRlUG9ydChwb3J0LCBkYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbnMud3JpdGVQb3J0KHBvcnQsIGRhdGEpO1xyXG4gICAgICAgIG5zLnJlYWRQb3J0KHBvcnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQcmVwYXJhdGlvbk5lZWRlZChuczogTlMsIHRhcmdldDogc3RyaW5nKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgICAgbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KSAhPSBwYXJzZUZsb2F0KG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCkudG9GaXhlZCg1KSkgfHxcclxuICAgICAgICBwYXJzZUZsb2F0KG5zLmdldFNlcnZlclNlY3VyaXR5TGV2ZWwodGFyZ2V0KS50b0ZpeGVkKDUpKSAhPSBucy5nZXRTZXJ2ZXJNaW5TZWN1cml0eUxldmVsKHRhcmdldClcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMscUJBQXFCO0FBRXZCLFdBQUssU0FBTCxrQkFBS0EsWUFBTDtBQUNILEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsU0FBTTtBQUNOLEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsWUFBUztBQUNULEVBQUFBLFFBQUEsVUFBTztBQUNQLEVBQUFBLFFBQUEsYUFBVTtBQUNWLEVBQUFBLFFBQUEsVUFBTztBQUNQLEVBQUFBLFFBQUEsV0FBUTtBQUNSLEVBQUFBLFFBQUEsY0FBVztBQVZILFNBQUFBO0FBQUEsR0FBQTtBQWFMLGdCQUFTLGNBQWMsSUFBUTtBQUNsQyxRQUFNLGlCQUFpQixDQUFDLE1BQU07QUFDOUIsUUFBTSxlQUFlLENBQUM7QUFFdEIsV0FBUyxJQUFJLEdBQUcsSUFBSSxlQUFlLFFBQVEsS0FBSztBQUM1QyxVQUFNLFdBQVcsR0FBRyxLQUFLLGVBQWUsQ0FBQyxDQUFDO0FBQzFDLGlCQUFhLEtBQUssZUFBZSxDQUFDLENBQUM7QUFFbkMsYUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsS0FBSztBQUN0QyxVQUFJLGFBQWEsU0FBUyxTQUFTLENBQUMsQ0FBQyxLQUFLLFNBQVMsZUFBZSxTQUFTLFNBQVMsQ0FBQyxD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\",\"filename\":\"lib.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"hackingDeamon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized, getBestServer } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreadsFormulas,\\n  getGrowThreadsThreshold,\\n  getHackThreadsFormulas,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack,\\n  isPreparationNeeded,\\n  killWGH,\\n  writeToPort\\n} from \\\"/lib.js\\\";\\nimport { prepareServer } from \\\"/loop/prepareServer.js\\\";\\nimport { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nimport { parallelCycle } from \\\"/parallel/manager.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  await ns.sleep(1e3);\\n  killWGH(ns);\\n  ns.getPortHandle(2).clear();\\n  let hackThreshold = 0.5;\\n  let lastTarget = \\\"\\\";\\n  while (true) {\\n    const stockManagerRunning = ns.ps().find((p) => p.filename === \\\"Stock/manager.js\\\") !== void 0;\\n    if (ns.stock.hasWSEAccount() && ns.stock.has4SData() && ns.stock.has4SDataTIXAPI() && ns.stock.hasTIXAPIAccess() && ns.getServerMoneyAvailable(\\\"home\\\") > Config.STOCK_MARKET_MIN_HOME_MONEY && !stockManagerRunning)\\n      ns.exec(\\\"Stock/manager.js\\\", \\\"home\\\");\\n    const teaPartyRunning = ns.ps().find((p) => p.filename === \\\"Corporation/teaParty.js\\\") !== void 0;\\n    if (ns.corporation.hasCorporation() && !teaPartyRunning)\\n      ns.exec(\\\"Corporation/teaParty.js\\\", \\\"home\\\");\\n    PlayerManager.getInstance(ns).resetPlayer(ns);\\n    const target = ns.args[0] === void 0 ? getBestServer(ns) : ns.args[0].toString();\\n    writeToPort(ns, 1, target);\\n    ns.print(\\\"lastTarget: \\\" + lastTarget + \\\" target: \\\" + target);\\n    if (ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      if (lastTarget !== target || isPreparationNeeded(ns, target)) {\\n        hackThreshold = await prepare(ns, target, hackThreshold);\\n        lastTarget = target;\\n      }\\n      PlayerManager.getInstance(ns).resetPlayer(ns);\\n      await parallelCycle(ns, target, hackThreshold, Config.LOOP_BATCH_COUNT);\\n    } else {\\n      if (lastTarget !== target) {\\n        hackThreshold = await prepare(ns, target, hackThreshold);\\n        lastTarget = target;\\n      }\\n      await parallelCycle(ns, target, hackThreshold);\\n    }\\n  }\\n}\\nfunction getHackThreshold(ns, target) {\\n  const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n  const weakenScriptRam = Config.WEAKEN_SCRIPT_RAM;\\n  const growingScriptRam = Config.GROW_SCRIPT_RAM;\\n  const THRESHOLD_STEP = Config.THRESHOLD_STEP;\\n  let hackThreshold = 0.7;\\n  if (hackThreshold < Config.MIN_HACK_THRESHOLD)\\n    throw new Error(\\\"Hack threshold is too low\\\");\\n  ns.print(Colors.E_ORANGE + \\\"Starting hack threshold: \\\" + hackThreshold);\\n  while (true) {\\n    let serverHackThreads = 0;\\n    let serverGrowThreads = 0;\\n    if (ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      PlayerManager.getInstance(ns).resetPlayer(ns);\\n      serverHackThreads = getHackThreadsFormulas(ns, target, hackThreshold);\\n      PlayerManager.getInstance(ns).addHackingExp(ns, target, serverHackThreads);\\n      serverGrowThreads = getGrowThreadsFormulas(ns, target, serverHackThreads);\\n      PlayerManager.getInstance(ns).addHackingExp(ns, target, serverGrowThreads);\\n      PlayerManager.getInstance(ns).resetPlayer(ns);\\n    } else {\\n      const hackAmount = ns.getServerMaxMoney(target) * hackThreshold;\\n      serverHackThreads = Math.ceil(ns.hackAnalyzeThreads(target, hackAmount));\\n      serverGrowThreads = getGrowThreadsThreshold(ns, target, hackThreshold + THRESHOLD_STEP);\\n    }\\n    const firstWeakenThreads = getWeakenThreadsAfterHack(ns, serverHackThreads);\\n    const secondWeakenThreads = getWeakenThreadsAfterGrow(ns, serverGrowThreads);\\n    ns.print(\\n      \\\"serverHackThreads: \\\" + serverHackThreads + \\\" serverGrowThreads: \\\" + serverGrowThreads + \\\" firstWeakenThreads: \\\" + firstWeakenThreads + \\\" secondWeakenThreads: \\\" + secondWeakenThreads\\n    );\\n    const allHosts = getBestHostByRamOptimized(ns);\\n    let hackDeployed = false;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (allHosts[i].name.includes(Config.WEAK_SERVER_NAME) || allHosts[i].name.includes(Config.GROW_SERVER_NAME))\\n        continue;\\n      const maxThreadsOnHost = Math.floor(allHosts[i].availableRam / hackingScriptRam);\\n      if (maxThreadsOnHost >= serverHackThreads) {\\n        allHosts[i].availableRam -= serverHackThreads * hackingScriptRam;\\n        hackDeployed = true;\\n        break;\\n      }\\n    }\\n    if (!hackDeployed) {\\n      hackThreshold = parseFloat((hackThreshold - THRESHOLD_STEP).toFixed(2));\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    let threadsDispatched = 0;\\n    let threadsRemaining = firstWeakenThreads;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= firstWeakenThreads)\\n        break;\\n      if (allHosts[i].name.includes(Config.GROW_SERVER_NAME) || allHosts[i].name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const freeRam = allHosts[i].availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      allHosts[i].availableRam -= threadsToDispatch * weakenScriptRam;\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining > 0) {\\n      hackThreshold = parseFloat((hackThreshold - THRESHOLD_STEP).toFixed(2));\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    let growDeployed = false;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (allHosts[i].name.includes(Config.WEAK_SERVER_NAME) || allHosts[i].name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const maxThreadsOnHost = Math.floor(allHosts[i].availableRam / growingScriptRam);\\n      if (maxThreadsOnHost >= serverGrowThreads) {\\n        allHosts[i].availableRam -= serverGrowThreads * growingScriptRam;\\n        growDeployed = true;\\n      }\\n    }\\n    if (!growDeployed) {\\n      hackThreshold = parseFloat((hackThreshold - THRESHOLD_STEP).toFixed(2));\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    threadsDispatched = 0;\\n    threadsRemaining = secondWeakenThreads;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= secondWeakenThreads)\\n        break;\\n      if (allHosts[i].name.includes(Config.GROW_SERVER_NAME) || allHosts[i].name.includes(Config.HACK_SERVER_NAME))\\n        continue;\\n      const freeRam = allHosts[i].availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      allHosts[i].availableRam -= threadsToDispatch * weakenScriptRam;\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining > 0) {\\n      hackThreshold = parseFloat((hackThreshold - THRESHOLD_STEP).toFixed(2));\\n      ns.print(\\\"Threshold too high, decreasing to: \\\" + hackThreshold);\\n      continue;\\n    }\\n    ns.print(Colors.GREEN + \\\"All simulations passed, hackThreshold: \\\" + hackThreshold);\\n    ns.print(allHosts.map((host) => host.name + \\\" \\\" + host.availableRam).join(\\\"\\\\n\\\"));\\n    return hackThreshold;\\n  }\\n}\\nexport async function prepare(ns, target, hackThreshold) {\\n  if (isPreparationNeeded(ns, target)) {\\n    await prepareServer(ns, target);\\n  }\\n  hackThreshold = getHackThreshold(ns, target);\\n  ns.tprint(Colors.E_ORANGE + \\\"hackThreshold: \\\" + hackThreshold);\\n  if (ns.getServerMaxMoney(target) == parseFloat(ns.getServerMoneyAvailable(target).toFixed(5)) || parseFloat(ns.getServerSecurityLevel(target).toFixed(5)) == ns.getServerMinSecurityLevel(target)) {\\n    ns.print(Colors.GREEN + \\\"Preparation finished, starting parallel mode\\\");\\n  } else {\\n    ns.tprint(Colors.RED + \\\"Preparation failed\\\");\\n    throw new Error(\\\"Preparation failed\\\");\\n  }\\n  return hackThreshold;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2tpbmdEZWFtb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQsIGdldEJlc3RTZXJ2ZXIgfSBmcm9tIFwiLi9iZXN0U2VydmVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBDb2xvcnMsXHJcbiAgICBnZXRHcm93VGhyZWFkc0Zvcm11bGFzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNUaHJlc2hvbGQsXHJcbiAgICBnZXRIYWNrVGhyZWFkc0Zvcm11bGFzLFxyXG4gICAgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2ssXHJcbiAgICBpc1ByZXBhcmF0aW9uTmVlZGVkLFxyXG4gICAga2lsbFdHSCxcclxuICAgIHdyaXRlVG9Qb3J0LFxyXG59IGZyb20gXCIuL2xpYlwiO1xyXG5pbXBvcnQgeyBwcmVwYXJlU2VydmVyIH0gZnJvbSBcIi4vbG9vcC9wcmVwYXJlU2VydmVyXCI7XHJcbmltcG9ydCB7IFBsYXllck1hbmFnZXIgfSBmcm9tIFwiLi9wYXJhbGxlbC9QbGF5ZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHBhcmFsbGVsQ3ljbGUgfSBmcm9tIFwiLi9wYXJhbGxlbC9tYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcblxyXG4gICAgLy8ga2lsbCBhbGwgYWN0aXZlIFdHSCBzY3JpcHRzXHJcbiAgICBhd2FpdCBucy5zbGVlcCgxMDAwKTtcclxuICAgIGtpbGxXR0gobnMpO1xyXG5cclxuICAgIG5zLmdldFBvcnRIYW5kbGUoMikuY2xlYXIoKTtcclxuXHJcbiAgICBsZXQgaGFja1RocmVzaG9sZCA9IDAuNTtcclxuICAgIGxldCBsYXN0VGFyZ2V0ID0gXCJcIjtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIHN0YXJ0IHN0b2NrIG1hbmFnZXIgaWYgcGxheWVyIGhhcyBXU0UgYWNjb3VudFxyXG4gICAgICAgIGNvbnN0IHN0b2NrTWFuYWdlclJ1bm5pbmc6IGJvb2xlYW4gPSBucy5wcygpLmZpbmQoKHApID0+IHAuZmlsZW5hbWUgPT09IFwiU3RvY2svbWFuYWdlci5qc1wiKSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgbnMuc3RvY2suaGFzV1NFQWNjb3VudCgpICYmXHJcbiAgICAgICAgICAgIG5zLnN0b2NrLmhhczRTRGF0YSgpICYmXHJcbiAgICAgICAgICAgIG5zLnN0b2NrLmhhczRTRGF0YVRJWEFQSSgpICYmXHJcbiAgICAgICAgICAgIG5zLnN0b2NrLmhhc1RJWEFQSUFjY2VzcygpICYmXHJcbiAgICAgICAgICAgIG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSA+IENvbmZpZy5TVE9DS19NQVJLRVRfTUlOX0hPTUVfTU9ORVkgJiZcclxuICAgICAgICAgICAgIXN0b2NrTWFuYWdlclJ1bm5pbmdcclxuICAgICAgICApXHJcbiAgICAgICAgICAgIG5zLmV4ZWMoXCJTdG9jay9tYW5hZ2VyLmpzXCIsIFwiaG9tZVwiKTtcclxuXHJcbiAgICAgICAgLy8gc3RhcnQgdGVhL3BhcnR5IHNjcmlwdCBpZiBwbGF5ZXIgaGFzIGNvcnBcclxuICAgICAgICBjb25zdCB0ZWFQYXJ0eVJ1bm5pbmc6IGJvb2xlYW4gPSBucy5wcygpLmZpbmQoKHApID0+IHAuZmlsZW5hbWUgPT09IFwiQ29ycG9yYXRpb24vdGVhUGFydHkuanNcIikgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAobnMuY29ycG9yYXRpb24uaGFzQ29ycG9yYXRpb24oKSAmJiAhdGVhUGFydHlSdW5uaW5nKSBucy5leGVjKFwiQ29ycG9yYXRpb24vdGVhUGFydHkuanNcIiwgXCJob21lXCIpO1xyXG5cclxuICAgICAgICBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKS5yZXNldFBsYXllcihucyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG5zLmFyZ3NbMF0gPT09IHVuZGVmaW5lZCA/IGdldEJlc3RTZXJ2ZXIobnMpIDogbnMuYXJnc1swXS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICB3cml0ZVRvUG9ydChucywgMSwgdGFyZ2V0KTtcclxuICAgICAgICBucy5wcmludChcImxhc3RUYXJnZXQ6IFwiICsgbGFzdFRhcmdldCArIFwiIHRhcmdldDogXCIgKyB0YXJnZXQpO1xyXG4gICAgICAgIGlmIChucy5maWxlRXhpc3RzKFwiRm9ybXVsYXMuZXhlXCIsIFwiaG9tZVwiKSkge1xyXG4gICAgICAgICAgICBpZiAobGFzdFRhcmdldCAhPT0gdGFyZ2V0IHx8IGlzUHJlcGFyYXRpb25OZWVkZWQobnMsIHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFBSRVBBUkUgU0VSVkVSIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgICAgICBoYWNrVGhyZXNob2xkID0gYXdhaXQgcHJlcGFyZShucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIENIRUNLIFdISUNIIE1PREUgVE8gVVNFIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpLnJlc2V0UGxheWVyKG5zKTtcclxuICAgICAgICAgICAgYXdhaXQgcGFyYWxsZWxDeWNsZShucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkLCBDb25maWcuTE9PUF9CQVRDSF9DT1VOVCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RUYXJnZXQgIT09IHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gUFJFUEFSRSBTRVJWRVIgLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgICAgICAgICBoYWNrVGhyZXNob2xkID0gYXdhaXQgcHJlcGFyZShucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gQ0hFQ0sgV0hJQ0ggTU9ERSBUTyBVU0UgLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHBhcmFsbGVsQ3ljbGUobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIYWNrVGhyZXNob2xkKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGhhY2tpbmdTY3JpcHRSYW0gPSBDb25maWcuSEFDS19TQ1JJUFRfUkFNO1xyXG4gICAgY29uc3Qgd2Vha2VuU2NyaXB0UmFtID0gQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNO1xyXG4gICAgY29uc3QgZ3Jvd2luZ1NjcmlwdFJhbSA9IENvbmZpZy5HUk9XX1NDUklQVF9SQU07XHJcblxyXG4gICAgY29uc3QgVEhSRVNIT0xEX1NURVAgPSBDb25maWcuVEhSRVNIT0xEX1NURVA7XHJcbiAgICBsZXQgaGFja1RocmVzaG9sZCA9IDAuNztcclxuXHJcbiAgICBpZiAoaGFja1RocmVzaG9sZCA8IENvbmZpZy5NSU5fSEFDS19USFJFU0hPTEQpIHRocm93IG5ldyBFcnJvcihcIkhhY2sgdGhyZXNob2xkIGlzIHRvbyBsb3dcIik7XHJcblxyXG4gICAgbnMucHJpbnQoQ29sb3JzLkVfT1JBTkdFICsgXCJTdGFydGluZyBoYWNrIHRocmVzaG9sZDogXCIgKyBoYWNrVGhyZXNob2xkKTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIGxldCBzZXJ2ZXJIYWNrVGhyZWFkcyA9IDA7XHJcbiAgICAgICAgbGV0IHNlcnZlckdyb3dUaHJlYWRzID0gMDtcclxuICAgICAgICBpZiAobnMuZmlsZUV4aXN0cyhcIkZvcm11bGFzLmV4ZVwiLCBcImhvbWVcIikpIHtcclxuICAgICAgICAgICAgUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucykucmVzZXRQbGF5ZXIobnMpO1xyXG4gICAgICAgICAgICBzZXJ2ZXJIYWNrVGhyZWFkcyA9IGdldEhhY2tUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgaGFja1RocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpLmFkZEhhY2tpbmdFeHAobnMsIHRhcmdldCwgc2VydmVySGFja1RocmVhZHMpO1xyXG4gICAgICAgICAgICBzZXJ2ZXJHcm93VGhyZWFkcyA9IGdldEdyb3dUaHJlYWRzRm9ybXVsYXMobnMsIHRhcmdldCwgc2VydmVySGFja1RocmVhZHMpO1xyXG4gICAgICAgICAgICBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKS5hZGRIYWNraW5nRXhwKG5zLCB0YXJnZXQsIHNlcnZlckdyb3dUaHJlYWRzKTtcclxuICAgICAgICAgICAgUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucykucmVzZXRQbGF5ZXIobnMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhY2tBbW91bnQgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpICogaGFja1RocmVzaG9sZDtcclxuICAgICAgICAgICAgc2VydmVySGFja1RocmVhZHMgPSBNYXRoLmNlaWwobnMuaGFja0FuYWx5emVUaHJlYWRzKHRhcmdldCwgaGFja0Ftb3VudCkpO1xyXG5cclxuICAgICAgICAgICAgc2VydmVyR3Jvd1RocmVhZHMgPSBnZXRHcm93VGhyZWFkc1RocmVzaG9sZChucywgdGFyZ2V0LCBoYWNrVGhyZXNob2xkICsgVEhSRVNIT0xEX1NURVApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaXJzdFdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJIYWNrKG5zLCBzZXJ2ZXJIYWNrVGhyZWFkcyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNlY29uZFdlYWtlblRocmVhZHMgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zLCBzZXJ2ZXJHcm93VGhyZWFkcyk7XHJcblxyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBcInNlcnZlckhhY2tUaHJlYWRzOiBcIiArXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJIYWNrVGhyZWFkcyArXHJcbiAgICAgICAgICAgICAgICBcIiBzZXJ2ZXJHcm93VGhyZWFkczogXCIgK1xyXG4gICAgICAgICAgICAgICAgc2VydmVyR3Jvd1RocmVhZHMgK1xyXG4gICAgICAgICAgICAgICAgXCIgZmlyc3RXZWFrZW5UaHJlYWRzOiBcIiArXHJcbiAgICAgICAgICAgICAgICBmaXJzdFdlYWtlblRocmVhZHMgK1xyXG4gICAgICAgICAgICAgICAgXCIgc2Vjb25kV2Vha2VuVGhyZWFkczogXCIgK1xyXG4gICAgICAgICAgICAgICAgc2Vjb25kV2Vha2VuVGhyZWFkcyxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tIFNpbXVsYXRlIGhhY2sgLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBsZXQgaGFja0RlcGxveWVkID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxIb3N0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGFsbEhvc3RzW2ldLm5hbWUuaW5jbHVkZXMoQ29uZmlnLldFQUtfU0VSVkVSX05BTUUpIHx8XHJcbiAgICAgICAgICAgICAgICBhbGxIb3N0c1tpXS5uYW1lLmluY2x1ZGVzKENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFRocmVhZHNPbkhvc3QgPSBNYXRoLmZsb29yKGFsbEhvc3RzW2ldLmF2YWlsYWJsZVJhbSAvIGhhY2tpbmdTY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFRocmVhZHNPbkhvc3QgPj0gc2VydmVySGFja1RocmVhZHMpIHtcclxuICAgICAgICAgICAgICAgIGFsbEhvc3RzW2ldLmF2YWlsYWJsZVJhbSAtPSBzZXJ2ZXJIYWNrVGhyZWFkcyAqIGhhY2tpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgICAgICAgICBoYWNrRGVwbG95ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaGFja0RlcGxveWVkKSB7XHJcbiAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgPSBwYXJzZUZsb2F0KChoYWNrVGhyZXNob2xkIC0gVEhSRVNIT0xEX1NURVApLnRvRml4ZWQoMikpO1xyXG4gICAgICAgICAgICBucy5wcmludChcIlRocmVzaG9sZCB0b28gaGlnaCwgZGVjcmVhc2luZyB0bzogXCIgKyBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBTaW11bGF0ZSB3ZWFrMSAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgICAgICBsZXQgdGhyZWFkc0Rpc3BhdGNoZWQgPSAwO1xyXG4gICAgICAgIGxldCB0aHJlYWRzUmVtYWluaW5nID0gZmlyc3RXZWFrZW5UaHJlYWRzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IGZpcnN0V2Vha2VuVGhyZWFkcykgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGhvc3QgPSBhbGxIb3N0c1tpXTtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgYWxsSG9zdHNbaV0ubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSkgfHxcclxuICAgICAgICAgICAgICAgIGFsbEhvc3RzW2ldLm5hbWUuaW5jbHVkZXMoQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZnJlZVJhbSA9IGFsbEhvc3RzW2ldLmF2YWlsYWJsZVJhbTtcclxuICAgICAgICAgICAgaWYgKGZyZWVSYW0gPCB3ZWFrZW5TY3JpcHRSYW0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBjb25zdCB0aHJlYWRTcGFjZSA9IE1hdGguZmxvb3IoZnJlZVJhbSAvIHdlYWtlblNjcmlwdFJhbSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aHJlYWRzVG9EaXNwYXRjaCA9IE1hdGgubWluKHRocmVhZHNSZW1haW5pbmcsIHRocmVhZFNwYWNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNpbXVsYXRlIHdlYWtlblxyXG4gICAgICAgICAgICBhbGxIb3N0c1tpXS5hdmFpbGFibGVSYW0gLT0gdGhyZWFkc1RvRGlzcGF0Y2ggKiB3ZWFrZW5TY3JpcHRSYW07XHJcbiAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRocmVhZHNSZW1haW5pbmcgPiAwKSB7XHJcbiAgICAgICAgICAgIGhhY2tUaHJlc2hvbGQgPSBwYXJzZUZsb2F0KChoYWNrVGhyZXNob2xkIC0gVEhSRVNIT0xEX1NURVApLnRvRml4ZWQoMikpO1xyXG4gICAgICAgICAgICBucy5wcmludChcIlRocmVzaG9sZCB0b28gaGlnaCwgZGVjcmVhc2luZyB0bzogXCIgKyBoYWNrVGhyZXNob2xkKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLSBTaW11bGF0ZSBncm93IC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgbGV0IGdyb3dEZXBsb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBhbGxIb3N0c1tpXS5uYW1lLmluY2x1ZGVzKENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKSB8fFxyXG4gICAgICAgICAgICAgICAgYWxsSG9zdHNbaV0ubmFtZS5pbmNsdWRlcyhDb25maWcuSEFDS19TRVJWRVJfTkFNRSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihhbGxIb3N0c1tpXS5hdmFpbGFibGVSYW0gLyBncm93aW5nU2NyaXB0UmFtKTtcclxuICAgICAgICAgICAgLy8gbnMucHJpbnQoXCJtYXhUaHJlYWRzT25Ib3N0OiBcIiArIG1heFRocmVhZHNPbkhvc3QgKyBcIiBzZXJ2ZXJHcm93VGhyZWFkczogXCIgKyBzZXJ2ZXJHcm93VGhyZWFkcyk7XHJcbiAgICAgICAgICAgIGlmIChtYXhUaHJlYWRzT25Ib3N0ID49IHNlcnZlckdyb3dUaHJlYWRzKSB7XHJcbiAgICAgICAgICAgICAgICBhbGxIb3N0c1tpXS5hdmFpbGFibGVSYW0gLT0gc2VydmVyR3Jvd1RocmVhZHMgKiBncm93aW5nU2NyaXB0UmFtO1xyXG4gICAgICAgICAgICAgICAgZ3Jvd0RlcGxveWVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIG5zLnByaW50KFwiSEVSRVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFncm93RGVwbG95ZWQpIHtcclxuICAgICAgICAgICAgaGFja1RocmVzaG9sZCA9IHBhcnNlRmxvYXQoKGhhY2tUaHJlc2hvbGQgLSBUSFJFU0hPTERfU1RFUCkudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFwiVGhyZXNob2xkIHRvbyBoaWdoLCBkZWNyZWFzaW5nIHRvOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0gU2ltdWxhdGUgd2VhazIgLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgPSAwO1xyXG4gICAgICAgIHRocmVhZHNSZW1haW5pbmcgPSBzZWNvbmRXZWFrZW5UaHJlYWRzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHNlY29uZFdlYWtlblRocmVhZHMpIGJyZWFrO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgIGFsbEhvc3RzW2ldLm5hbWUuaW5jbHVkZXMoQ29uZmlnLkdST1dfU0VSVkVSX05BTUUpIHx8XHJcbiAgICAgICAgICAgICAgICBhbGxIb3N0c1tpXS5uYW1lLmluY2x1ZGVzKENvbmZpZy5IQUNLX1NFUlZFUl9OQU1FKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZyZWVSYW0gPSBhbGxIb3N0c1tpXS5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgd2Vha2VuU2NyaXB0UmFtKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkU3BhY2UgPSBNYXRoLmZsb29yKGZyZWVSYW0gLyB3ZWFrZW5TY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkc1RvRGlzcGF0Y2ggPSBNYXRoLm1pbih0aHJlYWRzUmVtYWluaW5nLCB0aHJlYWRTcGFjZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzaW11bGF0ZSB3ZWFrZW5cclxuICAgICAgICAgICAgYWxsSG9zdHNbaV0uYXZhaWxhYmxlUmFtIC09IHRocmVhZHNUb0Rpc3BhdGNoICogd2Vha2VuU2NyaXB0UmFtO1xyXG4gICAgICAgICAgICB0aHJlYWRzUmVtYWluaW5nIC09IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgICAgICB0aHJlYWRzRGlzcGF0Y2hlZCArPSB0aHJlYWRzVG9EaXNwYXRjaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aHJlYWRzUmVtYWluaW5nID4gMCkge1xyXG4gICAgICAgICAgICBoYWNrVGhyZXNob2xkID0gcGFyc2VGbG9hdCgoaGFja1RocmVzaG9sZCAtIFRIUkVTSE9MRF9TVEVQKS50b0ZpeGVkKDIpKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoXCJUaHJlc2hvbGQgdG9vIGhpZ2gsIGRlY3JlYXNpbmcgdG86IFwiICsgaGFja1RocmVzaG9sZCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkdSRUVOICsgXCJBbGwgc2ltdWxhdGlvbnMgcGFzc2VkLCBoYWNrVGhyZXNob2xkOiBcIiArIGhhY2tUaHJlc2hvbGQpO1xyXG5cclxuICAgICAgICBucy5wcmludChhbGxIb3N0cy5tYXAoKGhvc3QpID0+IGhvc3QubmFtZSArIFwiIFwiICsgaG9zdC5hdmFpbGFibGVSYW0pLmpvaW4oXCJcXG5cIikpO1xyXG5cclxuICAgICAgICByZXR1cm4gaGFja1RocmVzaG9sZDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmUobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgaGFja1RocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICBpZiAoaXNQcmVwYXJhdGlvbk5lZWRlZChucywgdGFyZ2V0KSkge1xyXG4gICAgICAgIGF3YWl0IHByZXBhcmVTZXJ2ZXIobnMsIHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICBoYWNrVGhyZXNob2xkID0gZ2V0SGFja1RocmVzaG9sZChucywgdGFyZ2V0KTtcclxuICAgIG5zLnRwcmludChDb2xvcnMuRV9PUkFOR0UgKyBcImhhY2tUaHJlc2hvbGQ6IFwiICsgaGFja1RocmVzaG9sZCk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAgIG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCkgPT0gcGFyc2VGbG9hdChucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZSh0YXJnZXQpLnRvRml4ZWQoNSkpIHx8XHJcbiAgICAgICAgcGFyc2VGbG9hdChucy5nZXRTZXJ2ZXJTZWN1cml0eUxldmVsKHRhcmdldCkudG9GaXhlZCg1KSkgPT0gbnMuZ2V0U2VydmVyTWluU2VjdXJpdHlMZXZlbCh0YXJnZXQpXHJcbiAgICApIHtcclxuICAgICAgICBucy5wcmludChDb2xvcnMuR1JFRU4gKyBcIlByZXBhcmF0aW9uIGZpbmlzaGVkLCBzdGFydGluZyBwYXJhbGxlbCBtb2RlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiUHJlcGFyYXRpb24gZmFpbGVkXCIpO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByZXBhcmF0aW9uIGZhaWxlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGFja1RocmVzaG9sZDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsY0FBYztBQUN2QixTQUFTLDJCQUEyQixxQkFBcUI7QUFDekQ7QUFBQSxFQUNJO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNHO0FBQ1AsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyxxQkFBcUI7QUFFOUIsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixLQUFHLFdBQVcsS0FBSztBQUduQixRQUFNLEdBQUcsTUFBTSxHQUFJO0FBQ25CLFVBQVEsRUFBRTtBQUVWLEtBQUcsY0FBYyxDQUFDLEVBQUUsTUFBTTtBQUUxQixNQUFJLGdCQUFnQjtBQUNwQixNQUFJLGFBQWE7QUFFakIsU0FBTyxNQUFNO0FBRVQsVUFBTSxzQkFBK0IsR0FBRyxHQUFHLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxhQUFhLGtCQUFrQixNQUFNO0FBQ2hHLFFBQ0ksR0FBRyxNQUFNLGNBQWMsS0FDdkIsR0FBRyxNQUFNLFVBQVUsS0FDbkIsR0FBRyxNQUFNLGdCQUFnQixLQUN6QixHQUFHLE1BQU0sZ0JBQWdCLEtBQ3pCLEdBQUcsd0JBQXdCLE1BQU0sSUFBSSxPQUFPLCtCQUM1QyxDQUFDO0FBRUQsU0FBRyxLQUFLLG9CQUFvQixNQUFNO0FBR3RDLFVBQU0sa0JBQTJCLEdB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\",\"filename\":\"hackingDeamon.js\",\"server\":\"home\"}}],[\"loop/prepareServer.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { Colors, getGrowThreads, getWeakenThreads, getWeakenThreadsAfterGrow, nukeAll } from \\\"/lib.js\\\";\\nimport { WGHAlgorithms } from \\\"/parallel/WGHAlgorithms.js\\\";\\nimport { printServerStats } from \\\"/serverStats.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  await prepareServer(ns, \\\"foodnstuff\\\");\\n}\\nexport async function prepareServer(ns, target, threshold = 0.8) {\\n  let allHosts = getBestHostByRamOptimized(ns);\\n  const sumAvailableRam = allHosts.reduce((acc, server) => {\\n    return acc + server.availableRam;\\n  }, 0);\\n  const weakenThreads = getWeakenThreads(ns, target);\\n  const growThreads = getGrowThreads(ns, target);\\n  const weakenAfterGrowThreads = getWeakenThreadsAfterGrow(ns, growThreads);\\n  const totalRamNeeded = weakenThreads * Config.WEAKEN_SCRIPT_RAM + growThreads * Config.GROW_SCRIPT_RAM + weakenAfterGrowThreads * Config.WEAKEN_SCRIPT_RAM;\\n  ns.print(\\n    \\\"needs \\\" + totalRamNeeded + \\\"GB of RAM and got \\\" + sumAvailableRam + \\\" to running parallel mode on \\\" + target\\n  );\\n  if (totalRamNeeded === 0) {\\n    ns.print(\\\"No preparation needed\\\");\\n    return;\\n  }\\n  if (totalRamNeeded < sumAvailableRam) {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in parallel mode\\\");\\n    const weakTime = ns.getWeakenTime(target);\\n    const growTime = ns.getGrowTime(target);\\n    WGHAlgorithms.weakenServer(ns, target, 1, false, 0, false);\\n    const growDelay = weakTime - growTime + Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.growServer(ns, target, false, growDelay, false);\\n    const weak2delay = 2 * Config.DELAY_MARGIN_MS;\\n    WGHAlgorithms.weakenServer(ns, target, 2, false, weak2delay, false);\\n    await ns.sleep(weakTime + 4 * Config.DELAY_MARGIN_MS);\\n  } else {\\n    ns.print(Colors.CYAN + \\\"Preparing \\\" + target + \\\" in loop mode\\\");\\n    const safetyMarginMs = Config.DELAY_MARGIN_MS;\\n    let weakenMandatory = false;\\n    while (true) {\\n      const totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n      nukeAll(ns);\\n      allHosts = getBestHostByRamOptimized(ns);\\n      if (totalWeakenThreadsNeeded > 50 || weakenMandatory) {\\n        ns.print(Colors.CYAN + \\\"------------ WEAKENING ------------\\\");\\n        ns.print(\\\"total weaken threads needed: \\\" + totalWeakenThreadsNeeded);\\n        let threadsDispatched2 = 0;\\n        let threadsRemaining = totalWeakenThreadsNeeded;\\n        while (threadsDispatched2 < totalWeakenThreadsNeeded) {\\n          const weakenTime = ns.getWeakenTime(target);\\n          for (let i = 0; i < allHosts.length; i++) {\\n            if (threadsDispatched2 >= totalWeakenThreadsNeeded)\\n              break;\\n            const host = allHosts[i];\\n            const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n            if (freeRam < Config.WEAKEN_SCRIPT_RAM)\\n              continue;\\n            const numThreadsOnHost = Math.floor(freeRam / Config.WEAKEN_SCRIPT_RAM);\\n            const threadsToDispatch = Math.min(threadsRemaining, numThreadsOnHost);\\n            ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, 0);\\n            threadsRemaining -= threadsToDispatch;\\n            threadsDispatched2 += threadsToDispatch;\\n          }\\n          ns.print(\\\"dispatched \\\" + threadsDispatched2 + \\\" weaken threads\\\");\\n          await ns.sleep(weakenTime + safetyMarginMs + 1e3);\\n          ns.print(\\\"done with \\\" + threadsDispatched2 + \\\"/\\\" + totalWeakenThreadsNeeded + \\\" weakens\\\");\\n        }\\n        printServerStats(ns, target, threshold);\\n        if (weakenMandatory) {\\n          break;\\n        }\\n      }\\n      ns.print(Colors.CYAN + \\\"------------- GROWING -------------\\\");\\n      const totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n      if (totalGrowThreadsNeeded === 0) {\\n        ns.print(\\\"No growth needed\\\");\\n        weakenMandatory = true;\\n        continue;\\n      }\\n      ns.print(\\\"total growing threads needed: \\\" + totalGrowThreadsNeeded);\\n      const growingTime = ns.getGrowTime(target);\\n      let threadsDispatched = 0;\\n      for (let i = 0; i < allHosts.length; i++) {\\n        const host = allHosts[i];\\n        const freeRam = host.maxRam - ns.getServerUsedRam(host.name);\\n        if (freeRam < Config.GROW_SCRIPT_RAM)\\n          continue;\\n        const numThreadsOnHost = Math.floor(freeRam / Config.GROW_SCRIPT_RAM);\\n        ns.exec(\\\"grow.js\\\", host.name, numThreadsOnHost, target, 0);\\n        threadsDispatched += numThreadsOnHost;\\n      }\\n      ns.print(\\\"dispatched \\\" + threadsDispatched + \\\" grow threads\\\");\\n      await ns.sleep(growingTime + safetyMarginMs);\\n      ns.print(\\\"done with \\\" + threadsDispatched + \\\"/\\\" + totalGrowThreadsNeeded + \\\" grows\\\");\\n      printServerStats(ns, target, threshold);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXBhcmVTZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIkAvQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBDb2xvcnMsIGdldEdyb3dUaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzLCBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93LCBudWtlQWxsIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IFdHSEFsZ29yaXRobXMgfSBmcm9tIFwiQC9wYXJhbGxlbC9XR0hBbGdvcml0aG1zXCI7XHJcbmltcG9ydCB7IHByaW50U2VydmVyU3RhdHMgfSBmcm9tIFwiQC9zZXJ2ZXJTdGF0c1wiO1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuaW1wb3J0IHsgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCIuLi9iZXN0U2VydmVyXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIGF3YWl0IHByZXBhcmVTZXJ2ZXIobnMsIFwiZm9vZG5zdHVmZlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVTZXJ2ZXIobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZXNob2xkID0gMC44KSB7XHJcbiAgICAvLyBlaXRoZXIgcHJlcGFyZSBpbiBsb29wIG9yIHBhcmFsbGVsIG1vZGVcclxuICAgIGxldCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgY29uc3Qgc3VtQXZhaWxhYmxlUmFtID0gYWxsSG9zdHMucmVkdWNlKChhY2MsIHNlcnZlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhY2MgKyBzZXJ2ZXIuYXZhaWxhYmxlUmFtO1xyXG4gICAgfSwgMCk7XHJcblxyXG4gICAgLy8gaG93IG11Y2ggdGhyZWFkcyBhcmUgbmVlZGVkOiB3ZWFrZW4gZnJvbSB1bmtub3duIHRvIG1pbiArIGdyb3cgZnJvbSB1bmtub3duIHRvIG1heCArIHdlYWtlbiBncm93IGVmZmVjdFxyXG4gICAgY29uc3Qgd2Vha2VuVGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHMobnMsIHRhcmdldCk7XHJcbiAgICBjb25zdCBncm93VGhyZWFkcyA9IGdldEdyb3dUaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgY29uc3Qgd2Vha2VuQWZ0ZXJHcm93VGhyZWFkcyA9IGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnMsIGdyb3dUaHJlYWRzKTtcclxuXHJcbiAgICBjb25zdCB0b3RhbFJhbU5lZWRlZCA9XHJcbiAgICAgICAgd2Vha2VuVGhyZWFkcyAqIENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTSArXHJcbiAgICAgICAgZ3Jvd1RocmVhZHMgKiBDb25maWcuR1JPV19TQ1JJUFRfUkFNICtcclxuICAgICAgICB3ZWFrZW5BZnRlckdyb3dUaHJlYWRzICogQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNO1xyXG5cclxuICAgIG5zLnByaW50KFxyXG4gICAgICAgIFwibmVlZHMgXCIgKyB0b3RhbFJhbU5lZWRlZCArIFwiR0Igb2YgUkFNIGFuZCBnb3QgXCIgKyBzdW1BdmFpbGFibGVSYW0gKyBcIiB0byBydW5uaW5nIHBhcmFsbGVsIG1vZGUgb24gXCIgKyB0YXJnZXQsXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0b3RhbFJhbU5lZWRlZCA9PT0gMCkge1xyXG4gICAgICAgIG5zLnByaW50KFwiTm8gcHJlcGFyYXRpb24gbmVlZGVkXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG90YWxSYW1OZWVkZWQgPCBzdW1BdmFpbGFibGVSYW0pIHtcclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBQQVJBTExFTCBNT0RFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgbnMucHJpbnQoQ29sb3JzLkNZQU4gKyBcIlByZXBhcmluZyBcIiArIHRhcmdldCArIFwiIGluIHBhcmFsbGVsIG1vZGVcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IHdlYWtUaW1lID0gbnMuZ2V0V2Vha2VuVGltZSh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGdyb3dUaW1lID0gbnMuZ2V0R3Jvd1RpbWUodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgV0dIQWxnb3JpdGhtcy53ZWFrZW5TZXJ2ZXIobnMsIHRhcmdldCwgMSwgZmFsc2UsIDAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3Jvd0RlbGF5ID0gd2Vha1RpbWUgLSBncm93VGltZSArIENvbmZpZy5ERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgV0dIQWxnb3JpdGhtcy5ncm93U2VydmVyKG5zLCB0YXJnZXQsIGZhbHNlLCBncm93RGVsYXksIGZhbHNlKTtcclxuXHJcbiAgICAgICAgY29uc3Qgd2VhazJkZWxheSA9IDIgKiBDb25maWcuREVMQVlfTUFSR0lOX01TO1xyXG4gICAgICAgIFdHSEFsZ29yaXRobXMud2Vha2VuU2VydmVyKG5zLCB0YXJnZXQsIDIsIGZhbHNlLCB3ZWFrMmRlbGF5LCBmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIHdhaXQgZm9yIHByZXAgdG8gZmluaXNoXHJcbiAgICAgICAgYXdhaXQgbnMuc2xlZXAod2Vha1RpbWUgKyA0ICogQ29uZmlnLkRFTEFZX01BUkdJTl9NUyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gTE9PUCBNT0RFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiUHJlcGFyaW5nIFwiICsgdGFyZ2V0ICsgXCIgaW4gbG9vcCBtb2RlXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBzYWZldHlNYXJnaW5NcyA9IENvbmZpZy5ERUxBWV9NQVJHSU5fTVM7XHJcbiAgICAgICAgbGV0IHdlYWtlbk1hbmRhdG9yeSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiB1c2Ugc2ltaWxhciBtZXRob2QgYXMgaW4gcGFyYWxsZWwvbWFuYWdlci50cyB0byBsZXQgdGhlIGdyb3cgZmluaXNoIHJpZ2h0IGFmdGVyIHRoZSB3ZWFrZW5cclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG5cclxuICAgICAgICAgICAgbnVrZUFsbChucyk7XHJcbiAgICAgICAgICAgIGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICAgICAgICAgIGlmICh0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPiA1MCB8fCB3ZWFrZW5NYW5kYXRvcnkpIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5DWUFOICsgXCItLS0tLS0tLS0tLS0gV0VBS0VOSU5HIC0tLS0tLS0tLS0tLVwiKTtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwidG90YWwgd2Vha2VuIHRocmVhZHMgbmVlZGVkOiBcIiArIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCk7XHJcbiAgICAgICAgICAgICAgICAvLyB3ZWFrZW4gdG8gbWluIHNlYyBsdmxcclxuICAgICAgICAgICAgICAgIGxldCB0aHJlYWRzRGlzcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZDtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0aHJlYWRzRGlzcGF0Y2hlZCA8IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlYWtlblRpbWUgPSBucy5nZXRXZWFrZW5UaW1lKHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocmVhZHNEaXNwYXRjaGVkID49IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCkgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyZWVSYW0gPSBob3N0Lm1heFJhbSAtIG5zLmdldFNlcnZlclVzZWRSYW0oaG9zdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZWVSYW0gPCBDb25maWcuV0VBS0VOX1NDUklQVF9SQU0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1UaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihmcmVlUmFtIC8gQ29uZmlnLldFQUtFTl9TQ1JJUFRfUkFNKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRocmVhZHNUb0Rpc3BhdGNoID0gTWF0aC5taW4odGhyZWFkc1JlbWFpbmluZywgbnVtVGhyZWFkc09uSG9zdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBucy5leGVjKFwid2Vha2VuLmpzXCIsIGhvc3QubmFtZSwgdGhyZWFkc1RvRGlzcGF0Y2gsIHRhcmdldCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZHNSZW1haW5pbmcgLT0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IHRocmVhZHNUb0Rpc3BhdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBucy5wcmludChcImRpc3BhdGNoZWQgXCIgKyB0aHJlYWRzRGlzcGF0Y2hlZCArIFwiIHdlYWtlbiB0aHJlYWRzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKHdlYWtlblRpbWUgKyBzYWZldHlNYXJnaW5NcyArIDEwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLnByaW50KFwiZG9uZSB3aXRoIFwiICsgdGhyZWFkc0Rpc3BhdGNoZWQgKyBcIi9cIiArIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCArIFwiIHdlYWtlbnNcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmludFNlcnZlclN0YXRzKG5zLCB0YXJnZXQsIHRocmVzaG9sZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdlYWtlbk1hbmRhdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBucy5wcmludChDb2xvcnMuQ1lBTiArIFwiLS0tLS0tLS0tLS0tLSBHUk9XSU5HIC0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgZ3JvdyBpcyBuZWVkZWRcclxuICAgICAgICAgICAgaWYgKHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KFwiTm8gZ3Jvd3RoIG5lZWRlZFwiKTtcclxuICAgICAgICAgICAgICAgIHdlYWtlbk1hbmRhdG9yeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBucy5wcmludChcInRvdGFsIGdyb3dpbmcgdGhyZWFkcyBuZWVkZWQ6IFwiICsgdG90YWxHcm93VGhyZWFkc05lZWRlZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBncm93IG9uZSBiYXRjaFxyXG4gICAgICAgICAgICBjb25zdCBncm93aW5nVGltZSA9IG5zLmdldEdyb3dUaW1lKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGxldCB0aHJlYWRzRGlzcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKSBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5tYXhSYW0gLSBucy5nZXRTZXJ2ZXJVc2VkUmFtKGhvc3QubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJlZVJhbSA8IENvbmZpZy5HUk9XX1NDUklQVF9SQU0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtVGhyZWFkc09uSG9zdCA9IE1hdGguZmxvb3IoZnJlZVJhbSAvIENvbmZpZy5HUk9XX1NDUklQVF9SQU0pO1xyXG5cclxuICAgICAgICAgICAgICAgIG5zLmV4ZWMoXCJncm93LmpzXCIsIGhvc3QubmFtZSwgbnVtVGhyZWFkc09uSG9zdCwgdGFyZ2V0LCAwKTtcclxuICAgICAgICAgICAgICAgIHRocmVhZHNEaXNwYXRjaGVkICs9IG51bVRocmVhZHNPbkhvc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbnMucHJpbnQoXCJkaXNwYXRjaGVkIFwiICsgdGhyZWFkc0Rpc3BhdGNoZWQgKyBcIiBncm93IHRocmVhZHNcIik7XHJcbiAgICAgICAgICAgIGF3YWl0IG5zLnNsZWVwKGdyb3dpbmdUaW1lICsgc2FmZXR5TWFyZ2luTXMpO1xyXG4gICAgICAgICAgICBucy5wcmludChcImRvbmUgd2l0aCBcIiArIHRocmVhZHNEaXNwYXRjaGVkICsgXCIvXCIgKyB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkICsgXCIgZ3Jvd3NcIik7XHJcbiAgICAgICAgICAgIHByaW50U2VydmVyU3RhdHMobnMsIHRhcmdldCwgdGhyZXNob2xkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGNBQWM7QUFDdkIsU0FBUyxRQUFRLGdCQUFnQixrQkFBa0IsMkJBQTJCLGVBQWU7QUFDN0YsU0FBUyxxQkFBcUI7QUFDOUIsU0FBUyx3QkFBd0I7QUFFakMsU0FBUyxpQ0FBaUM7QUFFMUMsc0JBQXNCLEtBQUssSUFBUTtBQUMvQixLQUFHLEtBQUs7QUFDUixRQUFNLGNBQWMsSUFBSSxZQUFZO0FBQ3hDO0FBRUEsc0JBQXNCLGNBQWMsSUFBUSxRQUFnQixZQUFZLEtBQUs7QUFFekUsTUFBSSxXQUFXLDBCQUEwQixFQUFFO0FBQzNDLFFBQU0sa0JBQWtCLFNBQVMsT0FBTyxDQUFDLEtBQUssV0FBVztBQUNyRCxXQUFPLE1BQU0sT0FBTztBQUFBLEVBQ3hCLEdBQUcsQ0FBQztBQUdKLFFBQU0sZ0JBQWdCLGlCQUFpQixJQUFJLE1BQU07QUFDakQsUUFBTSxjQUFjLGVBQWUsSUFBSSxNQUFNO0FBQzdDLFFBQU0seUJBQXlCLDBCQUEwQixJQUFJLFdBQVc7QUFFeEUsUUFBTSxpQkFDRixnQkFBZ0IsT0FBTyxvQkFDdkIsY0FBYyxPQUFPLGtCQUNyQix5QkFBeUIsT0FBTztBQUVwQyxLQUFHO0FBQUEsSUFDQyxXQUFXLGlCQUFpQix1QkFBdUIsa0JBQWtCLGtDQUFrQztBQUFBLEVBQzNHO0FBRUEsTUFBSSxtQkFBbUIsR0FBRztBQUN0QixPQUFHLE1BQU0sdUJBQXVCO0FBQ2hDO0FBQUEsRUFDSjtBQUVBLE1BQUksaUJBQWlCLGlCQUFpQjtBQUVsQyxPQUFHLE1BQU0sT0FBTyxPQUFPLGVBQWUsU0FBUyxtQkFBbUI7QUFFbEUsVUFBTSxXQUFXLEdBQUcsY0FBYyxNQUFNO0FBQ3hD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\",\"filename\":\"loop/prepareServer.js\",\"server\":\"home\"}}],[\"sm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export function autocomplete(data) {\\n  return [...data.servers];\\n}\\nexport async function main(ns) {\\n  let primaryName = \\\"\\\";\\n  let isUpgrade = false;\\n  let upgradeRam = 0;\\n  let upgradeUnit = \\\"\\\";\\n  let isBuy = false;\\n  let buyRam = 0;\\n  let buyUnit = \\\"\\\";\\n  let isRename = false;\\n  let newName = \\\"\\\";\\n  let isDelete = false;\\n  let isKill = false;\\n  let isOverview = false;\\n  if (ns.args.length > 0) {\\n    if (ns.args[0] == \\\"-u\\\" && ns.args.length == 3) {\\n      isUpgrade = true;\\n      primaryName = ns.args[1].toString();\\n      upgradeRam = Number(String(ns.args[2]).slice(0, -1));\\n      upgradeUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-b\\\" && ns.args.length == 3) {\\n      isBuy = true;\\n      primaryName = ns.args[1].toString();\\n      buyRam = Number(String(ns.args[2]).slice(0, -1));\\n      buyUnit = String(ns.args[2]).slice(-1);\\n    }\\n    if (ns.args[0] == \\\"-r\\\" && ns.args.length == 3) {\\n      isRename = true;\\n      primaryName = ns.args[1].toString();\\n      newName = ns.args[2].toString();\\n    }\\n    if (ns.args[0] == \\\"-d\\\" && ns.args.length == 2) {\\n      isDelete = true;\\n      primaryName = ns.args[1].toString();\\n    }\\n    if (ns.args[0] == \\\"-k\\\" && ns.args.length == 2) {\\n      isKill = true;\\n      primaryName = ns.args[1].toString();\\n    }\\n    if (ns.args[0] == \\\"-o\\\" && ns.args.length == 1) {\\n      isOverview = true;\\n    }\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r (<old name> <new name>\\\\n\\t-d (delete) <server name>\\\\n\\t-k (kill) <server name>\\\\n\\t-o (overview)\\\"\\n    );\\n    return;\\n  }\\n  if (isUpgrade) {\\n    const exponent = Math.ceil(Math.log2(upgradeRam));\\n    upgradeRam = Math.pow(2, exponent);\\n    upgradeRam = getGBfromAnyUnit(ns, upgradeRam, upgradeUnit);\\n    const servers = ns.getPurchasedServers();\\n    if (!servers.includes(primaryName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + primaryName);\\n    }\\n    const price = ns.getPurchasedServerUpgradeCost(primaryName, upgradeRam);\\n    const answer = await ns.prompt(\\n      \\\"upgrading the server (\\\" + primaryName + \\\") to \\\" + upgradeRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.upgradePurchasedServer(primaryName, upgradeRam);\\n  } else if (isBuy) {\\n    buyRam = getGBfromAnyUnit(ns, buyRam, buyUnit);\\n    if (buyRam < 1)\\n      return;\\n    const price = ns.getPurchasedServerCost(buyRam);\\n    const answer = await ns.prompt(\\n      \\\"buying the server (\\\" + primaryName + \\\") with \\\" + buyRam + \\\"GB of Ram, will cost \\\" + ns.formatNumber(price)\\n    );\\n    if (answer)\\n      ns.purchaseServer(primaryName, buyRam);\\n  } else if (isRename) {\\n    if (!ns.getPurchasedServers().includes(primaryName)) {\\n      ns.tprint(\\\"You do not own a server called \\\" + primaryName);\\n    }\\n    ns.renamePurchasedServer(primaryName, newName);\\n  } else if (isDelete) {\\n    ns.deleteServer(primaryName);\\n  } else if (isKill) {\\n    ns.tprint(\\\"Killing server \\\" + primaryName);\\n    ns.killall(primaryName);\\n  } else if (isOverview) {\\n    ns.tail();\\n    ns.disableLog(\\\"ALL\\\");\\n    const servers = ns.getPurchasedServers();\\n    for (let i = 0; i < servers.length; i++) {\\n      const ramPercent = ns.formatNumber(ns.getServerUsedRam(servers[i]) / ns.getServerMaxRam(servers[i]));\\n      ns.print(servers[i] + \\\"\\t\\\" + ns.getServerMaxRam(servers[i]) + \\\"GB\\t\\\" + ramPercent + \\\"%\\\");\\n    }\\n  } else {\\n    const playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\n    let ramSize = 16;\\n    while (ns.getPurchasedServerCost(ramSize) < playerMoney) {\\n      ramSize *= 2;\\n    }\\n    ramSize = ramSize / 2;\\n    ns.tprint(\\n      \\\"you can buy a server with \\\" + ramSize + \\\"GB of ram. This costs \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize))\\n    );\\n    const answer = await ns.prompt(\\\"buy Server for \\\" + ns.formatNumber(ns.getPurchasedServerCost(ramSize)) + \\\"?\\\");\\n    if (answer) {\\n      ns.purchaseServer(\\\"hacker\\\", ramSize);\\n    }\\n  }\\n}\\nfunction getGBfromAnyUnit(ns, ram, unit) {\\n  if (unit == \\\"G\\\") {\\n    return ram;\\n  } else if (unit == \\\"T\\\") {\\n    return ram * 1024;\\n  } else if (unit == \\\"P\\\") {\\n    return ram * 1024 * 1024;\\n  } else {\\n    ns.tprint(\\n      \\\"\\\\nusage: sm.js [options]\\\\n\\\\nOptions:\\\\n\\t-u <Name> <Ram><G|T|P>\\\\n\\t-b <Name> <Ram><G|T|P>\\\\n\\t-r <old name> <new name>\\\"\\n    );\\n    return 0;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuaW50ZXJmYWNlIEF1dG9jb21wbGV0ZURhdGEge1xyXG4gICAgc2VydmVyczogc3RyaW5nW107XHJcbiAgICB0eHRzOiBzdHJpbmdbXTtcclxuICAgIHNjcmlwdHM6IHN0cmluZ1tdO1xyXG4gICAgZmxhZ3M6IHN0cmluZ1tdO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRvY29tcGxldGUoZGF0YTogQXV0b2NvbXBsZXRlRGF0YSkge1xyXG4gICAgcmV0dXJuIFsuLi5kYXRhLnNlcnZlcnNdO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGxldCBwcmltYXJ5TmFtZSA9IFwiXCI7XHJcblxyXG4gICAgbGV0IGlzVXBncmFkZSA9IGZhbHNlO1xyXG4gICAgbGV0IHVwZ3JhZGVSYW0gPSAwO1xyXG4gICAgbGV0IHVwZ3JhZGVVbml0ID0gXCJcIjtcclxuXHJcbiAgICBsZXQgaXNCdXkgPSBmYWxzZTtcclxuICAgIGxldCBidXlSYW0gPSAwO1xyXG4gICAgbGV0IGJ1eVVuaXQgPSBcIlwiO1xyXG5cclxuICAgIGxldCBpc1JlbmFtZSA9IGZhbHNlO1xyXG4gICAgbGV0IG5ld05hbWUgPSBcIlwiO1xyXG5cclxuICAgIGxldCBpc0RlbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGxldCBpc0tpbGwgPSBmYWxzZTtcclxuXHJcbiAgICBsZXQgaXNPdmVydmlldyA9IGZhbHNlO1xyXG5cclxuICAgIGlmIChucy5hcmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi11XCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc1VwZ3JhZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcmltYXJ5TmFtZSA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgdXBncmFkZVJhbSA9IE51bWJlcihTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoMCwgLTEpKTtcclxuICAgICAgICAgICAgdXBncmFkZVVuaXQgPSBTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1iXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc0J1eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBidXlSYW0gPSBOdW1iZXIoU3RyaW5nKG5zLmFyZ3NbMl0pLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgICAgIGJ1eVVuaXQgPSBTdHJpbmcobnMuYXJnc1syXSkuc2xpY2UoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1yXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMykge1xyXG4gICAgICAgICAgICBpc1JlbmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBuZXdOYW1lID0gbnMuYXJnc1syXS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1kXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpc0RlbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHByaW1hcnlOYW1lID0gbnMuYXJnc1sxXS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobnMuYXJnc1swXSA9PSBcIi1rXCIgJiYgbnMuYXJncy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBpc0tpbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcmltYXJ5TmFtZSA9IG5zLmFyZ3NbMV0udG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5zLmFyZ3NbMF0gPT0gXCItb1wiICYmIG5zLmFyZ3MubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgaXNPdmVydmlldyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBucy50cHJpbnQoXHJcbiAgICAgICAgICAgIFwiXFxudXNhZ2U6IHNtLmpzIFtvcHRpb25zXVxcblxcbk9wdGlvbnM6XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtdSA8TmFtZT4gPFJhbT48R3xUfFA+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtYiA8TmFtZT4gPFJhbT48R3xUfFA+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtciAoPG9sZCBuYW1lPiA8bmV3IG5hbWU+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtZCAoZGVsZXRlKSA8c2VydmVyIG5hbWU+XCIgK1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cXHQtayAoa2lsbCkgPHNlcnZlciBuYW1lPlwiICtcclxuICAgICAgICAgICAgICAgIFwiXFxuXFx0LW8gKG92ZXJ2aWV3KVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc1VwZ3JhZGUpIHtcclxuICAgICAgICAvLyBnZXQgY3VycmVudCByYW1cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIodXBncmFkZVJhbSkpO1xyXG4gICAgICAgIHVwZ3JhZGVSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIHVwZ3JhZGVSYW0gPSBnZXRHQmZyb21BbnlVbml0KG5zLCB1cGdyYWRlUmFtLCB1cGdyYWRlVW5pdCk7XHJcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBpZiAoIXNlcnZlcnMuaW5jbHVkZXMocHJpbWFyeU5hbWUpKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcIllvdSBkbyBub3Qgb3duIGEgc2VydmVyIGNhbGxlZCBcIiArIHByaW1hcnlOYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHByaWNlID0gbnMuZ2V0UHVyY2hhc2VkU2VydmVyVXBncmFkZUNvc3QocHJpbWFyeU5hbWUsIHVwZ3JhZGVSYW0pO1xyXG5cclxuICAgICAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBucy5wcm9tcHQoXHJcbiAgICAgICAgICAgIFwidXBncmFkaW5nIHRoZSBzZXJ2ZXIgKFwiICtcclxuICAgICAgICAgICAgICAgIHByaW1hcnlOYW1lICtcclxuICAgICAgICAgICAgICAgIFwiKSB0byBcIiArXHJcbiAgICAgICAgICAgICAgICB1cGdyYWRlUmFtICtcclxuICAgICAgICAgICAgICAgIFwiR0Igb2YgUmFtLCB3aWxsIGNvc3QgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKHByaWNlKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChhbnN3ZXIpIG5zLnVwZ3JhZGVQdXJjaGFzZWRTZXJ2ZXIocHJpbWFyeU5hbWUsIHVwZ3JhZGVSYW0pO1xyXG4gICAgfSBlbHNlIGlmIChpc0J1eSkge1xyXG4gICAgICAgIGJ1eVJhbSA9IGdldEdCZnJvbUFueVVuaXQobnMsIGJ1eVJhbSwgYnV5VW5pdCk7XHJcbiAgICAgICAgaWYgKGJ1eVJhbSA8IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgcHJpY2UgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KGJ1eVJhbSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IG5zLnByb21wdChcclxuICAgICAgICAgICAgXCJidXlpbmcgdGhlIHNlcnZlciAoXCIgKyBwcmltYXJ5TmFtZSArIFwiKSB3aXRoIFwiICsgYnV5UmFtICsgXCJHQiBvZiBSYW0sIHdpbGwgY29zdCBcIiArIG5zLmZvcm1hdE51bWJlcihwcmljZSksXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoYW5zd2VyKSBucy5wdXJjaGFzZVNlcnZlcihwcmltYXJ5TmFtZSwgYnV5UmFtKTtcclxuICAgIH0gZWxzZSBpZiAoaXNSZW5hbWUpIHtcclxuICAgICAgICBpZiAoIW5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKS5pbmNsdWRlcyhwcmltYXJ5TmFtZSkpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFwiWW91IGRvIG5vdCBvd24gYSBzZXJ2ZXIgY2FsbGVkIFwiICsgcHJpbWFyeU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBucy5yZW5hbWVQdXJjaGFzZWRTZXJ2ZXIocHJpbWFyeU5hbWUsIG5ld05hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChpc0RlbGV0ZSkge1xyXG4gICAgICAgIG5zLmRlbGV0ZVNlcnZlcihwcmltYXJ5TmFtZSk7XHJcbiAgICB9IGVsc2UgaWYgKGlzS2lsbCkge1xyXG4gICAgICAgIG5zLnRwcmludChcIktpbGxpbmcgc2VydmVyIFwiICsgcHJpbWFyeU5hbWUpO1xyXG4gICAgICAgIG5zLmtpbGxhbGwocHJpbWFyeU5hbWUpO1xyXG4gICAgfSBlbHNlIGlmIChpc092ZXJ2aWV3KSB7XHJcbiAgICAgICAgbnMudGFpbCgpO1xyXG4gICAgICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcbiAgICAgICAgY29uc3Qgc2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcmFtUGVyY2VudCA9IG5zLmZvcm1hdE51bWJlcihucy5nZXRTZXJ2ZXJVc2VkUmFtKHNlcnZlcnNbaV0pIC8gbnMuZ2V0U2VydmVyTWF4UmFtKHNlcnZlcnNbaV0pKTtcclxuICAgICAgICAgICAgbnMucHJpbnQoc2VydmVyc1tpXSArIFwiXFx0XCIgKyBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyc1tpXSkgKyBcIkdCXFx0XCIgKyByYW1QZXJjZW50ICsgXCIlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyTW9uZXkgPSBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIik7XHJcbiAgICAgICAgbGV0IHJhbVNpemUgPSAxNjtcclxuICAgICAgICB3aGlsZSAobnMuZ2V0UHVyY2hhc2VkU2VydmVyQ29zdChyYW1TaXplKSA8IHBsYXllck1vbmV5KSB7XHJcbiAgICAgICAgICAgIHJhbVNpemUgKj0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmFtU2l6ZSA9IHJhbVNpemUgLyAyO1xyXG4gICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgXCJ5b3UgY2FuIGJ1eSBhIHNlcnZlciB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIHJhbVNpemUgK1xyXG4gICAgICAgICAgICAgICAgXCJHQiBvZiByYW0uIFRoaXMgY29zdHMgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IG5zLnByb21wdChcImJ1eSBTZXJ2ZXIgZm9yIFwiICsgbnMuZm9ybWF0TnVtYmVyKG5zLmdldFB1cmNoYXNlZFNlcnZlckNvc3QocmFtU2l6ZSkpICsgXCI/XCIpO1xyXG5cclxuICAgICAgICBpZiAoYW5zd2VyKSB7XHJcbiAgICAgICAgICAgIG5zLnB1cmNoYXNlU2VydmVyKFwiaGFja2VyXCIsIHJhbVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0R0Jmcm9tQW55VW5pdChuczogTlMsIHJhbTogbnVtYmVyLCB1bml0OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgaWYgKHVuaXQgPT0gXCJHXCIpIHtcclxuICAgICAgICByZXR1cm4gcmFtO1xyXG4gICAgfSBlbHNlIGlmICh1bml0ID09IFwiVFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhbSAqIDEwMjQ7XHJcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT0gXCJQXCIpIHtcclxuICAgICAgICByZXR1cm4gcmFtICogMTAyNCAqIDEwMjQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5zLnRwcmludChcclxuICAgICAgICAgICAgXCJcXG51c2FnZTogc20uanMgW29wdGlvbnNdXFxuXFxuT3B0aW9uczpcXG5cXHQtdSA8TmFtZT4gPFJhbT48R3xUfFA+XFxuXFx0LWIgPE5hbWU+IDxSYW0+PEd8VHxQPlxcblxcdC1yIDxvbGQgbmFtZT4gPG5ldyBuYW1lPlwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFRTyxnQkFBUyxhQUFhLE1BQXdCO0FBQ2pELFNBQU8sQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMzQjtBQUVBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsTUFBSSxjQUFjO0FBRWxCLE1BQUksWUFBWTtBQUNoQixNQUFJLGFBQWE7QUFDakIsTUFBSSxjQUFjO0FBRWxCLE1BQUksUUFBUTtBQUNaLE1BQUksU0FBUztBQUNiLE1BQUksVUFBVTtBQUVkLE1BQUksV0FBVztBQUNmLE1BQUksVUFBVTtBQUVkLE1BQUksV0FBVztBQUVmLE1BQUksU0FBUztBQUViLE1BQUksYUFBYTtBQUVqQixNQUFJLEdBQUcsS0FBSyxTQUFTLEdBQUc7QUFDcEIsUUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLFFBQVEsR0FBRyxLQUFLLFVBQVUsR0FBRztBQUMzQyxrQkFBWTtBQUNaLG9CQUFjLEdBQUcsS0FBSyxDQUFDLEVBQUUsU0FBUztBQUNsQyxtQkFBYSxPQUFPLE9BQU8sR0FBRyxL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\",\"filename\":\"sm.js\",\"server\":\"home\"}}],[\"parallel/ServerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, nukeServer } from \\\"/lib.js\\\";\\nexport class ServerManager {\\n  /**\\n   * Buys or upgrades a server based on the desired RAM and server type.\\n   * If the server exists and can be upgraded successfully, it returns the upgraded server name.\\n   * If the server cannot be upgraded, it attempts to buy a new server with the desired RAM and name.\\n   *\\n   * @param ns - The Bitburner namespace object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param serverType - The type of server to buy or upgrade (`weak`, `grow`, `hack`).\\n   * @param batchId - The batch ID of the server.\\n   * @returns The name of the upgraded server or an empty string if a new server cannot be bought/upgraded.\\n   */\\n  static buyOrUpgradeServer(ns, desiredRam, serverType) {\\n    const server = this.getBestServerToUpgrade(ns, desiredRam, serverType);\\n    if (server.name !== \\\"\\\") {\\n      const upgradeSuccessful = this.upgradeServer(ns, server.totalRam, server.name);\\n      if (upgradeSuccessful)\\n        return server.name;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the upgrade failed, trying to buy a new server\\\"\\n    );\\n    const name = this.buyServer(ns, desiredRam, serverType);\\n    return name;\\n  }\\n  static buyServer(ns, desiredRam, serverName) {\\n    const purchasedServerLimit = ns.getPurchasedServerLimit();\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (purchasedServers.length >= purchasedServerLimit) {\\n      ns.print(Colors.RED + \\\"[server Manager] attempted to buy a new server, but the limit has been reached\\\");\\n      return \\\"\\\";\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerCost(desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB, for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      return \\\"\\\";\\n    }\\n    const name = ns.purchaseServer(serverName, desiredRam);\\n    if (name === \\\"\\\") {\\n      ns.tprint(\\n        Colors.RED + \\\"[server Manager] Failed to buy a new server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost)\\n      );\\n      return \\\"\\\";\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Bought Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    nukeServer(ns, name);\\n    return name;\\n  }\\n  static upgradeServer(ns, desiredRam, serverName) {\\n    const purchasedServers = ns.getPurchasedServers();\\n    if (!purchasedServers.includes(serverName)) {\\n      ns.print(Colors.YELLOW + \\\"[server Manager] attempted to upgrade Server, but the server does not exist\\\");\\n      return false;\\n    }\\n    const exponent = Math.ceil(Math.log2(desiredRam));\\n    desiredRam = Math.pow(2, exponent);\\n    const cost = ns.getPurchasedServerUpgradeCost(serverName, desiredRam);\\n    if (cost > ns.getServerMoneyAvailable(\\\"home\\\")) {\\n      ns.print(\\n        Colors.RED + \\\"[server Manager] attempted to upgrade Server: '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\", but the player does not have enough money\\\"\\n      );\\n      return false;\\n    }\\n    if (!ns.upgradePurchasedServer(serverName, desiredRam)) {\\n      return false;\\n    }\\n    ns.print(\\n      Colors.GREEN + \\\"[server Manager] Upgraded Server '\\\" + serverName + \\\"' with \\\" + desiredRam + \\\"GB for \\\" + ns.formatNumber(cost) + \\\"!\\\"\\n    );\\n    return true;\\n  }\\n  /**\\n   * Upgrades an existing server to meet the desired RAM requirement, that is cheapest to upgrade.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param desiredRam - How much RAM needs the server at least.\\n   * @param name - The name of the server to upgrade.\\n   * @returns The name of the upgraded server, or an empty string if the upgrade failed.\\n   */\\n  static getBestServerToUpgrade(ns, desiredRam, name) {\\n    const purchasedServers = ns.getPurchasedServers().filter((server) => server.includes(name));\\n    if (purchasedServers.length === 0) {\\n      return {\\n        cost: 0,\\n        name: \\\"\\\",\\n        totalRam: 0\\n      };\\n    }\\n    let minUpgradeCost = Number.MAX_VALUE;\\n    let serverToUpgrade = \\\"\\\";\\n    let totalRequiredRam = 0;\\n    for (let i = 0; i < purchasedServers.length; i++) {\\n      const server = purchasedServers[i];\\n      const serverMaxRam = ns.getServerMaxRam(server);\\n      totalRequiredRam = desiredRam + serverMaxRam;\\n      const exponent = Math.ceil(Math.log2(totalRequiredRam));\\n      totalRequiredRam = Math.pow(2, exponent);\\n      const cost = ns.getPurchasedServerUpgradeCost(server, totalRequiredRam);\\n      if (cost < minUpgradeCost) {\\n        minUpgradeCost = cost;\\n        serverToUpgrade = server;\\n      }\\n    }\\n    return {\\n      cost: minUpgradeCost,\\n      name: serverToUpgrade,\\n      totalRam: totalRequiredRam\\n    };\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNlcnZlck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzLCBudWtlU2VydmVyIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlck1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBCdXlzIG9yIHVwZ3JhZGVzIGEgc2VydmVyIGJhc2VkIG9uIHRoZSBkZXNpcmVkIFJBTSBhbmQgc2VydmVyIHR5cGUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGV4aXN0cyBhbmQgY2FuIGJlIHVwZ3JhZGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyB0aGUgdXBncmFkZWQgc2VydmVyIG5hbWUuXHJcbiAgICAgKiBJZiB0aGUgc2VydmVyIGNhbm5vdCBiZSB1cGdyYWRlZCwgaXQgYXR0ZW1wdHMgdG8gYnV5IGEgbmV3IHNlcnZlciB3aXRoIHRoZSBkZXNpcmVkIFJBTSBhbmQgbmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgQml0YnVybmVyIG5hbWVzcGFjZSBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gZGVzaXJlZFJhbSAtIEhvdyBtdWNoIFJBTSBuZWVkcyB0aGUgc2VydmVyIGF0IGxlYXN0LlxyXG4gICAgICogQHBhcmFtIHNlcnZlclR5cGUgLSBUaGUgdHlwZSBvZiBzZXJ2ZXIgdG8gYnV5IG9yIHVwZ3JhZGUgKGB3ZWFrYCwgYGdyb3dgLCBgaGFja2ApLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgYmF0Y2ggSUQgb2YgdGhlIHNlcnZlci5cclxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB1cGdyYWRlZCBzZXJ2ZXIgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIGEgbmV3IHNlcnZlciBjYW5ub3QgYmUgYm91Z2h0L3VwZ3JhZGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYnV5T3JVcGdyYWRlU2VydmVyKG5zOiBOUywgZGVzaXJlZFJhbTogbnVtYmVyLCBzZXJ2ZXJUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuZ2V0QmVzdFNlcnZlclRvVXBncmFkZShucywgZGVzaXJlZFJhbSwgc2VydmVyVHlwZSk7XHJcbiAgICAgICAgaWYgKHNlcnZlci5uYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwZ3JhZGVTdWNjZXNzZnVsID0gdGhpcy51cGdyYWRlU2VydmVyKG5zLCBzZXJ2ZXIudG90YWxSYW0sIHNlcnZlci5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHVwZ3JhZGVTdWNjZXNzZnVsKSByZXR1cm4gc2VydmVyLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBDb2xvcnMuWUVMTE9XICtcclxuICAgICAgICAgICAgICAgIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXIsIGJ1dCB0aGUgdXBncmFkZSBmYWlsZWQsIHRyeWluZyB0byBidXkgYSBuZXcgc2VydmVyXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5idXlTZXJ2ZXIobnMsIGRlc2lyZWRSYW0sIHNlcnZlclR5cGUpO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBidXlTZXJ2ZXIobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIHNlcnZlck5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVyTGltaXQgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJMaW1pdCgpO1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCk7XHJcbiAgICAgICAgaWYgKHB1cmNoYXNlZFNlcnZlcnMubGVuZ3RoID49IHB1cmNoYXNlZFNlcnZlckxpbWl0KSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5SRUQgKyBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIGJ1dCB0aGUgbGltaXQgaGFzIGJlZW4gcmVhY2hlZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVzaXJlZFJhbSkpO1xyXG4gICAgICAgIGRlc2lyZWRSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJDb3N0KGRlc2lyZWRSYW0pO1xyXG4gICAgICAgIGlmIChjb3N0ID4gbnMuZ2V0U2VydmVyTW9uZXlBdmFpbGFibGUoXCJob21lXCIpKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgQ29sb3JzLlJFRCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJbc2VydmVyIE1hbmFnZXJdIGF0dGVtcHRlZCB0byBidXkgYSBuZXcgc2VydmVyOiAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBkZXNpcmVkUmFtICtcclxuICAgICAgICAgICAgICAgICAgICBcIkdCLCBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihjb3N0KSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIsIGJ1dCB0aGUgcGxheWVyIGRvZXMgbm90IGhhdmUgZW5vdWdoIG1vbmV5XCIsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk5vdCBlbm91Z2ggbW9uZXkgdG8gYnV5IGEgbmV3IHNlcnZlclwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuYW1lID0gbnMucHVyY2hhc2VTZXJ2ZXIoc2VydmVyTmFtZSwgZGVzaXJlZFJhbSk7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgbnMudHByaW50KFxyXG4gICAgICAgICAgICAgICAgQ29sb3JzLlJFRCArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJbc2VydmVyIE1hbmFnZXJdIEZhaWxlZCB0byBidXkgYSBuZXcgc2VydmVyOiAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBkZXNpcmVkUmFtICtcclxuICAgICAgICAgICAgICAgICAgICBcIkdCIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gYnV5IGEgbmV3IHNlcnZlclwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICBDb2xvcnMuR1JFRU4gK1xyXG4gICAgICAgICAgICAgICAgXCJbc2VydmVyIE1hbmFnZXJdIEJvdWdodCBTZXJ2ZXIgJ1wiICtcclxuICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgXCInIHdpdGggXCIgK1xyXG4gICAgICAgICAgICAgICAgZGVzaXJlZFJhbSArXHJcbiAgICAgICAgICAgICAgICBcIkdCIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIoY29zdCkgK1xyXG4gICAgICAgICAgICAgICAgXCIhXCIsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBudWtlU2VydmVyKG5zLCBuYW1lKTtcclxuICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdXBncmFkZVNlcnZlcihuczogTlMsIGRlc2lyZWRSYW06IG51bWJlciwgc2VydmVyTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgcHVyY2hhc2VkU2VydmVycyA9IG5zLmdldFB1cmNoYXNlZFNlcnZlcnMoKTtcclxuICAgICAgICBpZiAoIXB1cmNoYXNlZFNlcnZlcnMuaW5jbHVkZXMoc2VydmVyTmFtZSkpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoQ29sb3JzLllFTExPVyArIFwiW3NlcnZlciBNYW5hZ2VyXSBhdHRlbXB0ZWQgdG8gdXBncmFkZSBTZXJ2ZXIsIGJ1dCB0aGUgc2VydmVyIGRvZXMgbm90IGV4aXN0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIoZGVzaXJlZFJhbSkpO1xyXG4gICAgICAgIGRlc2lyZWRSYW0gPSBNYXRoLnBvdygyLCBleHBvbmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvc3QgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJVcGdyYWRlQ29zdChzZXJ2ZXJOYW1lLCBkZXNpcmVkUmFtKTtcclxuXHJcbiAgICAgICAgaWYgKGNvc3QgPiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIikpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgICAgICBDb2xvcnMuUkVEICtcclxuICAgICAgICAgICAgICAgICAgICBcIltzZXJ2ZXIgTWFuYWdlcl0gYXR0ZW1wdGVkIHRvIHVwZ3JhZGUgU2VydmVyOiAnXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZlck5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBkZXNpcmVkUmFtICtcclxuICAgICAgICAgICAgICAgICAgICBcIkdCIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpICtcclxuICAgICAgICAgICAgICAgICAgICBcIiwgYnV0IHRoZSBwbGF5ZXIgZG9lcyBub3QgaGF2ZSBlbm91Z2ggbW9uZXlcIixcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFucy51cGdyYWRlUHVyY2hhc2VkU2VydmVyKHNlcnZlck5hbWUsIGRlc2lyZWRSYW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5HUkVFTiArXHJcbiAgICAgICAgICAgICAgICBcIltzZXJ2ZXIgTWFuYWdlcl0gVXBncmFkZWQgU2VydmVyICdcIiArXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJOYW1lICtcclxuICAgICAgICAgICAgICAgIFwiJyB3aXRoIFwiICtcclxuICAgICAgICAgICAgICAgIGRlc2lyZWRSYW0gK1xyXG4gICAgICAgICAgICAgICAgXCJHQiBmb3IgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKGNvc3QpICtcclxuICAgICAgICAgICAgICAgIFwiIVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGdyYWRlcyBhbiBleGlzdGluZyBzZXJ2ZXIgdG8gbWVldCB0aGUgZGVzaXJlZCBSQU0gcmVxdWlyZW1lbnQsIHRoYXQgaXMgY2hlYXBlc3QgdG8gdXBncmFkZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIGRlc2lyZWRSYW0gLSBIb3cgbXVjaCBSQU0gbmVlZHMgdGhlIHNlcnZlciBhdCBsZWFzdC5cclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZlciB0byB1cGdyYWRlLlxyXG4gICAgICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIHVwZ3JhZGVkIHNlcnZlciwgb3IgYW4gZW1wdHkgc3RyaW5nIGlmIHRoZSB1cGdyYWRlIGZhaWxlZC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEJlc3RTZXJ2ZXJUb1VwZ3JhZGUobnM6IE5TLCBkZXNpcmVkUmFtOiBudW1iZXIsIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHB1cmNoYXNlZFNlcnZlcnMgPSBucy5nZXRQdXJjaGFzZWRTZXJ2ZXJzKCkuZmlsdGVyKChzZXJ2ZXIpID0+IHNlcnZlci5pbmNsdWRlcyhuYW1lKSk7XHJcblxyXG4gICAgICAgIGlmIChwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY29zdDogMCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICB0b3RhbFJhbTogMCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtaW5VcGdyYWRlQ29zdCA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgbGV0IHNlcnZlclRvVXBncmFkZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbFJlcXVpcmVkUmFtID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwdXJjaGFzZWRTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlciA9IHB1cmNoYXNlZFNlcnZlcnNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzZXJ2ZXJNYXhSYW0gPSBucy5nZXRTZXJ2ZXJNYXhSYW0oc2VydmVyKTtcclxuICAgICAgICAgICAgdG90YWxSZXF1aXJlZFJhbSA9IGRlc2lyZWRSYW0gKyBzZXJ2ZXJNYXhSYW07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleHBvbmVudCA9IE1hdGguY2VpbChNYXRoLmxvZzIodG90YWxSZXF1aXJlZFJhbSkpO1xyXG4gICAgICAgICAgICB0b3RhbFJlcXVpcmVkUmFtID0gTWF0aC5wb3coMiwgZXhwb25lbnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29zdCA9IG5zLmdldFB1cmNoYXNlZFNlcnZlclVwZ3JhZGVDb3N0KHNlcnZlciwgdG90YWxSZXF1aXJlZFJhbSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29zdCA8IG1pblVwZ3JhZGVDb3N0KSB7XHJcbiAgICAgICAgICAgICAgICBtaW5VcGdyYWRlQ29zdCA9IGNvc3Q7XHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb1VwZ3JhZGUgPSBzZXJ2ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29zdDogbWluVXBncmFkZUNvc3QsXHJcbiAgICAgICAgICAgIG5hbWU6IHNlcnZlclRvVXBncmFkZSxcclxuICAgICAgICAgICAgdG90YWxSYW06IHRvdGFsUmVxdWlyZWRSYW0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsUUFBUSxrQkFBa0I7QUFHNUIsYUFBTSxjQUFjO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBWXZCLE9BQU8sbUJBQW1CLElBQVEsWUFBb0IsWUFBNEI7QUFDOUUsVUFBTSxTQUFTLEtBQUssdUJBQXVCLElBQUks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\",\"filename\":\"parallel/ServerManager.js\",\"server\":\"home\"}}],[\"gorg.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  ns.print(\\\"\\\\n\\\");\\n  const pids = [];\\n  pids.push(1);\\n  pids.push(2);\\n  pids.push(3);\\n  pids.push(4);\\n  ns.print(pids[pids.length - 1]);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvcmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IFBsYXllck1hbmFnZXIgfSBmcm9tIFwiLi9wYXJhbGxlbC9QbGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnRhaWwoKTtcclxuICAgIG5zLmRpc2FibGVMb2coXCJBTExcIik7XHJcbiAgICBucy5wcmludChcIlxcblwiKTtcclxuXHJcbiAgICAvLyBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKS5yZXNldFBsYXllcihucyk7XHJcblxyXG4gICAgY29uc3QgcGlkcyA9IFtdO1xyXG4gICAgcGlkcy5wdXNoKDEpO1xyXG4gICAgcGlkcy5wdXNoKDIpO1xyXG4gICAgcGlkcy5wdXNoKDMpO1xyXG4gICAgcGlkcy5wdXNoKDQpO1xyXG5cclxuICAgIG5zLnByaW50KHBpZHNbcGlkcy5sZW5ndGggLSAxXSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFHQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLEtBQUcsV0FBVyxLQUFLO0FBQ25CLEtBQUcsTUFBTSxJQUFJO0FBSWIsUUFBTSxPQUFPLENBQUM7QUFDZCxPQUFLLEtBQUssQ0FBQztBQUNYLE9BQUssS0FBSyxDQUFDO0FBQ1gsT0FBSyxLQUFLLENBQUM7QUFDWCxPQUFLLEtBQUssQ0FBQztBQUVYLEtBQUcsTUFBTSxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDbEM7IiwibmFtZXMiOltdfQ==\",\"filename\":\"gorg.js\",\"server\":\"home\"}}],[\"Time.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Time {\\n  static instance;\\n  startTimeMillis = 0;\\n  endTimeMillis = 0;\\n  sleepTimeMillis = 0;\\n  startTime() {\\n    this.sleepTimeMillis = 0;\\n    this.startTimeMillis = Date.now();\\n  }\\n  endTime() {\\n    this.endTimeMillis = Date.now();\\n  }\\n  accumulateSleepTime(time) {\\n    this.sleepTimeMillis += time;\\n  }\\n  getTime(ns) {\\n    const runningTime = this.endTimeMillis - this.startTimeMillis - this.sleepTimeMillis;\\n    ns.write(\\\"timelog.txt\\\", \\\"Time: \\\" + runningTime + \\\"ms\\\\n\\\", \\\"a\\\");\\n    return runningTime;\\n  }\\n  constructor() {\\n  }\\n  static getInstance() {\\n    if (!Time.instance) {\\n      Time.instance = new Time();\\n    }\\n    return Time.instance;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVGltZTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXJ0VGltZU1pbGxpcyA9IDA7XHJcbiAgICBwcml2YXRlIGVuZFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG5cclxuICAgIHB1YmxpYyBzdGFydFRpbWUoKSB7XHJcbiAgICAgICAgdGhpcy5zbGVlcFRpbWVNaWxsaXMgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lTWlsbGlzID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5kVGltZSgpIHtcclxuICAgICAgICB0aGlzLmVuZFRpbWVNaWxsaXMgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY2N1bXVsYXRlU2xlZXBUaW1lKHRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2xlZXBUaW1lTWlsbGlzICs9IHRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbWUobnM6IE5TKSB7XHJcbiAgICAgICAgY29uc3QgcnVubmluZ1RpbWUgPSB0aGlzLmVuZFRpbWVNaWxsaXMgLSB0aGlzLnN0YXJ0VGltZU1pbGxpcyAtIHRoaXMuc2xlZXBUaW1lTWlsbGlzO1xyXG4gICAgICAgIG5zLndyaXRlKFwidGltZWxvZy50eHRcIiwgXCJUaW1lOiBcIiArIHJ1bm5pbmdUaW1lICsgXCJtc1xcblwiLCBcImFcIik7XHJcbiAgICAgICAgcmV0dXJuIHJ1bm5pbmdUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy9cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIGlmICghVGltZS5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBUaW1lLmluc3RhbmNlID0gbmV3IFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFRpbWUuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFFTyxhQUFNLEtBQUs7QUFBQSxFQUNkLE9BQWU7QUFBQSxFQUVQLGtCQUFrQjtBQUFBLEVBQ2xCLGdCQUFnQjtBQUFBLEVBQ2hCLGtCQUFrQjtBQUFBLEVBRW5CLFlBQVk7QUFDZixTQUFLLGtCQUFrQjtBQUN2QixTQUFLLGtCQUFrQixLQUFLLElBQUk7QUFBQSxFQUNwQztBQUFBLEVBRU8sVUFBVTtBQUNiLFNBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLEVBQ2xDO0FBQUEsRUFFTyxvQkFBb0IsTUFBYztBQUNyQyxTQUFLLG1CQUFtQjtBQUFBLEVBQzVCO0FBQUEsRUFFTyxRQUFRLElBQVE7QUFDbkIsVUFBTSxjQUFjLEtBQUssZ0JBQWdCLEtBQUssa0JBQWtCLEtBQUs7QUFDckUsT0FBRyxNQUFNLGVBQWUsV0FBVyxjQUFjLFFBQVEsR0FBRztBQUM1RCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRVEsY0FBYztBQUFBLEVBRXRCO0FBQUEsRUFFQSxPQUFjLGNBQWM7QUFDeEIsUUFBSSxDQUFDLEtBQUssVUFBVTtBQUNoQixXQUFLLFdBQVcsSUFBSSxLQUFLO0FBQUEsSUFDN0I7QUFDQSxXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"Time.js\",\"server\":\"home\"}}],[\"Config/Config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class Config {\\n  /**\\n   * The target the daemon should hack, leave empty to hack the best server.\\n   * Default: \\\"\\\"\\n   */\\n  static TARGET = \\\"\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to use to buy servers.\\n   * Default: 0\\n   */\\n  static MAX_MONEY_TO_BUY = 0;\\n  /**\\n   * The name of the grow/weak/hack servers.\\n   * When the Daemon needs to buy a new server, the servername will start with the value of this property, appended with a trailing number.\\n   * Example: \\\"daemon-grow-0\\\", \\\"daemon-grow-1\\\", ...\\n   * Default: \\\"daemon-grow\\\", \\\"daemon-weak\\\", \\\"daemon-hack\\\"\\n   */\\n  static GROW_SERVER_NAME = \\\"daemon-grow\\\";\\n  static WEAK_SERVER_NAME = \\\"daemon-weak\\\";\\n  static HACK_SERVER_NAME = \\\"daemon-hack\\\";\\n  /**\\n   * The maximum amount of money the daemon is allowed to hack from a server, leave at 0 to let the daemon decide.\\n   * Default: 0\\n   */\\n  static HACK_THRESHOLD = 0;\\n  /**\\n   * The step value which is used to decrease the hack threshold to calculate the optimal HACK_THRESHOLD.\\n   * Default: 0.05\\n   */\\n  static THRESHOLD_STEP = 0.05;\\n  /**\\n   * The minimum hack threshold value.\\n   * This value represents the minimum threshold required for a successful hack.\\n   * Default: 0.15\\n   */\\n  static MIN_HACK_THRESHOLD = 0.05;\\n  /**\\n   * The maximum amount of RAM the daemon should leave free on the Home server.\\n   * Default: 50\\n   */\\n  static HOME_FREE_RAM = 100;\\n  /**\\n   * The delay time in milliseconds.\\n   * This constant represents the amount of time to add as a margin when calling weak/grow/hack in parallel mode.\\n   * Default: 1000\\n   */\\n  static DELAY_MARGIN_MS = 50;\\n  /**\\n   * The amount of time in milliseconds to wait before executing the next loop cycle.\\n   * Default: 10000 (10 seconds)\\n   */\\n  static LOOP_SAFETY_MARGIN_MS = 1e4;\\n  /**\\n   * The number of batches to use in parallel mode.\\n   * Default: 2\\n   */\\n  static LOOP_BATCH_COUNT = 2;\\n  /**\\n   * The amount of RAM (in gigabytes) required by the weaken, grow and hack script.\\n   * Default: 1.75, 1.75, 1.7\\n   */\\n  static WEAKEN_SCRIPT_RAM = 1.75;\\n  static GROW_SCRIPT_RAM = 1.75;\\n  static HACK_SCRIPT_RAM = 1.7;\\n  /**\\n   * The minimum amount of money required on the home server to start investing in the stock market.\\n   * Default: 10_000_000_000\\n   */\\n  static STOCK_MARKET_MIN_HOME_MONEY = 1e10;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUmVwcmVzZW50cyB0aGUgc2V0dGluZ3MgZm9yIHRoZSBhcHBsaWNhdGlvbi5cclxuICpcclxuICogVG8gbW9kaWZ5IHRoZSBzZXR0aW5ncywgdXBkYXRlIHRoZSBjbGFzcyBwcm9wZXJ0aWVzIGFjY29yZGluZ2x5LlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0YXJnZXQgdGhlIGRhZW1vbiBzaG91bGQgaGFjaywgbGVhdmUgZW1wdHkgdG8gaGFjayB0aGUgYmVzdCBzZXJ2ZXIuXHJcbiAgICAgKiBEZWZhdWx0OiBcIlwiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVEFSR0VUOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIG1vbmV5IHRoZSBkYWVtb24gaXMgYWxsb3dlZCB0byB1c2UgdG8gYnV5IHNlcnZlcnMuXHJcbiAgICAgKiBEZWZhdWx0OiAwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUFYX01PTkVZX1RPX0JVWTogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBncm93L3dlYWsvaGFjayBzZXJ2ZXJzLlxyXG4gICAgICogV2hlbiB0aGUgRGFlbW9uIG5lZWRzIHRvIGJ1eSBhIG5ldyBzZXJ2ZXIsIHRoZSBzZXJ2ZXJuYW1lIHdpbGwgc3RhcnQgd2l0aCB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSwgYXBwZW5kZWQgd2l0aCBhIHRyYWlsaW5nIG51bWJlci5cclxuICAgICAqIEV4YW1wbGU6IFwiZGFlbW9uLWdyb3ctMFwiLCBcImRhZW1vbi1ncm93LTFcIiwgLi4uXHJcbiAgICAgKiBEZWZhdWx0OiBcImRhZW1vbi1ncm93XCIsIFwiZGFlbW9uLXdlYWtcIiwgXCJkYWVtb24taGFja1wiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgR1JPV19TRVJWRVJfTkFNRTogc3RyaW5nID0gXCJkYWVtb24tZ3Jvd1wiO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBXRUFLX1NFUlZFUl9OQU1FOiBzdHJpbmcgPSBcImRhZW1vbi13ZWFrXCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhBQ0tfU0VSVkVSX05BTUU6IHN0cmluZyA9IFwiZGFlbW9uLWhhY2tcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBtb25leSB0aGUgZGFlbW9uIGlzIGFsbG93ZWQgdG8gaGFjayBmcm9tIGEgc2VydmVyLCBsZWF2ZSBhdCAwIHRvIGxldCB0aGUgZGFlbW9uIGRlY2lkZS5cclxuICAgICAqIERlZmF1bHQ6IDBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBIQUNLX1RIUkVTSE9MRDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGVwIHZhbHVlIHdoaWNoIGlzIHVzZWQgdG8gZGVjcmVhc2UgdGhlIGhhY2sgdGhyZXNob2xkIHRvIGNhbGN1bGF0ZSB0aGUgb3B0aW1hbCBIQUNLX1RIUkVTSE9MRC5cclxuICAgICAqIERlZmF1bHQ6IDAuMDVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSFJFU0hPTERfU1RFUDogbnVtYmVyID0gMC4wNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtaW5pbXVtIGhhY2sgdGhyZXNob2xkIHZhbHVlLlxyXG4gICAgICogVGhpcyB2YWx1ZSByZXByZXNlbnRzIHRoZSBtaW5pbXVtIHRocmVzaG9sZCByZXF1aXJlZCBmb3IgYSBzdWNjZXNzZnVsIGhhY2suXHJcbiAgICAgKiBEZWZhdWx0OiAwLjE1XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTUlOX0hBQ0tfVEhSRVNIT0xEOiBudW1iZXIgPSAwLjA1O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIFJBTSB0aGUgZGFlbW9uIHNob3VsZCBsZWF2ZSBmcmVlIG9uIHRoZSBIb21lIHNlcnZlci5cclxuICAgICAqIERlZmF1bHQ6IDUwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgSE9NRV9GUkVFX1JBTTogbnVtYmVyID0gMTAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRlbGF5IHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAgICogVGhpcyBjb25zdGFudCByZXByZXNlbnRzIHRoZSBhbW91bnQgb2YgdGltZSB0byBhZGQgYXMgYSBtYXJnaW4gd2hlbiBjYWxsaW5nIHdlYWsvZ3Jvdy9oYWNrIGluIHBhcmFsbGVsIG1vZGUuXHJcbiAgICAgKiBEZWZhdWx0OiAxMDAwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgREVMQVlfTUFSR0lOX01TOiBudW1iZXIgPSA1MDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBuZXh0IGxvb3AgY3ljbGUuXHJcbiAgICAgKiBEZWZhdWx0OiAxMDAwMCAoMTAgc2Vjb25kcylcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBMT09QX1NBRkVUWV9NQVJHSU5fTVM6IG51bWJlciA9IDEwMDAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBiYXRjaGVzIHRvIHVzZSBpbiBwYXJhbGxlbCBtb2RlLlxyXG4gICAgICogRGVmYXVsdDogMlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExPT1BfQkFUQ0hfQ09VTlQ6IG51bWJlciA9IDI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYW1vdW50IG9mIFJBTSAoaW4gZ2lnYWJ5dGVzKSByZXF1aXJlZCBieSB0aGUgd2Vha2VuLCBncm93IGFuZCBoYWNrIHNjcmlwdC5cclxuICAgICAqIERlZmF1bHQ6IDEuNzUsIDEuNzUsIDEuN1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFdFQUtFTl9TQ1JJUFRfUkFNOiBudW1iZXIgPSAxLjc1O1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBHUk9XX1NDUklQVF9SQU06IG51bWJlciA9IDEuNzU7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEhBQ0tfU0NSSVBUX1JBTTogbnVtYmVyID0gMS43O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbmltdW0gYW1vdW50IG9mIG1vbmV5IHJlcXVpcmVkIG9uIHRoZSBob21lIHNlcnZlciB0byBzdGFydCBpbnZlc3RpbmcgaW4gdGhlIHN0b2NrIG1hcmtldC5cclxuICAgICAqIERlZmF1bHQ6IDEwXzAwMF8wMDBfMDAwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RPQ0tfTUFSS0VUX01JTl9IT01FX01PTkVZOiBudW1iZXIgPSAxMF8wMDBfMDAwXzAwMDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUtPLGFBQU0sT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFLaEIsT0FBdUIsU0FBaUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXhDLE9BQXVCLG1CQUEyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUWxELE9BQXVCLG1CQUEyQjtBQUFBLEVBQ2xELE9BQXVCLG1CQUEyQjtBQUFBLEVBQ2xELE9BQXVCLG1CQUEyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNbEQsT0FBdUIsaUJBQXlCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1oRCxPQUF1QixpQkFBeUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPaEQsT0FBdUIscUJBQTZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1wRCxPQUF1QixnQkFBd0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPL0MsT0FBdUIsa0JBQTBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1qRCxPQUF1Qix3QkFBZ0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXZELE9BQXVCLG1CQUEyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNbEQsT0FBdUIsb0JBQTRCO0FBQUEsRUFDbkQsT0FBdUIsa0JBQTBCO0FBQUEsRUFDakQsT0FBdUIsa0JBQTBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1qRCxPQUF1Qiw4QkFBc0M7QUFDakU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"Config/Config.js\",\"server\":\"home\"}}],[\"parallel/WGHAlgorithms.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Config } from \\\"/Config/Config.js\\\";\\nimport { getBestHostByRamOptimized } from \\\"/bestServer.js\\\";\\nimport {\\n  Colors,\\n  getGrowThreads,\\n  getGrowThreadsFormulas,\\n  getHackThreadsFormulas,\\n  getWeakenThreads,\\n  getWeakenThreadsAfterGrow,\\n  getWeakenThreadsAfterHack\\n} from \\\"/lib.js\\\";\\nimport { ServerManager } from \\\"/parallel/ServerManager.js\\\";\\nimport { PlayerManager } from \\\"/parallel/PlayerManager.js\\\";\\nexport class WGHAlgorithms {\\n  static currentGrowThreads = 0;\\n  static currentHackThreads = 0;\\n  /**\\n   * Weakens a server by executing the weaken.js script with the specified number of threads.\\n   * The number of threads dispatched depends on the order, batch mode, and available resources.\\n   *\\n   * @param ns - The NetScriptJS object.\\n   * @param target - The name of the target server to weaken.\\n   * @param order - wether it is weaken I or weaken II.\\n   * @param batchId - The ID of the parallel batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the weaken script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   * @throws An error if the weaken order is not 1 or 2.\\n   */\\n  static weakenServer(ns, target, order, batchMode, delay = 0, isLastWeaken = false, filterNotAllowedHosts = true) {\\n    ns.print(\\\"----------------- WEAKEN \\\" + target + \\\" -----------------\\\");\\n    let totalWeakenThreadsNeeded = 0;\\n    if (order == 1 && !batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreads(ns, target);\\n    } else if (order == 2 && !batchMode) {\\n      const growThreads = getGrowThreads(ns, target);\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, growThreads);\\n    } else if (order == 1 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterHack(ns, this.currentHackThreads);\\n    } else if (order == 2 && batchMode) {\\n      totalWeakenThreadsNeeded = getWeakenThreadsAfterGrow(ns, this.currentGrowThreads);\\n    } else {\\n      throw new Error(\\\"weaken order can only be either 1 or 2!\\\");\\n    }\\n    if (totalWeakenThreadsNeeded < 1) {\\n      ns.print(\\\"Weakenthreads are 0, skipping weak \\\" + order);\\n      return 0;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalWeakenThreadsNeeded);\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.GROW_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const weakenScriptRam = Config.WEAKEN_SCRIPT_RAM;\\n    let pid = 0;\\n    let threadsDispatched = 0;\\n    let threadsRemaining = totalWeakenThreadsNeeded;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      if (threadsDispatched >= totalWeakenThreadsNeeded)\\n        break;\\n      const host = allHosts[i];\\n      const freeRam = host.availableRam;\\n      if (freeRam < weakenScriptRam)\\n        continue;\\n      const threadSpace = Math.floor(freeRam / weakenScriptRam);\\n      const threadsToDispatch = Math.min(threadsRemaining, threadSpace);\\n      pid = ns.exec(\\\"weaken.js\\\", host.name, threadsToDispatch, target, delay, isLastWeaken);\\n      threadsRemaining -= threadsToDispatch;\\n      threadsDispatched += threadsToDispatch;\\n    }\\n    if (threadsRemaining <= 0) {\\n      ns.print(\\n        \\\"Done deploying \\\" + threadsDispatched + \\\"/\\\" + totalWeakenThreadsNeeded + \\\" weaken\\\" + order + \\\" threads!\\\"\\n      );\\n      return pid;\\n    }\\n    ns.print(\\n      Colors.YELLOW + \\\"There are \\\" + threadsRemaining + \\\" threads remaining after dispatching all threads, attempting to dispatch remaining threads on purchased server\\\"\\n    );\\n    const neededWeakenRam = threadsRemaining * weakenScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededWeakenRam, Config.WEAK_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    pid = ns.exec(\\\"weaken.js\\\", server, threadsRemaining, target, delay, isLastWeaken);\\n    ns.print(\\\"Done deploying \\\" + totalWeakenThreadsNeeded + \\\" weaken\\\" + order + \\\" threads on \\\" + server + \\\"!\\\");\\n    return pid;\\n  }\\n  /**\\n   * Grows the specified server by executing the \\\"grow.js\\\" script with the specified number of threads.\\n   * If batchMode is enabled, it calculates the number of threads needed using the getGrowThreadsFormulas function.\\n   * Otherwise, it uses the getGrowThreads function to determine the number of threads needed.\\n   * If there are no threads needed, the growth process is skipped.\\n   * If there is an available host with enough RAM to execute the \\\"grow.js\\\" script, it is executed immediately.\\n   * Otherwise, it attempts to upgrade or buy a server with enough RAM to execute the script.\\n   *\\n   * @param ns - The NetScript instance.\\n   * @param target - The name of the server to grow.\\n   * @param batchId - The ID of the batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the grow script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   */\\n  static growServer(ns, target, batchMode, delay, filterNotAllowedHosts = true) {\\n    ns.print(\\\"----------------- GROWING \\\" + target + \\\" -----------------\\\");\\n    let totalGrowThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalGrowThreadsNeeded = getGrowThreads(ns, target);\\n    } else {\\n      totalGrowThreadsNeeded = getGrowThreadsFormulas(ns, target, this.currentHackThreads);\\n      this.currentGrowThreads = totalGrowThreadsNeeded;\\n    }\\n    if (totalGrowThreadsNeeded < 1) {\\n      ns.print(\\\"No grow threads needed, skipping growth process\\\");\\n      return 0;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalGrowThreadsNeeded);\\n    let allHosts = getBestHostByRamOptimized(ns);\\n    if (filterNotAllowedHosts) {\\n      allHosts = allHosts.filter(\\n        (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.HACK_SERVER_NAME)\\n      );\\n    }\\n    const growingScriptRam = Config.GROW_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / growingScriptRam);\\n      if (maxThreadsOnHost >= totalGrowThreadsNeeded) {\\n        const pid2 = ns.exec(\\\"grow.js\\\", host.name, totalGrowThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying \\\" + totalGrowThreadsNeeded + \\\" grow threads on \\\" + host.name + \\\"!\\\");\\n        return pid2;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to grow \\\" + target + \\\". Attempting to upgrade/buy server...\\\");\\n    const neededGrowRam = totalGrowThreadsNeeded * growingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.GROW_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    const pid = ns.exec(\\\"grow.js\\\", server, totalGrowThreadsNeeded, target, delay);\\n    ns.print(\\\"Done deploying \\\" + totalGrowThreadsNeeded + \\\" grow threads on \\\" + server + \\\"!\\\");\\n    return pid;\\n  }\\n  /**\\n   * Hacks a given server by executing the \\\"hack.js\\\" script with the specified number of threads, on certain hosts.\\n   *\\n   * @param ns - The NetScript object.\\n   * @param target - The name of the server to hack.\\n   * @param threshold - The hacking threshold for the server.\\n   * @param batchId - The ID of the current hacking batch.\\n   * @param batchMode - Set to true, of more than one batch should run in parallel mode.\\n   * @param delay - Time in ms, by how much the hack script should be delayed to enable precise parallel batch mode timing (default: 0).\\n   * @returns A number representing the PID of the script that was executed, or 0 if no script was executed.\\n   */\\n  static hackServer(ns, target, threshold, batchMode, delay) {\\n    ns.print(\\\"----------------- HACKING \\\" + target + \\\" -----------------\\\");\\n    let totalHackThreadsNeeded = 0;\\n    if (!batchMode) {\\n      totalHackThreadsNeeded = Math.ceil(threshold / ns.hackAnalyze(target));\\n    } else {\\n      totalHackThreadsNeeded = getHackThreadsFormulas(ns, target, threshold);\\n      this.currentHackThreads = totalHackThreadsNeeded;\\n    }\\n    const pm = PlayerManager.getInstance(ns);\\n    pm.addHackingExp(ns, target, totalHackThreadsNeeded);\\n    const allHosts = getBestHostByRamOptimized(ns).filter(\\n      (host) => !host.name.includes(Config.WEAK_SERVER_NAME) && !host.name.includes(Config.GROW_SERVER_NAME)\\n    );\\n    const hackingScriptRam = Config.HACK_SCRIPT_RAM;\\n    for (let i = 0; i < allHosts.length; i++) {\\n      const host = allHosts[i];\\n      const maxThreadsOnHost = Math.floor(host.availableRam / hackingScriptRam);\\n      if (maxThreadsOnHost >= totalHackThreadsNeeded) {\\n        const pid2 = ns.exec(\\\"hack.js\\\", host.name, totalHackThreadsNeeded, target, delay);\\n        ns.print(\\\"Done deploying \\\" + totalHackThreadsNeeded + \\\" hack threads on \\\" + host.name + \\\"!\\\");\\n        return pid2;\\n      }\\n    }\\n    ns.print(Colors.YELLOW + \\\"No available host to hack \\\" + target + \\\". Buying server...\\\");\\n    const neededGrowRam = totalHackThreadsNeeded * hackingScriptRam;\\n    const server = ServerManager.buyOrUpgradeServer(ns, neededGrowRam, Config.HACK_SERVER_NAME);\\n    if (server === \\\"\\\")\\n      return 0;\\n    const pid = ns.exec(\\\"hack.js\\\", server, totalHackThreadsNeeded, target, delay);\\n    ns.print(\\\"Done deploying \\\" + totalHackThreadsNeeded + \\\" hack threads!\\\");\\n    return pid;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldHSEFsZ29yaXRobXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiQC9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IFNlcnZlciwgZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZCB9IGZyb20gXCJAL2Jlc3RTZXJ2ZXJcIjtcclxuaW1wb3J0IHtcclxuICAgIENvbG9ycyxcclxuICAgIGdldEdyb3dUaHJlYWRzLFxyXG4gICAgZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyxcclxuICAgIGdldEhhY2tUaHJlYWRzRm9ybXVsYXMsXHJcbiAgICBnZXRXZWFrZW5UaHJlYWRzLFxyXG4gICAgZ2V0V2Vha2VuVGhyZWFkc0FmdGVyR3JvdyxcclxuICAgIGdldFdlYWtlblRocmVhZHNBZnRlckhhY2ssXHJcbn0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IFNlcnZlck1hbmFnZXIgfSBmcm9tIFwiLi9TZXJ2ZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFBsYXllck1hbmFnZXIgfSBmcm9tIFwiLi9QbGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgV0dIQWxnb3JpdGhtcyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBjdXJyZW50R3Jvd1RocmVhZHMgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY3VycmVudEhhY2tUaHJlYWRzID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdlYWtlbnMgYSBzZXJ2ZXIgYnkgZXhlY3V0aW5nIHRoZSB3ZWFrZW4uanMgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICAgICAqIFRoZSBudW1iZXIgb2YgdGhyZWFkcyBkaXNwYXRjaGVkIGRlcGVuZHMgb24gdGhlIG9yZGVyLCBiYXRjaCBtb2RlLCBhbmQgYXZhaWxhYmxlIHJlc291cmNlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0SlMgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHRhcmdldCAtIFRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgc2VydmVyIHRvIHdlYWtlbi5cclxuICAgICAqIEBwYXJhbSBvcmRlciAtIHdldGhlciBpdCBpcyB3ZWFrZW4gSSBvciB3ZWFrZW4gSUkuXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hJZCAtIFRoZSBJRCBvZiB0aGUgcGFyYWxsZWwgYmF0Y2guXHJcbiAgICAgKiBAcGFyYW0gYmF0Y2hNb2RlIC0gU2V0IHRvIHRydWUsIG9mIG1vcmUgdGhhbiBvbmUgYmF0Y2ggc2hvdWxkIHJ1biBpbiBwYXJhbGxlbCBtb2RlLlxyXG4gICAgICogQHBhcmFtIGRlbGF5IC0gVGltZSBpbiBtcywgYnkgaG93IG11Y2ggdGhlIHdlYWtlbiBzY3JpcHQgc2hvdWxkIGJlIGRlbGF5ZWQgdG8gZW5hYmxlIHByZWNpc2UgcGFyYWxsZWwgYmF0Y2ggbW9kZSB0aW1pbmcgKGRlZmF1bHQ6IDApLlxyXG4gICAgICogQHJldHVybnMgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBQSUQgb2YgdGhlIHNjcmlwdCB0aGF0IHdhcyBleGVjdXRlZCwgb3IgMCBpZiBubyBzY3JpcHQgd2FzIGV4ZWN1dGVkLlxyXG4gICAgICogQHRocm93cyBBbiBlcnJvciBpZiB0aGUgd2Vha2VuIG9yZGVyIGlzIG5vdCAxIG9yIDIuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB3ZWFrZW5TZXJ2ZXIoXHJcbiAgICAgICAgbnM6IE5TLFxyXG4gICAgICAgIHRhcmdldDogc3RyaW5nLFxyXG4gICAgICAgIG9yZGVyOiBudW1iZXIsXHJcbiAgICAgICAgYmF0Y2hNb2RlOiBib29sZWFuLFxyXG4gICAgICAgIGRlbGF5ID0gMCxcclxuICAgICAgICBpc0xhc3RXZWFrZW4gPSBmYWxzZSxcclxuICAgICAgICBmaWx0ZXJOb3RBbGxvd2VkSG9zdHMgPSB0cnVlLFxyXG4gICAgKTogbnVtYmVyIHtcclxuICAgICAgICBucy5wcmludChcIi0tLS0tLS0tLS0tLS0tLS0tIFdFQUtFTiBcIiArIHRhcmdldCArIFwiIC0tLS0tLS0tLS0tLS0tLS0tXCIpO1xyXG4gICAgICAgIGxldCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB3ZWFrZW5pbmcgdGhyZWFkcyBiYXNlZCBvbiB0aGUgb3JkZXJcclxuXHJcbiAgICAgICAgaWYgKG9yZGVyID09IDEgJiYgIWJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICAvLyBmaXJzdCB3ZWFrIGhhcyB0byB3ZWFrZW4gc2VydmVyIHRvIG1pbiBmcm9tIHVua25vd24gc2VjIGx2bFxyXG4gICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzKG5zLCB0YXJnZXQpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMiAmJiAhYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHNlY29uZCB3ZWFrIG9ubHkgaGFzIHRvIHJlbW92ZSB0aGUgc2VjIGluY3JlYXNlIGZyb20gdGhlIGdyb3cgYmVmb3JlIChtb3JlIHJhbSBlZmZpY2llbnQpXHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3dUaHJlYWRzID0gZ2V0R3Jvd1RocmVhZHMobnMsIHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgPSBnZXRXZWFrZW5UaHJlYWRzQWZ0ZXJHcm93KG5zLCBncm93VGhyZWFkcyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PSAxICYmIGJhdGNoTW9kZSkge1xyXG4gICAgICAgICAgICAvLyB3ZWFrIGFmdGVyIHByZXZpb3VzIGhhY2tcclxuICAgICAgICAgICAgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkID0gZ2V0V2Vha2VuVGhyZWFkc0FmdGVySGFjayhucywgdGhpcy5jdXJyZW50SGFja1RocmVhZHMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT0gMiAmJiBiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgLy8gd2VhayBhZnRlciBwcmV2aW91cyBncm93XHJcbiAgICAgICAgICAgIHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZCA9IGdldFdlYWtlblRocmVhZHNBZnRlckdyb3cobnMsIHRoaXMuY3VycmVudEdyb3dUaHJlYWRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3ZWFrZW4gb3JkZXIgY2FuIG9ubHkgYmUgZWl0aGVyIDEgb3IgMiFcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkIDwgMSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcIldlYWtlbnRocmVhZHMgYXJlIDAsIHNraXBwaW5nIHdlYWsgXCIgKyBvcmRlcik7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGFjayB4cFxyXG4gICAgICAgIGNvbnN0IHBtID0gUGxheWVyTWFuYWdlci5nZXRJbnN0YW5jZShucyk7XHJcbiAgICAgICAgcG0uYWRkSGFja2luZ0V4cChucywgdGFyZ2V0LCB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgICAgICAvLyBleGVjIHdlYWtlbi5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICAgICAgbGV0IGFsbEhvc3RzOiBTZXJ2ZXJbXSA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpO1xyXG4gICAgICAgIGlmIChmaWx0ZXJOb3RBbGxvd2VkSG9zdHMpIHtcclxuICAgICAgICAgICAgYWxsSG9zdHMgPSBhbGxIb3N0cy5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAoaG9zdCkgPT4gIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuR1JPV19TRVJWRVJfTkFNRSkgJiYgIWhvc3QubmFtZS5pbmNsdWRlcyhDb25maWcuSEFDS19TRVJWRVJfTkFNRSksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHdlYWtlblNjcmlwdFJhbSA9IENvbmZpZy5XRUFLRU5fU0NSSVBUX1JBTTtcclxuICAgICAgICBsZXQgcGlkID0gMDtcclxuXHJcbiAgICAgICAgbGV0IHRocmVhZHNEaXNwYXRjaGVkID0gMDtcclxuICAgICAgICBsZXQgdGhyZWFkc1JlbWFpbmluZyA9IHRvdGFsV2Vha2VuVGhyZWFkc05lZWRlZDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEhvc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aHJlYWRzRGlzcGF0Y2hlZCA+PSB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBob3N0ID0gYWxsSG9zdHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmcmVlUmFtID0gaG9zdC5hdmFpbGFibGVSYW07XHJcbiAgICAgICAgICAgIGlmIChmcmVlUmFtIDwgd2Vha2VuU2NyaXB0UmFtKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgdGhyZWFkU3BhY2UgPSBNYXRoLmZsb29yKGZyZWVSYW0gLyB3ZWFrZW5TY3JpcHRSYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgdGhyZWFkc1JlbWFpbmluZyBpcyBsZXNzIHRoYW4gdGhlIHRocmVhZFNwYWNlLCB0aGVuIHdlIGNhbiBvbmx5IGRpc3BhdGNoIHRocmVhZHNSZW1haW5pbmcgdGhyZWFkc1xyXG4gICAgICAgICAgICBjb25zdCB0aHJlYWRzVG9EaXNwYXRjaCA9IE1hdGgubWluKHRocmVhZHNSZW1haW5pbmcsIHRocmVhZFNwYWNlKTtcclxuXHJcbiAgICAgICAgICAgIHBpZCA9IG5zLmV4ZWMoXCJ3ZWFrZW4uanNcIiwgaG9zdC5uYW1lLCB0aHJlYWRzVG9EaXNwYXRjaCwgdGFyZ2V0LCBkZWxheSwgaXNMYXN0V2Vha2VuKTtcclxuICAgICAgICAgICAgdGhyZWFkc1JlbWFpbmluZyAtPSB0aHJlYWRzVG9EaXNwYXRjaDtcclxuICAgICAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgKz0gdGhyZWFkc1RvRGlzcGF0Y2g7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhyZWFkc1JlbWFpbmluZyA8PSAwKSB7XHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgXCJEb25lIGRlcGxveWluZyBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyZWFkc0Rpc3BhdGNoZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiL1wiICtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbFdlYWtlblRocmVhZHNOZWVkZWQgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIHdlYWtlblwiICtcclxuICAgICAgICAgICAgICAgICAgICBvcmRlciArXHJcbiAgICAgICAgICAgICAgICAgICAgXCIgdGhyZWFkcyFcIixcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbnMucHJpbnQoXHJcbiAgICAgICAgICAgIENvbG9ycy5ZRUxMT1cgK1xyXG4gICAgICAgICAgICAgICAgXCJUaGVyZSBhcmUgXCIgK1xyXG4gICAgICAgICAgICAgICAgdGhyZWFkc1JlbWFpbmluZyArXHJcbiAgICAgICAgICAgICAgICBcIiB0aHJlYWRzIHJlbWFpbmluZyBhZnRlciBkaXNwYXRjaGluZyBhbGwgdGhyZWFkcywgYXR0ZW1wdGluZyB0byBkaXNwYXRjaCByZW1haW5pbmcgdGhyZWFkcyBvbiBwdXJjaGFzZWQgc2VydmVyXCIsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmVlZGVkV2Vha2VuUmFtID0gdGhyZWFkc1JlbWFpbmluZyAqIHdlYWtlblNjcmlwdFJhbTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkV2Vha2VuUmFtLCBDb25maWcuV0VBS19TRVJWRVJfTkFNRSk7XHJcblxyXG4gICAgICAgIGlmIChzZXJ2ZXIgPT09IFwiXCIpIHJldHVybiAwO1xyXG5cclxuICAgICAgICBwaWQgPSBucy5leGVjKFwid2Vha2VuLmpzXCIsIHNlcnZlciwgdGhyZWFkc1JlbWFpbmluZywgdGFyZ2V0LCBkZWxheSwgaXNMYXN0V2Vha2VuKTtcclxuICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIFwiICsgdG90YWxXZWFrZW5UaHJlYWRzTmVlZGVkICsgXCIgd2Vha2VuXCIgKyBvcmRlciArIFwiIHRocmVhZHMgb24gXCIgKyBzZXJ2ZXIgKyBcIiFcIik7XHJcbiAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdyb3dzIHRoZSBzcGVjaWZpZWQgc2VydmVyIGJ5IGV4ZWN1dGluZyB0aGUgXCJncm93LmpzXCIgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcy5cclxuICAgICAqIElmIGJhdGNoTW9kZSBpcyBlbmFibGVkLCBpdCBjYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgdGhyZWFkcyBuZWVkZWQgdXNpbmcgdGhlIGdldEdyb3dUaHJlYWRzRm9ybXVsYXMgZnVuY3Rpb24uXHJcbiAgICAgKiBPdGhlcndpc2UsIGl0IHVzZXMgdGhlIGdldEdyb3dUaHJlYWRzIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgbnVtYmVyIG9mIHRocmVhZHMgbmVlZGVkLlxyXG4gICAgICogSWYgdGhlcmUgYXJlIG5vIHRocmVhZHMgbmVlZGVkLCB0aGUgZ3Jvd3RoIHByb2Nlc3MgaXMgc2tpcHBlZC5cclxuICAgICAqIElmIHRoZXJlIGlzIGFuIGF2YWlsYWJsZSBob3N0IHdpdGggZW5vdWdoIFJBTSB0byBleGVjdXRlIHRoZSBcImdyb3cuanNcIiBzY3JpcHQsIGl0IGlzIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxyXG4gICAgICogT3RoZXJ3aXNlLCBpdCBhdHRlbXB0cyB0byB1cGdyYWRlIG9yIGJ1eSBhIHNlcnZlciB3aXRoIGVub3VnaCBSQU0gdG8gZXhlY3V0ZSB0aGUgc2NyaXB0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBucyAtIFRoZSBOZXRTY3JpcHQgaW5zdGFuY2UuXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIG5hbWUgb2YgdGhlIHNlcnZlciB0byBncm93LlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgSUQgb2YgdGhlIGJhdGNoLlxyXG4gICAgICogQHBhcmFtIGJhdGNoTW9kZSAtIFNldCB0byB0cnVlLCBvZiBtb3JlIHRoYW4gb25lIGJhdGNoIHNob3VsZCBydW4gaW4gcGFyYWxsZWwgbW9kZS5cclxuICAgICAqIEBwYXJhbSBkZWxheSAtIFRpbWUgaW4gbXMsIGJ5IGhvdyBtdWNoIHRoZSBncm93IHNjcmlwdCBzaG91bGQgYmUgZGVsYXllZCB0byBlbmFibGUgcHJlY2lzZSBwYXJhbGxlbCBiYXRjaCBtb2RlIHRpbWluZyAoZGVmYXVsdDogMCkuXHJcbiAgICAgKiBAcmV0dXJucyBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIFBJRCBvZiB0aGUgc2NyaXB0IHRoYXQgd2FzIGV4ZWN1dGVkLCBvciAwIGlmIG5vIHNjcmlwdCB3YXMgZXhlY3V0ZWQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBncm93U2VydmVyKG5zOiBOUywgdGFyZ2V0OiBzdHJpbmcsIGJhdGNoTW9kZTogYm9vbGVhbiwgZGVsYXk6IG51bWJlciwgZmlsdGVyTm90QWxsb3dlZEhvc3RzID0gdHJ1ZSk6IG51bWJlciB7XHJcbiAgICAgICAgbnMucHJpbnQoXCItLS0tLS0tLS0tLS0tLS0tLSBHUk9XSU5HIFwiICsgdGFyZ2V0ICsgXCIgLS0tLS0tLS0tLS0tLS0tLS1cIik7XHJcbiAgICAgICAgbGV0IHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSAwO1xyXG4gICAgICAgIGlmICghYmF0Y2hNb2RlKSB7XHJcbiAgICAgICAgICAgIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgPSBnZXRHcm93VGhyZWFkcyhucywgdGFyZ2V0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkID0gZ2V0R3Jvd1RocmVhZHNGb3JtdWxhcyhucywgdGFyZ2V0LCB0aGlzLmN1cnJlbnRIYWNrVGhyZWFkcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEdyb3dUaHJlYWRzID0gdG90YWxHcm93VGhyZWFkc05lZWRlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0b3RhbEdyb3dUaHJlYWRzTmVlZGVkIDwgMSkge1xyXG4gICAgICAgICAgICBucy5wcmludChcIk5vIGdyb3cgdGhyZWFkcyBuZWVkZWQsIHNraXBwaW5nIGdyb3d0aCBwcm9jZXNzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhhY2sgeHBcclxuICAgICAgICBjb25zdCBwbSA9IFBsYXllck1hbmFnZXIuZ2V0SW5zdGFuY2UobnMpO1xyXG4gICAgICAgIHBtLmFkZEhhY2tpbmdFeHAobnMsIHRhcmdldCwgdG90YWxHcm93VGhyZWFkc05lZWRlZCk7XHJcblxyXG4gICAgICAgIC8vIGV4ZWMgZ3Jvdy5qcyB3aXRoIG51bSBvZiB0aHJlYWRzXHJcbiAgICAgICAgbGV0IGFsbEhvc3RzID0gZ2V0QmVzdEhvc3RCeVJhbU9wdGltaXplZChucyk7XHJcbiAgICAgICAgaWYgKGZpbHRlck5vdEFsbG93ZWRIb3N0cykge1xyXG4gICAgICAgICAgICBhbGxIb3N0cyA9IGFsbEhvc3RzLmZpbHRlcihcclxuICAgICAgICAgICAgICAgIChob3N0KSA9PiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5XRUFLX1NFUlZFUl9OQU1FKSAmJiAhaG9zdC5uYW1lLmluY2x1ZGVzKENvbmZpZy5IQUNLX1NFUlZFUl9OQU1FKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ3Jvd2luZ1NjcmlwdFJhbSA9IENvbmZpZy5HUk9XX1NDUklQVF9SQU07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihob3N0LmF2YWlsYWJsZVJhbSAvIGdyb3dpbmdTY3JpcHRSYW0pO1xyXG4gICAgICAgICAgICBpZiAobWF4VGhyZWFkc09uSG9zdCA+PSB0b3RhbEdyb3dUaHJlYWRzTmVlZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaWQgPSBucy5leGVjKFwiZ3Jvdy5qc1wiLCBob3N0Lm5hbWUsIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJEb25lIGRlcGxveWluZyBcIiArIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKyBcIiBncm93IHRocmVhZHMgb24gXCIgKyBob3N0Lm5hbWUgKyBcIiFcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJObyBhdmFpbGFibGUgaG9zdCB0byBncm93IFwiICsgdGFyZ2V0ICsgXCIuIEF0dGVtcHRpbmcgdG8gdXBncmFkZS9idXkgc2VydmVyLi4uXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBuZWVkZWRHcm93UmFtID0gdG90YWxHcm93VGhyZWFkc05lZWRlZCAqIGdyb3dpbmdTY3JpcHRSYW07XHJcbiAgICAgICAgY29uc3Qgc2VydmVyID0gU2VydmVyTWFuYWdlci5idXlPclVwZ3JhZGVTZXJ2ZXIobnMsIG5lZWRlZEdyb3dSYW0sIENvbmZpZy5HUk9XX1NFUlZFUl9OQU1FKTtcclxuXHJcbiAgICAgICAgaWYgKHNlcnZlciA9PT0gXCJcIikgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHBpZCA9IG5zLmV4ZWMoXCJncm93LmpzXCIsIHNlcnZlciwgdG90YWxHcm93VGhyZWFkc05lZWRlZCwgdGFyZ2V0LCBkZWxheSk7XHJcbiAgICAgICAgbnMucHJpbnQoXCJEb25lIGRlcGxveWluZyBcIiArIHRvdGFsR3Jvd1RocmVhZHNOZWVkZWQgKyBcIiBncm93IHRocmVhZHMgb24gXCIgKyBzZXJ2ZXIgKyBcIiFcIik7XHJcbiAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhY2tzIGEgZ2l2ZW4gc2VydmVyIGJ5IGV4ZWN1dGluZyB0aGUgXCJoYWNrLmpzXCIgc2NyaXB0IHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgdGhyZWFkcywgb24gY2VydGFpbiBob3N0cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnMgLSBUaGUgTmV0U2NyaXB0IG9iamVjdC5cclxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIHRvIGhhY2suXHJcbiAgICAgKiBAcGFyYW0gdGhyZXNob2xkIC0gVGhlIGhhY2tpbmcgdGhyZXNob2xkIGZvciB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIGJhdGNoSWQgLSBUaGUgSUQgb2YgdGhlIGN1cnJlbnQgaGFja2luZyBiYXRjaC5cclxuICAgICAqIEBwYXJhbSBiYXRjaE1vZGUgLSBTZXQgdG8gdHJ1ZSwgb2YgbW9yZSB0aGFuIG9uZSBiYXRjaCBzaG91bGQgcnVuIGluIHBhcmFsbGVsIG1vZGUuXHJcbiAgICAgKiBAcGFyYW0gZGVsYXkgLSBUaW1lIGluIG1zLCBieSBob3cgbXVjaCB0aGUgaGFjayBzY3JpcHQgc2hvdWxkIGJlIGRlbGF5ZWQgdG8gZW5hYmxlIHByZWNpc2UgcGFyYWxsZWwgYmF0Y2ggbW9kZSB0aW1pbmcgKGRlZmF1bHQ6IDApLlxyXG4gICAgICogQHJldHVybnMgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBQSUQgb2YgdGhlIHNjcmlwdCB0aGF0IHdhcyBleGVjdXRlZCwgb3IgMCBpZiBubyBzY3JpcHQgd2FzIGV4ZWN1dGVkLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaGFja1NlcnZlcihuczogTlMsIHRhcmdldDogc3RyaW5nLCB0aHJlc2hvbGQ6IG51bWJlciwgYmF0Y2hNb2RlOiBib29sZWFuLCBkZWxheTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBucy5wcmludChcIi0tLS0tLS0tLS0tLS0tLS0tIEhBQ0tJTkcgXCIgKyB0YXJnZXQgKyBcIiAtLS0tLS0tLS0tLS0tLS0tLVwiKTtcclxuICAgICAgICBsZXQgdG90YWxIYWNrVGhyZWFkc05lZWRlZCA9IDA7XHJcbiAgICAgICAgaWYgKCFiYXRjaE1vZGUpIHtcclxuICAgICAgICAgICAgdG90YWxIYWNrVGhyZWFkc05lZWRlZCA9IE1hdGguY2VpbCh0aHJlc2hvbGQgLyBucy5oYWNrQW5hbHl6ZSh0YXJnZXQpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkID0gZ2V0SGFja1RocmVhZHNGb3JtdWxhcyhucywgdGFyZ2V0LCB0aHJlc2hvbGQpO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRIYWNrVGhyZWFkcyA9IHRvdGFsSGFja1RocmVhZHNOZWVkZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoYWNrIHhwXHJcbiAgICAgICAgY29uc3QgcG0gPSBQbGF5ZXJNYW5hZ2VyLmdldEluc3RhbmNlKG5zKTtcclxuICAgICAgICBwbS5hZGRIYWNraW5nRXhwKG5zLCB0YXJnZXQsIHRvdGFsSGFja1RocmVhZHNOZWVkZWQpO1xyXG5cclxuICAgICAgICBjb25zdCBhbGxIb3N0cyA9IGdldEJlc3RIb3N0QnlSYW1PcHRpbWl6ZWQobnMpLmZpbHRlcihcclxuICAgICAgICAgICAgKGhvc3QpID0+ICFob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLldFQUtfU0VSVkVSX05BTUUpICYmICFob3N0Lm5hbWUuaW5jbHVkZXMoQ29uZmlnLkdST1dfU0VSVkVSX05BTUUpLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgaGFja2luZ1NjcmlwdFJhbSA9IENvbmZpZy5IQUNLX1NDUklQVF9SQU07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsSG9zdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IGFsbEhvc3RzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhUaHJlYWRzT25Ib3N0ID0gTWF0aC5mbG9vcihob3N0LmF2YWlsYWJsZVJhbSAvIGhhY2tpbmdTY3JpcHRSYW0pO1xyXG4gICAgICAgICAgICBpZiAobWF4VGhyZWFkc09uSG9zdCA+PSB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaWQgPSBucy5leGVjKFwiaGFjay5qc1wiLCBob3N0Lm5hbWUsIHRvdGFsSGFja1RocmVhZHNOZWVkZWQsIHRhcmdldCwgZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgbnMucHJpbnQoXCJEb25lIGRlcGxveWluZyBcIiArIHRvdGFsSGFja1RocmVhZHNOZWVkZWQgKyBcIiBoYWNrIHRocmVhZHMgb24gXCIgKyBob3N0Lm5hbWUgKyBcIiFcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBucy5wcmludChDb2xvcnMuWUVMTE9XICsgXCJObyBhdmFpbGFibGUgaG9zdCB0byBoYWNrIFwiICsgdGFyZ2V0ICsgXCIuIEJ1eWluZyBzZXJ2ZXIuLi5cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IG5lZWRlZEdyb3dSYW0gPSB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkICogaGFja2luZ1NjcmlwdFJhbTtcclxuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBTZXJ2ZXJNYW5hZ2VyLmJ1eU9yVXBncmFkZVNlcnZlcihucywgbmVlZGVkR3Jvd1JhbSwgQ29uZmlnLkhBQ0tfU0VSVkVSX05BTUUpO1xyXG5cclxuICAgICAgICBpZiAoc2VydmVyID09PSBcIlwiKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgY29uc3QgcGlkID0gbnMuZXhlYyhcImhhY2suanNcIiwgc2VydmVyLCB0b3RhbEhhY2tUaHJlYWRzTmVlZGVkLCB0YXJnZXQsIGRlbGF5KTtcclxuICAgICAgICBucy5wcmludChcIkRvbmUgZGVwbG95aW5nIFwiICsgdG90YWxIYWNrVGhyZWFkc05lZWRlZCArIFwiIGhhY2sgdGhyZWFkcyFcIik7XHJcbiAgICAgICAgcmV0dXJuIHBpZDtcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsY0FBYztBQUN2QixTQUFpQixpQ0FBaUM7QUFDbEQ7QUFBQSxFQUNJO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsT0FDRztBQUNQLFNBQVMscUJBQXFCO0FBQzlCLFNBQVMscUJBQXFCO0FBRXZCLGFBQU0sY0FBYztBQUFBLEVBQ3ZCLE9BQWUscUJBQXFCO0FBQUEsRUFDcEMsT0FBZSxxQkFBcUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBZXBDLE9BQU8sYUFDSCxJQUNBLFFBQ0EsT0FDQSxXQUNBLFFBQVEsR0FDUixlQUFlLE9BQ2Ysd0JBQXdCLE1BQ2xCO0FBQ04sT0FBRyxNQUFNLDhCQUE4QixTQUFTLG9CQUFvQjtBQUNwRSxRQUFJLDJCQUEyQjtBQUcvQixRQUFJLFNBQVMsS0FBSyxDQUFDLFdBQVc7QUFFMUIs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\",\"filename\":\"parallel/WGHAlgorithms.js\",\"server\":\"home\"}}],[\"parallel/PlayerManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PlayerManager {\\n  static instance;\\n  player;\\n  static getInstance(ns) {\\n    if (!PlayerManager.instance) {\\n      PlayerManager.instance = new PlayerManager(ns);\\n    }\\n    return PlayerManager.instance;\\n  }\\n  getPlayer() {\\n    return this.player;\\n  }\\n  resetPlayer(ns) {\\n    const player = ns.getPlayer();\\n    this.player = player;\\n  }\\n  addHackingExp(ns, target, threadCount) {\\n    if (!ns.fileExists(\\\"Formulas.exe\\\", \\\"home\\\")) {\\n      return;\\n    }\\n    const serverObject = ns.getServer(target);\\n    const hackXp = ns.formulas.hacking.hackExp(serverObject, this.player);\\n    const totalExpGain = hackXp * threadCount;\\n    const lvlAfterHack = ns.formulas.skills.calculateSkill(\\n      this.player.exp.hacking + totalExpGain,\\n      this.player.mults.hacking\\n    );\\n    if (lvlAfterHack > this.player.skills.hacking) {\\n      ns.print(`Hacking level up! Lvl: ${this.player.skills.hacking} -> ${lvlAfterHack}`);\\n    }\\n    this.player.exp.hacking += totalExpGain;\\n    this.player.skills.hacking = lvlAfterHack;\\n  }\\n  constructor(ns) {\\n    this.player = ns.getPlayer();\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBsYXllck1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMsIFBsYXllciB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXJNYW5hZ2VyIHtcclxuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQbGF5ZXJNYW5hZ2VyO1xyXG4gICAgcHJpdmF0ZSBwbGF5ZXI6IFBsYXllcjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKG5zOiBOUykge1xyXG4gICAgICAgIGlmICghUGxheWVyTWFuYWdlci5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBQbGF5ZXJNYW5hZ2VyLmluc3RhbmNlID0gbmV3IFBsYXllck1hbmFnZXIobnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUGxheWVyTWFuYWdlci5pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0UGxheWVyKG5zOiBOUykge1xyXG4gICAgICAgIGNvbnN0IHBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEhhY2tpbmdFeHAobnM6IE5TLCB0YXJnZXQ6IHN0cmluZywgdGhyZWFkQ291bnQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICghbnMuZmlsZUV4aXN0cyhcIkZvcm11bGFzLmV4ZVwiLCBcImhvbWVcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2VydmVyT2JqZWN0ID0gbnMuZ2V0U2VydmVyKHRhcmdldCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhY2tYcCA9IG5zLmZvcm11bGFzLmhhY2tpbmcuaGFja0V4cChzZXJ2ZXJPYmplY3QsIHRoaXMucGxheWVyKTtcclxuICAgICAgICBjb25zdCB0b3RhbEV4cEdhaW4gPSBoYWNrWHAgKiB0aHJlYWRDb3VudDtcclxuXHJcbiAgICAgICAgY29uc3QgbHZsQWZ0ZXJIYWNrID0gbnMuZm9ybXVsYXMuc2tpbGxzLmNhbGN1bGF0ZVNraWxsKFxyXG4gICAgICAgICAgICB0aGlzLnBsYXllci5leHAuaGFja2luZyArIHRvdGFsRXhwR2FpbixcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXIubXVsdHMuaGFja2luZyxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAobHZsQWZ0ZXJIYWNrID4gdGhpcy5wbGF5ZXIuc2tpbGxzLmhhY2tpbmcpIHtcclxuICAgICAgICAgICAgbnMucHJpbnQoYEhhY2tpbmcgbGV2ZWwgdXAhIEx2bDogJHt0aGlzLnBsYXllci5za2lsbHMuaGFja2luZ30gLT4gJHtsdmxBZnRlckhhY2t9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXQgcGxheWVyIGV4cCBhbmQgbHZsIGFmdGVyIGhhY2sgZm9yIHNpbXVsYXRlZCBwbGF5ZXJcclxuICAgICAgICB0aGlzLnBsYXllci5leHAuaGFja2luZyArPSB0b3RhbEV4cEdhaW47XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2tpbGxzLmhhY2tpbmcgPSBsdmxBZnRlckhhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihuczogTlMpIHtcclxuICAgICAgICB0aGlzLnBsYXllciA9IG5zLmdldFBsYXllcigpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBRU8sYUFBTSxjQUFjO0FBQUEsRUFDdkIsT0FBZTtBQUFBLEVBQ1A7QUFBQSxFQUVSLE9BQWMsWUFBWSxJQUFRO0FBQzlCLFFBQUksQ0FBQyxjQUFjLFVBQVU7QUFDekIsb0JBQWMsV0FBVyxJQUFJLGNBQWMsRUFBRTtBQUFBLElBQ2pEO0FBQ0EsV0FBTyxjQUFjO0FBQUEsRUFDekI7QUFBQSxFQUVBLFlBQVk7QUFDUixXQUFPLEtBQUs7QUFBQSxFQUNoQjtBQUFBLEVBRUEsWUFBWSxJQUFRO0FBQ2hCLFVBQU0sU0FBUyxHQUFHLFVBQVU7QUFDNUIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUVBLGNBQWMsSUFBUSxRQUFnQixhQUFxQjtBQUN2RCxRQUFJLENBQUMsR0FBRyxXQUFXLGdCQUFnQixNQUFNLEdBQUc7QUFDeEM7QUFBQSxJQUNKO0FBRUEsVUFBTSxlQUFlLEdBQUcsVUFBVSxNQUFNO0FBRXhDLFVBQU0sU0FBUyxHQUFHLFNBQVMsUUFBUSxRQUFRLGNBQWMsS0FBSyxNQUFNO0FBQ3BFLFVBQU0sZUFBZSxTQUFTO0FBRTlCLFVBQU0sZUFBZSxHQUFHLFNBQVMsT0FBTztBQUFBLE1BQ3BDLEtBQUssT0FBTyxJQUFJLFVBQVU7QUFBQSxNQUMxQixLQUFLLE9BQU8sTUFBTTtBQUFBLElBQ3RCO0FBRUEsUUFBSSxlQUFlLEtBQUssT0FBTyxPQUFPLFNBQVM7QUFDM0MsU0FBRyxNQUFNLDBCQUEwQixLQUFLLE9BQU8sT0FBTyxPQUFPLE9BQU8sWUFBWSxFQUFFO0FBQUEsSUFDdEY7QUFHQSxTQUFLLE9BQU8sSUFBSSxXQUFXO0FBQzNCLFNBQUssT0FBTyxPQUFPLFVBQVU7QUFBQSxFQUNqQztBQUFBLEVBRVEsWUFBWSxJQUFRO0FBQ3hCLFNBQUssU0FBUyxHQUFHLFVBQVU7QUFBQSxFQUMvQjtBQUNKOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"parallel/PlayerManager.js\",\"server\":\"home\"}}],[\"Stock/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors } from \\\"/lib.js\\\";\\nconst COMMISSION_FEE = 1e5;\\nfunction getAllStocks(ns) {\\n  const stocks = [];\\n  const symbols = ns.stock.getSymbols();\\n  for (const symbol of symbols) {\\n    const position = ns.stock.getPosition(symbol);\\n    const stock = {\\n      symbol,\\n      organization: ns.stock.getOrganization(symbol),\\n      observedMinPrice: -1,\\n      observedMaxPrice: -1,\\n      longShares: position[0],\\n      longPrice: position[1],\\n      shortShares: position[2],\\n      shortPrice: position[3],\\n      bidPrice: ns.stock.getBidPrice(symbol),\\n      askPrice: ns.stock.getAskPrice(symbol),\\n      price: ns.stock.getPrice(symbol),\\n      previousPrice: -1,\\n      forecast: ns.stock.getForecast(symbol),\\n      volatility: ns.stock.getVolatility(symbol),\\n      maxShares: ns.stock.getMaxShares(symbol),\\n      profit: -1,\\n      cost: -1,\\n      profitPotential: -1\\n    };\\n    stock.profit = stock.longShares * (stock.bidPrice - stock.longPrice) - 2 * COMMISSION_FEE;\\n    stock.cost = stock.longShares * stock.longPrice + stock.shortShares * stock.shortPrice;\\n    stock.profitPotential = 2 * Math.abs(stock.forecast - 0.5) * stock.volatility;\\n    stocks.push(stock);\\n  }\\n  return stocks;\\n}\\nfunction updateStocks(ns, stocks) {\\n  for (const stock of stocks) {\\n    const position = ns.stock.getPosition(stock.symbol);\\n    stock.longShares = position[0];\\n    stock.longPrice = position[1];\\n    stock.shortShares = position[2];\\n    stock.shortPrice = position[3];\\n    stock.bidPrice = ns.stock.getBidPrice(stock.symbol);\\n    stock.askPrice = ns.stock.getAskPrice(stock.symbol);\\n    stock.price = ns.stock.getPrice(stock.symbol);\\n    stock.forecast = ns.stock.getForecast(stock.symbol);\\n    stock.volatility = ns.stock.getVolatility(stock.symbol);\\n    stock.maxShares = ns.stock.getMaxShares(stock.symbol);\\n  }\\n  return stocks;\\n}\\nfunction saveMarket(ns, stocks) {\\n  const str = JSON.stringify(stocks);\\n  ns.write(\\\"Stock/market.txt\\\", str, \\\"w\\\");\\n}\\nfunction loadMarket(ns) {\\n  const str = ns.read(\\\"Stock/market.txt\\\");\\n  try {\\n    const data = JSON.parse(str);\\n    return data;\\n  } catch (error) {\\n    return [];\\n  }\\n}\\nfunction getPercentage(money) {\\n  return 1 / (1 + Math.exp(5e-10 * money)) + 0.1;\\n}\\nfunction logPositions(ns, stock, isBuy, profit = 0) {\\n  if (isBuy)\\n    ns.write(\\n      \\\"Stock/log.txt\\\",\\n      \\\"buying \\\" + ns.formatNumber(stock.longShares) + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + ns.formatNumber(stock.longPrice * stock.longShares) + \\\"\\\\n\\\",\\n      \\\"a\\\"\\n    );\\n  else\\n    ns.write(\\n      \\\"Stock/log.txt\\\",\\n      \\\"selling \\\" + ns.formatNumber(stock.longShares) + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + ns.formatNumber(profit) + \\\"\\\\n\\\",\\n      \\\"a\\\"\\n    );\\n}\\nexport async function main(ns) {\\n  ns.print(\\\"asd\\\");\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const s = ns.stock;\\n  let initialStocks = getAllStocks(ns);\\n  ns.print(initialStocks.length);\\n  let totalProfit = 0;\\n  while (true) {\\n    ns.clearLog();\\n    const stocks = updateStocks(ns, initialStocks);\\n    for (const stock of stocks) {\\n      if (stock.observedMinPrice === -1 || stock.price < stock.observedMinPrice) {\\n        stock.observedMinPrice = stock.price;\\n      }\\n      if (stock.observedMaxPrice === -1 || stock.price > stock.observedMaxPrice) {\\n        stock.observedMaxPrice = stock.price;\\n      }\\n      if (stock.previousPrice === -1) {\\n        stock.previousPrice = stock.price;\\n      }\\n      if (stock.forecast >= 0.6 && stock.longShares === 0) {\\n        const money = getPercentage(ns.getServerMoneyAvailable(\\\"home\\\")) * ns.getServerMoneyAvailable(\\\"home\\\");\\n        const numShares = Math.min(Math.round(money / stock.bidPrice), stock.maxShares);\\n        const buyPrice = s.buyStock(stock.symbol, numShares);\\n        stock.longPrice = buyPrice;\\n        stock.longShares = numShares;\\n        ns.print(Colors.E_ORANGE + \\\"buying \\\" + numShares + \\\" shares of \\\" + stock.symbol + \\\" for \\\" + buyPrice);\\n        logPositions(ns, stock, true);\\n      }\\n      if (stock.longShares > 0 && stock.forecast <= 0.5) {\\n        const sellPrice = s.sellStock(stock.symbol, stock.longShares);\\n        const profit = sellPrice * stock.longShares - stock.longPrice * stock.longShares - 2 * COMMISSION_FEE;\\n        stock.longShares = 0;\\n        stock.longPrice = 0;\\n        totalProfit += profit;\\n        ns.print(Colors.E_ORANGE + \\\"selling \\\" + stock.symbol + \\\" for \\\" + profit);\\n        logPositions(ns, stock, false, profit);\\n      }\\n      const color2 = stock.longShares > 0 ? Colors.E_ORANGE : \\\"\\\";\\n      const arrow = stock.price > stock.previousPrice ? \\\"↗\\\" : stock.price < stock.previousPrice ? \\\"↘\\\" : \\\"→\\\";\\n      ns.print(\\n        color2 + `${stock.symbol}:\\t${ns.formatNumber(stock.price)} (min: ${ns.formatNumber(\\n          stock.observedMinPrice\\n        )}, max: ${ns.formatNumber(stock.observedMaxPrice)})\\tforecast: ${ns.formatNumber(\\n          stock.forecast\\n        )} ${arrow}`\\n      );\\n      stock.previousPrice = stock.price;\\n      initialStocks = stocks;\\n    }\\n    const color = totalProfit < 0 ? Colors.RED : Colors.GREEN;\\n    ns.print(color + \\\"Total profit: \\\" + ns.formatNumber(totalProfit));\\n    saveMarket(ns, stocks);\\n    await s.nextUpdate();\\n    ns.print(\\\"\\\\n\\\");\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JzIH0gZnJvbSBcIkAvbGliXCI7XHJcbmltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuaW50ZXJmYWNlIFN0b2NrIHtcclxuICAgIHN5bWJvbDogc3RyaW5nO1xyXG4gICAgb3JnYW5pemF0aW9uOiBzdHJpbmc7XHJcbiAgICBvYnNlcnZlZE1pblByaWNlOiBudW1iZXI7XHJcbiAgICBvYnNlcnZlZE1heFByaWNlOiBudW1iZXI7XHJcbiAgICBsb25nU2hhcmVzOiBudW1iZXI7XHJcbiAgICBsb25nUHJpY2U6IG51bWJlcjtcclxuICAgIHNob3J0U2hhcmVzOiBudW1iZXI7XHJcbiAgICBzaG9ydFByaWNlOiBudW1iZXI7XHJcbiAgICBiaWRQcmljZTogbnVtYmVyO1xyXG4gICAgYXNrUHJpY2U6IG51bWJlcjtcclxuICAgIHByaWNlOiBudW1iZXI7XHJcbiAgICBwcmV2aW91c1ByaWNlOiBudW1iZXI7XHJcbiAgICBmb3JlY2FzdDogbnVtYmVyO1xyXG4gICAgdm9sYXRpbGl0eTogbnVtYmVyO1xyXG4gICAgbWF4U2hhcmVzOiBudW1iZXI7XHJcbiAgICBwcm9maXQ6IG51bWJlcjtcclxuICAgIGNvc3Q6IG51bWJlcjtcclxuICAgIHByb2ZpdFBvdGVudGlhbDogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBDT01NSVNTSU9OX0ZFRSA9IDEwMF8wMDA7XHJcblxyXG5mdW5jdGlvbiBnZXRBbGxTdG9ja3MobnM6IE5TKTogU3RvY2tbXSB7XHJcbiAgICBjb25zdCBzdG9ja3M6IFN0b2NrW10gPSBbXTtcclxuICAgIGNvbnN0IHN5bWJvbHMgPSBucy5zdG9jay5nZXRTeW1ib2xzKCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBzeW1ib2wgb2Ygc3ltYm9scykge1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbnMuc3RvY2suZ2V0UG9zaXRpb24oc3ltYm9sKTtcclxuICAgICAgICBjb25zdCBzdG9jazogU3RvY2sgPSB7XHJcbiAgICAgICAgICAgIHN5bWJvbDogc3ltYm9sLFxyXG4gICAgICAgICAgICBvcmdhbml6YXRpb246IG5zLnN0b2NrLmdldE9yZ2FuaXphdGlvbihzeW1ib2wpLFxyXG4gICAgICAgICAgICBvYnNlcnZlZE1pblByaWNlOiAtMSxcclxuICAgICAgICAgICAgb2JzZXJ2ZWRNYXhQcmljZTogLTEsXHJcbiAgICAgICAgICAgIGxvbmdTaGFyZXM6IHBvc2l0aW9uWzBdLFxyXG4gICAgICAgICAgICBsb25nUHJpY2U6IHBvc2l0aW9uWzFdLFxyXG4gICAgICAgICAgICBzaG9ydFNoYXJlczogcG9zaXRpb25bMl0sXHJcbiAgICAgICAgICAgIHNob3J0UHJpY2U6IHBvc2l0aW9uWzNdLFxyXG4gICAgICAgICAgICBiaWRQcmljZTogbnMuc3RvY2suZ2V0QmlkUHJpY2Uoc3ltYm9sKSxcclxuICAgICAgICAgICAgYXNrUHJpY2U6IG5zLnN0b2NrLmdldEFza1ByaWNlKHN5bWJvbCksXHJcbiAgICAgICAgICAgIHByaWNlOiBucy5zdG9jay5nZXRQcmljZShzeW1ib2wpLFxyXG4gICAgICAgICAgICBwcmV2aW91c1ByaWNlOiAtMSxcclxuICAgICAgICAgICAgZm9yZWNhc3Q6IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN5bWJvbCksXHJcbiAgICAgICAgICAgIHZvbGF0aWxpdHk6IG5zLnN0b2NrLmdldFZvbGF0aWxpdHkoc3ltYm9sKSxcclxuICAgICAgICAgICAgbWF4U2hhcmVzOiBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3ltYm9sKSxcclxuICAgICAgICAgICAgcHJvZml0OiAtMSxcclxuICAgICAgICAgICAgY29zdDogLTEsXHJcbiAgICAgICAgICAgIHByb2ZpdFBvdGVudGlhbDogLTEsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3RvY2sucHJvZml0ID0gc3RvY2subG9uZ1NoYXJlcyAqIChzdG9jay5iaWRQcmljZSAtIHN0b2NrLmxvbmdQcmljZSkgLSAyICogQ09NTUlTU0lPTl9GRUU7XHJcbiAgICAgICAgc3RvY2suY29zdCA9IHN0b2NrLmxvbmdTaGFyZXMgKiBzdG9jay5sb25nUHJpY2UgKyBzdG9jay5zaG9ydFNoYXJlcyAqIHN0b2NrLnNob3J0UHJpY2U7XHJcbiAgICAgICAgc3RvY2sucHJvZml0UG90ZW50aWFsID0gMiAqIE1hdGguYWJzKHN0b2NrLmZvcmVjYXN0IC0gMC41KSAqIHN0b2NrLnZvbGF0aWxpdHk7XHJcblxyXG4gICAgICAgIHN0b2Nrcy5wdXNoKHN0b2NrKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RvY2tzO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVTdG9ja3MobnM6IE5TLCBzdG9ja3M6IFN0b2NrW10pIHtcclxuICAgIGZvciAoY29uc3Qgc3RvY2sgb2Ygc3RvY2tzKSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBucy5zdG9jay5nZXRQb3NpdGlvbihzdG9jay5zeW1ib2wpO1xyXG4gICAgICAgIHN0b2NrLmxvbmdTaGFyZXMgPSBwb3NpdGlvblswXTtcclxuICAgICAgICBzdG9jay5sb25nUHJpY2UgPSBwb3NpdGlvblsxXTtcclxuICAgICAgICBzdG9jay5zaG9ydFNoYXJlcyA9IHBvc2l0aW9uWzJdO1xyXG4gICAgICAgIHN0b2NrLnNob3J0UHJpY2UgPSBwb3NpdGlvblszXTtcclxuICAgICAgICBzdG9jay5iaWRQcmljZSA9IG5zLnN0b2NrLmdldEJpZFByaWNlKHN0b2NrLnN5bWJvbCk7XHJcbiAgICAgICAgc3RvY2suYXNrUHJpY2UgPSBucy5zdG9jay5nZXRBc2tQcmljZShzdG9jay5zeW1ib2wpO1xyXG4gICAgICAgIHN0b2NrLnByaWNlID0gbnMuc3RvY2suZ2V0UHJpY2Uoc3RvY2suc3ltYm9sKTtcclxuICAgICAgICBzdG9jay5mb3JlY2FzdCA9IG5zLnN0b2NrLmdldEZvcmVjYXN0KHN0b2NrLnN5bWJvbCk7XHJcbiAgICAgICAgc3RvY2sudm9sYXRpbGl0eSA9IG5zLnN0b2NrLmdldFZvbGF0aWxpdHkoc3RvY2suc3ltYm9sKTtcclxuICAgICAgICBzdG9jay5tYXhTaGFyZXMgPSBucy5zdG9jay5nZXRNYXhTaGFyZXMoc3RvY2suc3ltYm9sKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RvY2tzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlTWFya2V0KG5zOiBOUywgc3RvY2tzOiBTdG9ja1tdKSB7XHJcbiAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShzdG9ja3MpO1xyXG4gICAgbnMud3JpdGUoXCJTdG9jay9tYXJrZXQudHh0XCIsIHN0ciwgXCJ3XCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkTWFya2V0KG5zOiBOUyk6IFN0b2NrW10ge1xyXG4gICAgY29uc3Qgc3RyID0gbnMucmVhZChcIlN0b2NrL21hcmtldC50eHRcIik7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UGVyY2VudGFnZShtb25leTogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gMSAvICgxICsgTWF0aC5leHAoMC4wMDAwMDAwMDA1ICogbW9uZXkpKSArIDAuMTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9nUG9zaXRpb25zKG5zOiBOUywgc3RvY2s6IFN0b2NrLCBpc0J1eTogYm9vbGVhbiwgcHJvZml0ID0gMCkge1xyXG4gICAgaWYgKGlzQnV5KVxyXG4gICAgICAgIG5zLndyaXRlKFxyXG4gICAgICAgICAgICBcIlN0b2NrL2xvZy50eHRcIixcclxuICAgICAgICAgICAgXCJidXlpbmcgXCIgK1xyXG4gICAgICAgICAgICAgICAgbnMuZm9ybWF0TnVtYmVyKHN0b2NrLmxvbmdTaGFyZXMpICtcclxuICAgICAgICAgICAgICAgIFwiIHNoYXJlcyBvZiBcIiArXHJcbiAgICAgICAgICAgICAgICBzdG9jay5zeW1ib2wgK1xyXG4gICAgICAgICAgICAgICAgXCIgZm9yIFwiICtcclxuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihzdG9jay5sb25nUHJpY2UgKiBzdG9jay5sb25nU2hhcmVzKSArXHJcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxyXG4gICAgICAgICAgICBcImFcIixcclxuICAgICAgICApO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIG5zLndyaXRlKFxyXG4gICAgICAgICAgICBcIlN0b2NrL2xvZy50eHRcIixcclxuICAgICAgICAgICAgXCJzZWxsaW5nIFwiICtcclxuICAgICAgICAgICAgICAgIG5zLmZvcm1hdE51bWJlcihzdG9jay5sb25nU2hhcmVzKSArXHJcbiAgICAgICAgICAgICAgICBcIiBzaGFyZXMgb2YgXCIgK1xyXG4gICAgICAgICAgICAgICAgc3RvY2suc3ltYm9sICtcclxuICAgICAgICAgICAgICAgIFwiIGZvciBcIiArXHJcbiAgICAgICAgICAgICAgICBucy5mb3JtYXROdW1iZXIocHJvZml0KSArXHJcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxyXG4gICAgICAgICAgICBcImFcIixcclxuICAgICAgICApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIG5zLnByaW50KFwiYXNkXCIpO1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIGNvbnN0IHMgPSBucy5zdG9jaztcclxuXHJcbiAgICBsZXQgaW5pdGlhbFN0b2NrczogU3RvY2tbXSA9IGdldEFsbFN0b2Nrcyhucyk7XHJcblxyXG4gICAgbnMucHJpbnQoaW5pdGlhbFN0b2Nrcy5sZW5ndGgpO1xyXG5cclxuICAgIGxldCB0b3RhbFByb2ZpdCA9IDA7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIG5zLmNsZWFyTG9nKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b2NrczogU3RvY2tbXSA9IHVwZGF0ZVN0b2NrcyhucywgaW5pdGlhbFN0b2Nrcyk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgc3RvY2sgb2Ygc3RvY2tzKSB7XHJcbiAgICAgICAgICAgIGlmIChzdG9jay5vYnNlcnZlZE1pblByaWNlID09PSAtMSB8fCBzdG9jay5wcmljZSA8IHN0b2NrLm9ic2VydmVkTWluUHJpY2UpIHtcclxuICAgICAgICAgICAgICAgIHN0b2NrLm9ic2VydmVkTWluUHJpY2UgPSBzdG9jay5wcmljZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RvY2sub2JzZXJ2ZWRNYXhQcmljZSA9PT0gLTEgfHwgc3RvY2sucHJpY2UgPiBzdG9jay5vYnNlcnZlZE1heFByaWNlKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5vYnNlcnZlZE1heFByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0b2NrLnByZXZpb3VzUHJpY2UgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5wcmV2aW91c1ByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGJ1eSBsb25nIHN0b2NrXHJcbiAgICAgICAgICAgIGlmIChzdG9jay5mb3JlY2FzdCA+PSAwLjYgJiYgc3RvY2subG9uZ1NoYXJlcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9uZXkgPSBnZXRQZXJjZW50YWdlKG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKFwiaG9tZVwiKSkgKiBucy5nZXRTZXJ2ZXJNb25leUF2YWlsYWJsZShcImhvbWVcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBudW1TaGFyZXMgPSBNYXRoLm1pbihNYXRoLnJvdW5kKG1vbmV5IC8gc3RvY2suYmlkUHJpY2UpLCBzdG9jay5tYXhTaGFyZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1eVByaWNlID0gcy5idXlTdG9jayhzdG9jay5zeW1ib2wsIG51bVNoYXJlcyk7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5sb25nUHJpY2UgPSBidXlQcmljZTtcclxuICAgICAgICAgICAgICAgIHN0b2NrLmxvbmdTaGFyZXMgPSBudW1TaGFyZXM7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuRV9PUkFOR0UgKyBcImJ1eWluZyBcIiArIG51bVNoYXJlcyArIFwiIHNoYXJlcyBvZiBcIiArIHN0b2NrLnN5bWJvbCArIFwiIGZvciBcIiArIGJ1eVByaWNlKTtcclxuICAgICAgICAgICAgICAgIGxvZ1Bvc2l0aW9ucyhucywgc3RvY2ssIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNlbGwgbG9uZyBzdG9ja1xyXG4gICAgICAgICAgICBpZiAoc3RvY2subG9uZ1NoYXJlcyA+IDAgJiYgc3RvY2suZm9yZWNhc3QgPD0gMC41KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxsUHJpY2UgPSBzLnNlbGxTdG9jayhzdG9jay5zeW1ib2wsIHN0b2NrLmxvbmdTaGFyZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZml0ID0gc2VsbFByaWNlICogc3RvY2subG9uZ1NoYXJlcyAtIHN0b2NrLmxvbmdQcmljZSAqIHN0b2NrLmxvbmdTaGFyZXMgLSAyICogQ09NTUlTU0lPTl9GRUU7XHJcbiAgICAgICAgICAgICAgICBzdG9jay5sb25nU2hhcmVzID0gMDtcclxuICAgICAgICAgICAgICAgIHN0b2NrLmxvbmdQcmljZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFByb2ZpdCArPSBwcm9maXQ7XHJcbiAgICAgICAgICAgICAgICBucy5wcmludChDb2xvcnMuRV9PUkFOR0UgKyBcInNlbGxpbmcgXCIgKyBzdG9jay5zeW1ib2wgKyBcIiBmb3IgXCIgKyBwcm9maXQpO1xyXG4gICAgICAgICAgICAgICAgbG9nUG9zaXRpb25zKG5zLCBzdG9jaywgZmFsc2UsIHByb2ZpdCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gc3RvY2subG9uZ1NoYXJlcyA+IDAgPyBDb2xvcnMuRV9PUkFOR0UgOiBcIlwiO1xyXG4gICAgICAgICAgICBjb25zdCBhcnJvdyA9IHN0b2NrLnByaWNlID4gc3RvY2sucHJldmlvdXNQcmljZSA/IFwi4oaXXCIgOiBzdG9jay5wcmljZSA8IHN0b2NrLnByZXZpb3VzUHJpY2UgPyBcIuKGmFwiIDogXCLihpJcIjtcclxuXHJcbiAgICAgICAgICAgIG5zLnByaW50KFxyXG4gICAgICAgICAgICAgICAgY29sb3IgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAke3N0b2NrLnN5bWJvbH06XFx0JHtucy5mb3JtYXROdW1iZXIoc3RvY2sucHJpY2UpfSAobWluOiAke25zLmZvcm1hdE51bWJlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvY2sub2JzZXJ2ZWRNaW5QcmljZSxcclxuICAgICAgICAgICAgICAgICAgICApfSwgbWF4OiAke25zLmZvcm1hdE51bWJlcihzdG9jay5vYnNlcnZlZE1heFByaWNlKX0pXFx0Zm9yZWNhc3Q6ICR7bnMuZm9ybWF0TnVtYmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9jay5mb3JlY2FzdCxcclxuICAgICAgICAgICAgICAgICAgICApfSAke2Fycm93fWAsXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdG9jay5wcmV2aW91c1ByaWNlID0gc3RvY2sucHJpY2U7XHJcbiAgICAgICAgICAgIGluaXRpYWxTdG9ja3MgPSBzdG9ja3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbG9yID0gdG90YWxQcm9maXQgPCAwID8gQ29sb3JzLlJFRCA6IENvbG9ycy5HUkVFTjtcclxuICAgICAgICBucy5wcmludChjb2xvciArIFwiVG90YWwgcHJvZml0OiBcIiArIG5zLmZvcm1hdE51bWJlcih0b3RhbFByb2ZpdCkpO1xyXG5cclxuICAgICAgICBzYXZlTWFya2V0KG5zLCBzdG9ja3MpO1xyXG4gICAgICAgIGF3YWl0IHMubmV4dFVwZGF0ZSgpO1xyXG4gICAgICAgIG5zLnByaW50KFwiXFxuXCIpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxjQUFjO0FBd0J2QixNQUFNLGlCQUFpQjtBQUV2QixTQUFTLGFBQWEsSUFBaUI7QUFDbkMsUUFBTSxTQUFrQixDQUFDO0FBQ3pCLFFBQU0sVUFBVSxHQUFHLE1BQU0sV0FBVztBQUVwQyxhQUFXLFVBQVUsU0FBUztBQUMxQixVQUFNLFdBQVcsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUM1QyxVQUFNLFFBQWU7QUFBQSxNQUNqQjtBQUFBLE1BQ0EsY0FBYyxHQUFHLE1BQU0sZ0JBQWdCLE1BQU07QUFBQSxNQUM3QyxrQkFBa0I7QUFBQSxNQUNsQixrQkFBa0I7QUFBQSxNQUNsQixZQUFZLFNBQVMsQ0FBQztBQUFBLE1BQ3RCLFdBQVcsU0FBUyxDQUFDO0FBQUEsTUFDckIsYUFBYSxTQUFTLENBQUM7QUFBQSxNQUN2QixZQUFZLFNBQVMsQ0FBQztBQUFBLE1BQ3RCLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLE9BQU8sR0FBRyxNQUFNLFNBQVMsTUFBTTtBQUFBLE1BQy9CLGVBQWU7QUFBQSxNQUNmLFVBQVUsR0FBRyxNQUFNLFlBQVksTUFBTTtBQUFBLE1BQ3JDLFlBQVksR0FBRyxNQUFNLGNBQWMsTUFBTTtBQUFBLE1BQ3pDLFdBQVcsR0FBRyxNQUFNLGFBQWEsTUFBTTtBQUFBLE1BQ3ZDLFFBQVE7QUFBQSxNQUNSLE1BQU07QUFBQSxNQUNOLGlCQUFpQjtBQUFBLElBQ3JCO0FBRUEsVUFBTSxTQUFTLE1BQU0sY0FBYyxNQUFN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ZSxHQUFHO0FBQ2pELGNBQU0sUUFBUSxjQUFjLEdBQUcsd0JBQXdCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsd0JBQXdCLE1BQU07QUFDbkcsY0FBTSxZQUFZLEtBQUssSUFBSSxLQUFLLE1BQU0sUUFBUSxNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVM7QUFFOUUsY0FBTSxXQUFXLEVBQUUsU0FBUyxNQUFNLFFBQVEsU0FBUztBQUNuRCxjQUFNLFlBQVk7QUFDbEIsY0FBTSxhQUFhO0FBQ25CLFdBQUcsTUFBTSxPQUFPLFdBQVcsWUFBWSxZQUFZLGdCQUFnQixNQUFNLFNBQVMsVUFBVSxRQUFRO0FBQ3BHLHFCQUFhLElBQUksT0FBTyxJQUFJO0FBQUEsTUFDaEM7QUFFQSxVQUFJLE1BQU0sYUFBYSxLQUFLLE1BQU0sWUFBWSxLQUFLO0FBQy9DLGNBQU0sWUFBWSxFQUFFLFVBQVUsTUFBTSxRQUFRLE1BQU0sVUFBVTtBQUM1RCxjQUFNLFNBQVMsWUFBWSxNQUFNLGFBQWEsTUFBTSxZQUFZLE1BQU0sYUFBYSxJQUFJO0FBQ3ZGLGNBQU0sYUFBYTtBQUNuQixjQUFNLFlBQVk7QUFDbEIsdUJBQWU7QUFDZixXQUFHLE1BQU0sT0FBTyxXQUFXLGFBQWEsTUFBTSxTQUFTLFVBQVUsTUFBTTtBQUN2RSxxQkFBYSxJQUFJLE9BQU8sT0FBTyxNQUFNO0FBQUEsTUFDekM7QUFFQSxZQUFNQSxTQUFRLE1BQU0sYUFBYSxJQUFJLE9BQU8sV0FBVztBQUN2RCxZQUFNLFFBQVEsTUFBTSxRQUFRLE1BQU0sZ0JBQWdCLE1BQU0sTUFBTSxRQUFRLE1BQU0sZ0JBQWdCLE1BQU07QUFFbEcsU0FBRztBQUFBLFFBQ0NBLFNBQ0ksR0FBRyxNQUFNLE1BQU0sS0FBTSxHQUFHLGFBQWEsTUFBTSxLQUFLLENBQUMsVUFBVSxHQUFHO0FBQUEsVUFDMUQsTUFBTTtBQUFBLFFBQ1YsQ0FBQyxVQUFVLEdBQUcsYUFBYSxNQUFNLGdCQUFnQixDQUFDLGVBQWdCLEdBQUc7QUFBQSxVQUNqRSxNQUFNO0FBQUEsUUFDVixDQUFDLElBQUksS0FBSztBQUFBLE1BQ2xCO0FBRUEsWUFBTSxnQkFBZ0IsTUFBTTtBQUM1QixzQkFBZ0I7QUFBQSxJQUNwQjtBQUNBLFVBQU0sUUFBUSxjQUFjLElBQUksT0FBTyxNQUFNLE9BQU87QUFDcEQsT0FBRyxNQUFNLFFBQVEsbUJBQW1CLEdBQUcsYUFBYSxXQUFXLENBQUM7QUFFaEUsZUFBVyxJQUFJLE1BQU07QUFDckIsVUFBTSxFQUFFLFdBQVc7QUFDbkIsT0FBRyxNQUFNLElBQUk7QUFBQSxFQUNqQjtBQUNKOyIsIm5hbWVzIjpbImNvbG9yIl19\",\"filename\":\"Stock/manager.js\",\"server\":\"home\"}}],[\"HacknetNodes/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const EXPECTED_TURNOVER_TIME = 1e3 * 60 * 60 * 2;\\nexport async function main(ns) {\\n  const purchaseCost = ns.hacknet.getPurchaseNodeCost();\\n  const stats = ns.hacknet.getNodeStats(0);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5jb25zdCBFWFBFQ1RFRF9UVVJOT1ZFUl9USU1FID0gMTAwMCAqIDYwICogNjAgKiAyOyAvLyAyIGhvdXJzXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpIHtcclxuICAgIGNvbnN0IHB1cmNoYXNlQ29zdCA9IG5zLmhhY2tuZXQuZ2V0UHVyY2hhc2VOb2RlQ29zdCgpO1xyXG4gICAgY29uc3Qgc3RhdHMgPSBucy5oYWNrbmV0LmdldE5vZGVTdGF0cygwKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0seUJBQXlCLE1BQU8sS0FBSyxLQUFLO0FBRWhELHNCQUFzQixLQUFLLElBQVE7QUFDL0IsUUFBTSxlQUFlLEdBQUcsUUFBUSxvQkFBb0I7QUFDcEQsUUFBTSxRQUFRLEdBQUcsUUFBUSxhQUFhLENBQUM7QUFDM0M7IiwibmFtZXMiOltdfQ==\",\"filename\":\"HacknetNodes/manager.js\",\"server\":\"home\"}}],[\"CodingContracts/manager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { Colors, serverScanner } from \\\"/lib.js\\\";\\nexport async function main(ns2) {\\n  ns2.tail();\\n  ns2.disableLog(\\\"ALL\\\");\\n  const cc = ns2.codingcontract;\\n  const allServers = serverScanner(ns2);\\n  for (const server2 of allServers) {\\n    const contracts = ns2.ls(server2).filter((p) => p.includes(\\\"cct\\\"));\\n    if (contracts.length === 0)\\n      continue;\\n    ns2.print(`server ${server2} has ${contracts.length} contract(s)`);\\n    for (const contract2 of contracts) {\\n      const contractType = cc.getContractType(contract2, server2);\\n      ns2.print(`contract ${contract2} is of type ${contractType}`);\\n      let result;\\n      switch (contractType) {\\n        case \\\"Find Largest Prime Factor\\\":\\n          result = findLargestPrimeFactor(ns2, contract2, server2);\\n          break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n          result = subarraywithMaximumSum(ns2, contract2, server2);\\n          break;\\n        case \\\"Total Ways to Sum\\\":\\n          result = totalWaysToSum(ns2, contract2, server2);\\n          break;\\n        case \\\"Total Ways to Sum II\\\":\\n          result = totalWaysToSumII(ns2, contract2, server2);\\n          break;\\n        case \\\"Spiralize Matrix\\\":\\n          result = spiralizeMatrix(ns2, contract2, server2);\\n          break;\\n        case \\\"Array Jumping Game\\\":\\n          result = arrayJumpingGame(ns2, contract2, server2);\\n          break;\\n        case \\\"Array Jumping Game II\\\":\\n          result = arrayJumpingGameII(ns2, contract2, server2);\\n          break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n          result = mergeOverlappingIntervals(ns2, contract2, server2);\\n          break;\\n        case \\\"Generate IP Addresses\\\":\\n          result = generateIPAddresses(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader I\\\":\\n          result = algorithmicStockTraderI(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n          result = algorithmicStockTraderII(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n          result = algorithmicStockTraderIII(ns2, contract2, server2);\\n          break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n          result = algorithmicStockTraderIV(ns2, contract2, server2);\\n          break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n          result = minimumPathSumInATriangle(ns2, contract2, server2);\\n          break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n          result = uniquePathsInAGridI(ns2, contract2, server2);\\n          break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n          result = uniquePathsInAGridII(ns2, contract2, server2);\\n          break;\\n        case \\\"Shortest Path in a Grid\\\":\\n          result = findShortestPath(ns2, contract2, server2);\\n          break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n          result = sanitizeParenthesesInExpression(ns2, contract2, server2);\\n          break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n          result = findAllValidMathExpressions(ns2, contract2, server2);\\n          break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n          result = hmmingCodesEncodeIntegerToBinary(ns2, contract2, server2);\\n          break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n          result = hmmingCodesEncodeBinaryToInteger(ns2, contract2, server2);\\n          break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n          result = proper2ColoringOfAGraph(ns2, contract2, server2);\\n          break;\\n        case \\\"Compression I: RLE Compression\\\":\\n          result = compressionI(ns2, contract2, server2);\\n          break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n          result = compressionII(ns2, contract2, server2);\\n          break;\\n        case \\\"Compression III: LZ Compression\\\":\\n          result = compressionIII(ns2, contract2, server2);\\n          break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n          result = encryptionI(ns2, contract2, server2);\\n          break;\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\n          result = encryptionII(ns2, contract2, server2);\\n          break;\\n        default:\\n          throw new Error(\\\"unknown contract type: \\\" + contractType);\\n      }\\n      if (result === void 0)\\n        continue;\\n      const success = ns2.codingcontract.attempt(result, contract2, server2);\\n      if (success === \\\"\\\") {\\n        ns2.tprint(Colors.RED + `failed to solve contract ${contract2} on server ${server2}`);\\n      }\\n      ns2.print(Colors.GREEN + success);\\n    }\\n  }\\n}\\nexport function findShortestPath(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  function findWay(position, end, data3) {\\n    const queue = [];\\n    data3[position[0]][position[1]] = 1;\\n    queue.push([position]);\\n    while (queue.length > 0) {\\n      const path2 = queue.shift();\\n      if (path2 === void 0)\\n        break;\\n      const pos = path2[path2.length - 1];\\n      const direction = [\\n        [pos[0] + 1, pos[1]],\\n        [pos[0], pos[1] + 1],\\n        [pos[0] - 1, pos[1]],\\n        [pos[0], pos[1] - 1]\\n      ];\\n      for (let i2 = 0; i2 < direction.length; i2++) {\\n        if (direction[i2][0] == end[0] && direction[i2][1] == end[1]) {\\n          return path2.concat([end]);\\n        }\\n        if (direction[i2][0] < 0 || direction[i2][0] >= data3.length || direction[i2][1] < 0 || direction[i2][1] >= data3[0].length || data3[direction[i2][0]][direction[i2][1]] != 0) {\\n          continue;\\n        }\\n        data3[direction[i2][0]][direction[i2][1]] = 1;\\n        queue.push(path2.concat([direction[i2]]));\\n      }\\n    }\\n  }\\n  function annotate(path2) {\\n    let currentPosition = [0, 0];\\n    let iteration = \\\"\\\";\\n    for (let i2 = 1; i2 < path2.length; i2++) {\\n      if (currentPosition[0] < path2[i2][0])\\n        iteration = iteration + \\\"D\\\";\\n      if (currentPosition[0] > path2[i2][0])\\n        iteration = iteration + \\\"U\\\";\\n      if (currentPosition[1] < path2[i2][1])\\n        iteration = iteration + \\\"R\\\";\\n      if (currentPosition[1] > path2[i2][1])\\n        iteration = iteration + \\\"L\\\";\\n      currentPosition = path2[i2];\\n    }\\n    return iteration;\\n  }\\n  const path = findWay([0, 0], [data2.length - 1, data2[0].length - 1], data2);\\n  if (path)\\n    return annotate(path);\\n  return \\\"\\\";\\n}\\nexport function totalWaysToSum(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"number\\\" || data2 < 1) {\\n    ns2.tprint(Colors.RED + \\\"invalid data for contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  function sumCombinations(target, current = [], start = 1, result = []) {\\n    if (target === 0) {\\n      result.push(current.slice());\\n      return;\\n    }\\n    for (let i2 = start; i2 <= target; i2++) {\\n      current.push(i2);\\n      sumCombinations(target - i2, current, i2, result);\\n      current.pop();\\n    }\\n    return result;\\n  }\\n  const res = sumCombinations(data2)?.filter((arr) => arr.length !== 1).length;\\n  if (res === void 0) {\\n    ns2.tprint(Colors.RED + \\\"failed to solve contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  return res;\\n}\\nfunction totalWaysToSumII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const target = data2[0];\\n  const nums = data2[1];\\n  const dp = Array(target + 1).fill(0);\\n  dp[0] = 1;\\n  for (const number of nums) {\\n    for (let i2 = number; i2 < target + 1; i2++) {\\n      dp[i2] += dp[i2 - number];\\n    }\\n  }\\n  const res = dp[target];\\n  if (res === void 0) {\\n    ns2.tprint(Colors.RED + \\\"failed to solve contract \\\" + contract2 + \\\" on server \\\" + server2);\\n    return;\\n  }\\n  return res;\\n}\\nfunction findAllValidMathExpressions(ns, contract, server) {\\n  const data = ns.codingcontract.getData(contract, server);\\n  function opStr(mu, len) {\\n    const ops2 = [\\\"\\\", \\\"-\\\", \\\"+\\\", \\\"*\\\"];\\n    const s = [];\\n    while (mu >= 4) {\\n      s.push(ops2[mu % 4]);\\n      mu -= mu % 4;\\n      mu /= 4;\\n    }\\n    s.push(ops2[mu]);\\n    while (s.length < len) {\\n      s.push(ops2[0]);\\n    }\\n    return s;\\n  }\\n  const answers = [];\\n  const digits = data[0];\\n  const assertion = data[1];\\n  const permutations = Math.pow(4, digits.length - 1);\\n  for (let i = 0; i < permutations; i++) {\\n    const ops = opStr(i, digits.length - 1);\\n    let expr = \\\"\\\";\\n    for (let j = 0; j < ops.length; j++) {\\n      expr += digits[j] + ops[j];\\n    }\\n    expr += digits[ops.length];\\n    try {\\n      if (eval(expr) == assertion) {\\n        answers.push(expr);\\n      }\\n    } catch (e) {\\n      ns.tprint(\\\"Error while solving findAllValidMathExpressions: \\\" + e);\\n    }\\n  }\\n  return answers;\\n}\\nfunction algorithmicStockTraderI(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  let maxCur = 0;\\n  let maxSoFar = 0;\\n  for (let i2 = 1; i2 < data2.length; ++i2) {\\n    maxCur = Math.max(0, maxCur += data2[i2] - data2[i2 - 1]);\\n    maxSoFar = Math.max(maxCur, maxSoFar);\\n  }\\n  return maxSoFar.toString();\\n}\\nfunction algorithmicStockTraderII(ns2, contract2, server2) {\\n  const stockPrice = ns2.codingcontract.getData(contract2, server2);\\n  stockPrice.push(0);\\n  let profit = 0;\\n  for (let i2 = 0; i2 < stockPrice.length; i2++) {\\n    if (stockPrice[i2] < stockPrice[i2 + 1]) {\\n      profit += stockPrice[i2 + 1] - stockPrice[i2];\\n    }\\n  }\\n  profit = Math.max(profit, 0);\\n  return profit;\\n}\\nexport function algorithmicStockTraderIII(ns2, contract2, server2) {\\n  const stockPrice = ns2.codingcontract.getData(contract2, server2);\\n  let hold1 = Number.MIN_SAFE_INTEGER;\\n  let hold2 = Number.MIN_SAFE_INTEGER;\\n  let release1 = 0;\\n  let release2 = 0;\\n  for (const price of stockPrice) {\\n    release2 = Math.max(release2, hold2 + price);\\n    hold2 = Math.max(hold2, release1 - price);\\n    release1 = Math.max(release1, hold1 + price);\\n    hold1 = Math.max(hold1, price * -1);\\n  }\\n  return release2;\\n}\\nfunction algorithmicStockTraderIV(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const k = data2[0];\\n  const prices = data2[1];\\n  const len = prices.length;\\n  const hold = [];\\n  const rele = [];\\n  hold.length = k + 1;\\n  rele.length = k + 1;\\n  for (let i2 = 0; i2 <= k; ++i2) {\\n    hold[i2] = Number.MIN_SAFE_INTEGER;\\n    rele[i2] = 0;\\n  }\\n  let cur;\\n  for (let i2 = 0; i2 < len; ++i2) {\\n    cur = prices[i2];\\n    for (let j = k; j > 0; --j) {\\n      rele[j] = Math.max(rele[j], hold[j] + cur);\\n      hold[j] = Math.max(hold[j], rele[j - 1] - cur);\\n    }\\n  }\\n  return rele[k];\\n}\\nfunction minimumPathSumInATriangle(ns2, contract2, server2) {\\n  const triangle = ns2.codingcontract.getData(contract2, server2);\\n  ns2.print(triangle);\\n  const n = triangle.length;\\n  const dp = triangle[n - 1].slice();\\n  for (let i2 = n - 2; i2 > -1; --i2) {\\n    for (let j = 0; j < triangle[i2].length; ++j) {\\n      dp[j] = Math.min(dp[j], dp[j + 1]) + triangle[i2][j];\\n    }\\n  }\\n  return dp[0];\\n}\\nfunction subarraywithMaximumSum(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  let maxSum = -Infinity;\\n  let currentSum = 0;\\n  for (let i2 = 0; i2 < data2.length; i2++) {\\n    currentSum = Math.max(data2[i2], currentSum + data2[i2]);\\n    maxSum = Math.max(maxSum, currentSum);\\n  }\\n  return maxSum;\\n}\\nfunction uniquePathsInAGridI(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const n = data2[0];\\n  const m = data2[1];\\n  const currentRow = [];\\n  currentRow.length = n;\\n  for (let i2 = 0; i2 < n; i2++) {\\n    currentRow[i2] = 1;\\n  }\\n  for (let row = 1; row < m; row++) {\\n    for (let i2 = 1; i2 < n; i2++) {\\n      currentRow[i2] += currentRow[i2 - 1];\\n    }\\n  }\\n  return currentRow[n - 1];\\n}\\nfunction uniquePathsInAGridII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const obstacleGrid = [];\\n  obstacleGrid.length = data2.length;\\n  for (let i2 = 0; i2 < obstacleGrid.length; ++i2) {\\n    obstacleGrid[i2] = data2[i2].slice();\\n  }\\n  for (let i2 = 0; i2 < obstacleGrid.length; i2++) {\\n    for (let j = 0; j < obstacleGrid[0].length; j++) {\\n      if (obstacleGrid[i2][j] == 1) {\\n        obstacleGrid[i2][j] = 0;\\n      } else if (i2 == 0 && j == 0) {\\n        obstacleGrid[0][0] = 1;\\n      } else {\\n        obstacleGrid[i2][j] = (i2 > 0 ? obstacleGrid[i2 - 1][j] : 0) + (j > 0 ? obstacleGrid[i2][j - 1] : 0);\\n      }\\n    }\\n  }\\n  return obstacleGrid[obstacleGrid.length - 1][obstacleGrid[0].length - 1];\\n}\\nfunction generateIPAddresses(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const ret = [];\\n  for (let a = 1; a <= 3; ++a) {\\n    for (let b = 1; b <= 3; ++b) {\\n      for (let c = 1; c <= 3; ++c) {\\n        for (let d = 1; d <= 3; ++d) {\\n          if (a + b + c + d === data2.length) {\\n            const A = parseInt(data2.substring(0, a), 10);\\n            const B = parseInt(data2.substring(a, a + b), 10);\\n            const C = parseInt(data2.substring(a + b, a + b + c), 10);\\n            const D = parseInt(data2.substring(a + b + c, a + b + c + d), 10);\\n            if (A <= 255 && B <= 255 && C <= 255 && D <= 255) {\\n              const ip = [\\n                A.toString(),\\n                \\\".\\\",\\n                B.toString(),\\n                \\\".\\\",\\n                C.toString(),\\n                \\\".\\\",\\n                D.toString()\\n              ].join(\\\"\\\");\\n              if (ip.length === data2.length + 3) {\\n                ret.push(ip);\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n  return ret;\\n}\\nfunction encryptionI(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const cipher = [...data2[0]].map((a) => a === \\\" \\\" ? a : String.fromCharCode((a.charCodeAt(0) - 65 - data2[1] + 26) % 26 + 65)).join(\\\"\\\");\\n  return cipher;\\n}\\nfunction encryptionII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const cipher = [...data2[0]].map((a, i2) => {\\n    return a === \\\" \\\" ? a : String.fromCharCode((a.charCodeAt(0) - 2 * 65 + data2[1].charCodeAt(i2 % data2[1].length)) % 26 + 65);\\n  }).join(\\\"\\\");\\n  return cipher;\\n}\\nfunction sanitizeParenthesesInExpression(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"string\\\")\\n    throw new Error(\\\"solver expected string\\\");\\n  let left = 0;\\n  let right = 0;\\n  const res = [];\\n  for (let i2 = 0; i2 < data2.length; ++i2) {\\n    if (data2[i2] === \\\"(\\\") {\\n      ++left;\\n    } else if (data2[i2] === \\\")\\\") {\\n      left > 0 ? --left : ++right;\\n    }\\n  }\\n  function dfs(pair, index, left2, right2, s, solution, res2) {\\n    if (s.length === index) {\\n      if (left2 === 0 && right2 === 0 && pair === 0) {\\n        for (let i2 = 0; i2 < res2.length; i2++) {\\n          if (res2[i2] === solution) {\\n            return;\\n          }\\n        }\\n        res2.push(solution);\\n      }\\n      return;\\n    }\\n    if (s[index] === \\\"(\\\") {\\n      if (left2 > 0) {\\n        dfs(pair, index + 1, left2 - 1, right2, s, solution, res2);\\n      }\\n      dfs(pair + 1, index + 1, left2, right2, s, solution + s[index], res2);\\n    } else if (s[index] === \\\")\\\") {\\n      if (right2 > 0)\\n        dfs(pair, index + 1, left2, right2 - 1, s, solution, res2);\\n      if (pair > 0)\\n        dfs(pair - 1, index + 1, left2, right2, s, solution + s[index], res2);\\n    } else {\\n      dfs(pair, index + 1, left2, right2, s, solution + s[index], res2);\\n    }\\n  }\\n  dfs(0, 0, left, right, data2, \\\"\\\", res);\\n  return res;\\n}\\nfunction compressionI(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"string\\\")\\n    throw new Error(\\\"solver expected string\\\");\\n  let pos = 0;\\n  let i2 = 1;\\n  const length = data2.length;\\n  let compression = \\\"\\\";\\n  while (pos < length) {\\n    if (data2.charAt(pos) == data2.charAt(pos + 1)) {\\n      i2++;\\n    } else {\\n      if (i2 > 9) {\\n        const split = Math.floor(i2 / 9);\\n        for (let n = 0; n < split; n++) {\\n          compression += \\\"9\\\" + data2.charAt(pos);\\n        }\\n        compression += i2 - split * 9 + data2.charAt(pos);\\n      } else {\\n        compression += i2 + data2.charAt(pos);\\n      }\\n      i2 = 1;\\n    }\\n    pos++;\\n  }\\n  return compression;\\n}\\nfunction compressionII(ns2, contract2, server2) {\\n  const compr = ns2.codingcontract.getData(contract2, server2);\\n  let plain = \\\"\\\";\\n  for (let i2 = 0; i2 < compr.length; ) {\\n    const literal_length = compr.charCodeAt(i2) - 48;\\n    if (literal_length < 0 || literal_length > 9 || i2 + 1 + literal_length > compr.length) {\\n      return null;\\n    }\\n    plain += compr.substring(i2 + 1, i2 + 1 + literal_length);\\n    i2 += 1 + literal_length;\\n    if (i2 >= compr.length) {\\n      break;\\n    }\\n    const backref_length = compr.charCodeAt(i2) - 48;\\n    if (backref_length < 0 || backref_length > 9) {\\n      return null;\\n    } else if (backref_length === 0) {\\n      ++i2;\\n    } else {\\n      if (i2 + 1 >= compr.length) {\\n        return null;\\n      }\\n      const backref_offset = compr.charCodeAt(i2 + 1) - 48;\\n      if (backref_length > 0 && (backref_offset < 1 || backref_offset > 9) || backref_offset > plain.length) {\\n        return null;\\n      }\\n      for (let j = 0; j < backref_length; ++j) {\\n        plain += plain[plain.length - backref_offset];\\n      }\\n      i2 += 2;\\n    }\\n  }\\n  return plain;\\n}\\nfunction compressionIII(ns2, contract2, server2) {\\n  const plain = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof plain !== \\\"string\\\")\\n    throw new Error(\\\"solver expected string\\\");\\n  let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n  let new_state = Array.from(Array(10), () => Array(10));\\n  function set(state, i2, j, str) {\\n    const current = state[i2][j];\\n    if (current == null || str.length < current.length) {\\n      state[i2][j] = str;\\n    } else if (str.length === current.length && Math.random() < 0.5) {\\n      state[i2][j] = str;\\n    }\\n  }\\n  cur_state[0][1] = \\\"\\\";\\n  for (let i2 = 1; i2 < plain.length; ++i2) {\\n    for (const row of new_state) {\\n      row.fill(null);\\n    }\\n    const c = plain[i2];\\n    for (let length = 1; length <= 9; ++length) {\\n      const string = cur_state[0][length];\\n      if (string == null) {\\n        continue;\\n      }\\n      if (length < 9) {\\n        set(new_state, 0, length + 1, string);\\n      } else {\\n        set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i2 - 9, i2) + \\\"0\\\");\\n      }\\n      for (let offset = 1; offset <= Math.min(9, i2); ++offset) {\\n        if (plain[i2 - offset] === c) {\\n          set(new_state, offset, 1, string + String(length) + plain.substring(i2 - length, i2));\\n        }\\n      }\\n    }\\n    for (let offset = 1; offset <= 9; ++offset) {\\n      for (let length = 1; length <= 9; ++length) {\\n        const string = cur_state[offset][length];\\n        if (string == null) {\\n          continue;\\n        }\\n        if (plain[i2 - offset] === c) {\\n          if (length < 9) {\\n            set(new_state, offset, length + 1, string);\\n          } else {\\n            set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\n          }\\n        }\\n        set(new_state, 0, 1, string + String(length) + String(offset));\\n        for (let new_offset = 1; new_offset <= Math.min(9, i2); ++new_offset) {\\n          if (plain[i2 - new_offset] === c) {\\n            set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\n          }\\n        }\\n      }\\n    }\\n    const tmp_state = new_state;\\n    new_state = cur_state;\\n    cur_state = tmp_state;\\n  }\\n  let result = null;\\n  for (let len = 1; len <= 9; ++len) {\\n    let string = cur_state[0][len];\\n    if (string == null) {\\n      continue;\\n    }\\n    string += String(len) + plain.substring(plain.length - len, plain.length);\\n    if (result == null || string.length < result.length) {\\n      result = string;\\n    } else if (string.length == result.length && Math.random() < 0.5) {\\n      result = string;\\n    }\\n  }\\n  for (let offset = 1; offset <= 9; ++offset) {\\n    for (let len = 1; len <= 9; ++len) {\\n      let string = cur_state[offset][len];\\n      if (string == null) {\\n        continue;\\n      }\\n      string += String(len) + \\\"\\\" + String(offset);\\n      if (result == null || string.length < result.length) {\\n        result = string;\\n      } else if (string.length == result.length && Math.random() < 0.5) {\\n        result = string;\\n      }\\n    }\\n  }\\n  if (result == null)\\n    throw new Error(\\\"no result found\\\");\\n  return result;\\n}\\nfunction hmmingCodesEncodeIntegerToBinary(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"number\\\")\\n    throw new Error(\\\"solver expected number\\\");\\n  const enc = [0];\\n  const data_bits = data2.toString(2).split(\\\"\\\").reverse();\\n  data_bits.forEach((e, i2, a) => {\\n    a[i2] = parseInt(e);\\n  });\\n  let k = data_bits.length;\\n  for (let i2 = 1; k > 0; i2++) {\\n    if ((i2 & i2 - 1) != 0) {\\n      enc[i2] = data_bits[--k];\\n    } else {\\n      enc[i2] = 0;\\n    }\\n  }\\n  let parity = 0;\\n  for (let i2 = 0; i2 < enc.length; i2++) {\\n    if (enc[i2]) {\\n      parity ^= i2;\\n    }\\n  }\\n  parity = parity.toString(2).split(\\\"\\\").reverse();\\n  parity.forEach((e, i2, a) => {\\n    a[i2] = parseInt(e);\\n  });\\n  for (let i2 = 0; i2 < parity.length; i2++) {\\n    enc[2 ** i2] = parity[i2] ? 1 : 0;\\n  }\\n  parity = 0;\\n  for (let i2 = 0; i2 < enc.length; i2++) {\\n    if (enc[i2]) {\\n      parity++;\\n    }\\n  }\\n  enc[0] = parity % 2 == 0 ? 0 : 1;\\n  return enc.join(\\\"\\\");\\n}\\nfunction hmmingCodesEncodeBinaryToInteger(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"string\\\")\\n    throw new Error(\\\"solver expected string\\\");\\n  let err = 0;\\n  const bits = [];\\n  for (const i2 in data2.split(\\\"\\\")) {\\n    const bit = parseInt(data2[i2]);\\n    bits[i2] = bit;\\n    if (bit) {\\n      err ^= +i2;\\n    }\\n  }\\n  if (err) {\\n    bits[err] = bits[err] ? 0 : 1;\\n  }\\n  let ans = \\\"\\\";\\n  for (let i2 = 1; i2 < bits.length; i2++) {\\n    if ((i2 & i2 - 1) != 0) {\\n      ans += bits[i2];\\n    }\\n  }\\n  return parseInt(ans, 2);\\n}\\nfunction arrayJumpingGame(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const n = data2.length;\\n  let i2 = 0;\\n  for (let reach = 0; i2 < n && i2 <= reach; ++i2) {\\n    reach = Math.max(i2 + data2[i2], reach);\\n  }\\n  const solution = i2 === n;\\n  return solution ? \\\"1\\\" : \\\"0\\\";\\n}\\nfunction arrayJumpingGameII(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const n = data2.length;\\n  let reach = 0;\\n  let jumps = 0;\\n  let lastJump = -1;\\n  while (reach < n - 1) {\\n    let jumpedFrom = -1;\\n    for (let i2 = reach; i2 > lastJump; i2--) {\\n      if (i2 + data2[i2] > reach) {\\n        reach = i2 + data2[i2];\\n        jumpedFrom = i2;\\n      }\\n    }\\n    if (jumpedFrom === -1) {\\n      jumps = 0;\\n      break;\\n    }\\n    lastJump = jumpedFrom;\\n    jumps++;\\n  }\\n  return jumps;\\n}\\nfunction convert2DArrayToString(arr) {\\n  const components = [];\\n  arr.forEach((e) => {\\n    let s = String(e);\\n    s = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\n    components.push(s);\\n  });\\n  return components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\n}\\nfunction mergeOverlappingIntervals(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const intervals = data2.slice();\\n  intervals.sort((a, b) => {\\n    return a[0] - b[0];\\n  });\\n  const result = [];\\n  let start = intervals[0][0];\\n  let end = intervals[0][1];\\n  for (const interval of intervals) {\\n    if (interval[0] <= end) {\\n      end = Math.max(end, interval[1]);\\n    } else {\\n      result.push([start, end]);\\n      start = interval[0];\\n      end = interval[1];\\n    }\\n  }\\n  result.push([start, end]);\\n  const sanitizedResult = convert2DArrayToString(result);\\n  return sanitizedResult;\\n}\\nfunction proper2ColoringOfAGraph(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  function neighbourhood(vertex) {\\n    const adjLeft = data2[1].filter(([a]) => a === vertex).map(([, b]) => b);\\n    const adjRight = data2[1].filter(([, b]) => b === vertex).map(([a]) => a);\\n    return adjLeft.concat(adjRight);\\n  }\\n  const coloring = Array(data2[0]).fill(void 0);\\n  while (coloring.some((val) => val === void 0)) {\\n    const initialVertex = coloring.findIndex((val) => val === void 0);\\n    coloring[initialVertex] = 0;\\n    const frontier = [initialVertex];\\n    while (frontier.length > 0) {\\n      const v = frontier.pop() || 0;\\n      const neighbors = neighbourhood(v);\\n      for (const id in neighbors) {\\n        const u = neighbors[id];\\n        if (coloring[u] === void 0) {\\n          if (coloring[v] === 0)\\n            coloring[u] = 1;\\n          else\\n            coloring[u] = 0;\\n          frontier.push(u);\\n        } else if (coloring[u] === coloring[v]) {\\n          return \\\"\\\";\\n        }\\n      }\\n    }\\n  }\\n  return coloring;\\n}\\nfunction findLargestPrimeFactor(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  if (typeof data2 !== \\\"number\\\")\\n    throw new Error(\\\"solver expected number\\\");\\n  let fac = 2;\\n  let n = data2;\\n  while (n > (fac - 1) * (fac - 1)) {\\n    while (n % fac === 0) {\\n      n = Math.round(n / fac);\\n    }\\n    ++fac;\\n  }\\n  return n === 1 ? fac - 1 : n;\\n}\\nfunction spiralizeMatrix(ns2, contract2, server2) {\\n  const data2 = ns2.codingcontract.getData(contract2, server2);\\n  const spiral = [];\\n  const m = data2.length;\\n  const n = data2[0].length;\\n  let u = 0;\\n  let d = m - 1;\\n  let l = 0;\\n  let r = n - 1;\\n  let k = 0;\\n  let done = false;\\n  while (!done) {\\n    for (let col = l; col <= r; col++) {\\n      spiral[k] = data2[u][col];\\n      ++k;\\n    }\\n    if (++u > d) {\\n      done = true;\\n      continue;\\n    }\\n    for (let row = u; row <= d; row++) {\\n      spiral[k] = data2[row][r];\\n      ++k;\\n    }\\n    if (--r < l) {\\n      done = true;\\n      continue;\\n    }\\n    for (let col = r; col >= l; col--) {\\n      spiral[k] = data2[d][col];\\n      ++k;\\n    }\\n    if (--d < u) {\\n      done = true;\\n      continue;\\n    }\\n    for (let row = d; row >= u; row--) {\\n      spiral[k] = data2[row][l];\\n      ++k;\\n    }\\n    if (++l > r) {\\n      done = true;\\n      continue;\\n    }\\n  }\\n  return spiral;\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcblxyXG5pbXBvcnQgeyBDb2xvcnMsIHNlcnZlclNjYW5uZXIgfSBmcm9tIFwiQC9saWJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIGNvbnN0IGNjID0gbnMuY29kaW5nY29udHJhY3Q7XHJcblxyXG4gICAgY29uc3QgYWxsU2VydmVycyA9IHNlcnZlclNjYW5uZXIobnMpO1xyXG5cclxuICAgIGZvciAoY29uc3Qgc2VydmVyIG9mIGFsbFNlcnZlcnMpIHtcclxuICAgICAgICBjb25zdCBjb250cmFjdHMgPSBucy5scyhzZXJ2ZXIpLmZpbHRlcigocCkgPT4gcC5pbmNsdWRlcyhcImNjdFwiKSk7XHJcblxyXG4gICAgICAgIGlmIChjb250cmFjdHMubGVuZ3RoID09PSAwKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgbnMucHJpbnQoYHNlcnZlciAke3NlcnZlcn0gaGFzICR7Y29udHJhY3RzLmxlbmd0aH0gY29udHJhY3QocylgKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cmFjdCBvZiBjb250cmFjdHMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29udHJhY3RUeXBlID0gY2MuZ2V0Q29udHJhY3RUeXBlKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICBucy5wcmludChgY29udHJhY3QgJHtjb250cmFjdH0gaXMgb2YgdHlwZSAke2NvbnRyYWN0VHlwZX1gKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29udHJhY3RUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRmluZCBMYXJnZXN0IFByaW1lIEZhY3RvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZpbmRMYXJnZXN0UHJpbWVGYWN0b3IobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlN1YmFycmF5IHdpdGggTWF4aW11bSBTdW1cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzdWJhcnJheXdpdGhNYXhpbXVtU3VtKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRvdGFsV2F5c1RvU3VtKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJUb3RhbCBXYXlzIHRvIFN1bSBJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRvdGFsV2F5c1RvU3VtSUkobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNwaXJhbGl6ZSBNYXRyaXhcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzcGlyYWxpemVNYXRyaXgobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFycmF5IEp1bXBpbmcgR2FtZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFycmF5SnVtcGluZ0dhbWUobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFycmF5IEp1bXBpbmcgR2FtZSBJSVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFycmF5SnVtcGluZ0dhbWVJSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTWVyZ2UgT3ZlcmxhcHBpbmcgSW50ZXJ2YWxzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbWVyZ2VPdmVybGFwcGluZ0ludGVydmFscyhucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiR2VuZXJhdGUgSVAgQWRkcmVzc2VzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2VuZXJhdGVJUEFkZHJlc3NlcyhucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhbGdvcml0aG1pY1N0b2NrVHJhZGVySShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElJXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWxnb3JpdGhtaWNTdG9ja1RyYWRlcklJKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBbGdvcml0aG1pYyBTdG9jayBUcmFkZXIgSUlJXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWxnb3JpdGhtaWNTdG9ja1RyYWRlcklJSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQWxnb3JpdGhtaWMgU3RvY2sgVHJhZGVyIElWXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYWxnb3JpdGhtaWNTdG9ja1RyYWRlcklWKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJNaW5pbXVtIFBhdGggU3VtIGluIGEgVHJpYW5nbGVcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW5pbXVtUGF0aFN1bUluQVRyaWFuZ2xlKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJVbmlxdWUgUGF0aHMgaW4gYSBHcmlkIElcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmlxdWVQYXRoc0luQUdyaWRJKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJVbmlxdWUgUGF0aHMgaW4gYSBHcmlkIElJXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdW5pcXVlUGF0aHNJbkFHcmlkSUkobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNob3J0ZXN0IFBhdGggaW4gYSBHcmlkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmluZFNob3J0ZXN0UGF0aChucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU2FuaXRpemUgUGFyZW50aGVzZXMgaW4gRXhwcmVzc2lvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNhbml0aXplUGFyZW50aGVzZXNJbkV4cHJlc3Npb24obnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkZpbmQgQWxsIFZhbGlkIE1hdGggRXhwcmVzc2lvbnNcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmaW5kQWxsVmFsaWRNYXRoRXhwcmVzc2lvbnMobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkhhbW1pbmdDb2RlczogSW50ZWdlciB0byBFbmNvZGVkIEJpbmFyeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGhtbWluZ0NvZGVzRW5jb2RlSW50ZWdlclRvQmluYXJ5KG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIYW1taW5nQ29kZXM6IEVuY29kZWQgQmluYXJ5IHRvIEludGVnZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBobW1pbmdDb2Rlc0VuY29kZUJpbmFyeVRvSW50ZWdlcihucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUHJvcGVyIDItQ29sb3Jpbmcgb2YgYSBHcmFwaFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHByb3BlcjJDb2xvcmluZ09mQUdyYXBoKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJDb21wcmVzc2lvbiBJOiBSTEUgQ29tcHJlc3Npb25cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wcmVzc2lvbkkobnMsIGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkNvbXByZXNzaW9uIElJOiBMWiBEZWNvbXByZXNzaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcHJlc3Npb25JSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ29tcHJlc3Npb24gSUlJOiBMWiBDb21wcmVzc2lvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbXByZXNzaW9uSUlJKG5zLCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJFbmNyeXB0aW9uIEk6IENhZXNhciBDaXBoZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBlbmNyeXB0aW9uSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRW5jcnlwdGlvbiBJSTogVmlnZW7DqHJlIENpcGhlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGVuY3J5cHRpb25JSShucywgY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gY29udHJhY3QgdHlwZTogXCIgKyBjb250cmFjdFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IG5zLmNvZGluZ2NvbnRyYWN0LmF0dGVtcHQocmVzdWx0LCBjb250cmFjdCwgc2VydmVyKTtcclxuICAgICAgICAgICAgaWYgKHN1Y2Nlc3MgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIG5zLnRwcmludChDb2xvcnMuUkVEICsgYGZhaWxlZCB0byBzb2x2ZSBjb250cmFjdCAke2NvbnRyYWN0fSBvbiBzZXJ2ZXIgJHtzZXJ2ZXJ9YCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5zLnByaW50KENvbG9ycy5HUkVFTiArIHN1Y2Nlc3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRTaG9ydGVzdFBhdGgobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YTogbnVtYmVyW11bXSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBmdW5jdGlvbiBmaW5kV2F5KHBvc2l0aW9uOiBudW1iZXJbXSwgZW5kOiBudW1iZXJbXSwgZGF0YTogbnVtYmVyW11bXSkge1xyXG4gICAgICAgIGNvbnN0IHF1ZXVlOiBudW1iZXJbXVtdW10gPSBbXTtcclxuXHJcbiAgICAgICAgZGF0YVtwb3NpdGlvblswXV1bcG9zaXRpb25bMV1dID0gMTtcclxuICAgICAgICBxdWV1ZS5wdXNoKFtwb3NpdGlvbl0pOyAvLyBzdG9yZSBhIHBhdGgsIG5vdCBqdXN0IGEgcG9zaXRpb25cclxuXHJcbiAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHF1ZXVlLnNoaWZ0KCk7IC8vIGdldCB0aGUgcGF0aCBvdXQgb2YgdGhlIHF1ZXVlXHJcbiAgICAgICAgICAgIGlmIChwYXRoID09PSB1bmRlZmluZWQpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBwb3MgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07IC8vIC4uLiBhbmQgdGhlbiB0aGUgbGFzdCBwb3NpdGlvbiBmcm9tIGl0XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IFtcclxuICAgICAgICAgICAgICAgIFtwb3NbMF0gKyAxLCBwb3NbMV1dLFxyXG4gICAgICAgICAgICAgICAgW3Bvc1swXSwgcG9zWzFdICsgMV0sXHJcbiAgICAgICAgICAgICAgICBbcG9zWzBdIC0gMSwgcG9zWzFdXSxcclxuICAgICAgICAgICAgICAgIFtwb3NbMF0sIHBvc1sxXSAtIDFdLFxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3Rpb24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gdGhpcyBjaGVjayBmaXJzdDpcclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25baV1bMF0gPT0gZW5kWzBdICYmIGRpcmVjdGlvbltpXVsxXSA9PSBlbmRbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHBhdGggdGhhdCBsZWQgdG8gdGhlIGZpbmRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0aC5jb25jYXQoW2VuZF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25baV1bMF0gPCAwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uW2ldWzBdID49IGRhdGEubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uW2ldWzFdIDwgMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbltpXVsxXSA+PSBkYXRhWzBdLmxlbmd0aCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbZGlyZWN0aW9uW2ldWzBdXVtkaXJlY3Rpb25baV1bMV1dICE9IDBcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRhdGFbZGlyZWN0aW9uW2ldWzBdXVtkaXJlY3Rpb25baV1bMV1dID0gMTtcclxuICAgICAgICAgICAgICAgIC8vIGV4dGVuZCBhbmQgcHVzaCB0aGUgcGF0aCBvbiB0aGUgcXVldWVcclxuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gocGF0aC5jb25jYXQoW2RpcmVjdGlvbltpXV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhbm5vdGF0ZShwYXRoOiBudW1iZXJbXVtdKSB7XHJcbiAgICAgICAgLy8gV29yayB0aHJvdWdoIGVhY2ggYXJyYXkgdG8gc2VlIGlmIHdlIGNhbiBnZXQgdG8gSXRlcmF0aW9uXHJcbiAgICAgICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IFswLCAwXTtcclxuICAgICAgICBsZXQgaXRlcmF0aW9uID0gXCJcIjtcclxuXHJcbiAgICAgICAgLy8gc3RhcnQgYXQgdGhlIDJuZCBhcnJheVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBlYWNoIGFycmF5IGVsZW1lbnQgdG8gc2VlIHdoaWNoIG9uZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9zaXRpb25bMF0gPCBwYXRoW2ldWzBdKSBpdGVyYXRpb24gPSBpdGVyYXRpb24gKyBcIkRcIjtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3NpdGlvblswXSA+IHBhdGhbaV1bMF0pIGl0ZXJhdGlvbiA9IGl0ZXJhdGlvbiArIFwiVVwiO1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3NpdGlvblsxXSA8IHBhdGhbaV1bMV0pIGl0ZXJhdGlvbiA9IGl0ZXJhdGlvbiArIFwiUlwiO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvc2l0aW9uWzFdID4gcGF0aFtpXVsxXSkgaXRlcmF0aW9uID0gaXRlcmF0aW9uICsgXCJMXCI7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gPSBwYXRoW2ldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGlvbjtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGggPSBmaW5kV2F5KFswLCAwXSwgW2RhdGEubGVuZ3RoIC0gMSwgZGF0YVswXS5sZW5ndGggLSAxXSwgZGF0YSk7XHJcbiAgICBpZiAocGF0aCkgcmV0dXJuIGFubm90YXRlKHBhdGgpO1xyXG4gICAgcmV0dXJuIFwiXCI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b3RhbFdheXNUb1N1bShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkYXRhOiBudW1iZXIgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJudW1iZXJcIiB8fCBkYXRhIDwgMSkge1xyXG4gICAgICAgIG5zLnRwcmludChDb2xvcnMuUkVEICsgXCJpbnZhbGlkIGRhdGEgZm9yIGNvbnRyYWN0IFwiICsgY29udHJhY3QgKyBcIiBvbiBzZXJ2ZXIgXCIgKyBzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdW1Db21iaW5hdGlvbnModGFyZ2V0OiBudW1iZXIsIGN1cnJlbnQ6IG51bWJlcltdID0gW10sIHN0YXJ0ID0gMSwgcmVzdWx0OiBudW1iZXJbXVtdID0gW10pIHtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnQuc2xpY2UoKSk7IC8vIFB1c2ggYSBjb3B5IG9mIHRoZSBjdXJyZW50IGNvbWJpbmF0aW9uIHRvIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IHRhcmdldDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQucHVzaChpKTtcclxuICAgICAgICAgICAgc3VtQ29tYmluYXRpb25zKHRhcmdldCAtIGksIGN1cnJlbnQsIGksIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQucG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcyA9IHN1bUNvbWJpbmF0aW9ucyhkYXRhKT8uZmlsdGVyKChhcnIpID0+IGFyci5sZW5ndGggIT09IDEpLmxlbmd0aDtcclxuICAgIGlmIChyZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG5zLnRwcmludChDb2xvcnMuUkVEICsgXCJmYWlsZWQgdG8gc29sdmUgY29udHJhY3QgXCIgKyBjb250cmFjdCArIFwiIG9uIHNlcnZlciBcIiArIHNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZnVuY3Rpb24gdG90YWxXYXlzVG9TdW1JSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkYXRhID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgIGNvbnN0IHRhcmdldDogbnVtYmVyID0gZGF0YVswXTtcclxuICAgIGNvbnN0IG51bXM6IG51bWJlcltdID0gZGF0YVsxXTtcclxuXHJcbiAgICBjb25zdCBkcCA9IEFycmF5KHRhcmdldCArIDEpLmZpbGwoMCk7XHJcbiAgICBkcFswXSA9IDE7XHJcblxyXG4gICAgZm9yIChjb25zdCBudW1iZXIgb2YgbnVtcykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBudW1iZXI7IGkgPCB0YXJnZXQgKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgZHBbaV0gKz0gZHBbaSAtIG51bWJlcl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcyA9IGRwW3RhcmdldF07XHJcbiAgICBpZiAocmVzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBucy50cHJpbnQoQ29sb3JzLlJFRCArIFwiZmFpbGVkIHRvIHNvbHZlIGNvbnRyYWN0IFwiICsgY29udHJhY3QgKyBcIiBvbiBzZXJ2ZXIgXCIgKyBzZXJ2ZXIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kQWxsVmFsaWRNYXRoRXhwcmVzc2lvbnMobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgZnVuY3Rpb24gb3BTdHIobXU6IG51bWJlciwgbGVuOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBvcHMgPSBbXCJcIiwgXCItXCIsIFwiK1wiLCBcIipcIl07XHJcbiAgICAgICAgY29uc3Qgczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICB3aGlsZSAobXUgPj0gNCkge1xyXG4gICAgICAgICAgICBzLnB1c2gob3BzW211ICUgNF0pO1xyXG4gICAgICAgICAgICBtdSAtPSBtdSAlIDQ7XHJcbiAgICAgICAgICAgIG11IC89IDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMucHVzaChvcHNbbXVdKTtcclxuICAgICAgICB3aGlsZSAocy5sZW5ndGggPCBsZW4pIHtcclxuICAgICAgICAgICAgcy5wdXNoKG9wc1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzO1xyXG4gICAgfVxyXG4gICAgLy8gW1wiMDEyMzQ1XCIsIE5dLCB3aGVyZSBOIGlzIHRoZSBhc3NlcnRpb25cclxuICAgIC8vIGVhY2ggZ2FwIGJldHdlZW4gdHdvIGRpZ2l0cyBjYW4gYmUgb25lIG9mIDQgdGhpbmdzIChibGFuaywgLSwgKywgKiksXHJcbiAgICAvLyBzbyB0aGVyZSBhcmUgNF5kIHBlcm11dGF0aW9ucywgd2hlcmUgZD1sZW5ndGgtMVxyXG4gICAgY29uc3QgYW5zd2VycyA9IFtdO1xyXG4gICAgY29uc3QgZGlnaXRzID0gZGF0YVswXTtcclxuICAgIGNvbnN0IGFzc2VydGlvbiA9IGRhdGFbMV07XHJcblxyXG4gICAgY29uc3QgcGVybXV0YXRpb25zID0gTWF0aC5wb3coNCwgZGlnaXRzLmxlbmd0aCAtIDEpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJtdXRhdGlvbnM7IGkrKykge1xyXG4gICAgICAgIC8vIHR1cm4gdGhlIHBlcm11dGF0aW9uIG51bWJlciBpbnRvIGEgbGlzdCBvZiBvcGVyYXRvcnNcclxuICAgICAgICBjb25zdCBvcHMgPSBvcFN0cihpLCBkaWdpdHMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgLy8gaW50ZXJsZWF2ZSBkaWdpdHMgYW5kIG9wc1xyXG4gICAgICAgIGxldCBleHByID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9wcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICBleHByICs9IGRpZ2l0c1tqXSArIG9wc1tqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXhwciArPSBkaWdpdHNbb3BzLmxlbmd0aF07XHJcbiAgICAgICAgLy8gbGVhZGluZyAwcyBzb21ldGltZXMgdGhyb3cgYW4gZXJyb3IgYWJvdXQgb2N0YWxzXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGV2YWwoZXhwcikgPT0gYXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBhbnN3ZXJzLnB1c2goZXhwcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIG5zLnRwcmludChcIkVycm9yIHdoaWxlIHNvbHZpbmcgZmluZEFsbFZhbGlkTWF0aEV4cHJlc3Npb25zOiBcIiArIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYW5zd2VycztcclxufVxyXG5cclxuZnVuY3Rpb24gYWxnb3JpdGhtaWNTdG9ja1RyYWRlckkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBsZXQgbWF4Q3VyID0gMDtcclxuICAgIGxldCBtYXhTb0ZhciA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBtYXhDdXIgPSBNYXRoLm1heCgwLCAobWF4Q3VyICs9IGRhdGFbaV0gLSBkYXRhW2kgLSAxXSkpO1xyXG4gICAgICAgIG1heFNvRmFyID0gTWF0aC5tYXgobWF4Q3VyLCBtYXhTb0Zhcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1heFNvRmFyLnRvU3RyaW5nKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdG9ja1ByaWNlOiBudW1iZXJbXSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgc3RvY2tQcmljZS5wdXNoKDApO1xyXG5cclxuICAgIGxldCBwcm9maXQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9ja1ByaWNlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHN0b2NrUHJpY2VbaV0gPCBzdG9ja1ByaWNlW2kgKyAxXSkge1xyXG4gICAgICAgICAgICBwcm9maXQgKz0gc3RvY2tQcmljZVtpICsgMV0gLSBzdG9ja1ByaWNlW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm9maXQgPSBNYXRoLm1heChwcm9maXQsIDApO1xyXG5cclxuICAgIHJldHVybiBwcm9maXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbGdvcml0aG1pY1N0b2NrVHJhZGVySUlJKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN0b2NrUHJpY2U6IG51bWJlcltdID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuXHJcbiAgICBsZXQgaG9sZDEgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUjtcclxuICAgIGxldCBob2xkMiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSO1xyXG4gICAgbGV0IHJlbGVhc2UxID0gMDtcclxuICAgIGxldCByZWxlYXNlMiA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IHByaWNlIG9mIHN0b2NrUHJpY2UpIHtcclxuICAgICAgICByZWxlYXNlMiA9IE1hdGgubWF4KHJlbGVhc2UyLCBob2xkMiArIHByaWNlKTtcclxuICAgICAgICBob2xkMiA9IE1hdGgubWF4KGhvbGQyLCByZWxlYXNlMSAtIHByaWNlKTtcclxuICAgICAgICByZWxlYXNlMSA9IE1hdGgubWF4KHJlbGVhc2UxLCBob2xkMSArIHByaWNlKTtcclxuICAgICAgICBob2xkMSA9IE1hdGgubWF4KGhvbGQxLCBwcmljZSAqIC0xKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVsZWFzZTI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFsZ29yaXRobWljU3RvY2tUcmFkZXJJVihuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkYXRhID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgIGNvbnN0IGs6IG51bWJlciA9IGRhdGFbMF07XHJcbiAgICBjb25zdCBwcmljZXM6IG51bWJlcltdID0gZGF0YVsxXTtcclxuXHJcbiAgICBjb25zdCBsZW4gPSBwcmljZXMubGVuZ3RoO1xyXG5cclxuICAgIGNvbnN0IGhvbGQ6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCByZWxlOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgaG9sZC5sZW5ndGggPSBrICsgMTtcclxuICAgIHJlbGUubGVuZ3RoID0gayArIDE7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBrOyArK2kpIHtcclxuICAgICAgICBob2xkW2ldID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XHJcbiAgICAgICAgcmVsZVtpXSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGN1cjogbnVtYmVyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgIGN1ciA9IHByaWNlc1tpXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gazsgaiA+IDA7IC0taikge1xyXG4gICAgICAgICAgICByZWxlW2pdID0gTWF0aC5tYXgocmVsZVtqXSwgaG9sZFtqXSArIGN1cik7XHJcbiAgICAgICAgICAgIGhvbGRbal0gPSBNYXRoLm1heChob2xkW2pdLCByZWxlW2ogLSAxXSAtIGN1cik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZWxlW2tdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtaW5pbXVtUGF0aFN1bUluQVRyaWFuZ2xlKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHRyaWFuZ2xlOiBudW1iZXJbXVtdID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgIG5zLnByaW50KHRyaWFuZ2xlKTtcclxuXHJcbiAgICBjb25zdCBuOiBudW1iZXIgPSB0cmlhbmdsZS5sZW5ndGg7XHJcbiAgICBjb25zdCBkcDogbnVtYmVyW10gPSB0cmlhbmdsZVtuIC0gMV0uc2xpY2UoKTtcclxuICAgIGZvciAobGV0IGkgPSBuIC0gMjsgaSA+IC0xOyAtLWkpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRyaWFuZ2xlW2ldLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGRwW2pdID0gTWF0aC5taW4oZHBbal0sIGRwW2ogKyAxXSkgKyB0cmlhbmdsZVtpXVtqXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRwWzBdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdWJhcnJheXdpdGhNYXhpbXVtU3VtKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGE6IG51bWJlcltdID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuXHJcbiAgICBsZXQgbWF4U3VtID0gLUluZmluaXR5O1xyXG4gICAgbGV0IGN1cnJlbnRTdW0gPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGN1cnJlbnRTdW0gPSBNYXRoLm1heChkYXRhW2ldLCBjdXJyZW50U3VtICsgZGF0YVtpXSk7XHJcbiAgICAgICAgbWF4U3VtID0gTWF0aC5tYXgobWF4U3VtLCBjdXJyZW50U3VtKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWF4U3VtO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1bmlxdWVQYXRoc0luQUdyaWRJKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgY29uc3QgbjogbnVtYmVyID0gZGF0YVswXTsgLy8gTnVtYmVyIG9mIHJvd3NcclxuICAgIGNvbnN0IG06IG51bWJlciA9IGRhdGFbMV07IC8vIE51bWJlciBvZiBjb2x1bW5zXHJcbiAgICBjb25zdCBjdXJyZW50Um93OiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY3VycmVudFJvdy5sZW5ndGggPSBuO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgY3VycmVudFJvd1tpXSA9IDE7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCByb3cgPSAxOyByb3cgPCBtOyByb3crKykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRSb3dbaV0gKz0gY3VycmVudFJvd1tpIC0gMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyZW50Um93W24gLSAxXTtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5pcXVlUGF0aHNJbkFHcmlkSUkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBjb25zdCBvYnN0YWNsZUdyaWQ6IG51bWJlcltdW10gPSBbXTtcclxuICAgIG9ic3RhY2xlR3JpZC5sZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JzdGFjbGVHcmlkLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgb2JzdGFjbGVHcmlkW2ldID0gZGF0YVtpXS5zbGljZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JzdGFjbGVHcmlkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvYnN0YWNsZUdyaWRbMF0ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKG9ic3RhY2xlR3JpZFtpXVtqXSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBvYnN0YWNsZUdyaWRbaV1bal0gPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gMCAmJiBqID09IDApIHtcclxuICAgICAgICAgICAgICAgIG9ic3RhY2xlR3JpZFswXVswXSA9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvYnN0YWNsZUdyaWRbaV1bal0gPSAoaSA+IDAgPyBvYnN0YWNsZUdyaWRbaSAtIDFdW2pdIDogMCkgKyAoaiA+IDAgPyBvYnN0YWNsZUdyaWRbaV1baiAtIDFdIDogMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9ic3RhY2xlR3JpZFtvYnN0YWNsZUdyaWQubGVuZ3RoIC0gMV1bb2JzdGFjbGVHcmlkWzBdLmxlbmd0aCAtIDFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUlQQWRkcmVzc2VzKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgY29uc3QgcmV0OiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgYSA9IDE7IGEgPD0gMzsgKythKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYiA9IDE7IGIgPD0gMzsgKytiKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGMgPSAxOyBjIDw9IDM7ICsrYykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZCA9IDE7IGQgPD0gMzsgKytkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgKyBiICsgYyArIGQgPT09IGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEEgPSBwYXJzZUludChkYXRhLnN1YnN0cmluZygwLCBhKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBCID0gcGFyc2VJbnQoZGF0YS5zdWJzdHJpbmcoYSwgYSArIGIpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEMgPSBwYXJzZUludChkYXRhLnN1YnN0cmluZyhhICsgYiwgYSArIGIgKyBjKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBEID0gcGFyc2VJbnQoZGF0YS5zdWJzdHJpbmcoYSArIGIgKyBjLCBhICsgYiArIGMgKyBkKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQSA8PSAyNTUgJiYgQiA8PSAyNTUgJiYgQyA8PSAyNTUgJiYgRCA8PSAyNTUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlwOiBzdHJpbmcgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlwLmxlbmd0aCA9PT0gZGF0YS5sZW5ndGggKyAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnB1c2goaXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuY3J5cHRpb25JKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIC8vIGRhdGEgPSBbcGxhaW50ZXh0LCBzaGlmdCB2YWx1ZV1cclxuICAgIC8vIGJ1aWxkIGNoYXIgYXJyYXksIHNoaWZ0aW5nIHZpYSBtYXAgYW5kIGpvaW4gdG8gZmluYWwgcmVzdWx0c1xyXG4gICAgY29uc3QgY2lwaGVyID0gWy4uLmRhdGFbMF1dXHJcbiAgICAgICAgLm1hcCgoYSkgPT4gKGEgPT09IFwiIFwiID8gYSA6IFN0cmluZy5mcm9tQ2hhckNvZGUoKChhLmNoYXJDb2RlQXQoMCkgLSA2NSAtIGRhdGFbMV0gKyAyNikgJSAyNikgKyA2NSkpKVxyXG4gICAgICAgIC5qb2luKFwiXCIpO1xyXG4gICAgcmV0dXJuIGNpcGhlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5jcnlwdGlvbklJKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgLy8gYnVpbGQgY2hhciBhcnJheSwgc2hpZnRpbmcgdmlhIG1hcCBhbmQgY29ycmVzcG9uZGluZyBrZXl3b3JkIGxldHRlciBhbmQgam9pbiB0byBmaW5hbCByZXN1bHRzXHJcbiAgICBjb25zdCBjaXBoZXIgPSBbLi4uZGF0YVswXV1cclxuICAgICAgICAubWFwKChhLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBhID09PSBcIiBcIlxyXG4gICAgICAgICAgICAgICAgPyBhXHJcbiAgICAgICAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoKChhLmNoYXJDb2RlQXQoMCkgLSAyICogNjUgKyBkYXRhWzFdLmNoYXJDb2RlQXQoaSAlIGRhdGFbMV0ubGVuZ3RoKSkgJSAyNikgKyA2NSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuam9pbihcIlwiKTtcclxuICAgIHJldHVybiBjaXBoZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhbml0aXplUGFyZW50aGVzZXNJbkV4cHJlc3Npb24obnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihcInNvbHZlciBleHBlY3RlZCBzdHJpbmdcIik7XHJcbiAgICBsZXQgbGVmdCA9IDA7XHJcbiAgICBsZXQgcmlnaHQgPSAwO1xyXG4gICAgY29uc3QgcmVzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGlmIChkYXRhW2ldID09PSBcIihcIikge1xyXG4gICAgICAgICAgICArK2xlZnQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhW2ldID09PSBcIilcIikge1xyXG4gICAgICAgICAgICBsZWZ0ID4gMCA/IC0tbGVmdCA6ICsrcmlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRmcyhcclxuICAgICAgICBwYWlyOiBudW1iZXIsXHJcbiAgICAgICAgaW5kZXg6IG51bWJlcixcclxuICAgICAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICAgICAgcmlnaHQ6IG51bWJlcixcclxuICAgICAgICBzOiBzdHJpbmcsXHJcbiAgICAgICAgc29sdXRpb246IHN0cmluZyxcclxuICAgICAgICByZXM6IHN0cmluZ1tdLFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHMubGVuZ3RoID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAobGVmdCA9PT0gMCAmJiByaWdodCA9PT0gMCAmJiBwYWlyID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNbaV0gPT09IHNvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaChzb2x1dGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNbaW5kZXhdID09PSBcIihcIikge1xyXG4gICAgICAgICAgICBpZiAobGVmdCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGRmcyhwYWlyLCBpbmRleCArIDEsIGxlZnQgLSAxLCByaWdodCwgcywgc29sdXRpb24sIHJlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGZzKHBhaXIgKyAxLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc1tpbmRleF0gPT09IFwiKVwiKSB7XHJcbiAgICAgICAgICAgIGlmIChyaWdodCA+IDApIGRmcyhwYWlyLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0IC0gMSwgcywgc29sdXRpb24sIHJlcyk7XHJcbiAgICAgICAgICAgIGlmIChwYWlyID4gMCkgZGZzKHBhaXIgLSAxLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRmcyhwYWlyLCBpbmRleCArIDEsIGxlZnQsIHJpZ2h0LCBzLCBzb2x1dGlvbiArIHNbaW5kZXhdLCByZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkZnMoMCwgMCwgbGVmdCwgcmlnaHQsIGRhdGEsIFwiXCIsIHJlcyk7XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcHJlc3Npb25JKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJzb2x2ZXIgZXhwZWN0ZWQgc3RyaW5nXCIpO1xyXG5cclxuICAgIGxldCBwb3MgPSAwO1xyXG4gICAgbGV0IGkgPSAxO1xyXG4gICAgY29uc3QgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XHJcbiAgICBsZXQgY29tcHJlc3Npb24gPSBcIlwiO1xyXG5cclxuICAgIC8vIGdvIHRocm91Z2ggZWFjaCBsZXR0ZXJcclxuICAgIHdoaWxlIChwb3MgPCBsZW5ndGgpIHtcclxuICAgICAgICAvLyBDaGVjayBlYWNoIGxldHRlciB0byBzZWUgaWYgaXQgbWF0Y2hlcyB0aGUgbmV4dFxyXG4gICAgICAgIGlmIChkYXRhLmNoYXJBdChwb3MpID09IGRhdGEuY2hhckF0KHBvcyArIDEpKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBhIHBvc2l0aW9uIGluY3JlYXNlIGZvciB0aGF0IGxldHRlclxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiAxMCBpdGVyYXRpb25zXHJcbiAgICAgICAgICAgIGlmIChpID4gOSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgOSdzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcGxpdCA9IE1hdGguZmxvb3IoaSAvIDkpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBzcGxpdDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHJlc3Npb24gKz0gXCI5XCIgKyBkYXRhLmNoYXJBdChwb3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9BZGQgdGhlIHJlbWFpbmluZyBudW1iZXIgbGVmdFxyXG4gICAgICAgICAgICAgICAgY29tcHJlc3Npb24gKz0gaSAtIHNwbGl0ICogOSArIGRhdGEuY2hhckF0KHBvcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbmV4dCBsZXR0ZXIgZG9lc24ndCBtYXRjaCB0aGVuIHdlIG5lZWQgdG8gd3JpdGUgb3V0IHRvIHRoZSBjb21wcmVzc2lvbiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uICs9IGkgKyBkYXRhLmNoYXJBdChwb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb3MrKztcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wcmVzc2lvbjtcclxufVxyXG5cclxuZnVuY3Rpb24gY29tcHJlc3Npb25JSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjb21wciA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgbGV0IHBsYWluID0gXCJcIjtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXByLmxlbmd0aDsgKSB7XHJcbiAgICAgICAgY29uc3QgbGl0ZXJhbF9sZW5ndGggPSBjb21wci5jaGFyQ29kZUF0KGkpIC0gMHgzMDtcclxuXHJcbiAgICAgICAgaWYgKGxpdGVyYWxfbGVuZ3RoIDwgMCB8fCBsaXRlcmFsX2xlbmd0aCA+IDkgfHwgaSArIDEgKyBsaXRlcmFsX2xlbmd0aCA+IGNvbXByLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBsYWluICs9IGNvbXByLnN1YnN0cmluZyhpICsgMSwgaSArIDEgKyBsaXRlcmFsX2xlbmd0aCk7XHJcbiAgICAgICAgaSArPSAxICsgbGl0ZXJhbF9sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmIChpID49IGNvbXByLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmFja3JlZl9sZW5ndGggPSBjb21wci5jaGFyQ29kZUF0KGkpIC0gMHgzMDtcclxuXHJcbiAgICAgICAgaWYgKGJhY2tyZWZfbGVuZ3RoIDwgMCB8fCBiYWNrcmVmX2xlbmd0aCA+IDkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChiYWNrcmVmX2xlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGkgKyAxID49IGNvbXByLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2tyZWZfb2Zmc2V0ID0gY29tcHIuY2hhckNvZGVBdChpICsgMSkgLSAweDMwO1xyXG4gICAgICAgICAgICBpZiAoKGJhY2tyZWZfbGVuZ3RoID4gMCAmJiAoYmFja3JlZl9vZmZzZXQgPCAxIHx8IGJhY2tyZWZfb2Zmc2V0ID4gOSkpIHx8IGJhY2tyZWZfb2Zmc2V0ID4gcGxhaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBiYWNrcmVmX2xlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBwbGFpbiArPSBwbGFpbltwbGFpbi5sZW5ndGggLSBiYWNrcmVmX29mZnNldF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGkgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBsYWluO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wcmVzc2lvbklJSShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBwbGFpbiA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcbiAgICBpZiAodHlwZW9mIHBsYWluICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJzb2x2ZXIgZXhwZWN0ZWQgc3RyaW5nXCIpO1xyXG5cclxuICAgIC8vIGZvciBzdGF0ZVtpXVtqXTpcclxuICAgIC8vICAgICAgaWYgaSBpcyAwLCB3ZSdyZSBhZGRpbmcgYSBsaXRlcmFsIG9mIGxlbmd0aCBqXHJcbiAgICAvLyAgICAgIGVsc2UsIHdlJ3JlIGFkZGluZyBhIGJhY2tyZWZlcmVuY2Ugb2Ygb2Zmc2V0IGkgYW5kIGxlbmd0aCBqXHJcbiAgICBsZXQgY3VyX3N0YXRlOiAoc3RyaW5nIHwgbnVsbClbXVtdID0gQXJyYXkuZnJvbShBcnJheSgxMCksICgpID0+IEFycmF5KDEwKS5maWxsKG51bGwpKTtcclxuICAgIGxldCBuZXdfc3RhdGU6IChzdHJpbmcgfCBudWxsKVtdW10gPSBBcnJheS5mcm9tKEFycmF5KDEwKSwgKCkgPT4gQXJyYXkoMTApKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXQoc3RhdGU6IChzdHJpbmcgfCBudWxsKVtdW10sIGk6IG51bWJlciwgajogbnVtYmVyLCBzdHI6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBzdGF0ZVtpXVtqXTtcclxuICAgICAgICBpZiAoY3VycmVudCA9PSBudWxsIHx8IHN0ci5sZW5ndGggPCBjdXJyZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzdGF0ZVtpXVtqXSA9IHN0cjtcclxuICAgICAgICB9IGVsc2UgaWYgKHN0ci5sZW5ndGggPT09IGN1cnJlbnQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuICAgICAgICAgICAgLy8gaWYgdHdvIHN0cmluZ3MgYXJlIHRoZSBzYW1lIGxlbmd0aCwgcGljayByYW5kb21seSBzbyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHdlIGdlbmVyYXRlIG1vcmUgcG9zc2libGUgaW5wdXRzIHRvIENvbXByZXNzaW9uIElJXHJcbiAgICAgICAgICAgIHN0YXRlW2ldW2pdID0gc3RyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBpbml0aWFsIHN0YXRlIGlzIGEgbGl0ZXJhbCBvZiBsZW5ndGggMVxyXG4gICAgY3VyX3N0YXRlWzBdWzFdID0gXCJcIjtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBsYWluLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCByb3cgb2YgbmV3X3N0YXRlKSB7XHJcbiAgICAgICAgICAgIHJvdy5maWxsKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjID0gcGxhaW5baV07XHJcblxyXG4gICAgICAgIC8vIGhhbmRsZSBsaXRlcmFsc1xyXG4gICAgICAgIGZvciAobGV0IGxlbmd0aCA9IDE7IGxlbmd0aCA8PSA5OyArK2xlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBzdHJpbmcgPSBjdXJfc3RhdGVbMF1bbGVuZ3RoXTtcclxuICAgICAgICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGV4dGVuZCBjdXJyZW50IGxpdGVyYWxcclxuICAgICAgICAgICAgICAgIHNldChuZXdfc3RhdGUsIDAsIGxlbmd0aCArIDEsIHN0cmluZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgc2V0KG5ld19zdGF0ZSwgMCwgMSwgc3RyaW5nICsgXCI5XCIgKyBwbGFpbi5zdWJzdHJpbmcoaSAtIDksIGkpICsgXCIwXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAxOyBvZmZzZXQgPD0gTWF0aC5taW4oOSwgaSk7ICsrb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxhaW5baSAtIG9mZnNldF0gPT09IGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgYmFja3JlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldChuZXdfc3RhdGUsIG9mZnNldCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBwbGFpbi5zdWJzdHJpbmcoaSAtIGxlbmd0aCwgaSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoYW5kbGUgYmFja3JlZmVyZW5jZXNcclxuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAxOyBvZmZzZXQgPD0gOTsgKytvZmZzZXQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbGVuZ3RoID0gMTsgbGVuZ3RoIDw9IDk7ICsrbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmcgPSBjdXJfc3RhdGVbb2Zmc2V0XVtsZW5ndGhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBsYWluW2kgLSBvZmZzZXRdID09PSBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXh0ZW5kIGN1cnJlbnQgYmFja3JlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQobmV3X3N0YXRlLCBvZmZzZXQsIGxlbmd0aCArIDEsIHN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KG5ld19zdGF0ZSwgb2Zmc2V0LCAxLCBzdHJpbmcgKyBcIjlcIiArIFN0cmluZyhvZmZzZXQpICsgXCIwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBuZXcgbGl0ZXJhbFxyXG4gICAgICAgICAgICAgICAgc2V0KG5ld19zdGF0ZSwgMCwgMSwgc3RyaW5nICsgU3RyaW5nKGxlbmd0aCkgKyBTdHJpbmcob2Zmc2V0KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZW5kIGN1cnJlbnQgYmFja3JlZmVyZW5jZSBhbmQgc3RhcnQgbmV3IGJhY2tyZWZlcmVuY2VcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IG5ld19vZmZzZXQgPSAxOyBuZXdfb2Zmc2V0IDw9IE1hdGgubWluKDksIGkpOyArK25ld19vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGxhaW5baSAtIG5ld19vZmZzZXRdID09PSBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldChuZXdfc3RhdGUsIG5ld19vZmZzZXQsIDEsIHN0cmluZyArIFN0cmluZyhsZW5ndGgpICsgU3RyaW5nKG9mZnNldCkgKyBcIjBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0bXBfc3RhdGUgPSBuZXdfc3RhdGU7XHJcbiAgICAgICAgbmV3X3N0YXRlID0gY3VyX3N0YXRlO1xyXG4gICAgICAgIGN1cl9zdGF0ZSA9IHRtcF9zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGxldCBsZW4gPSAxOyBsZW4gPD0gOTsgKytsZW4pIHtcclxuICAgICAgICBsZXQgc3RyaW5nID0gY3VyX3N0YXRlWzBdW2xlbl07XHJcbiAgICAgICAgaWYgKHN0cmluZyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RyaW5nICs9IFN0cmluZyhsZW4pICsgcGxhaW4uc3Vic3RyaW5nKHBsYWluLmxlbmd0aCAtIGxlbiwgcGxhaW4ubGVuZ3RoKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09IG51bGwgfHwgc3RyaW5nLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gc3RyaW5nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmxlbmd0aCA9PSByZXN1bHQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBvZmZzZXQgPSAxOyBvZmZzZXQgPD0gOTsgKytvZmZzZXQpIHtcclxuICAgICAgICBmb3IgKGxldCBsZW4gPSAxOyBsZW4gPD0gOTsgKytsZW4pIHtcclxuICAgICAgICAgICAgbGV0IHN0cmluZyA9IGN1cl9zdGF0ZVtvZmZzZXRdW2xlbl07XHJcbiAgICAgICAgICAgIGlmIChzdHJpbmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcobGVuKSArIFwiXCIgKyBTdHJpbmcob2Zmc2V0KTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsIHx8IHN0cmluZy5sZW5ndGggPCByZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzdHJpbmc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmxlbmd0aCA9PSByZXN1bHQubGVuZ3RoICYmIE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0cmluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzdWx0ID09IG51bGwpIHRocm93IG5ldyBFcnJvcihcIm5vIHJlc3VsdCBmb3VuZFwiKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuXHJcbmZ1bmN0aW9uIGhtbWluZ0NvZGVzRW5jb2RlSW50ZWdlclRvQmluYXJ5KG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgRXJyb3IoXCJzb2x2ZXIgZXhwZWN0ZWQgbnVtYmVyXCIpO1xyXG5cclxuICAgIGNvbnN0IGVuYzogbnVtYmVyW10gPSBbMF07XHJcbiAgICBjb25zdCBkYXRhX2JpdHM6IGFueVtdID0gZGF0YS50b1N0cmluZygyKS5zcGxpdChcIlwiKS5yZXZlcnNlKCk7XHJcblxyXG4gICAgZGF0YV9iaXRzLmZvckVhY2goKGUsIGksIGEpID0+IHtcclxuICAgICAgICBhW2ldID0gcGFyc2VJbnQoZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgayA9IGRhdGFfYml0cy5sZW5ndGg7XHJcblxyXG4gICAgLyogTk9URTogd3JpdGluZyB0aGUgZGF0YSBsaWtlIHRoaXMgZmxpcHMgdGhlIGVuZGlhbm5lc3MsIHRoaXMgaXMgd2hhdCB0aGVcclxuICAgICAqIG9yaWdpbmFsIGltcGxlbWVudGF0aW9uIGJ5IEhlZHJhdXRhIGRpZCBzbyBJJ20ga2VlcGluZyBpdCBsaWtlIGl0IHdhcy4gKi9cclxuICAgIGZvciAobGV0IGkgPSAxOyBrID4gMDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKChpICYgKGkgLSAxKSkgIT0gMCkge1xyXG4gICAgICAgICAgICBlbmNbaV0gPSBkYXRhX2JpdHNbLS1rXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbmNbaV0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGFyaXR5OiBhbnkgPSAwO1xyXG4gICAgLyogRmlndXJlIG91dCB0aGUgc3Vic2VjdGlvbiBwYXJpdGllcyAqL1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoZW5jW2ldKSB7XHJcbiAgICAgICAgICAgIHBhcml0eSBePSBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJpdHkgPSBwYXJpdHkudG9TdHJpbmcoMikuc3BsaXQoXCJcIikucmV2ZXJzZSgpO1xyXG4gICAgcGFyaXR5LmZvckVhY2goKGU6IGFueSwgaTogYW55LCBhOiBhbnkpID0+IHtcclxuICAgICAgICBhW2ldID0gcGFyc2VJbnQoZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBTZXQgdGhlIHBhcml0eSBiaXRzIGFjY29yZGluZ2x5ICovXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcml0eS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGVuY1syICoqIGldID0gcGFyaXR5W2ldID8gMSA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyaXR5ID0gMDtcclxuICAgIC8qIEZpZ3VyZSBvdXQgdGhlIG92ZXJhbGwgcGFyaXR5IGZvciB0aGUgZW50aXJlIGJsb2NrICovXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuYy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChlbmNbaV0pIHtcclxuICAgICAgICAgICAgcGFyaXR5Kys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIEZpbmFsbHkgc2V0IHRoZSBvdmVyYWxsIHBhcml0eSBiaXQgKi9cclxuICAgIGVuY1swXSA9IHBhcml0eSAlIDIgPT0gMCA/IDAgOiAxO1xyXG5cclxuICAgIHJldHVybiBlbmMuam9pbihcIlwiKTtcclxufVxyXG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuXHJcbmZ1bmN0aW9uIGhtbWluZ0NvZGVzRW5jb2RlQmluYXJ5VG9JbnRlZ2VyKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoXCJzb2x2ZXIgZXhwZWN0ZWQgc3RyaW5nXCIpO1xyXG5cclxuICAgIGxldCBlcnIgPSAwO1xyXG4gICAgY29uc3QgYml0czogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAvKiBUT0RPIHdoeSBub3QganVzdCB3b3JrIHdpdGggYW4gYXJyYXkgb2YgZGlnaXRzIGZyb20gdGhlIHN0YXJ0PyAqL1xyXG4gICAgZm9yIChjb25zdCBpIGluIGRhdGEuc3BsaXQoXCJcIikpIHtcclxuICAgICAgICBjb25zdCBiaXQgPSBwYXJzZUludChkYXRhW2ldKTtcclxuICAgICAgICBiaXRzW2ldID0gYml0O1xyXG5cclxuICAgICAgICBpZiAoYml0KSB7XHJcbiAgICAgICAgICAgIGVyciBePSAraTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyogSWYgZXJyICE9IDAgdGhlbiBpdCBzcGVsbHMgb3V0IHRoZSBpbmRleCBvZiB0aGUgYml0IHRoYXQgd2FzIGZsaXBwZWQgKi9cclxuICAgIGlmIChlcnIpIHtcclxuICAgICAgICAvKiBGbGlwIHRvIGNvcnJlY3QgKi9cclxuICAgICAgICBiaXRzW2Vycl0gPSBiaXRzW2Vycl0gPyAwIDogMTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBOb3cgd2UgaGF2ZSB0byByZWFkIHRoZSBtZXNzYWdlLCBiaXQgMCBpcyB1bnVzZWQgKGl0J3MgdGhlIG92ZXJhbGwgcGFyaXR5IGJpdFxyXG4gICAgICogd2hpY2ggd2UgZG9uJ3QgY2FyZSBhYm91dCkuIEVhY2ggYml0IGF0IGFuIGluZGV4IHRoYXQgaXMgYSBwb3dlciBvZiAyIGlzXHJcbiAgICAgKiBhIHBhcml0eSBiaXQgYW5kIG5vdCBwYXJ0IG9mIHRoZSBhY3R1YWwgbWVzc2FnZS4gKi9cclxuXHJcbiAgICBsZXQgYW5zID0gXCJcIjtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGJpdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvKiBpIGlzIG5vdCBhIHBvd2VyIG9mIHR3byBzbyBpdCdzIG5vdCBhIHBhcml0eSBiaXQgKi9cclxuICAgICAgICBpZiAoKGkgJiAoaSAtIDEpKSAhPSAwKSB7XHJcbiAgICAgICAgICAgIGFucyArPSBiaXRzW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiBUT0RPIHRvIGF2b2lkIGFtYmlndWl0eSBhYm91dCBlbmRpYW5uZXNzIHdoeSBub3QgbGV0IHRoZSBwbGF5ZXIgcmV0dXJuIHRoZSBleHRyYWN0ZWQgKGFuZCBjb3JyZWN0ZWQpXHJcbiAgICAgKiBkYXRhIGJpdHMsIHJhdGhlciB0aGFuIGd1ZXNzaW5nIGF0IGhvdyB0byBjb252ZXJ0IGl0IHRvIGEgZGVjaW1hbCBzdHJpbmc/ICovXHJcbiAgICByZXR1cm4gcGFyc2VJbnQoYW5zLCAyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXJyYXlKdW1waW5nR2FtZShuczogTlMsIGNvbnRyYWN0OiBzdHJpbmcsIHNlcnZlcjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBkYXRhID0gbnMuY29kaW5nY29udHJhY3QuZ2V0RGF0YShjb250cmFjdCwgc2VydmVyKTtcclxuICAgIGNvbnN0IG46IG51bWJlciA9IGRhdGEubGVuZ3RoO1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgZm9yIChsZXQgcmVhY2ggPSAwOyBpIDwgbiAmJiBpIDw9IHJlYWNoOyArK2kpIHtcclxuICAgICAgICByZWFjaCA9IE1hdGgubWF4KGkgKyBkYXRhW2ldLCByZWFjaCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzb2x1dGlvbjogYm9vbGVhbiA9IGkgPT09IG47XHJcbiAgICByZXR1cm4gc29sdXRpb24gPyBcIjFcIiA6IFwiMFwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhcnJheUp1bXBpbmdHYW1lSUkobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgY29uc3QgbjogbnVtYmVyID0gZGF0YS5sZW5ndGg7XHJcbiAgICBsZXQgcmVhY2ggPSAwO1xyXG4gICAgbGV0IGp1bXBzID0gMDtcclxuICAgIGxldCBsYXN0SnVtcCA9IC0xO1xyXG4gICAgd2hpbGUgKHJlYWNoIDwgbiAtIDEpIHtcclxuICAgICAgICBsZXQganVtcGVkRnJvbSA9IC0xO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSByZWFjaDsgaSA+IGxhc3RKdW1wOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKGkgKyBkYXRhW2ldID4gcmVhY2gpIHtcclxuICAgICAgICAgICAgICAgIHJlYWNoID0gaSArIGRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICBqdW1wZWRGcm9tID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoanVtcGVkRnJvbSA9PT0gLTEpIHtcclxuICAgICAgICAgICAganVtcHMgPSAwO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdEp1bXAgPSBqdW1wZWRGcm9tO1xyXG4gICAgICAgIGp1bXBzKys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ganVtcHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnQyREFycmF5VG9TdHJpbmcoYXJyOiB1bmtub3duW11bXSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBjb21wb25lbnRzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgYXJyLmZvckVhY2goKGU6IHVua25vd24pID0+IHtcclxuICAgICAgICBsZXQgcyA9IFN0cmluZyhlKTtcclxuICAgICAgICBzID0gW1wiW1wiLCBzLCBcIl1cIl0uam9pbihcIlwiKTtcclxuICAgICAgICBjb21wb25lbnRzLnB1c2gocyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50cy5qb2luKFwiLFwiKS5yZXBsYWNlKC9cXHMvZywgXCJcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlT3ZlcmxhcHBpbmdJbnRlcnZhbHMobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgY29uc3QgaW50ZXJ2YWxzOiBudW1iZXJbXVtdID0gZGF0YS5zbGljZSgpO1xyXG4gICAgaW50ZXJ2YWxzLnNvcnQoKGE6IG51bWJlcltdLCBiOiBudW1iZXJbXSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdDogbnVtYmVyW11bXSA9IFtdO1xyXG4gICAgbGV0IHN0YXJ0OiBudW1iZXIgPSBpbnRlcnZhbHNbMF1bMF07XHJcbiAgICBsZXQgZW5kOiBudW1iZXIgPSBpbnRlcnZhbHNbMF1bMV07XHJcbiAgICBmb3IgKGNvbnN0IGludGVydmFsIG9mIGludGVydmFscykge1xyXG4gICAgICAgIGlmIChpbnRlcnZhbFswXSA8PSBlbmQpIHtcclxuICAgICAgICAgICAgZW5kID0gTWF0aC5tYXgoZW5kLCBpbnRlcnZhbFsxXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goW3N0YXJ0LCBlbmRdKTtcclxuICAgICAgICAgICAgc3RhcnQgPSBpbnRlcnZhbFswXTtcclxuICAgICAgICAgICAgZW5kID0gaW50ZXJ2YWxbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzdWx0LnB1c2goW3N0YXJ0LCBlbmRdKTtcclxuXHJcbiAgICBjb25zdCBzYW5pdGl6ZWRSZXN1bHQ6IHN0cmluZyA9IGNvbnZlcnQyREFycmF5VG9TdHJpbmcocmVzdWx0KTtcclxuICAgIHJldHVybiBzYW5pdGl6ZWRSZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb3BlcjJDb2xvcmluZ09mQUdyYXBoKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGE6IFtudW1iZXIsIFtudW1iZXIsIG51bWJlcl1bXV0gPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG5cclxuICAgIC8vSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBuZWlnaGJvdXJob29kIG9mIGEgdmVydGV4XHJcbiAgICBmdW5jdGlvbiBuZWlnaGJvdXJob29kKHZlcnRleDogdW5rbm93bikge1xyXG4gICAgICAgIGNvbnN0IGFkakxlZnQgPSBkYXRhWzFdLmZpbHRlcigoW2FdKSA9PiBhID09PSB2ZXJ0ZXgpLm1hcCgoWywgYl0pID0+IGIpO1xyXG4gICAgICAgIGNvbnN0IGFkalJpZ2h0ID0gZGF0YVsxXS5maWx0ZXIoKFssIGJdKSA9PiBiID09PSB2ZXJ0ZXgpLm1hcCgoW2FdKSA9PiBhKTtcclxuICAgICAgICByZXR1cm4gYWRqTGVmdC5jb25jYXQoYWRqUmlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVmVyaWZ5IHRoYXQgdGhlcmUgaXMgbm8gc29sdXRpb24gYnkgYXR0ZW1wdGluZyB0byBjcmVhdGUgYSBwcm9wZXIgMi1jb2xvcmluZy5cclxuICAgIGNvbnN0IGNvbG9yaW5nID0gQXJyYXkoZGF0YVswXSkuZmlsbCh1bmRlZmluZWQpO1xyXG4gICAgd2hpbGUgKGNvbG9yaW5nLnNvbWUoKHZhbCkgPT4gdmFsID09PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgLy9Db2xvciBhIHZlcnRleCBpbiB0aGUgZ3JhcGhcclxuICAgICAgICBjb25zdCBpbml0aWFsVmVydGV4ID0gY29sb3JpbmcuZmluZEluZGV4KCh2YWwpID0+IHZhbCA9PT0gdW5kZWZpbmVkKTtcclxuICAgICAgICBjb2xvcmluZ1tpbml0aWFsVmVydGV4XSA9IDA7XHJcbiAgICAgICAgY29uc3QgZnJvbnRpZXIgPSBbaW5pdGlhbFZlcnRleF07XHJcblxyXG4gICAgICAgIC8vUHJvcGFnYXRlIHRoZSBjb2xvcmluZyB0aHJvdWdob3V0IHRoZSBjb21wb25lbnQgY29udGFpbmluZyB2IGdyZWVkaWx5XHJcbiAgICAgICAgd2hpbGUgKGZyb250aWVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgdiA9IGZyb250aWVyLnBvcCgpIHx8IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9ycyA9IG5laWdoYm91cmhvb2Qodik7XHJcblxyXG4gICAgICAgICAgICAvL0ZvciBlYWNoIHZlcnRleCB1IGFkamFjZW50IHRvIHZcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBuZWlnaGJvcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBuZWlnaGJvcnNbaWRdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vU2V0IHRoZSBjb2xvciBvZiB1IHRvIHRoZSBvcHBvc2l0ZSBvZiB2J3MgY29sb3IgaWYgaXQgaXMgbmV3LFxyXG4gICAgICAgICAgICAgICAgLy90aGVuIGFkZCB1IHRvIHRoZSBmcm9udGllciB0byBjb250aW51ZSB0aGUgYWxnb3JpdGhtLlxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbG9yaW5nW3VdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3Jpbmdbdl0gPT09IDApIGNvbG9yaW5nW3VdID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGNvbG9yaW5nW3VdID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZnJvbnRpZXIucHVzaCh1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL0Fzc2VydCB1LHYgZG8gbm90IGhhdmUgdGhlIHNhbWUgY29sb3JcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbG9yaW5nW3VdID09PSBjb2xvcmluZ1t2XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vSWYgdSx2IGRvIGhhdmUgdGhlIHNhbWUgY29sb3IsIG5vIHByb3BlciAyLWNvbG9yaW5nIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vSWYgdGhpcyBjb2RlIGlzIHJlYWNoZWQsIHRoZXJlIGV4aXN0cyBhIHByb3BlciAyLWNvbG9yaW5nIG9mIHRoZSBpbnB1dFxyXG4gICAgcmV0dXJuIGNvbG9yaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTGFyZ2VzdFByaW1lRmFjdG9yKG5zOiBOUywgY29udHJhY3Q6IHN0cmluZywgc2VydmVyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBucy5jb2Rpbmdjb250cmFjdC5nZXREYXRhKGNvbnRyYWN0LCBzZXJ2ZXIpO1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgRXJyb3IoXCJzb2x2ZXIgZXhwZWN0ZWQgbnVtYmVyXCIpO1xyXG5cclxuICAgIGxldCBmYWMgPSAyO1xyXG4gICAgbGV0IG46IG51bWJlciA9IGRhdGE7XHJcbiAgICB3aGlsZSAobiA+IChmYWMgLSAxKSAqIChmYWMgLSAxKSkge1xyXG4gICAgICAgIHdoaWxlIChuICUgZmFjID09PSAwKSB7XHJcbiAgICAgICAgICAgIG4gPSBNYXRoLnJvdW5kKG4gLyBmYWMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK2ZhYztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbiA9PT0gMSA/IGZhYyAtIDEgOiBuO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzcGlyYWxpemVNYXRyaXgobnM6IE5TLCBjb250cmFjdDogc3RyaW5nLCBzZXJ2ZXI6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YTogbnVtYmVyW11bXSA9IG5zLmNvZGluZ2NvbnRyYWN0LmdldERhdGEoY29udHJhY3QsIHNlcnZlcik7XHJcblxyXG4gICAgY29uc3Qgc3BpcmFsOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgbTogbnVtYmVyID0gZGF0YS5sZW5ndGg7XHJcbiAgICBjb25zdCBuOiBudW1iZXIgPSBkYXRhWzBdLmxlbmd0aDtcclxuICAgIGxldCB1ID0gMDtcclxuICAgIGxldCBkOiBudW1iZXIgPSBtIC0gMTtcclxuICAgIGxldCBsID0gMDtcclxuICAgIGxldCByOiBudW1iZXIgPSBuIC0gMTtcclxuICAgIGxldCBrID0gMDtcclxuICAgIGxldCBkb25lID0gZmFsc2U7XHJcbiAgICB3aGlsZSAoIWRvbmUpIHtcclxuICAgICAgICAvLyBVcFxyXG4gICAgICAgIGZvciAobGV0IGNvbDogbnVtYmVyID0gbDsgY29sIDw9IHI7IGNvbCsrKSB7XHJcbiAgICAgICAgICAgIHNwaXJhbFtrXSA9IGRhdGFbdV1bY29sXTtcclxuICAgICAgICAgICAgKytrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKyt1ID4gZCkge1xyXG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSaWdodFxyXG4gICAgICAgIGZvciAobGV0IHJvdzogbnVtYmVyID0gdTsgcm93IDw9IGQ7IHJvdysrKSB7XHJcbiAgICAgICAgICAgIHNwaXJhbFtrXSA9IGRhdGFbcm93XVtyXTtcclxuICAgICAgICAgICAgKytrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoLS1yIDwgbCkge1xyXG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEb3duXHJcbiAgICAgICAgZm9yIChsZXQgY29sOiBudW1iZXIgPSByOyBjb2wgPj0gbDsgY29sLS0pIHtcclxuICAgICAgICAgICAgc3BpcmFsW2tdID0gZGF0YVtkXVtjb2xdO1xyXG4gICAgICAgICAgICArK2s7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgtLWQgPCB1KSB7XHJcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExlZnRcclxuICAgICAgICBmb3IgKGxldCByb3c6IG51bWJlciA9IGQ7IHJvdyA+PSB1OyByb3ctLSkge1xyXG4gICAgICAgICAgICBzcGlyYWxba10gPSBkYXRhW3Jvd11bbF07XHJcbiAgICAgICAgICAgICsraztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCsrbCA+IHIpIHtcclxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3BpcmFsO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxRQUFRLHFCQUFxQjtBQUV0QyxzQkFBc0IsS0FBS0EsS0FBUTtBQUMvQixFQUFBQSxJQUFHLEtBQUs7QUFDUixFQUFBQSxJQUFHLFdBQVcsS0FBSztBQUNuQixRQUFNLEtBQUtBLElBQUc7QUFFZCxRQUFNLGFBQWEsY0FBY0EsR0FBRTtBQUVuQyxhQUFXQyxXQUFVLFlBQVk7QUFDN0IsVUFBTSxZQUFZRCxJQUFHLEdBQUdDLE9BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsS0FBSyxDQUFDO0FBRS9ELFFBQUksVUFBVSxXQUFXO0FBQUc7QUFFNUIsSUFBQUQsSUFBRyxNQUFNLFVBQVVDLE9BQU0sUUFBUSxVQUFVLE1BQU0sY0FBYztBQUUvRCxlQUFXQyxhQUFZLFdBQVc7QUFDOUIsWUFBTSxlQUFlLEdBQUcsZ0JBQWdCQSxXQUFVRCxPQUFNO0FBQ3hELE1BQUFELElBQUcsTUFBTSxZQUFZRSxTQUFRLGVBQWUsWUFBWSxFQUFFO0FBRTFELFVBQUk7QUFDSixjQUFRLGNBQWM7QUFBQSxRQUNsQixLQUFLO0FBQ0QsbUJBQVMsdUJBQXVCRixLQUFJRSxXQUFVRCxPQUFNO0FBQ3BEO0FBQUEsUUFDSixLQUFLO0FBQ0QsbUJBQVMsdUJBQXVCRCxLQUFJRSxXQUFVRCxPQUFNO0FBQ3BEO0FBQUEsUUFDSixLQUFLO0FBQ0QsbUJBQVMsZUFBZUQsS0FBSUUsV0FBVUQsT0FBTTtBQUM1QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGlCQUFpQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUM5QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGdCQUFnQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUM3QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGlCQUFpQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUM5QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLG1CQUFtQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNoRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLDBCQUEwQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN2RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLG9CQUFvQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNqRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLHdCQUF3QkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNyRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLHlCQUF5QkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN0RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLDBCQUEwQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN2RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLHlCQUF5QkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN0RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLDBCQUEwQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN2RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLG9CQUFvQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNqRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLHFCQUFxQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNsRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGlCQUFpQkQsS0FBSUUsV0FBVUQsT0FBTTtBQUM5QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGdDQUFnQ0QsS0FBSUUsV0FBVUQsT0FBTTtBQUM3RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLDRCQUE0QkQsS0FBSUUsV0FBVUQsT0FBTTtBQUN6RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGlDQUFpQ0QsS0FBSUUsV0FBVUQsT0FBTTtBQUM5RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGlDQUFpQ0QsS0FBSUUsV0FBVUQsT0FBTTtBQUM5RDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLHdCQUF3QkQsS0FBSUUsV0FBVUQsT0FBTTtBQUNyRDtBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLGFBQWFELEtBQUlFLFdBQVVELE9BQU07QUFDMUM7QUFBQSxRQUNKLEtBQUs7QUFDRCxtQkFBUyxjQUFjRCxLQUFJRSxXQUFVRCxPQUFNO0FBQzNDO0FBQUEsUUFDSixLQUFLO0FBQ0QsbUJBQVMsZUFBZUQsS0FBSUUsV0FBVUQsT0FBTTtBQUM1QztBQUFBLFFBQ0osS0FBSztBQUNELG1CQUFTLFlBQVlELEtBQUlFLFdBQVVELE9BQU07QUFDekM7QUFBQSxRQUNKLEtBQUs7QUFDRCxtQkFBUyxhQUFhRCxLQUFJRSxXQUFVRCxPQUFNO0FBQzFDO0FBQUEsUUFDSjtBQUNJLGdCQUFNLElBQUksTUFBTSw0QkFBNEIsWUFBWTtBQUFBLE1BQ2hFO0FBRUEsVUFBSSxXQUFXO0FBQVc7QUFFMUIsWUFBTSxVQUFVRCxJQUFHLGVBQWUsUUFBUSxRQUFRRSxXQUFVRCxPQUFNO0FBQ2xFLFVBQUksWUFBWSxJQUFJO0FBQ2hCLFFBQUFELElBQUcsT0FBTyxPQUFPLE1BQU0sNEJBQTRCRSxTQUFRLGNBQWNELE9BQU0sRUFBRTtBQUFBLE1BQ3JGO0FBRUEsTUFBQUQsSUFBRyxNQUFNLE9BQU8sUUFBUSxPQUFPO0FBQUEsSUFDbkM7QUFBQSxFQUNKO0FBQ0o7QUFFTyxnQkFBUyxpQkFBaUJBLEtBQVFFLFdBQWtCRCxTQUFnQjtBQUN2RSxRQUFNRSxRQUFtQkgsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDbkUsV0FBUyxRQUFRLFVBQW9CLEtBQWVFLE9BQWtCO0FBQ2xFLFVBQU0sUUFBc0IsQ0FBQztBQUU3QixJQUFBQSxNQUFLLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSTtBQUNqQyxVQUFNLEtBQUssQ0FBQyxRQUFRLENBQUM7QUFFckIsV0FBTyxNQUFNLFNBQVMsR0FBRztBQUNyQixZQUFNQyxRQUFPLE1BQU0sTUFBTTtBQUN6QixVQUFJQSxVQUFTO0FBQVc7QUFDeEIsWUFBTSxNQUFNQSxNQUFLQSxNQUFLLFNBQVMsQ0FBQztBQUNoQyxZQUFNLFlBQVk7QUFBQSxRQUNkLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztBQUFBLFFBQ25CLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUFBLFFBQ25CLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztBQUFBLFFBQ25CLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUFBLE1BQ3ZCO0FBRUEsZUFBU0MsS0FBSSxHQUFHQSxLQUFJLFVBQVUsUUFBUUEsTUFBSztBQUV2QyxZQUFJLFVBQVVBLEVBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssVUFBVUEsRUFBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRztBQUV4RCxpQkFBT0QsTUFBSyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQUEsUUFDNUI7QUFFQSxZQUNJLFVBQVVDLEVBQUMsRUFBRSxDQUFDLElBQUksS0FDbEIsVUFBVUEsRUFBQyxFQUFFLENBQUMsS0FBS0YsTUFBSyxVQUN4QixVQUFVRSxFQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQ2xCLFVBQVVBLEVBQUMsRUFBRSxDQUFDLEtBQUtGLE1BQUssQ0FBQyxFQUFFLFVBQzNCQSxNQUFLLFVBQVVFLEVBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVQSxFQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FDNUM7QUFDRTtBQUFBLFFBQ0o7QUFFQSxRQUFBRixNQUFLLFVBQVVFLEVBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVQSxFQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUk7QUFFekMsY0FBTSxLQUFLRCxNQUFLLE9BQU8sQ0FBQyxVQUFVQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQUEsTUFDMUM7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUVBLFdBQVMsU0FBU0QsT0FBa0I7QUFFaEMsUUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7QUFDM0IsUUFBSSxZQUFZO0FBR2hCLGFBQVNDLEtBQUksR0FBR0EsS0FBSUQsTUFBSyxRQUFRQyxNQUFLO0FBRWxDLFVBQUksZ0JBQWdCLENBQUMsSUFBSUQsTUFBS0MsRUFBQyxFQUFFLENBQUM7QUFBRyxvQkFBWSxZQUFZO0FBQzdELFVBQUksZ0JBQWdCLENBQUMsSUFBSUQsTUFBS0MsRUFBQyxFQUFFLENBQUM7QUFBRyxvQkFBWSxZQUFZO0FBRTdELFVBQUksZ0JBQWdCLENBQUMsSUFBSUQsTUFBS0MsRUFBQyxFQUFFLENBQUM7QUFBRyxvQkFBWSxZQUFZO0FBQzdELFVBQUksZ0JBQWdCLENBQUMsSUFBSUQsTUFBS0MsRUFBQyxFQUFFLENBQUM7QUFBRyxvQkFBWSxZQUFZO0FBRTdELHdCQUFrQkQsTUFBS0MsRUFBQztBQUFBLElBQzVCO0FBRUEsV0FBTztBQUFBLEVBQ1g7QUFDQSxRQUFNLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUNGLE1BQUssU0FBUyxHQUFHQSxNQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBR0EsS0FBSTtBQUN4RSxNQUFJO0FBQU0sV0FBTyxTQUFTLElBQUk7QUFDOUIsU0FBTztBQUNYO0FBRU8sZ0JBQVMsZUFBZUgsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ3JFLFFBQU1FLFFBQWVILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBRS9ELE1BQUksT0FBT0UsVUFBUyxZQUFZQSxRQUFPLEdBQUc7QUFDdEMsSUFBQUgsSUFBRyxPQUFPLE9BQU8sTUFBTSwrQkFBK0JFLFlBQVcsZ0JBQWdCRCxPQUFNO0FBQ3ZGO0FBQUEsRUFDSjtBQUVBLFdBQVMsZ0JBQWdCLFFBQWdCLFVBQW9CLENBQUMsR0FBRyxRQUFRLEdBQUcsU0FBcUIsQ0FBQyxHQUFHO0FBQ2pHLFFBQUksV0FBVyxHQUFHO0FBQ2QsYUFBTyxLQUFLLFFBQVEsTUFBTSxDQUFDO0FBQzNCO0FBQUEsSUFDSjtBQUVBLGFBQVNJLEtBQUksT0FBT0EsTUFBSyxRQUFRQSxNQUFLO0FBQ2xDLGNBQVEsS0FBS0EsRUFBQztBQUNkLHNCQUFnQixTQUFTQSxJQUFHLFNBQVNBLElBQUcsTUFBTTtBQUM5QyxjQUFRLElBQUk7QUFBQSxJQUNoQjtBQUVBLFdBQU87QUFBQSxFQUNYO0FBRUEsUUFBTSxNQUFNLGdCQUFnQkYsS0FBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksV0FBVyxDQUFDLEVBQUU7QUFDckUsTUFBSSxRQUFRLFFBQVc7QUFDbkIsSUFBQUgsSUFBRyxPQUFPLE9BQU8sTUFBTSw4QkFBOEJFLFlBQVcsZ0JBQWdCRCxPQUFNO0FBQ3RGO0FBQUEsRUFDSjtBQUNBLFNBQU87QUFDWDtBQUVBLFNBQVMsaUJBQWlCRCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDaEUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxTQUFpQkUsTUFBSyxDQUFDO0FBQzdCLFFBQU0sT0FBaUJBLE1BQUssQ0FBQztBQUU3QixRQUFNLEtBQUssTUFBTSxTQUFTLENBQUMsRUFBRSxLQUFLLENBQUM7QUFDbkMsS0FBRyxDQUFDLElBQUk7QUFFUixhQUFXLFVBQVUsTUFBTTtBQUN2QixhQUFTRSxLQUFJLFFBQVFBLEtBQUksU0FBUyxHQUFHQSxNQUFLO0FBQ3RDLFNBQUdBLEVBQUMsS0FBSyxHQUFHQSxLQUFJLE1BQU07QUFBQSxJQUMxQjtBQUFBLEVBQ0o7QUFFQSxRQUFNLE1BQU0sR0FBRyxNQUFNO0FBQ3JCLE1BQUksUUFBUSxRQUFXO0FBQ25CLElBQUFMLElBQUcsT0FBTyxPQUFPLE1BQU0sOEJBQThCRSxZQUFXLGdCQUFnQkQsT0FBTTtBQUN0RjtBQUFBLEVBQ0o7QUFFQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLDRCQUE0QixJQUFRLFVBQWtCLFFBQWdCO0FBQzNFLFFBQU0sT0FBTyxHQUFHLGVBQWUsUUFBUSxVQUFVLE1BQU07QUFFdkQsV0FBUyxNQUFNLElBQVksS0FBYTtBQUNwQyxVQUFNSyxPQUFNLENBQUMsSUFBSSxLQUFLLEtBQUssR0FBRztBQUM5QixVQUFNLElBQWMsQ0FBQztBQUNyQixXQUFPLE1BQU0sR0FBRztBQUNaLFFBQUUsS0FBS0EsS0FBSSxLQUFLLENBQUMsQ0FBQztBQUNsQixZQUFNLEtBQUs7QUFDWCxZQUFNO0FBQUEsSUFDVjtBQUNBLE1BQUUsS0FBS0EsS0FBSSxFQUFFLENBQUM7QUFDZCxXQUFPLEVBQUUsU0FBUyxLQUFLO0FBQ25CLFFBQUUsS0FBS0EsS0FBSSxDQUFDLENBQUM7QUFBQSxJQUNqQjtBQUNBLFdBQU87QUFBQSxFQUNYO0FBSUEsUUFBTSxVQUFVLENBQUM7QUFDakIsUUFBTSxTQUFTLEtBQUssQ0FBQztBQUNyQixRQUFNLFlBQVksS0FBSyxDQUFDO0FBRXhCLFFBQU0sZUFBZSxLQUFLLElBQUksR0FBRyxPQUFPLFNBQVMsQ0FBQztBQUNsRCxXQUFTLElBQUksR0FBRyxJQUFJLGNBQWMsS0FBSztBQUVuQyxVQUFNLE1BQU0sTUFBTSxHQUFHLE9BQU8sU0FBUyxDQUFDO0FBRXRDLFFBQUksT0FBTztBQUNYLGFBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxRQUFRLEtBQUs7QUFDakMsY0FBUSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUM7QUFBQSxJQUM3QjtBQUNBLFlBQVEsT0FBTyxJQUFJLE1BQU07QUFFekIsUUFBSTtBQUNBLFVBQUksS0FBSyxJQUFJLEtBQUssV0FBVztBQUN6QixnQkFBUSxLQUFLLElBQUk7QUFBQSxNQUNyQjtBQUFBLElBQ0osU0FBUyxHQUFHO0FBQ1IsU0FBRyxPQUFPLHNEQUFzRCxDQUFDO0FBQUEsSUFDckU7QUFBQSxFQUNKO0FBRUEsU0FBTztBQUNYO0FBRUEsU0FBUyx3QkFBd0JOLEtBQVFFLFdBQWtCRCxTQUFnQjtBQUN2RSxRQUFNRSxRQUFPSCxJQUFHLGVBQWUsUUFBUUUsV0FBVUQsT0FBTTtBQUN2RCxNQUFJLFNBQVM7QUFDYixNQUFJLFdBQVc7QUFDZixXQUFTSSxLQUFJLEdBQUdBLEtBQUlGLE1BQUssUUFBUSxFQUFFRSxJQUFHO0FBQ2xDLGFBQVMsS0FBSyxJQUFJLEdBQUksVUFBVUYsTUFBS0UsRUFBQyxJQUFJRixNQUFLRSxLQUFJLENBQUMsQ0FBRTtBQUN0RCxlQUFXLEtBQUssSUFBSSxRQUFRLFFBQVE7QUFBQSxFQUN4QztBQUVBLFNBQU8sU0FBUyxTQUFTO0FBQzdCO0FBRUEsU0FBUyx5QkFBeUJMLEtBQVFFLFdBQWtCRCxTQUFnQjtBQUN4RSxRQUFNLGFBQXVCRCxJQUFHLGVBQWUsUUFBUUUsV0FBVUQsT0FBTTtBQUV2RSxhQUFXLEtBQUssQ0FBQztBQUVqQixNQUFJLFNBQVM7QUFDYixXQUFTSSxLQUFJLEdBQUdBLEtBQUksV0FBVyxRQUFRQSxNQUFLO0FBQ3hDLFFBQUksV0FBV0EsRUFBQyxJQUFJLFdBQVdBLEtBQUksQ0FBQyxHQUFHO0FBQ25DLGdCQUFVLFdBQVdBLEtBQUksQ0FBQyxJQUFJLFdBQVdBLEVBQUM7QUFBQSxJQUM5QztBQUFBLEVBQ0o7QUFFQSxXQUFTLEtBQUssSUFBSSxRQUFRLENBQUM7QUFFM0IsU0FBTztBQUNYO0FBRU8sZ0JBQVMsMEJBQTBCTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDaEYsUUFBTSxhQUF1QkQsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFFdkUsTUFBSSxRQUFRLE9BQU87QUFDbkIsTUFBSSxRQUFRLE9BQU87QUFDbkIsTUFBSSxXQUFXO0FBQ2YsTUFBSSxXQUFXO0FBQ2YsYUFBVyxTQUFTLFlBQVk7QUFDNUIsZUFBVyxLQUFLLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDM0MsWUFBUSxLQUFLLElBQUksT0FBTyxXQUFXLEtBQUs7QUFDeEMsZUFBVyxLQUFLLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDM0MsWUFBUSxLQUFLLElBQUksT0FBTyxRQUFRLEVBQUU7QUFBQSxFQUN0QztBQUVBLFNBQU87QUFDWDtBQUVBLFNBQVMseUJBQXlCRCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDeEUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxJQUFZRSxNQUFLLENBQUM7QUFDeEIsUUFBTSxTQUFtQkEsTUFBSyxDQUFDO0FBRS9CLFFBQU0sTUFBTSxPQUFPO0FBRW5CLFFBQU0sT0FBaUIsQ0FBQztBQUN4QixRQUFNLE9BQWlCLENBQUM7QUFDeEIsT0FBSyxTQUFTLElBQUk7QUFDbEIsT0FBSyxTQUFTLElBQUk7QUFDbEIsV0FBU0UsS0FBSSxHQUFHQSxNQUFLLEdBQUcsRUFBRUEsSUFBRztBQUN6QixTQUFLQSxFQUFDLElBQUksT0FBTztBQUNqQixTQUFLQSxFQUFDLElBQUk7QUFBQSxFQUNkO0FBRUEsTUFBSTtBQUNKLFdBQVNBLEtBQUksR0FBR0EsS0FBSSxLQUFLLEVBQUVBLElBQUc7QUFDMUIsVUFBTSxPQUFPQSxFQUFDO0FBQ2QsYUFBUyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRztBQUN4QixXQUFLLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRztBQUN6QyxXQUFLLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSSxHQUFHO0FBQUEsSUFDakQ7QUFBQSxFQUNKO0FBRUEsU0FBTyxLQUFLLENBQUM7QUFDakI7QUFFQSxTQUFTLDBCQUEwQkwsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ3pFLFFBQU0sV0FBdUJELElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3ZFLEVBQUFELElBQUcsTUFBTSxRQUFRO0FBRWpCLFFBQU0sSUFBWSxTQUFTO0FBQzNCLFFBQU0sS0FBZSxTQUFTLElBQUksQ0FBQyxFQUFFLE1BQU07QUFDM0MsV0FBU0ssS0FBSSxJQUFJLEdBQUdBLEtBQUksSUFBSSxFQUFFQSxJQUFHO0FBQzdCLGFBQVMsSUFBSSxHQUFHLElBQUksU0FBU0EsRUFBQyxFQUFFLFFBQVEsRUFBRSxHQUFHO0FBQ3pDLFNBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksU0FBU0EsRUFBQyxFQUFFLENBQUM7QUFBQSxJQUN0RDtBQUFBLEVBQ0o7QUFFQSxTQUFPLEdBQUcsQ0FBQztBQUNmO0FBRUEsU0FBUyx1QkFBdUJMLEtBQVFFLFdBQWtCRCxTQUFnQjtBQUN0RSxRQUFNRSxRQUFpQkgsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFFakUsTUFBSSxTQUFTO0FBQ2IsTUFBSSxhQUFhO0FBRWpCLFdBQVNJLEtBQUksR0FBR0EsS0FBSUYsTUFBSyxRQUFRRSxNQUFLO0FBQ2xDLGlCQUFhLEtBQUssSUFBSUYsTUFBS0UsRUFBQyxHQUFHLGFBQWFGLE1BQUtFLEVBQUMsQ0FBQztBQUNuRCxhQUFTLEtBQUssSUFBSSxRQUFRLFVBQVU7QUFBQSxFQUN4QztBQUVBLFNBQU87QUFDWDtBQUVBLFNBQVMsb0JBQW9CTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDbkUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxJQUFZRSxNQUFLLENBQUM7QUFDeEIsUUFBTSxJQUFZQSxNQUFLLENBQUM7QUFDeEIsUUFBTSxhQUF1QixDQUFDO0FBQzlCLGFBQVcsU0FBUztBQUVwQixXQUFTRSxLQUFJLEdBQUdBLEtBQUksR0FBR0EsTUFBSztBQUN4QixlQUFXQSxFQUFDLElBQUk7QUFBQSxFQUNwQjtBQUNBLFdBQVMsTUFBTSxHQUFHLE1BQU0sR0FBRyxPQUFPO0FBQzlCLGFBQVNBLEtBQUksR0FBR0EsS0FBSSxHQUFHQSxNQUFLO0FBQ3hCLGlCQUFXQSxFQUFDLEtBQUssV0FBV0EsS0FBSSxDQUFDO0FBQUEsSUFDckM7QUFBQSxFQUNKO0FBRUEsU0FBTyxXQUFXLElBQUksQ0FBQztBQUMzQjtBQUVBLFNBQVMscUJBQXFCTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDcEUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxlQUEyQixDQUFDO0FBQ2xDLGVBQWEsU0FBU0UsTUFBSztBQUMzQixXQUFTRSxLQUFJLEdBQUdBLEtBQUksYUFBYSxRQUFRLEVBQUVBLElBQUc7QUFDMUMsaUJBQWFBLEVBQUMsSUFBSUYsTUFBS0UsRUFBQyxFQUFFLE1BQU07QUFBQSxFQUNwQztBQUVBLFdBQVNBLEtBQUksR0FBR0EsS0FBSSxhQUFhLFFBQVFBLE1BQUs7QUFDMUMsYUFBUyxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsRUFBRSxRQUFRLEtBQUs7QUFDN0MsVUFBSSxhQUFhQSxFQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUc7QUFDekIscUJBQWFBLEVBQUMsRUFBRSxDQUFDLElBQUk7QUFBQSxNQUN6QixXQUFXQSxNQUFLLEtBQUssS0FBSyxHQUFHO0FBQ3pCLHFCQUFhLENBQUMsRUFBRSxDQUFDLElBQUk7QUFBQSxNQUN6QixPQUFPO0FBQ0gscUJBQWFBLEVBQUMsRUFBRSxDQUFDLEtBQUtBLEtBQUksSUFBSSxhQUFhQSxLQUFJLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxJQUFJLElBQUksYUFBYUEsRUFBQyxFQUFFLElBQUksQ0FBQyxJQUFJO0FBQUEsTUFDbEc7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUVBLFNBQU8sYUFBYSxhQUFhLFNBQVMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFNBQVMsQ0FBQztBQUMzRTtBQUVBLFNBQVMsb0JBQW9CTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDbkUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxNQUFnQixDQUFDO0FBQ3ZCLFdBQVMsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUc7QUFDekIsYUFBUyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUUsR0FBRztBQUN6QixlQUFTLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQ3pCLGlCQUFTLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQ3pCLGNBQUksSUFBSSxJQUFJLElBQUksTUFBTUUsTUFBSyxRQUFRO0FBQy9CLGtCQUFNLElBQUksU0FBU0EsTUFBSyxVQUFVLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDM0Msa0JBQU0sSUFBSSxTQUFTQSxNQUFLLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQy9DLGtCQUFNLElBQUksU0FBU0EsTUFBSyxVQUFVLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDdkQsa0JBQU0sSUFBSSxTQUFTQSxNQUFLLFVBQVUsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDL0QsZ0JBQUksS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxLQUFLO0FBQzlDLG9CQUFNLEtBQWE7QUFBQSxnQkFDZixFQUFFLFNBQVM7QUFBQSxnQkFDWDtBQUFBLGdCQUNBLEVBQUUsU0FBUztBQUFBLGdCQUNYO0FBQUEsZ0JBQ0EsRUFBRSxTQUFTO0FBQUEsZ0JBQ1g7QUFBQSxnQkFDQSxFQUFFLFNBQVM7QUFBQSxjQUNmLEVBQUUsS0FBSyxFQUFFO0FBQ1Qsa0JBQUksR0FBRyxXQUFXQSxNQUFLLFNBQVMsR0FBRztBQUMvQixvQkFBSSxLQUFLLEVBQUU7QUFBQSxjQUNmO0FBQUEsWUFDSjtBQUFBLFVBQ0o7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBRUEsU0FBTztBQUNYO0FBRUEsU0FBUyxZQUFZSCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDM0QsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFJdkQsUUFBTSxTQUFTLENBQUMsR0FBR0UsTUFBSyxDQUFDLENBQUMsRUFDckIsSUFBSSxDQUFDLE1BQU8sTUFBTSxNQUFNLElBQUksT0FBTyxjQUFlLEVBQUUsV0FBVyxDQUFDLElBQUksS0FBS0EsTUFBSyxDQUFDLElBQUksTUFBTSxLQUFNLEVBQUUsQ0FBRSxFQUNuRyxLQUFLLEVBQUU7QUFDWixTQUFPO0FBQ1g7QUFFQSxTQUFTLGFBQWFILEtBQVFFLFdBQWtCRCxTQUFnQjtBQUM1RCxRQUFNRSxRQUFPSCxJQUFHLGVBQWUsUUFBUUUsV0FBVUQsT0FBTTtBQUV2RCxRQUFNLFNBQVMsQ0FBQyxHQUFHRSxNQUFLLENBQUMsQ0FBQyxFQUNyQixJQUFJLENBQUMsR0FBR0UsT0FBTTtBQUNYLFdBQU8sTUFBTSxNQUNQLElBQ0EsT0FBTyxjQUFlLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxLQUFLRixNQUFLLENBQUMsRUFBRSxXQUFXRSxLQUFJRixNQUFLLENBQUMsRUFBRSxNQUFNLEtBQUssS0FBTSxFQUFFO0FBQUEsRUFDN0csQ0FBQyxFQUNBLEtBQUssRUFBRTtBQUNaLFNBQU87QUFDWDtBQUVBLFNBQVMsZ0NBQWdDSCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDL0UsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsTUFBSSxPQUFPRSxVQUFTO0FBQVUsVUFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBQ3RFLE1BQUksT0FBTztBQUNYLE1BQUksUUFBUTtBQUNaLFFBQU0sTUFBZ0IsQ0FBQztBQUV2QixXQUFTRSxLQUFJLEdBQUdBLEtBQUlGLE1BQUssUUFBUSxFQUFFRSxJQUFHO0FBQ2xDLFFBQUlGLE1BQUtFLEVBQUMsTUFBTSxLQUFLO0FBQ2pCLFFBQUU7QUFBQSxJQUNOLFdBQVdGLE1BQUtFLEVBQUMsTUFBTSxLQUFLO0FBQ3hCLGFBQU8sSUFBSSxFQUFFLE9BQU8sRUFBRTtBQUFBLElBQzFCO0FBQUEsRUFDSjtBQUVBLFdBQVMsSUFDTCxNQUNBLE9BQ0FFLE9BQ0FDLFFBQ0EsR0FDQSxVQUNBQyxNQUNJO0FBQ0osUUFBSSxFQUFFLFdBQVcsT0FBTztBQUNwQixVQUFJRixVQUFTLEtBQUtDLFdBQVUsS0FBSyxTQUFTLEdBQUc7QUFDekMsaUJBQVNILEtBQUksR0FBR0EsS0FBSUksS0FBSSxRQUFRSixNQUFLO0FBQ2pDLGNBQUlJLEtBQUlKLEVBQUMsTUFBTSxVQUFVO0FBQ3JCO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFDQSxRQUFBSSxLQUFJLEtBQUssUUFBUTtBQUFBLE1BQ3JCO0FBQ0E7QUFBQSxJQUNKO0FBRUEsUUFBSSxFQUFFLEtBQUssTUFBTSxLQUFLO0FBQ2xCLFVBQUlGLFFBQU8sR0FBRztBQUNWLFlBQUksTUFBTSxRQUFRLEdBQUdBLFFBQU8sR0FBR0MsUUFBTyxHQUFHLFVBQVVDLElBQUc7QUFBQSxNQUMxRDtBQUNBLFVBQUksT0FBTyxHQUFHLFFBQVEsR0FBR0YsT0FBTUMsUUFBTyxHQUFHLFdBQVcsRUFBRSxLQUFLLEdBQUdDLElBQUc7QUFBQSxJQUNyRSxXQUFXLEVBQUUsS0FBSyxNQUFNLEtBQUs7QUFDekIsVUFBSUQsU0FBUTtBQUFHLFlBQUksTUFBTSxRQUFRLEdBQUdELE9BQU1DLFNBQVEsR0FBRyxHQUFHLFVBQVVDLElBQUc7QUFDckUsVUFBSSxPQUFPO0FBQUcsWUFBSSxPQUFPLEdBQUcsUUFBUSxHQUFHRixPQUFNQyxRQUFPLEdBQUcsV0FBVyxFQUFFLEtBQUssR0FBR0MsSUFBRztBQUFBLElBQ25GLE9BQU87QUFDSCxVQUFJLE1BQU0sUUFBUSxHQUFHRixPQUFNQyxRQUFPLEdBQUcsV0FBVyxFQUFFLEtBQUssR0FBR0MsSUFBRztBQUFBLElBQ2pFO0FBQUEsRUFDSjtBQUVBLE1BQUksR0FBRyxHQUFHLE1BQU0sT0FBT04sT0FBTSxJQUFJLEdBQUc7QUFFcEMsU0FBTztBQUNYO0FBRUEsU0FBUyxhQUFhSCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDNUQsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsTUFBSSxPQUFPRSxVQUFTO0FBQVUsVUFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBRXRFLE1BQUksTUFBTTtBQUNWLE1BQUlFLEtBQUk7QUFDUixRQUFNLFNBQVNGLE1BQUs7QUFDcEIsTUFBSSxjQUFjO0FBR2xCLFNBQU8sTUFBTSxRQUFRO0FBRWpCLFFBQUlBLE1BQUssT0FBTyxHQUFHLEtBQUtBLE1BQUssT0FBTyxNQUFNLENBQUMsR0FBRztBQUUxQyxNQUFBRTtBQUFBLElBQ0osT0FBTztBQUVILFVBQUlBLEtBQUksR0FBRztBQUVQLGNBQU0sUUFBUSxLQUFLLE1BQU1BLEtBQUksQ0FBQztBQUM5QixpQkFBUyxJQUFJLEdBQUcsSUFBSSxPQUFPLEtBQUs7QUFDNUIseUJBQWUsTUFBTUYsTUFBSyxPQUFPLEdBQUc7QUFBQSxRQUN4QztBQUVBLHVCQUFlRSxLQUFJLFFBQVEsSUFBSUYsTUFBSyxPQUFPLEdBQUc7QUFBQSxNQUNsRCxPQUFPO0FBRUgsdUJBQWVFLEtBQUlGLE1BQUssT0FBTyxHQUFHO0FBQUEsTUFDdEM7QUFDQSxNQUFBRSxLQUFJO0FBQUEsSUFDUjtBQUNBO0FBQUEsRUFDSjtBQUNBLFNBQU87QUFDWDtBQUVBLFNBQVMsY0FBY0wsS0FBUUUsV0FBa0JELFNBQWdCO0FBQzdELFFBQU0sUUFBUUQsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFFeEQsTUFBSSxRQUFRO0FBRVosV0FBU0ksS0FBSSxHQUFHQSxLQUFJLE1BQU0sVUFBVTtBQUNoQyxVQUFNLGlCQUFpQixNQUFNLFdBQVdBLEVBQUMsSUFBSTtBQUU3QyxRQUFJLGlCQUFpQixLQUFLLGlCQUFpQixLQUFLQSxLQUFJLElBQUksaUJBQWlCLE1BQU0sUUFBUTtBQUNuRixhQUFPO0FBQUEsSUFDWDtBQUVBLGFBQVMsTUFBTSxVQUFVQSxLQUFJLEdBQUdBLEtBQUksSUFBSSxjQUFjO0FBQ3RELElBQUFBLE1BQUssSUFBSTtBQUVULFFBQUlBLE1BQUssTUFBTSxRQUFRO0FBQ25CO0FBQUEsSUFDSjtBQUNBLFVBQU0saUJBQWlCLE1BQU0sV0FBV0EsRUFBQyxJQUFJO0FBRTdDLFFBQUksaUJBQWlCLEtBQUssaUJBQWlCLEdBQUc7QUFDMUMsYUFBTztBQUFBLElBQ1gsV0FBVyxtQkFBbUIsR0FBRztBQUM3QixRQUFFQTtBQUFBLElBQ04sT0FBTztBQUNILFVBQUlBLEtBQUksS0FBSyxNQUFNLFFBQVE7QUFDdkIsZUFBTztBQUFBLE1BQ1g7QUFFQSxZQUFNLGlCQUFpQixNQUFNLFdBQVdBLEtBQUksQ0FBQyxJQUFJO0FBQ2pELFVBQUssaUJBQWlCLE1BQU0saUJBQWlCLEtBQUssaUJBQWlCLE1BQU8saUJBQWlCLE1BQU0sUUFBUTtBQUNyRyxlQUFPO0FBQUEsTUFDWDtBQUVBLGVBQVMsSUFBSSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsR0FBRztBQUNyQyxpQkFBUyxNQUFNLE1BQU0sU0FBUyxjQUFjO0FBQUEsTUFDaEQ7QUFFQSxNQUFBQSxNQUFLO0FBQUEsSUFDVDtBQUFBLEVBQ0o7QUFFQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLGVBQWVMLEtBQVFFLFdBQWtCRCxTQUFnQjtBQUM5RCxRQUFNLFFBQVFELElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3hELE1BQUksT0FBTyxVQUFVO0FBQVUsVUFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBS3ZFLE1BQUksWUFBaUMsTUFBTSxLQUFLLE1BQU0sRUFBRSxHQUFHLE1BQU0sTUFBTSxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUM7QUFDckYsTUFBSSxZQUFpQyxNQUFNLEtBQUssTUFBTSxFQUFFLEdBQUcsTUFBTSxNQUFNLEVBQUUsQ0FBQztBQUUxRSxXQUFTLElBQUksT0FBNEJJLElBQVcsR0FBVyxLQUFtQjtBQUM5RSxVQUFNLFVBQVUsTUFBTUEsRUFBQyxFQUFFLENBQUM7QUFDMUIsUUFBSSxXQUFXLFFBQVEsSUFBSSxTQUFTLFFBQVEsUUFBUTtBQUNoRCxZQUFNQSxFQUFDLEVBQUUsQ0FBQyxJQUFJO0FBQUEsSUFDbEIsV0FBVyxJQUFJLFdBQVcsUUFBUSxVQUFVLEtBQUssT0FBTyxJQUFJLEtBQUs7QUFHN0QsWUFBTUEsRUFBQyxFQUFFLENBQUMsSUFBSTtBQUFBLElBQ2xCO0FBQUEsRUFDSjtBQUdBLFlBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSTtBQUVsQixXQUFTQSxLQUFJLEdBQUdBLEtBQUksTUFBTSxRQUFRLEVBQUVBLElBQUc7QUFDbkMsZUFBVyxPQUFPLFdBQVc7QUFDekIsVUFBSSxLQUFLLElBQUk7QUFBQSxJQUNqQjtBQUNBLFVBQU0sSUFBSSxNQUFNQSxFQUFDO0FBR2pCLGFBQVMsU0FBUyxHQUFHLFVBQVUsR0FBRyxFQUFFLFFBQVE7QUFDeEMsWUFBTSxTQUFTLFVBQVUsQ0FBQyxFQUFFLE1BQU07QUFDbEMsVUFBSSxVQUFVLE1BQU07QUFDaEI7QUFBQSxNQUNKO0FBRUEsVUFBSSxTQUFTLEdBQUc7QUFFWixZQUFJLFdBQVcsR0FBRyxTQUFTLEdBQUcsTUFBTTtBQUFBLE1BQ3hDLE9BQU87QUFFSCxZQUFJLFdBQVcsR0FBRyxHQUFHLFNBQVMsTUFBTSxNQUFNLFVBQVVBLEtBQUksR0FBR0EsRUFBQyxJQUFJLEdBQUc7QUFBQSxNQUN2RTtBQUVBLGVBQVMsU0FBUyxHQUFHLFVBQVUsS0FBSyxJQUFJLEdBQUdBLEVBQUMsR0FBRyxFQUFFLFFBQVE7QUFDckQsWUFBSSxNQUFNQSxLQUFJLE1BQU0sTUFBTSxHQUFHO0FBRXpCLGNBQUksV0FBVyxRQUFRLEdBQUcsU0FBUyxPQUFPLE1BQU0sSUFBSSxNQUFNLFVBQVVBLEtBQUksUUFBUUEsRUFBQyxDQUFDO0FBQUEsUUFDdEY7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUdBLGFBQVMsU0FBUyxHQUFHLFVBQVUsR0FBRyxFQUFFLFFBQVE7QUFDeEMsZUFBUyxTQUFTLEdBQUcsVUFBVSxHQUFHLEVBQUUsUUFBUTtBQUN4QyxjQUFNLFNBQVMsVUFBVSxNQUFNLEVBQUUsTUFBTTtBQUN2QyxZQUFJLFVBQVUsTUFBTTtBQUNoQjtBQUFBLFFBQ0o7QUFFQSxZQUFJLE1BQU1BLEtBQUksTUFBTSxNQUFNLEdBQUc7QUFDekIsY0FBSSxTQUFTLEdBQUc7QUFFWixnQkFBSSxXQUFXLFFBQVEsU0FBUyxHQUFHLE1BQU07QUFBQSxVQUM3QyxPQUFPO0FBRUgsZ0JBQUksV0FBVyxRQUFRLEdBQUcsU0FBUyxNQUFNLE9BQU8sTUFBTSxJQUFJLEdBQUc7QUFBQSxVQUNqRTtBQUFBLFFBQ0o7QUFHQSxZQUFJLFdBQVcsR0FBRyxHQUFHLFNBQVMsT0FBTyxNQUFNLElBQUksT0FBTyxNQUFNLENBQUM7QUFHN0QsaUJBQVMsYUFBYSxHQUFHLGNBQWMsS0FBSyxJQUFJLEdBQUdBLEVBQUMsR0FBRyxFQUFFLFlBQVk7QUFDakUsY0FBSSxNQUFNQSxLQUFJLFVBQVUsTUFBTSxHQUFHO0FBQzdCLGdCQUFJLFdBQVcsWUFBWSxHQUFHLFNBQVMsT0FBTyxNQUFNLElBQUksT0FBTyxNQUFNLElBQUksR0FBRztBQUFBLFVBQ2hGO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBRUEsVUFBTSxZQUFZO0FBQ2xCLGdCQUFZO0FBQ1osZ0JBQVk7QUFBQSxFQUNoQjtBQUVBLE1BQUksU0FBUztBQUViLFdBQVMsTUFBTSxHQUFHLE9BQU8sR0FBRyxFQUFFLEtBQUs7QUFDL0IsUUFBSSxTQUFTLFVBQVUsQ0FBQyxFQUFFLEdBQUc7QUFDN0IsUUFBSSxVQUFVLE1BQU07QUFDaEI7QUFBQSxJQUNKO0FBRUEsY0FBVSxPQUFPLEdBQUcsSUFBSSxNQUFNLFVBQVUsTUFBTSxTQUFTLEtBQUssTUFBTSxNQUFNO0FBQ3hFLFFBQUksVUFBVSxRQUFRLE9BQU8sU0FBUyxPQUFPLFFBQVE7QUFDakQsZUFBUztBQUFBLElBQ2IsV0FBVyxPQUFPLFVBQVUsT0FBTyxVQUFVLEtBQUssT0FBTyxJQUFJLEtBQUs7QUFDOUQsZUFBUztBQUFBLElBQ2I7QUFBQSxFQUNKO0FBRUEsV0FBUyxTQUFTLEdBQUcsVUFBVSxHQUFHLEVBQUUsUUFBUTtBQUN4QyxhQUFTLE1BQU0sR0FBRyxPQUFPLEdBQUcsRUFBRSxLQUFLO0FBQy9CLFVBQUksU0FBUyxVQUFVLE1BQU0sRUFBRSxHQUFHO0FBQ2xDLFVBQUksVUFBVSxNQUFNO0FBQ2hCO0FBQUEsTUFDSjtBQUVBLGdCQUFVLE9BQU8sR0FBRyxJQUFJLEtBQUssT0FBTyxNQUFNO0FBQzFDLFVBQUksVUFBVSxRQUFRLE9BQU8sU0FBUyxPQUFPLFFBQVE7QUFDakQsaUJBQVM7QUFBQSxNQUNiLFdBQVcsT0FBTyxVQUFVLE9BQU8sVUFBVSxLQUFLLE9BQU8sSUFBSSxLQUFLO0FBQzlELGlCQUFTO0FBQUEsTUFDYjtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBRUEsTUFBSSxVQUFVO0FBQU0sVUFBTSxJQUFJLE1BQU0saUJBQWlCO0FBQ3JELFNBQU87QUFDWDtBQUlBLFNBQVMsaUNBQWlDTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDaEYsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsTUFBSSxPQUFPRSxVQUFTO0FBQVUsVUFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBRXRFLFFBQU0sTUFBZ0IsQ0FBQyxDQUFDO0FBQ3hCLFFBQU0sWUFBbUJBLE1BQUssU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsUUFBUTtBQUU1RCxZQUFVLFFBQVEsQ0FBQyxHQUFHRSxJQUFHLE1BQU07QUFDM0IsTUFBRUEsRUFBQyxJQUFJLFNBQVMsQ0FBQztBQUFBLEVBQ3JCLENBQUM7QUFFRCxNQUFJLElBQUksVUFBVTtBQUlsQixXQUFTQSxLQUFJLEdBQUcsSUFBSSxHQUFHQSxNQUFLO0FBQ3hCLFNBQUtBLEtBQUtBLEtBQUksTUFBTyxHQUFHO0FBQ3BCLFVBQUlBLEVBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUFBLElBQzFCLE9BQU87QUFDSCxVQUFJQSxFQUFDLElBQUk7QUFBQSxJQUNiO0FBQUEsRUFDSjtBQUVBLE1BQUksU0FBYztBQUVsQixXQUFTQSxLQUFJLEdBQUdBLEtBQUksSUFBSSxRQUFRQSxNQUFLO0FBQ2pDLFFBQUksSUFBSUEsRUFBQyxHQUFHO0FBQ1IsZ0JBQVVBO0FBQUEsSUFDZDtBQUFBLEVBQ0o7QUFFQSxXQUFTLE9BQU8sU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsUUFBUTtBQUM5QyxTQUFPLFFBQVEsQ0FBQyxHQUFRQSxJQUFRLE1BQVc7QUFDdkMsTUFBRUEsRUFBQyxJQUFJLFNBQVMsQ0FBQztBQUFBLEVBQ3JCLENBQUM7QUFHRCxXQUFTQSxLQUFJLEdBQUdBLEtBQUksT0FBTyxRQUFRQSxNQUFLO0FBQ3BDLFFBQUksS0FBS0EsRUFBQyxJQUFJLE9BQU9BLEVBQUMsSUFBSSxJQUFJO0FBQUEsRUFDbEM7QUFFQSxXQUFTO0FBRVQsV0FBU0EsS0FBSSxHQUFHQSxLQUFJLElBQUksUUFBUUEsTUFBSztBQUNqQyxRQUFJLElBQUlBLEVBQUMsR0FBRztBQUNSO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFHQSxNQUFJLENBQUMsSUFBSSxTQUFTLEtBQUssSUFBSSxJQUFJO0FBRS9CLFNBQU8sSUFBSSxLQUFLLEVBQUU7QUFDdEI7QUFHQSxTQUFTLGlDQUFpQ0wsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ2hGLFFBQU1FLFFBQU9ILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3ZELE1BQUksT0FBT0UsVUFBUztBQUFVLFVBQU0sSUFBSSxNQUFNLHdCQUF3QjtBQUV0RSxNQUFJLE1BQU07QUFDVixRQUFNLE9BQWlCLENBQUM7QUFHeEIsYUFBV0UsTUFBS0YsTUFBSyxNQUFNLEVBQUUsR0FBRztBQUM1QixVQUFNLE1BQU0sU0FBU0EsTUFBS0UsRUFBQyxDQUFDO0FBQzVCLFNBQUtBLEVBQUMsSUFBSTtBQUVWLFFBQUksS0FBSztBQUNMLGFBQU8sQ0FBQ0E7QUFBQSxJQUNaO0FBQUEsRUFDSjtBQUdBLE1BQUksS0FBSztBQUVMLFNBQUssR0FBRyxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUk7QUFBQSxFQUNoQztBQU1BLE1BQUksTUFBTTtBQUVWLFdBQVNBLEtBQUksR0FBR0EsS0FBSSxLQUFLLFFBQVFBLE1BQUs7QUFFbEMsU0FBS0EsS0FBS0EsS0FBSSxNQUFPLEdBQUc7QUFDcEIsYUFBTyxLQUFLQSxFQUFDO0FBQUEsSUFDakI7QUFBQSxFQUNKO0FBSUEsU0FBTyxTQUFTLEtBQUssQ0FBQztBQUMxQjtBQUVBLFNBQVMsaUJBQWlCTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDaEUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFDdkQsUUFBTSxJQUFZRSxNQUFLO0FBQ3ZCLE1BQUlFLEtBQUk7QUFDUixXQUFTLFFBQVEsR0FBR0EsS0FBSSxLQUFLQSxNQUFLLE9BQU8sRUFBRUEsSUFBRztBQUMxQyxZQUFRLEtBQUssSUFBSUEsS0FBSUYsTUFBS0UsRUFBQyxHQUFHLEtBQUs7QUFBQSxFQUN2QztBQUNBLFFBQU0sV0FBb0JBLE9BQU07QUFDaEMsU0FBTyxXQUFXLE1BQU07QUFDNUI7QUFFQSxTQUFTLG1CQUFtQkwsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ2xFLFFBQU1FLFFBQU9ILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBRXZELFFBQU0sSUFBWUUsTUFBSztBQUN2QixNQUFJLFFBQVE7QUFDWixNQUFJLFFBQVE7QUFDWixNQUFJLFdBQVc7QUFDZixTQUFPLFFBQVEsSUFBSSxHQUFHO0FBQ2xCLFFBQUksYUFBYTtBQUNqQixhQUFTRSxLQUFJLE9BQU9BLEtBQUksVUFBVUEsTUFBSztBQUNuQyxVQUFJQSxLQUFJRixNQUFLRSxFQUFDLElBQUksT0FBTztBQUNyQixnQkFBUUEsS0FBSUYsTUFBS0UsRUFBQztBQUNsQixxQkFBYUE7QUFBQSxNQUNqQjtBQUFBLElBQ0o7QUFDQSxRQUFJLGVBQWUsSUFBSTtBQUNuQixjQUFRO0FBQ1I7QUFBQSxJQUNKO0FBQ0EsZUFBVztBQUNYO0FBQUEsRUFDSjtBQUNBLFNBQU87QUFDWDtBQUVBLFNBQVMsdUJBQXVCLEtBQTBCO0FBQ3RELFFBQU0sYUFBdUIsQ0FBQztBQUM5QixNQUFJLFFBQVEsQ0FBQyxNQUFlO0FBQ3hCLFFBQUksSUFBSSxPQUFPLENBQUM7QUFDaEIsUUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLGVBQVcsS0FBSyxDQUFDO0FBQUEsRUFDckIsQ0FBQztBQUVELFNBQU8sV0FBVyxLQUFLLEdBQUcsRUFBRSxRQUFRLE9BQU8sRUFBRTtBQUNqRDtBQUVBLFNBQVMsMEJBQTBCTCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDekUsUUFBTUUsUUFBT0gsSUFBRyxlQUFlLFFBQVFFLFdBQVVELE9BQU07QUFFdkQsUUFBTSxZQUF3QkUsTUFBSyxNQUFNO0FBQ3pDLFlBQVUsS0FBSyxDQUFDLEdBQWEsTUFBZ0I7QUFDekMsV0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFBQSxFQUNyQixDQUFDO0FBRUQsUUFBTSxTQUFxQixDQUFDO0FBQzVCLE1BQUksUUFBZ0IsVUFBVSxDQUFDLEVBQUUsQ0FBQztBQUNsQyxNQUFJLE1BQWMsVUFBVSxDQUFDLEVBQUUsQ0FBQztBQUNoQyxhQUFXLFlBQVksV0FBVztBQUM5QixRQUFJLFNBQVMsQ0FBQyxLQUFLLEtBQUs7QUFDcEIsWUFBTSxLQUFLLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztBQUFBLElBQ25DLE9BQU87QUFDSCxhQUFPLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQztBQUN4QixjQUFRLFNBQVMsQ0FBQztBQUNsQixZQUFNLFNBQVMsQ0FBQztBQUFBLElBQ3BCO0FBQUEsRUFDSjtBQUNBLFNBQU8sS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDO0FBRXhCLFFBQU0sa0JBQTBCLHVCQUF1QixNQUFNO0FBQzdELFNBQU87QUFDWDtBQUVBLFNBQVMsd0JBQXdCSCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDdkUsUUFBTUUsUUFBcUNILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBR3JGLFdBQVMsY0FBYyxRQUFpQjtBQUNwQyxVQUFNLFVBQVVFLE1BQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxNQUFNLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQ3RFLFVBQU0sV0FBV0EsTUFBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sTUFBTSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDdkUsV0FBTyxRQUFRLE9BQU8sUUFBUTtBQUFBLEVBQ2xDO0FBR0EsUUFBTSxXQUFXLE1BQU1BLE1BQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFTO0FBQzlDLFNBQU8sU0FBUyxLQUFLLENBQUMsUUFBUSxRQUFRLE1BQVMsR0FBRztBQUU5QyxVQUFNLGdCQUFnQixTQUFTLFVBQVUsQ0FBQyxRQUFRLFFBQVEsTUFBUztBQUNuRSxhQUFTLGFBQWEsSUFBSTtBQUMxQixVQUFNLFdBQVcsQ0FBQyxhQUFhO0FBRy9CLFdBQU8sU0FBUyxTQUFTLEdBQUc7QUFDeEIsWUFBTSxJQUFJLFNBQVMsSUFBSSxLQUFLO0FBQzVCLFlBQU0sWUFBWSxjQUFjLENBQUM7QUFHakMsaUJBQVcsTUFBTSxXQUFXO0FBQ3hCLGNBQU0sSUFBSSxVQUFVLEVBQUU7QUFJdEIsWUFBSSxTQUFTLENBQUMsTUFBTSxRQUFXO0FBQzNCLGNBQUksU0FBUyxDQUFDLE1BQU07QUFBRyxxQkFBUyxDQUFDLElBQUk7QUFBQTtBQUNoQyxxQkFBUyxDQUFDLElBQUk7QUFFbkIsbUJBQVMsS0FBSyxDQUFDO0FBQUEsUUFDbkIsV0FHUyxTQUFTLENBQUMsTUFBTSxTQUFTLENBQUMsR0FBRztBQUVsQyxpQkFBTztBQUFBLFFBQ1g7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFHQSxTQUFPO0FBQ1g7QUFFQSxTQUFTLHVCQUF1QkgsS0FBUUUsV0FBa0JELFNBQWdCO0FBQ3RFLFFBQU1FLFFBQU9ILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBQ3ZELE1BQUksT0FBT0UsVUFBUztBQUFVLFVBQU0sSUFBSSxNQUFNLHdCQUF3QjtBQUV0RSxNQUFJLE1BQU07QUFDVixNQUFJLElBQVlBO0FBQ2hCLFNBQU8sS0FBSyxNQUFNLE1BQU0sTUFBTSxJQUFJO0FBQzlCLFdBQU8sSUFBSSxRQUFRLEdBQUc7QUFDbEIsVUFBSSxLQUFLLE1BQU0sSUFBSSxHQUFHO0FBQUEsSUFDMUI7QUFDQSxNQUFFO0FBQUEsRUFDTjtBQUVBLFNBQU8sTUFBTSxJQUFJLE1BQU0sSUFBSTtBQUMvQjtBQUVBLFNBQVMsZ0JBQWdCSCxLQUFRRSxXQUFrQkQsU0FBZ0I7QUFDL0QsUUFBTUUsUUFBbUJILElBQUcsZUFBZSxRQUFRRSxXQUFVRCxPQUFNO0FBRW5FLFFBQU0sU0FBbUIsQ0FBQztBQUMxQixRQUFNLElBQVlFLE1BQUs7QUFDdkIsUUFBTSxJQUFZQSxNQUFLLENBQUMsRUFBRTtBQUMxQixNQUFJLElBQUk7QUFDUixNQUFJLElBQVksSUFBSTtBQUNwQixNQUFJLElBQUk7QUFDUixNQUFJLElBQVksSUFBSTtBQUNwQixNQUFJLElBQUk7QUFDUixNQUFJLE9BQU87QUFDWCxTQUFPLENBQUMsTUFBTTtBQUVWLGFBQVMsTUFBYyxHQUFHLE9BQU8sR0FBRyxPQUFPO0FBQ3ZDLGFBQU8sQ0FBQyxJQUFJQSxNQUFLLENBQUMsRUFBRSxHQUFHO0FBQ3ZCLFFBQUU7QUFBQSxJQUNOO0FBQ0EsUUFBSSxFQUFFLElBQUksR0FBRztBQUNULGFBQU87QUFDUDtBQUFBLElBQ0o7QUFHQSxhQUFTLE1BQWMsR0FBRyxPQUFPLEdBQUcsT0FBTztBQUN2QyxhQUFPLENBQUMsSUFBSUEsTUFBSyxHQUFHLEVBQUUsQ0FBQztBQUN2QixRQUFFO0FBQUEsSUFDTjtBQUNBLFFBQUksRUFBRSxJQUFJLEdBQUc7QUFDVCxhQUFPO0FBQ1A7QUFBQSxJQUNKO0FBR0EsYUFBUyxNQUFjLEdBQUcsT0FBTyxHQUFHLE9BQU87QUFDdkMsYUFBTyxDQUFDLElBQUlBLE1BQUssQ0FBQyxFQUFFLEdBQUc7QUFDdkIsUUFBRTtBQUFBLElBQ047QUFDQSxRQUFJLEVBQUUsSUFBSSxHQUFHO0FBQ1QsYUFBTztBQUNQO0FBQUEsSUFDSjtBQUdBLGFBQVMsTUFBYyxHQUFHLE9BQU8sR0FBRyxPQUFPO0FBQ3ZDLGFBQU8sQ0FBQyxJQUFJQSxNQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLFFBQUU7QUFBQSxJQUNOO0FBQ0EsUUFBSSxFQUFFLElBQUksR0FBRztBQUNULGFBQU87QUFDUDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBRUEsU0FBTztBQUNYOyIsIm5hbWVzIjpbIm5zIiwic2VydmVyIiwiY29udHJhY3QiLCJkYXRhIiwicGF0aCIsImkiLCJvcHMiLCJsZWZ0IiwicmlnaHQiLCJyZXMiXX0=\",\"filename\":\"CodingContracts/manager.js\",\"server\":\"home\"}}],[\"CodingContracts/contractTests.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { algorithmicStockTraderIII } from \\\"/CodingContracts/manager.js\\\";\\nexport function generateSwitchCase(ns) {\\n  let switchCase = \\\"\\\";\\n  switchCase += \\\"switch (contractType) {\\\\n\\\";\\n  for (const contractType of ns.codingcontract.getContractTypes()) {\\n    switchCase += `case \\\"${contractType}\\\":\\n`;\\n    switchCase += `break;\\n`;\\n  }\\n  switchCase += \\\"default:\\\\n\\\";\\n  switchCase += \\\"break;\\\\n\\\";\\n  switchCase += \\\"}\\\\n\\\";\\n  return switchCase;\\n}\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  algorithmicStockTraderIII(ns, \\\"\\\", \\\"\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRyYWN0VGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmltcG9ydCB7IGFsZ29yaXRobWljU3RvY2tUcmFkZXJJSUkgfSBmcm9tIFwiLi9tYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTd2l0Y2hDYXNlKG5zOiBOUykge1xyXG4gICAgbGV0IHN3aXRjaENhc2UgPSBcIlwiO1xyXG4gICAgc3dpdGNoQ2FzZSArPSBcInN3aXRjaCAoY29udHJhY3RUeXBlKSB7XFxuXCI7XHJcbiAgICBmb3IgKGNvbnN0IGNvbnRyYWN0VHlwZSBvZiBucy5jb2Rpbmdjb250cmFjdC5nZXRDb250cmFjdFR5cGVzKCkpIHtcclxuICAgICAgICBzd2l0Y2hDYXNlICs9IGBjYXNlIFwiJHtjb250cmFjdFR5cGV9XCI6XFxuYDtcclxuICAgICAgICBzd2l0Y2hDYXNlICs9IGBicmVhaztcXG5gO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoQ2FzZSArPSBcImRlZmF1bHQ6XFxuXCI7XHJcbiAgICBzd2l0Y2hDYXNlICs9IFwiYnJlYWs7XFxuXCI7XHJcbiAgICBzd2l0Y2hDYXNlICs9IFwifVxcblwiO1xyXG4gICAgcmV0dXJuIHN3aXRjaENhc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuXHJcbiAgICBhbGdvcml0aG1pY1N0b2NrVHJhZGVySUlJKG5zLCBcIlwiLCBcIlwiKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsaUNBQWlDO0FBRW5DLGdCQUFTLG1CQUFtQixJQUFRO0FBQ3ZDLE1BQUksYUFBYTtBQUNqQixnQkFBYztBQUNkLGFBQVcsZ0JBQWdCLEdBQUcsZUFBZSxpQkFBaUIsR0FBRztBQUM3RCxrQkFBYyxTQUFTLFlBQVk7QUFBQTtBQUNuQyxrQkFBYztBQUFBO0FBQUEsRUFDbEI7QUFDQSxnQkFBYztBQUNkLGdCQUFjO0FBQ2QsZ0JBQWM7QUFDZCxTQUFPO0FBQ1g7QUFFQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLEtBQUcsV0FBVyxLQUFLO0FBRW5CLDRCQUEwQixJQUFJLElBQUksRUFBRTtBQUN4QzsiLCJuYW1lcyI6W119\",\"filename\":\"CodingContracts/contractTests.js\",\"server\":\"home\"}}],[\"PortManager.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export class PortManager {\\n  static instance;\\n  registeredPorts = [];\\n  lastPort = 0;\\n  static getInstance() {\\n    if (!PortManager.instance) {\\n      PortManager.instance = new PortManager();\\n    }\\n    return PortManager.instance;\\n  }\\n  registerPort(ns, port, pid, identifier = \\\"\\\") {\\n    const portObj = {\\n      portNumber: port,\\n      parentPID: pid,\\n      identifier\\n    };\\n    this.registeredPorts.push(portObj);\\n    return portObj;\\n  }\\n  getPort(ns, pid, identifier = \\\"\\\") {\\n    const portNum = this.getNextPort();\\n    const port = {\\n      portNumber: portNum,\\n      parentPID: pid,\\n      identifier\\n    };\\n    this.registeredPorts.push(port);\\n    return ns.getPortHandle(port.portNumber);\\n  }\\n  unregisterPort(ns, port) {\\n    const index = this.registeredPorts.findIndex((p) => p.portNumber === port);\\n    if (index === -1) {\\n      throw new Error(`Port ${port} is not registered`);\\n    }\\n    this.registeredPorts.splice(index, 1);\\n    ns.clearPort(port);\\n  }\\n  reset() {\\n    this.registeredPorts = [];\\n    this.lastPort = 0;\\n  }\\n  getNextPort() {\\n    this.lastPort++;\\n    return this.lastPort;\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBvcnRNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TLCBOZXRzY3JpcHRQb3J0IH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuaW50ZXJmYWNlIFBvcnQge1xyXG4gICAgcG9ydE51bWJlcjogbnVtYmVyO1xyXG4gICAgcGFyZW50UElEOiBudW1iZXI7XHJcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb3J0TWFuYWdlciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUG9ydE1hbmFnZXI7XHJcblxyXG4gICAgcHJpdmF0ZSByZWdpc3RlcmVkUG9ydHM6IFBvcnRbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBsYXN0UG9ydCA9IDA7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBQb3J0TWFuYWdlciB7XHJcbiAgICAgICAgaWYgKCFQb3J0TWFuYWdlci5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBQb3J0TWFuYWdlci5pbnN0YW5jZSA9IG5ldyBQb3J0TWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUG9ydE1hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlZ2lzdGVyUG9ydChuczogTlMsIHBvcnQ6IG51bWJlciwgcGlkOiBudW1iZXIsIGlkZW50aWZpZXIgPSBcIlwiKTogUG9ydCB7XHJcbiAgICAgICAgY29uc3QgcG9ydE9iaiA9IHtcclxuICAgICAgICAgICAgcG9ydE51bWJlcjogcG9ydCxcclxuICAgICAgICAgICAgcGFyZW50UElEOiBwaWQsXHJcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyZWRQb3J0cy5wdXNoKHBvcnRPYmopO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9ydE9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UG9ydChuczogTlMsIHBpZDogbnVtYmVyLCBpZGVudGlmaWVyID0gXCJcIik6IE5ldHNjcmlwdFBvcnQge1xyXG4gICAgICAgIGNvbnN0IHBvcnROdW0gPSB0aGlzLmdldE5leHRQb3J0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBvcnQgPSB7XHJcbiAgICAgICAgICAgIHBvcnROdW1iZXI6IHBvcnROdW0sXHJcbiAgICAgICAgICAgIHBhcmVudFBJRDogcGlkLFxyXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcmVkUG9ydHMucHVzaChwb3J0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5zLmdldFBvcnRIYW5kbGUocG9ydC5wb3J0TnVtYmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdW5yZWdpc3RlclBvcnQobnM6IE5TLCBwb3J0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucmVnaXN0ZXJlZFBvcnRzLmZpbmRJbmRleCgocCkgPT4gcC5wb3J0TnVtYmVyID09PSBwb3J0KTtcclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUG9ydCAke3BvcnR9IGlzIG5vdCByZWdpc3RlcmVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZFBvcnRzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAgIG5zLmNsZWFyUG9ydChwb3J0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcmVkUG9ydHMgPSBbXTtcclxuICAgICAgICB0aGlzLmxhc3RQb3J0ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5leHRQb3J0KCk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5sYXN0UG9ydCsrO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RQb3J0O1xyXG4gICAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBUU8sYUFBTSxZQUFZO0FBQUEsRUFDckIsT0FBZTtBQUFBLEVBRVAsa0JBQTBCLENBQUM7QUFBQSxFQUMzQixXQUFXO0FBQUEsRUFFbkIsT0FBYyxjQUEyQjtBQUNyQyxRQUFJLENBQUMsWUFBWSxVQUFVO0FBQ3ZCLGtCQUFZLFdBQVcsSUFBSSxZQUFZO0FBQUEsSUFDM0M7QUFDQSxXQUFPLFlBQVk7QUFBQSxFQUN2QjtBQUFBLEVBRU8sYUFBYSxJQUFRLE1BQWMsS0FBYSxhQUFhLElBQVU7QUFDMUUsVUFBTSxVQUFVO0FBQUEsTUFDWixZQUFZO0FBQUEsTUFDWixXQUFXO0FBQUEsTUFDWDtBQUFBLElBQ0o7QUFDQSxTQUFLLGdCQUFnQixLQUFLLE9BQU87QUFFakMsV0FBTztBQUFBLEVBQ1g7QUFBQSxFQUVPLFFBQVEsSUFBUSxLQUFhLGFBQWEsSUFBbUI7QUFDaEUsVUFBTSxVQUFVLEtBQUssWUFBWTtBQUVqQyxVQUFNLE9BQU87QUFBQSxNQUNULFlBQVk7QUFBQSxNQUNaLFdBQVc7QUFBQSxNQUNYO0FBQUEsSUFDSjtBQUNBLFNBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUU5QixXQUFPLEdBQUcsY0FBYyxLQUFLLFVBQVU7QUFBQSxFQUMzQztBQUFBLEVBRU8sZUFBZSxJQUFRLE1BQW9CO0FBQzlDLFVBQU0sUUFBUSxLQUFLLGdCQUFnQixVQUFVLENBQUMsTUFBTSxFQUFFLGVBQWUsSUFBSTtBQUN6RSxRQUFJLFVBQVUsSUFBSTtBQUNkLFlBQU0sSUFBSSxNQUFNLFFBQVEsSUFBSSxvQkFBb0I7QUFBQSxJQUNwRDtBQUNBLFNBQUssZ0JBQWdCLE9BQU8sT0FBTyxDQUFDO0FBRXBDLE9BQUcsVUFBVSxJQUFJO0FBQUEsRUFDckI7QUFBQSxFQUVPLFFBQWM7QUFDakIsU0FBSyxrQkFBa0IsQ0FBQztBQUN4QixTQUFLLFdBQVc7QUFBQSxFQUNwQjtBQUFBLEVBRVEsY0FBc0I7QUFDMUIsU0FBSztBQUNMLFdBQU8sS0FBSztBQUFBLEVBQ2hCO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"PortManager.js\",\"server\":\"home\"}}],[\"Corporation/gorg2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { buyBoostMaterial } from \\\"/Corporation/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  ns.print(\\\"\\\\n\\\");\\n  const corp = ns.corporation;\\n  await buyBoostMaterial(ns, \\\"Lettuce begin\\\");\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdvcmcyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBidXlCb29zdE1hdGVyaWFsLCBnZXRPcHRpbWFsQm9vc3RNYXRlcmlhbFF1YW50aXRpZXMgfSBmcm9tIFwiLi9saWJcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgbnMudGFpbCgpO1xyXG4gICAgbnMuZGlzYWJsZUxvZyhcIkFMTFwiKTtcclxuICAgIG5zLnByaW50KFwiXFxuXCIpO1xyXG5cclxuICAgIGNvbnN0IGNvcnAgPSBucy5jb3Jwb3JhdGlvbjtcclxuICAgIC8vIGNvbnN0IGRhdGEgPSBjb3JwLmdldEluZHVzdHJ5RGF0YShcIlRvYmFjY29cIik7XHJcbiAgICAvLyBjb25zdCB3YXJlaG91c2VTcGFjZSA9IGNvcnAuZ2V0V2FyZWhvdXNlKFwiVG9iYWNjb1wiLCBcIlNlY3Rvci0xMlwiKS5zaXplICogMC44O1xyXG4gICAgLy8gY29uc3QgbmVlZGVkTWF0ZXJpYWwgPSBnZXRPcHRpbWFsQm9vc3RNYXRlcmlhbFF1YW50aXRpZXMoZGF0YSwgd2FyZWhvdXNlU3BhY2UpO1xyXG4gICAgLy8gbnMucHJpbnQobmVlZGVkTWF0ZXJpYWwpO1xyXG4gICAgLy8gY29uc3QgZ29yZyA9IGNvcnAuZ2V0UHJvZHVjdChcIlRvYmFjY29cIiwgXCJTZWN0b3ItMTJcIiwgXCJnb3JnOVwiKS5jb21wZXRpdGlvbjtcclxuICAgIC8vIGNvbnN0IGdvcmcxID0gY29ycC5nZXRQcm9kdWN0KFwiVG9iYWNjb1wiLCBcIlNlY3Rvci0xMlwiLCBcImdvcmc5XCIpLmRlbWFuZDtcclxuICAgIC8vIG5zLnByaW50KGBnb3JnOiAke2dvcmd9YCk7XHJcbiAgICAvLyBucy5wcmludChgZ29yZzE6ICR7Z29yZzF9YCk7XHJcbiAgICBhd2FpdCBidXlCb29zdE1hdGVyaWFsKG5zLCBcIkxldHR1Y2UgYmVnaW5cIik7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLHdCQUEyRDtBQUVwRSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLEtBQUcsS0FBSztBQUNSLEtBQUcsV0FBVyxLQUFLO0FBQ25CLEtBQUcsTUFBTSxJQUFJO0FBRWIsUUFBTSxPQUFPLEdBQUc7QUFTaEIsUUFBTSxpQkFBaUIsSUFBSSxlQUFlO0FBQzlDOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"Corporation/gorg2.js\",\"server\":\"home\"}}],[\"Corporation/teaParty.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const COST_PER_EMPOLYEE = 2e5;\\n  const ENERGY_THRESHOLD = 99;\\n  const MORALE_THRESHOLD = 99;\\n  while (true) {\\n    const divisions = ns.corporation.getCorporation().divisions;\\n    for (const division of divisions) {\\n      const divisionCities = ns.corporation.getDivision(division).cities;\\n      for (const city of divisionCities) {\\n        const office = ns.corporation.getOffice(division, city);\\n        const energy = office.avgEnergy;\\n        const morale = office.avgMorale;\\n        ns.print(`City: ${city}, Energy: ${ns.formatNumber(energy)}, Morale: ${ns.formatNumber(morale)}`);\\n        if (energy < ENERGY_THRESHOLD)\\n          ns.corporation.buyTea(division, city);\\n        if (morale < MORALE_THRESHOLD)\\n          ns.corporation.throwParty(division, city, COST_PER_EMPOLYEE);\\n      }\\n    }\\n    const state = await ns.corporation.nextUpdate();\\n    ns.print(state);\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlYVBhcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgLy8gbnMuY29ycG9yYXRpb24udGhyb3dQYXJ0eSgpO1xyXG4gICAgLy8gbnMuY29ycG9yYXRpb24uYnV5VGVhKFwibGV0dHVjZSBiZWdpblwiLCBcIlNlY3Rvci0xMlwiKTtcclxuXHJcbiAgICAvLyBucy5jb3Jwb3JhdGlvbi5nZXRDb3Jwb3JhdGlvbigpO1xyXG5cclxuICAgIGNvbnN0IENPU1RfUEVSX0VNUE9MWUVFID0gMjAwXzAwMDtcclxuICAgIGNvbnN0IEVORVJHWV9USFJFU0hPTEQgPSA5OTtcclxuICAgIGNvbnN0IE1PUkFMRV9USFJFU0hPTEQgPSA5OTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIC8vIGNvbnN0IGNvb3JwID0gbnMuY29ycG9yYXRpb24uZ2V0Q29ycG9yYXRpb24oKTtcclxuICAgICAgICBjb25zdCBkaXZpc2lvbnMgPSBucy5jb3Jwb3JhdGlvbi5nZXRDb3Jwb3JhdGlvbigpLmRpdmlzaW9ucztcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkaXZpc2lvbiBvZiBkaXZpc2lvbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGl2aXNpb25DaXRpZXMgPSBucy5jb3Jwb3JhdGlvbi5nZXREaXZpc2lvbihkaXZpc2lvbikuY2l0aWVzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNpdHkgb2YgZGl2aXNpb25DaXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZmljZSA9IG5zLmNvcnBvcmF0aW9uLmdldE9mZmljZShkaXZpc2lvbiwgY2l0eSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbmVyZ3kgPSBvZmZpY2UuYXZnRW5lcmd5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9yYWxlID0gb2ZmaWNlLmF2Z01vcmFsZTtcclxuXHJcbiAgICAgICAgICAgICAgICBucy5wcmludChgQ2l0eTogJHtjaXR5fSwgRW5lcmd5OiAke25zLmZvcm1hdE51bWJlcihlbmVyZ3kpfSwgTW9yYWxlOiAke25zLmZvcm1hdE51bWJlcihtb3JhbGUpfWApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlbmVyZ3kgPCBFTkVSR1lfVEhSRVNIT0xEKSBucy5jb3Jwb3JhdGlvbi5idXlUZWEoZGl2aXNpb24sIGNpdHkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vcmFsZSA8IE1PUkFMRV9USFJFU0hPTEQpIG5zLmNvcnBvcmF0aW9uLnRocm93UGFydHkoZGl2aXNpb24sIGNpdHksIENPU1RfUEVSX0VNUE9MWUVFKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBucy5jb3Jwb3JhdGlvbi5uZXh0VXBkYXRlKCk7XHJcblxyXG4gICAgICAgIG5zLnByaW50KHN0YXRlKTtcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVBLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFNbkIsUUFBTSxvQkFBb0I7QUFDMUIsUUFBTSxtQkFBbUI7QUFDekIsUUFBTSxtQkFBbUI7QUFFekIsU0FBTyxNQUFNO0FBRVQsVUFBTSxZQUFZLEdBQUcsWUFBWSxlQUFlLEVBQUU7QUFFbEQsZUFBVyxZQUFZLFdBQVc7QUFDOUIsWUFBTSxpQkFBaUIsR0FBRyxZQUFZLFlBQVksUUFBUSxFQUFFO0FBQzVELGlCQUFXLFFBQVEsZ0JBQWdCO0FBQy9CLGNBQU0sU0FBUyxHQUFHLFlBQVksVUFBVSxVQUFVLElBQUk7QUFDdEQsY0FBTSxTQUFTLE9BQU87QUFDdEIsY0FBTSxTQUFTLE9BQU87QUFFdEIsV0FBRyxNQUFNLFNBQVMsSUFBSSxhQUFhLEdBQUcsYUFBYSxNQUFNLENBQUMsYUFBYSxHQUFHLGFBQWEsTUFBTSxDQUFDLEVBQUU7QUFFaEcsWUFBSSxTQUFTO0FBQWtCLGFBQUcsWUFBWSxPQUFPLFVBQVUsSUFBSTtBQUNuRSxZQUFJLFNBQVM7QUFBa0IsYUFBRyxZQUFZLFdBQVcsVUFBVSxNQUFNLGlCQUFpQjtBQUFBLE1BQzlGO0FBQUEsSUFDSjtBQUVBLFVBQU0sUUFBUSxNQUFNLEdBQUcsWUFBWSxXQUFXO0FBRTlDLE9BQUcsTUFBTSxLQUFLO0FBQUEsRUFDbEI7QUFDSjsiLCJuYW1lcyI6W119\",\"filename\":\"Corporation/teaParty.js\",\"server\":\"home\"}}],[\"Corporation/LaunchCoorp.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CityName, buyBoostMaterial } from \\\"/Corporation/lib.js\\\";\\nexport async function main(ns) {\\n  ns.tail();\\n  ns.disableLog(\\\"ALL\\\");\\n  const corp = ns.corporation;\\n  if (corp.hasCorporation())\\n    throw new Error(\\\"You already have a corporation\\\");\\n  const res = corp.createCorporation(\\\"Apple\\\", false);\\n  if (!res)\\n    throw new Error(\\\"Failed to create corporation\\\");\\n  const divisionName = \\\"Lettuce begin\\\";\\n  try {\\n    const div = ns.corporation.getDivision(divisionName);\\n    ns.print(div);\\n  } catch (error) {\\n    ns.print(\\\"Division does not exist, creating...\\\");\\n    await initializeDivision(ns, divisionName, \\\"Agriculture\\\");\\n  }\\n}\\nasync function initializeDivision(ns, divisionName, industry) {\\n  const corp = ns.corporation;\\n  corp.expandIndustry(industry, divisionName);\\n  const cities = Object.values(CityName);\\n  for (const city of cities) {\\n    corp.expandCity(divisionName, city);\\n    const office = corp.getOffice(divisionName, city);\\n    for (let i = 0; i < office.size; i++) {\\n      corp.hireEmployee(divisionName, city, \\\"Unassigned\\\");\\n    }\\n    Object.entries(office.employeeJobs).map(([name]) => {\\n      return corp.setAutoJobAssignment(divisionName, city, name, 0);\\n    });\\n    Object.entries(office.employeeJobs).map(() => {\\n      return corp.setAutoJobAssignment(divisionName, city, \\\"Research & Development\\\", office.size);\\n    });\\n  }\\n  while (true) {\\n    const divisionCities = corp.getDivision(divisionName).cities;\\n    let canStop = true;\\n    for (const city of divisionCities) {\\n      const office = corp.getOffice(divisionName, city);\\n      const energy = office.avgEnergy;\\n      const morale = office.avgMorale;\\n      if (energy < 0.99) {\\n        corp.buyTea(divisionName, city);\\n        canStop = false;\\n      }\\n      if (morale < 0.99) {\\n        corp.throwParty(divisionName, city, 2e5);\\n        canStop = false;\\n      }\\n    }\\n    if (canStop) {\\n      break;\\n    }\\n    await ns.corporation.nextUpdate();\\n  }\\n  while (corp.getDivision(divisionName).researchPoints < 30) {\\n    await corp.nextUpdate();\\n  }\\n  while (corp.getHireAdVertCount(divisionName) < 2)\\n    corp.hireAdVert(divisionName);\\n  for (const city of corp.getDivision(divisionName).cities) {\\n    const lvl = corp.getWarehouse(divisionName, city).level;\\n    const targetLvl = 6;\\n    if (lvl < targetLvl) {\\n      for (let i = 0; i < targetLvl - lvl; i++) {\\n        corp.upgradeWarehouse(divisionName, city);\\n      }\\n    }\\n  }\\n  corp.setAutoJobAssignment(divisionName, \\\"Aevum\\\", \\\"Operations\\\", 1);\\n  corp.setAutoJobAssignment(divisionName, \\\"Aevum\\\", \\\"Engineer\\\", 1);\\n  corp.setAutoJobAssignment(divisionName, \\\"Aevum\\\", \\\"Business\\\", 1);\\n  await buyBoostMaterial(ns, divisionName);\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxhdW5jaENvb3JwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcnBJbmR1c3RyeU5hbWUsIE5TIH0gZnJvbSBcIkBuc1wiO1xyXG5pbXBvcnQgeyBDaXR5TmFtZSwgYnV5Qm9vc3RNYXRlcmlhbCB9IGZyb20gXCIuL2xpYlwiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBucy50YWlsKCk7XHJcbiAgICBucy5kaXNhYmxlTG9nKFwiQUxMXCIpO1xyXG4gICAgY29uc3QgY29ycCA9IG5zLmNvcnBvcmF0aW9uO1xyXG5cclxuICAgIGlmIChjb3JwLmhhc0NvcnBvcmF0aW9uKCkpIHRocm93IG5ldyBFcnJvcihcIllvdSBhbHJlYWR5IGhhdmUgYSBjb3Jwb3JhdGlvblwiKTtcclxuXHJcbiAgICBjb25zdCByZXMgPSBjb3JwLmNyZWF0ZUNvcnBvcmF0aW9uKFwiQXBwbGVcIiwgZmFsc2UpO1xyXG4gICAgaWYgKCFyZXMpIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY29ycG9yYXRpb25cIik7XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFBIQVNFIDEgLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyAxLiBjcmVhdGUgYXJnaSBkaXZpc2lvblxyXG4gICAgY29uc3QgZGl2aXNpb25OYW1lID0gXCJMZXR0dWNlIGJlZ2luXCI7XHJcbiAgICAvLyBjaGVjayBpZiBkaXZpc2lvbiBhbHJlYWR5IGV4aXN0c1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkaXYgPSBucy5jb3Jwb3JhdGlvbi5nZXREaXZpc2lvbihkaXZpc2lvbk5hbWUpO1xyXG4gICAgICAgIG5zLnByaW50KGRpdik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIG5zLnByaW50KFwiRGl2aXNpb24gZG9lcyBub3QgZXhpc3QsIGNyZWF0aW5nLi4uXCIpO1xyXG4gICAgICAgIGF3YWl0IGluaXRpYWxpemVEaXZpc2lvbihucywgZGl2aXNpb25OYW1lLCBcIkFncmljdWx0dXJlXCIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRGl2aXNpb24obnM6IE5TLCBkaXZpc2lvbk5hbWU6IHN0cmluZywgaW5kdXN0cnk6IENvcnBJbmR1c3RyeU5hbWUpIHtcclxuICAgIGNvbnN0IGNvcnAgPSBucy5jb3Jwb3JhdGlvbjtcclxuXHJcbiAgICBjb3JwLmV4cGFuZEluZHVzdHJ5KGluZHVzdHJ5LCBkaXZpc2lvbk5hbWUpO1xyXG4gICAgLy8gMi4gZXhwYW5kIGFyZ28gdG8gYWxsIGNpdGllc1xyXG4gICAgY29uc3QgY2l0aWVzOiBDaXR5TmFtZVtdID0gT2JqZWN0LnZhbHVlcyhDaXR5TmFtZSk7XHJcbiAgICBmb3IgKGNvbnN0IGNpdHkgb2YgY2l0aWVzKSB7XHJcbiAgICAgICAgY29ycC5leHBhbmRDaXR5KGRpdmlzaW9uTmFtZSwgY2l0eSk7XHJcbiAgICAgICAgY29uc3Qgb2ZmaWNlID0gY29ycC5nZXRPZmZpY2UoZGl2aXNpb25OYW1lLCBjaXR5KTtcclxuICAgICAgICAvLyAzLiBhc3NpZ24gdGhyZWUgZW1wbG95ZWVzIGluIGVhY2ggY2l0eSB0byBSJkQgdW50aWwgMTAwKD8pIFJQIFdISUxFIGdpdmluZyBUZWEvUGFydHlcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9mZmljZS5zaXplOyBpKyspIHtcclxuICAgICAgICAgICAgY29ycC5oaXJlRW1wbG95ZWUoZGl2aXNpb25OYW1lLCBjaXR5LCBcIlVuYXNzaWduZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9mZmljZS5lbXBsb3llZUpvYnMpLm1hcCgoW25hbWVdKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3JwLnNldEF1dG9Kb2JBc3NpZ25tZW50KGRpdmlzaW9uTmFtZSwgY2l0eSwgbmFtZSwgMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmVudHJpZXMob2ZmaWNlLmVtcGxveWVlSm9icykubWFwKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcnAuc2V0QXV0b0pvYkFzc2lnbm1lbnQoZGl2aXNpb25OYW1lLCBjaXR5LCBcIlJlc2VhcmNoICYgRGV2ZWxvcG1lbnRcIiwgb2ZmaWNlLnNpemUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gbWF4aW1pemUgbW9yYWxlIGFuZCBlbmVyZ3lcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgY29uc3QgZGl2aXNpb25DaXRpZXMgPSBjb3JwLmdldERpdmlzaW9uKGRpdmlzaW9uTmFtZSkuY2l0aWVzO1xyXG5cclxuICAgICAgICBsZXQgY2FuU3RvcCA9IHRydWU7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaXR5IG9mIGRpdmlzaW9uQ2l0aWVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZmljZSA9IGNvcnAuZ2V0T2ZmaWNlKGRpdmlzaW9uTmFtZSwgY2l0eSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZXJneSA9IG9mZmljZS5hdmdFbmVyZ3k7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vcmFsZSA9IG9mZmljZS5hdmdNb3JhbGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoZW5lcmd5IDwgMC45OSkge1xyXG4gICAgICAgICAgICAgICAgY29ycC5idXlUZWEoZGl2aXNpb25OYW1lLCBjaXR5KTtcclxuICAgICAgICAgICAgICAgIGNhblN0b3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobW9yYWxlIDwgMC45OSkge1xyXG4gICAgICAgICAgICAgICAgY29ycC50aHJvd1BhcnR5KGRpdmlzaW9uTmFtZSwgY2l0eSwgMjAwXzAwMCk7XHJcbiAgICAgICAgICAgICAgICBjYW5TdG9wID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjYW5TdG9wKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgbnMuY29ycG9yYXRpb24ubmV4dFVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIDQuIHdhaXQgZm9yIDMwIFJQXHJcbiAgICB3aGlsZSAoY29ycC5nZXREaXZpc2lvbihkaXZpc2lvbk5hbWUpLnJlc2VhcmNoUG9pbnRzIDwgMzApIHtcclxuICAgICAgICBhd2FpdCBjb3JwLm5leHRVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyA1LiBoaXJlIG9uZSBhZCB2ZXJ0IFRPRE86IG1heWJlIHR3bz9cclxuICAgIHdoaWxlIChjb3JwLmdldEhpcmVBZFZlcnRDb3VudChkaXZpc2lvbk5hbWUpIDwgMikgY29ycC5oaXJlQWRWZXJ0KGRpdmlzaW9uTmFtZSk7XHJcblxyXG4gICAgLy8gNi4gdXBncmFkZSBhbGwgd2FyZWhvdXNlcyB0byBsdmwgNSBvciA2XHJcbiAgICBmb3IgKGNvbnN0IGNpdHkgb2YgY29ycC5nZXREaXZpc2lvbihkaXZpc2lvbk5hbWUpLmNpdGllcykge1xyXG4gICAgICAgIGNvbnN0IGx2bCA9IGNvcnAuZ2V0V2FyZWhvdXNlKGRpdmlzaW9uTmFtZSwgY2l0eSkubGV2ZWw7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0THZsID0gNjtcclxuICAgICAgICBpZiAobHZsIDwgdGFyZ2V0THZsKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0THZsIC0gbHZsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvcnAudXBncmFkZVdhcmVob3VzZShkaXZpc2lvbk5hbWUsIGNpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIDcuIGJ1eSBzbWFydFN0b3JhZ2VcclxuXHJcbiAgICAvLyA2LiBhc3NpZ24gb25lIGVtcGxveWVlIGVhY2ggdG86IG9wZXJhdGlvbnMsIGVuZ2luZWVyLCBhbmQgYnVzaW5lc3NcclxuICAgIGNvcnAuc2V0QXV0b0pvYkFzc2lnbm1lbnQoZGl2aXNpb25OYW1lLCBcIkFldnVtXCIsIFwiT3BlcmF0aW9uc1wiLCAxKTtcclxuICAgIGNvcnAuc2V0QXV0b0pvYkFzc2lnbm1lbnQoZGl2aXNpb25OYW1lLCBcIkFldnVtXCIsIFwiRW5naW5lZXJcIiwgMSk7XHJcbiAgICBjb3JwLnNldEF1dG9Kb2JBc3NpZ25tZW50KGRpdmlzaW9uTmFtZSwgXCJBZXZ1bVwiLCBcIkJ1c2luZXNzXCIsIDEpO1xyXG5cclxuICAgIC8vIDcuIGJ1eSBib29zdCBtYXRlcmlhbHNcclxuICAgIGF3YWl0IGJ1eUJvb3N0TWF0ZXJpYWwobnMsIGRpdmlzaW9uTmFtZSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFVBQVUsd0JBQXdCO0FBRTNDLHNCQUFzQixLQUFLLElBQVE7QUFDL0IsS0FBRyxLQUFLO0FBQ1IsS0FBRyxXQUFXLEtBQUs7QUFDbkIsUUFBTSxPQUFPLEdBQUc7QUFFaEIsTUFBSSxLQUFLLGVBQWU7QUFBRyxVQUFNLElBQUksTUFBTSxnQ0FBZ0M7QUFFM0UsUUFBTSxNQUFNLEtBQUssa0JBQWtCLFNBQVMsS0FBSztBQUNqRCxNQUFJLENBQUM7QUFBSyxVQUFNLElBQUksTUFBTSw4QkFBOEI7QUFJeEQsUUFBTSxlQUFlO0FBRXJCLE1BQUk7QUFDQSxVQUFNLE1BQU0sR0FBRyxZQUFZLFlBQVksWUFBWTtBQUNuRCxPQUFHLE1BQU0sR0FBRztBQUFBLEVBQ2hCLFNBQVMsT0FBTztBQUNaLE9BQUcsTUFBTSxzQ0FBc0M7QUFDL0MsVUFBTSxtQkFBbUIsSUFBSSxjQUFjLGFBQWE7QUFBQSxFQUM1RDtBQUNKO0FBRUEsZUFBZSxtQkFBbUIsSUFBUSxjQUFzQixVQUE0QjtBQUN4RixRQUFNLE9BQU8sR0FBRztBQUVoQixPQUFLLGVBQWUsVUFBVSxZQUFZO0FBRTFDLFFBQU0sU0FBcUIsT0FBTyxPQUFPLFFBQVE7QUFDakQsYUFBVyxRQUFRLFFBQVE7QUFDdkIsU0FBSyxXQUFXLGNBQWMsSUFBSTtBQUNsQyxVQUFNLFNBQVMsS0FBSyxVQUFVLGNBQWMsSUFBSTtBQUVoRCxhQUFTLElBQUksR0FBRyxJQUFJLE9BQU8sTUFBTSxLQUFLO0FBQ2xDLFdBQUssYUFBYSxjQUFjLE1BQU0sWUFBWTtBQUFBLElBQ3REO0FBQ0EsV0FBTyxRQUFRLE9BQU8sWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTTtBQUNoRCxhQUFPLEtBQUsscUJBQXFCLGNBQWMsTUFBTSxNQUFNLENBQUM7QUFBQSxJQUNoRSxDQUFDO0FBQ0QsV0FBTyxRQUFRLE9BQU8sWUFBWSxFQUFFLElBQUksTUFBTTtBQUMxQyxhQUFPLEtBQUsscUJBQXFCLGNBQWMsTUFBTSwwQkFBMEIsT0FBTyxJQUFJO0FBQUEsSUFDOUYsQ0FBQztBQUFBLEVBQ0w7QUFFQSxTQUFPLE1BQU07QUFDVCxVQUFNLGlCQUFpQixLQUFLLFlBQVksWUFBWSxFQUFFO0FBRXRELFFBQUksVUFBVTtBQUNkLGVBQVcsUUFBUSxnQkFBZ0I7QUFDL0IsWUFBTSxTQUFTLEtBQUssVUFBVSxjQUFjLElBQUk7QUFDaEQsWUFBTSxTQUFTLE9BQU87QUFDdEIsWUFBTSxTQUFTLE9BQU87QUFFdEIsVUFBSSxTQUFTLE1BQU07QUFDZixhQUFLLE9BQU8sY0FBYyxJQUFJO0FBQzlCLGtCQUFVO0FBQUEsTUFDZDtBQUNBLFVBQUksU0FBUyxNQUFNO0FBQ2YsYUFBSyxXQUFXLGNBQWMsTUFBTSxHQUFPO0FBQzNDLGtCQUFVO0FBQUEsTUFDZDtBQUFBLElBQ0o7QUFFQSxRQUFJLFNBQVM7QUFDVDtBQUFBLElBQ0o7QUFFQSxVQUFNLEdBQUcsWUFBWSxXQUFXO0FBQUEsRUFDcEM7QUFHQSxTQUFPLEtBQUssWUFBWSxZQUFZLEVBQUUsaUJBQWlCLElBQUk7QUFDdkQsVUFBTSxLQUFLLFdBQVc7QUFBQSxFQUMxQjtBQUdBLFNBQU8sS0FBSyxtQkFBbUIsWUFBWSxJQUFJO0FBQUcsU0FBSyxXQUFXLFlBQVk7QUFHOUUsYUFBVyxRQUFRLEtBQUssWUFBWSxZQUFZLEVBQUUsUUFBUTtBQUN0RCxVQUFNLE1BQU0sS0FBSyxhQUFhLGNBQWMsSUFBSSxFQUFFO0FBQ2xELFVBQU0sWUFBWTtBQUNsQixRQUFJLE1BQU0sV0FBVztBQUNqQixlQUFTLElBQUksR0FBRyxJQUFJLFlBQVksS0FBSyxLQUFLO0FBQ3RDLGFBQUssaUJBQWlCLGNBQWMsSUFBSTtBQUFBLE1BQzVDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFLQSxPQUFLLHFCQUFxQixjQUFjLFNBQVMsY0FBYyxDQUFDO0FBQ2hFLE9BQUsscUJBQXFCLGNBQWMsU0FBUyxZQUFZLENBQUM7QUFDOUQsT0FBSyxxQkFBcUIsY0FBYyxTQUFTLFlBQVksQ0FBQztBQUc5RCxRQUFNLGlCQUFpQixJQUFJLFlBQVk7QUFDM0M7IiwibmFtZXMiOltdfQ==\",\"filename\":\"Corporation/LaunchCoorp.js\",\"server\":\"home\"}}],[\"Corporation/lib.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export var CityName = /* @__PURE__ */ ((CityName2) => {\\n  CityName2[\\\"Aevum\\\"] = \\\"Aevum\\\";\\n  CityName2[\\\"Chongqing\\\"] = \\\"Chongqing\\\";\\n  CityName2[\\\"Sector12\\\"] = \\\"Sector-12\\\";\\n  CityName2[\\\"NewTokyo\\\"] = \\\"New Tokyo\\\";\\n  CityName2[\\\"Ishima\\\"] = \\\"Ishima\\\";\\n  CityName2[\\\"Volhaven\\\"] = \\\"Volhaven\\\";\\n  return CityName2;\\n})(CityName || {});\\nvar BoostMaterialsSizes = /* @__PURE__ */ ((BoostMaterialsSizes2) => {\\n  BoostMaterialsSizes2[BoostMaterialsSizes2[\\\"AiCores\\\"] = 0.1] = \\\"AiCores\\\";\\n  BoostMaterialsSizes2[BoostMaterialsSizes2[\\\"Hardware\\\"] = 0.06] = \\\"Hardware\\\";\\n  BoostMaterialsSizes2[BoostMaterialsSizes2[\\\"RealEstate\\\"] = 5e-3] = \\\"RealEstate\\\";\\n  BoostMaterialsSizes2[BoostMaterialsSizes2[\\\"Robots\\\"] = 0.5] = \\\"Robots\\\";\\n  return BoostMaterialsSizes2;\\n})(BoostMaterialsSizes || {});\\nexport function getOptimalBoostMaterialQuantities(industryData, spaceConstraint, round = true) {\\n  const { aiCoreFactor, hardwareFactor, realEstateFactor, robotFactor } = industryData;\\n  if (aiCoreFactor === void 0 || hardwareFactor === void 0 || realEstateFactor === void 0 || robotFactor === void 0) {\\n    throw new Error(\\\"Industry data is missing factors\\\");\\n  }\\n  const boostMaterialCoefficients = [aiCoreFactor, hardwareFactor, realEstateFactor, robotFactor];\\n  const boostMaterialSizes = [\\n    0.1 /* AiCores */,\\n    0.06 /* Hardware */,\\n    5e-3 /* RealEstate */,\\n    0.5 /* Robots */\\n  ];\\n  const calculateOptimalQuantities = (matCoefficients, matSizes) => {\\n    const sumOfCoefficients = matCoefficients.reduce((a, b) => a + b, 0);\\n    const sumOfSizes = matSizes.reduce((a, b) => a + b, 0);\\n    const result = [];\\n    for (let i = 0; i < matSizes.length; ++i) {\\n      let matCount = (spaceConstraint - 500 * (matSizes[i] / matCoefficients[i] * (sumOfCoefficients - matCoefficients[i]) - (sumOfSizes - matSizes[i]))) / (sumOfCoefficients / matCoefficients[i]) / matSizes[i];\\n      if (matCoefficients[i] <= 0 || matCount < 0) {\\n        return calculateOptimalQuantities(matCoefficients.toSpliced(i, 1), matSizes.toSpliced(i, 1)).toSpliced(\\n          i,\\n          0,\\n          0\\n        );\\n      } else {\\n        if (round) {\\n          matCount = Math.round(matCount);\\n        }\\n        result.push(matCount);\\n      }\\n    }\\n    return result;\\n  };\\n  return calculateOptimalQuantities(boostMaterialCoefficients, boostMaterialSizes);\\n}\\nexport async function buyBoostMaterial(ns, divisionName) {\\n  const corp = ns.corporation;\\n  const division = corp.getDivision(divisionName);\\n  const data = corp.getIndustryData(division.type);\\n  const materials = [\\\"AI Cores\\\", \\\"Hardware\\\", \\\"Real Estate\\\", \\\"Robots\\\"];\\n  let state = corp.getCorporation().nextState;\\n  while (state !== \\\"PURCHASE\\\") {\\n    await corp.nextUpdate();\\n    state = corp.getCorporation().nextState;\\n    ns.print(\\\"waiting for PURCHASE, next state: \\\" + state);\\n  }\\n  ns.print(\\\"state: \\\" + state);\\n  const cities = division.cities;\\n  if (state === \\\"PURCHASE\\\") {\\n    for (const city of cities) {\\n      for (let i = 0; i < materials.length; i++) {\\n        const material = materials[i];\\n        const warehouseSpace = corp.getWarehouse(divisionName, city).size * 0.8;\\n        const neededMaterial = getOptimalBoostMaterialQuantities(data, warehouseSpace);\\n        const storedMaterial = corp.getMaterial(divisionName, city, material).stored;\\n        const toBuy = Math.max(neededMaterial[i] - storedMaterial, 0) / 10;\\n        ns.print(`Buying ${toBuy}/${neededMaterial[i]} ${material} in ${city}`);\\n        corp.buyMaterial(divisionName, city, material, toBuy);\\n      }\\n    }\\n  }\\n  await corp.nextUpdate();\\n  for (const city of cities) {\\n    for (let i = 0; i < materials.length; i++) {\\n      corp.buyMaterial(divisionName, city, materials[i], 0);\\n    }\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3JwSW5kdXN0cnlEYXRhLCBDb3JwSW5kdXN0cnlOYW1lLCBDb3JwTWF0ZXJpYWxOYW1lLCBOUyB9IGZyb20gXCJAbnNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIENpdHlOYW1lIHtcclxuICAgIEFldnVtID0gXCJBZXZ1bVwiLFxyXG4gICAgQ2hvbmdxaW5nID0gXCJDaG9uZ3FpbmdcIixcclxuICAgIFNlY3RvcjEyID0gXCJTZWN0b3ItMTJcIixcclxuICAgIE5ld1Rva3lvID0gXCJOZXcgVG9reW9cIixcclxuICAgIElzaGltYSA9IFwiSXNoaW1hXCIsXHJcbiAgICBWb2xoYXZlbiA9IFwiVm9saGF2ZW5cIixcclxufVxyXG5cclxuZW51bSBCb29zdE1hdGVyaWFsc1NpemVzIHtcclxuICAgIEFpQ29yZXMgPSAwLjEsXHJcbiAgICBIYXJkd2FyZSA9IDAuMDYsXHJcbiAgICBSZWFsRXN0YXRlID0gMC4wMDUsXHJcbiAgICBSb2JvdHMgPSAwLjUsXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPcHRpbWFsQm9vc3RNYXRlcmlhbFF1YW50aXRpZXMoXHJcbiAgICBpbmR1c3RyeURhdGE6IENvcnBJbmR1c3RyeURhdGEsXHJcbiAgICBzcGFjZUNvbnN0cmFpbnQ6IG51bWJlcixcclxuICAgIHJvdW5kID0gdHJ1ZSxcclxuKTogbnVtYmVyW10ge1xyXG4gICAgY29uc3QgeyBhaUNvcmVGYWN0b3IsIGhhcmR3YXJlRmFjdG9yLCByZWFsRXN0YXRlRmFjdG9yLCByb2JvdEZhY3RvciB9ID0gaW5kdXN0cnlEYXRhO1xyXG4gICAgaWYgKFxyXG4gICAgICAgIGFpQ29yZUZhY3RvciA9PT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgaGFyZHdhcmVGYWN0b3IgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgIHJlYWxFc3RhdGVGYWN0b3IgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgIHJvYm90RmFjdG9yID09PSB1bmRlZmluZWRcclxuICAgICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZHVzdHJ5IGRhdGEgaXMgbWlzc2luZyBmYWN0b3JzXCIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYm9vc3RNYXRlcmlhbENvZWZmaWNpZW50cyA9IFthaUNvcmVGYWN0b3IsIGhhcmR3YXJlRmFjdG9yLCByZWFsRXN0YXRlRmFjdG9yLCByb2JvdEZhY3Rvcl07XHJcbiAgICBjb25zdCBib29zdE1hdGVyaWFsU2l6ZXMgPSBbXHJcbiAgICAgICAgQm9vc3RNYXRlcmlhbHNTaXplcy5BaUNvcmVzLFxyXG4gICAgICAgIEJvb3N0TWF0ZXJpYWxzU2l6ZXMuSGFyZHdhcmUsXHJcbiAgICAgICAgQm9vc3RNYXRlcmlhbHNTaXplcy5SZWFsRXN0YXRlLFxyXG4gICAgICAgIEJvb3N0TWF0ZXJpYWxzU2l6ZXMuUm9ib3RzLFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBjYWxjdWxhdGVPcHRpbWFsUXVhbnRpdGllcyA9IChtYXRDb2VmZmljaWVudHM6IG51bWJlcltdLCBtYXRTaXplczogbnVtYmVyW10pOiBudW1iZXJbXSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3VtT2ZDb2VmZmljaWVudHMgPSBtYXRDb2VmZmljaWVudHMucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XHJcbiAgICAgICAgY29uc3Qgc3VtT2ZTaXplcyA9IG1hdFNpemVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0U2l6ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IG1hdENvdW50ID1cclxuICAgICAgICAgICAgICAgIChzcGFjZUNvbnN0cmFpbnQgLVxyXG4gICAgICAgICAgICAgICAgICAgIDUwMCAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgobWF0U2l6ZXNbaV0gLyBtYXRDb2VmZmljaWVudHNbaV0pICogKHN1bU9mQ29lZmZpY2llbnRzIC0gbWF0Q29lZmZpY2llbnRzW2ldKSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3VtT2ZTaXplcyAtIG1hdFNpemVzW2ldKSkpIC9cclxuICAgICAgICAgICAgICAgIChzdW1PZkNvZWZmaWNpZW50cyAvIG1hdENvZWZmaWNpZW50c1tpXSkgL1xyXG4gICAgICAgICAgICAgICAgbWF0U2l6ZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChtYXRDb2VmZmljaWVudHNbaV0gPD0gMCB8fCBtYXRDb3VudCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVPcHRpbWFsUXVhbnRpdGllcyhtYXRDb2VmZmljaWVudHMudG9TcGxpY2VkKGksIDEpLCBtYXRTaXplcy50b1NwbGljZWQoaSwgMSkpLnRvU3BsaWNlZChcclxuICAgICAgICAgICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXRDb3VudCA9IE1hdGgucm91bmQobWF0Q291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWF0Q291bnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNhbGN1bGF0ZU9wdGltYWxRdWFudGl0aWVzKGJvb3N0TWF0ZXJpYWxDb2VmZmljaWVudHMsIGJvb3N0TWF0ZXJpYWxTaXplcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBidXlCb29zdE1hdGVyaWFsKG5zOiBOUywgZGl2aXNpb25OYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNvcnAgPSBucy5jb3Jwb3JhdGlvbjtcclxuXHJcbiAgICBjb25zdCBkaXZpc2lvbiA9IGNvcnAuZ2V0RGl2aXNpb24oZGl2aXNpb25OYW1lKTtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gY29ycC5nZXRJbmR1c3RyeURhdGEoZGl2aXNpb24udHlwZSk7XHJcblxyXG4gICAgY29uc3QgbWF0ZXJpYWxzOiBDb3JwTWF0ZXJpYWxOYW1lW10gPSBbXCJBSSBDb3Jlc1wiLCBcIkhhcmR3YXJlXCIsIFwiUmVhbCBFc3RhdGVcIiwgXCJSb2JvdHNcIl07XHJcblxyXG4gICAgbGV0IHN0YXRlID0gY29ycC5nZXRDb3Jwb3JhdGlvbigpLm5leHRTdGF0ZTtcclxuICAgIC8vIHdhaXQgZm9yIFBVUkNIQVNFIHN0YXRlXHJcbiAgICB3aGlsZSAoc3RhdGUgIT09IFwiUFVSQ0hBU0VcIikge1xyXG4gICAgICAgIGF3YWl0IGNvcnAubmV4dFVwZGF0ZSgpO1xyXG4gICAgICAgIHN0YXRlID0gY29ycC5nZXRDb3Jwb3JhdGlvbigpLm5leHRTdGF0ZTtcclxuICAgICAgICBucy5wcmludChcIndhaXRpbmcgZm9yIFBVUkNIQVNFLCBuZXh0IHN0YXRlOiBcIiArIHN0YXRlKTtcclxuICAgIH1cclxuICAgIG5zLnByaW50KFwic3RhdGU6IFwiICsgc3RhdGUpO1xyXG4gICAgY29uc3QgY2l0aWVzID0gZGl2aXNpb24uY2l0aWVzO1xyXG4gICAgaWYgKHN0YXRlID09PSBcIlBVUkNIQVNFXCIpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNpdHkgb2YgY2l0aWVzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IG1hdGVyaWFsc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdhcmVob3VzZVNwYWNlID0gY29ycC5nZXRXYXJlaG91c2UoZGl2aXNpb25OYW1lLCBjaXR5KS5zaXplICogMC44O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmVlZGVkTWF0ZXJpYWwgPSBnZXRPcHRpbWFsQm9vc3RNYXRlcmlhbFF1YW50aXRpZXMoZGF0YSwgd2FyZWhvdXNlU3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkTWF0ZXJpYWwgPSBjb3JwLmdldE1hdGVyaWFsKGRpdmlzaW9uTmFtZSwgY2l0eSwgbWF0ZXJpYWwpLnN0b3JlZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvQnV5ID0gTWF0aC5tYXgobmVlZGVkTWF0ZXJpYWxbaV0gLSBzdG9yZWRNYXRlcmlhbCwgMCkgLyAxMDtcclxuICAgICAgICAgICAgICAgIG5zLnByaW50KGBCdXlpbmcgJHt0b0J1eX0vJHtuZWVkZWRNYXRlcmlhbFtpXX0gJHttYXRlcmlhbH0gaW4gJHtjaXR5fWApO1xyXG4gICAgICAgICAgICAgICAgY29ycC5idXlNYXRlcmlhbChkaXZpc2lvbk5hbWUsIGNpdHksIG1hdGVyaWFsLCB0b0J1eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhd2FpdCBjb3JwLm5leHRVcGRhdGUoKTtcclxuXHJcbiAgICAvLyBjYW5jZWwgYWxsIG9yZGVyc1xyXG4gICAgZm9yIChjb25zdCBjaXR5IG9mIGNpdGllcykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvcnAuYnV5TWF0ZXJpYWwoZGl2aXNpb25OYW1lLCBjaXR5LCBtYXRlcmlhbHNbaV0sIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQUVPLFdBQUssV0FBTCxrQkFBS0EsY0FBTDtBQUNILEVBQUFBLFVBQUEsV0FBUTtBQUNSLEVBQUFBLFVBQUEsZUFBWTtBQUNaLEVBQUFBLFVBQUEsY0FBVztBQUNYLEVBQUFBLFVBQUEsY0FBVztBQUNYLEVBQUFBLFVBQUEsWUFBUztBQUNULEVBQUFBLFVBQUEsY0FBVztBQU5ILFNBQUFBO0FBQUEsR0FBQTtBQVNaLElBQUssc0JBQUwsa0JBQUtDLHlCQUFMO0FBQ0ksRUFBQUEsMENBQUEsYUFBVSxPQUFWO0FBQ0EsRUFBQUEsMENBQUEsY0FBVyxRQUFYO0FBQ0EsRUFBQUEsMENBQUEsZ0JBQWEsUUFBYjtBQUNBLEVBQUFBLDBDQUFBLFlBQVMsT0FBVDtBQUpDLFNBQUFBO0FBQUEsR0FBQTtBQU9FLGdCQUFTLGtDQUNaLGNBQ0EsaUJBQ0EsUUFBUSxNQUNBO0FBQ1IsUUFBTSxFQUFFLGNBQWMsZ0JBQWdCLGtCQUFrQixZQUFZLElBQUk7QUFDeEUsTUFDSSxpQkFBaUIsVUFDakIsbUJBQW1CLFVBQ25CLHFCQUFxQixVQUNyQixnQkFBZ0IsUUFDbEI7QUFDRSxVQUFNLElBQUksTUFBTSxrQ0FBa0M7QUFBQSxFQUN0RDtBQUNBLFFBQU0sNEJBQTRCLENBQUMsY0FBYyxnQkFBZ0Isa0JBQWtCLFdBQVc7QUFDOUYsUUFBTSxxQkFBcUI7QUFBQSxJQUN2QjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0o7QUFFQSxRQUFNLDZCQUE2QixDQUFDLGlCQUEyQixhQUFpQztBQUM1RixVQUFNLG9CQUFvQixnQkFBZ0IsT0FBTyxDQUFDLEdBQUcsTUFBTSxJQUFJLEdBQUcsQ0FBQztBQUNuRSxVQUFNLGFBQWEsU0FBUyxPQUFPLENBQUMsR0FBRyxNQUFNLElBQUksR0FBRyxDQUFDO0FBQ3JELFVBQU0sU0FBUyxDQUFDO0FBQ2hCLGFBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEVBQUUsR0FBRztBQUN0QyxVQUFJLFlBQ0Msa0JBQ0csT0FDTSxTQUFTLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFNLG9CQUFvQixnQkFBZ0IsQ0FBQyxNQUN2RSxhQUFhLFNBQVMsQ0FBQyxRQUNuQyxvQkFBb0IsZ0JBQWdCLENBQUMsS0FDdEMsU0FBUyxDQUFDO0FBQ2QsVUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLEtBQUssV0FBVyxHQUFHO0FBQ3pDLGVBQU8sMkJBQTJCLGdCQUFnQixVQUFVLEdBQUcsQ0FBQyxHQUFHLFNBQVMsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQUEsVUFDekY7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFFBQ0o7QUFBQSxNQUNKLE9BQU87QUFDSCxZQUFJLE9BQU87QUFDUCxxQkFBVyxLQUFLLE1BQU0sUUFBUTtBQUFBLFFBQ2xDO0FBQ0EsZUFBTyxLQUFLLFFBQVE7QUFBQSxNQUN4QjtBQUFBLElBQ0o7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU8sMkJBQTJCLDJCQUEyQixrQkFBa0I7QUFDbkY7QUFFQSxzQkFBc0IsaUJBQWlCLElBQVEsY0FBc0I7QUFDakUsUUFBTSxPQUFPLEdBQUc7QUFFaEIsUUFBTSxXQUFXLEtBQUssWUFBWSxZQUFZO0FBRTlDLFFBQU0sT0FBTyxLQUFLLGdCQUFnQixTQUFTLElBQUk7QUFFL0MsUUFBTSxZQUFnQyxDQUFDLFlBQVksWUFBWSxlQUFlLFFBQVE7QUFFdEYsTUFBSSxRQUFRLEtBQUssZUFBZSxFQUFFO0FBRWxDLFNBQU8sVUFBVSxZQUFZO0FBQ3pCLFVBQU0sS0FBSyxXQUFXO0FBQ3RCLFlBQVEsS0FBSyxlQUFlLEVBQUU7QUFDOUIsT0FBRyxNQUFNLHVDQUF1QyxLQUFLO0FBQUEsRUFDekQ7QUFDQSxLQUFHLE1BQU0sWUFBWSxLQUFLO0FBQzFCLFFBQU0sU0FBUyxTQUFTO0FBQ3hCLE1BQUksVUFBVSxZQUFZO0FBQ3RCLGVBQVcsUUFBUSxRQUFRO0FBQ3ZCLGVBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDdkMsY0FBTSxXQUFXLFVBQVUsQ0FBQztBQUM1QixjQUFNLGlCQUFpQixLQUFLLGFBQWEsY0FBYyxJQUFJLEVBQUUsT0FBTztBQUNwRSxjQUFNLGlCQUFpQixrQ0FBa0MsTUFBTSxjQUFjO0FBQzdFLGNBQU0saUJBQWlCLEtBQUssWUFBWSxjQUFjLE1BQU0sUUFBUSxFQUFFO0FBQ3RFLGNBQU0sUUFBUSxLQUFLLElBQUksZUFBZSxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSTtBQUNoRSxXQUFHLE1BQU0sVUFBVSxLQUFLLElBQUksZUFBZSxDQUFDLENBQUMsSUFBSSxRQUFRLE9BQU8sSUFBSSxFQUFFO0FBQ3RFLGFBQUssWUFBWSxjQUFjLE1BQU0sVUFBVSxLQUFLO0FBQUEsTUFDeEQ7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNBLFFBQU0sS0FBSyxXQUFXO0FBR3RCLGFBQVcsUUFBUSxRQUFRO0FBQ3ZCLGFBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRLEtBQUs7QUFDdkMsV0FBSyxZQUFZLGNBQWMsTUFBTSxVQUFVLENBQUMsR0FBRyxDQUFDO0FBQUEsSUFDeEQ7QUFBQSxFQUNKO0FBQ0o7IiwibmFtZXMiOlsiQ2l0eU5hbWUiLCJCb29zdE1hdGVyaWFsc1NpemVzIl19\",\"filename\":\"Corporation/lib.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"daemon-hack\",\"daemon-grow\",\"daemon-grow-0\",\"daemon-grow-1\",\"daemon-weak\",\"daemon-grow-2\",\"daemon-grow-3\",\"daemon-grow-4\",\"daemon-hack-0\",\"daemon-grow-5\",\"daemon-grow-6\",\"daemon-hack-1\",\"daemon-hack-2\",\"daemon-hack-3\",\"daemon-hack-4\",\"daemon-weak-0\",\"daemon-hack-5\",\"daemon-hack-6\",\"daemon-hack-7\",\"daemon-hack-8\",\"daemon-hack-9\",\"daemon-hack-10\",\"daemon-hack-11\",\"daemon-hack-12\",\"daemon-hack-13\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"notes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"notes.txt\",\"text\":\"grow being 3.2x hacktime and weaken 4x hacktime\\r\\ngrow can not safely be distributed, cause:\\r\\n    multiple instances cant finish at the same time, effect is calculated at the end, \\r\\n    thus if its spread across multiple instances they'll increase security for one another\\r\\n\\r\\nhttps://bitburner.readthedocs.io/en/latest/guidesandtips/recommendedbitnodeorder.html\\r\\n\\r\\nhaack skill level up:\\r\\n\\r\\ncheck if batch causes level up\\r\\nif it causes level up, change WGH threads accordingly\\r\\n\\r\\n\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44333.426612450436\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.458391632781524\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44210.106927853914\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.381316829908698\\r\\nnum_batches: 21\\r\\n\\r\\nweakTime: 44148.70400156523\\r\\nConfig.LOOP_SAFETY_MARGIN_MS: 10000\\r\\n4 * DELAY_MARGIN_MS: 1600\\r\\nall: 21.34294000097827\\r\\nnum_batches: 21\"}}],[\"timelog.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"timelog.txt\",\"text\":\"Time: 96.45164398458292ms\\r\\nTime: 171.8585117433904ms\\r\\nTime: 119.57338754956436ms\\r\\nTime: 97.57338754956436ms\\r\\nTime: 96.89307214608561ms\\r\\nTime: 108.29599843476899ms\\r\\nTime: 100.591577386469ms\\r\\nTime: 114.48564159480156ms\\r\\nTime: 91.76981913522468ms\\r\\nTime: 133.16132076175563ms\\r\\nTime: 90.44659185857017ms\\r\\nTime: 123.3417268491612ms\\r\\n------------------------------- NEW\"}}],[\"Stock/market.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Stock/market.txt\",\"text\":\"[{\\\"symbol\\\":\\\"ECP\\\",\\\"organization\\\":\\\"ECorp\\\",\\\"observedMinPrice\\\":24127.92312753372,\\\"observedMaxPrice\\\":26991.464158345985,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":24036.091059416645,\\\"askPrice\\\":24277.659813782637,\\\"price\\\":24156.875436599643,\\\"previousPrice\\\":24156.875436599643,\\\"forecast\\\":0.3177189664436692,\\\"volatility\\\":0.0046,\\\"maxShares\\\":17400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0017074524138872289},{\\\"symbol\\\":\\\"MGCP\\\",\\\"organization\\\":\\\"MegaCorp\\\",\\\"observedMinPrice\\\":34711.63747161003,\\\"observedMaxPrice\\\":36673.33370061418,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":34769.540597815925,\\\"askPrice\\\":34978.785576338385,\\\"price\\\":34874.163087077155,\\\"previousPrice\\\":34874.163087077155,\\\"forecast\\\":0.3270364253344833,\\\"volatility\\\":0.0040999999999999995,\\\"maxShares\\\":14200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0015246269070632384},{\\\"symbol\\\":\\\"BLD\\\",\\\"organization\\\":\\\"Blade Industries\\\",\\\"observedMinPrice\\\":16921.505385951743,\\\"observedMaxPrice\\\":18415.376590781703,\\\"longShares\\\":18100000,\\\"longPrice\\\":17149.02714258231,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":18341.715084418578,\\\"askPrice\\\":18489.03809714483,\\\"price\\\":18415.376590781703,\\\"previousPrice\\\":18415.376590781703,\\\"forecast\\\":0.6076584019549656,\\\"volatility\\\":0.0077,\\\"maxShares\\\":18100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.002174556357730549},{\\\"symbol\\\":\\\"CLRK\\\",\\\"organization\\\":\\\"Clarke Incorporated\\\",\\\"observedMinPrice\\\":18832.514504761624,\\\"observedMaxPrice\\\":20827.045367816398,\\\"longShares\\\":14600000,\\\"longPrice\\\":19010.632216198846,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":18821.471696634682,\\\"askPrice\\\":19010.632216198846,\\\"price\\\":18916.051956416766,\\\"previousPrice\\\":18916.051956416766,\\\"forecast\\\":0.6166102983975109,\\\"volatility\\\":0.0066,\\\"maxShares\\\":14600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00164190839076214},{\\\"symbol\\\":\\\"OMTK\\\",\\\"organization\\\":\\\"OmniTek Incorporated\\\",\\\"observedMinPrice\\\":36057.585179294794,\\\"observedMaxPrice\\\":41532.138466633514,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":41279.8366194953,\\\"askPrice\\\":41445.28686646723,\\\"price\\\":41362.56174298126,\\\"previousPrice\\\":41362.56174298126,\\\"forecast\\\":0.38340340133564843,\\\"volatility\\\":0.0060999999999999995,\\\"maxShares\\\":10700000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0014772224968589787},{\\\"symbol\\\":\\\"FSIG\\\",\\\"organization\\\":\\\"Four Sigma\\\",\\\"observedMinPrice\\\":56144.91886165463,\\\"observedMaxPrice\\\":71481.50426040762,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":55808.0493484847,\\\"askPrice\\\":56481.78837482456,\\\"price\\\":56144.91886165463,\\\"previousPrice\\\":56144.91886165463,\\\"forecast\\\":0.3178402572525124,\\\"volatility\\\":0.0104,\\\"maxShares\\\":5500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0036789697711841654},{\\\"symbol\\\":\\\"KGI\\\",\\\"organization\\\":\\\"KuaiGong International\\\",\\\"observedMinPrice\\\":20616.644491054383,\\\"observedMaxPrice\\\":22425.71282226623,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":21323.825829758076,\\\"askPrice\\\":21409.29206554869,\\\"price\\\":21366.558947653382,\\\"previousPrice\\\":21366.558947653382,\\\"forecast\\\":0.5873982805857275,\\\"volatility\\\":0.0084,\\\"maxShares\\\":15900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0016413817497211239},{\\\"symbol\\\":\\\"FLCM\\\",\\\"organization\\\":\\\"Fulcrum Technologies\\\",\\\"observedMinPrice\\\":30065.161764617438,\\\"observedMaxPrice\\\":33782.61738183489,\\\"longShares\\\":12400000,\\\"longPrice\\\":30974.015646315864,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":33546.139060162044,\\\"askPrice\\\":34019.09570350773,\\\"price\\\":33782.61738183489,\\\"previousPrice\\\":33782.61738183489,\\\"forecast\\\":0.6579749584752715,\\\"volatility\\\":0.012,\\\"maxShares\\\":12400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.003791629482722379},{\\\"symbol\\\":\\\"STM\\\",\\\"organization\\\":\\\"Storm Technologies\\\",\\\"observedMinPrice\\\":22254.349557352143,\\\"observedMaxPrice\\\":24456.57723698016,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":22076.314760893325,\\\"askPrice\\\":22432.38435381096,\\\"price\\\":22254.349557352143,\\\"previousPrice\\\":22254.349557352143,\\\"forecast\\\":0.5621077365731171,\\\"volatility\\\":0.0088,\\\"maxShares\\\":11100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0012568192704630573},{\\\"symbol\\\":\\\"DCOMM\\\",\\\"organization\\\":\\\"DefComm\\\",\\\"observedMinPrice\\\":14096.699403159124,\\\"observedMaxPrice\\\":15171.291675034241,\\\"longShares\\\":12200000,\\\"longPrice\\\":14285.188783453843,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":14143.04760152893,\\\"askPrice\\\":14285.188783453843,\\\"price\\\":14214.118192491387,\\\"previousPrice\\\":14214.118192491387,\\\"forecast\\\":0.6024651898583295,\\\"volatility\\\":0.006,\\\"maxShares\\\":12200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0012570934478514843},{\\\"symbol\\\":\\\"HLS\\\",\\\"organization\\\":\\\"Helios Labs\\\",\\\"observedMinPrice\\\":9892.74328712357,\\\"observedMaxPrice\\\":10883.648959853905,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":9925.02826250016,\\\"askPrice\\\":10004.7473650102,\\\"price\\\":9964.88781375518,\\\"previousPrice\\\":9964.88781375518,\\\"forecast\\\":0.5919542665917068,\\\"volatility\\\":0.0055000000000000005,\\\"maxShares\\\":15300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.000994658999542428},{\\\"symbol\\\":\\\"VITA\\\",\\\"organization\\\":\\\"VitaLife\\\",\\\"observedMinPrice\\\":13372.933554457506,\\\"observedMaxPrice\\\":14228.647460132872,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":13340.88019927275,\\\"askPrice\\\":13556.055686357795,\\\"price\\\":13448.467942815272,\\\"previousPrice\\\":13448.467942815272,\\\"forecast\\\":0.572555553930749,\\\"volatility\\\":0.0075,\\\"maxShares\\\":14700000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0010304496570796339},{\\\"symbol\\\":\\\"ICRS\\\",\\\"organization\\\":\\\"Icarus Microsystems\\\",\\\"observedMinPrice\\\":18860.558040575757,\\\"observedMaxPrice\\\":19897.403792363315,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":19437.839563454163,\\\"askPrice\\\":19672.501610497875,\\\"price\\\":19555.17058697602,\\\"previousPrice\\\":19555.17058697602,\\\"forecast\\\":0.5727448420081805,\\\"volatility\\\":0.0064,\\\"maxShares\\\":7900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009572323357628094},{\\\"symbol\\\":\\\"UNV\\\",\\\"organization\\\":\\\"Universal Energy\\\",\\\"observedMinPrice\\\":16141.784694696647,\\\"observedMaxPrice\\\":17447.01304825546,\\\"longShares\\\":10800000,\\\"longPrice\\\":16383.192605454684,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":16155.422301108742,\\\"askPrice\\\":16383.192605454684,\\\"price\\\":16269.307453281714,\\\"previousPrice\\\":16269.307453281714,\\\"forecast\\\":0.602057310269587,\\\"volatility\\\":0.005699999999999999,\\\"maxShares\\\":10800000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.001148659752458886},{\\\"symbol\\\":\\\"AERO\\\",\\\"organization\\\":\\\"AeroCorp\\\",\\\"observedMinPrice\\\":14602.052737732038,\\\"observedMaxPrice\\\":15155.230780002199,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":14906.28980907447,\\\"askPrice\\\":15086.24501803714,\\\"price\\\":14996.267413555805,\\\"previousPrice\\\":14996.267413555805,\\\"forecast\\\":0.44342682062437083,\\\"volatility\\\":0.0063,\\\"maxShares\\\":8700000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0007401957132250563},{\\\"symbol\\\":\\\"OMN\\\",\\\"organization\\\":\\\"Omnia Cybersystems\\\",\\\"observedMinPrice\\\":12353.889895253298,\\\"observedMaxPrice\\\":13230.413024104353,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":12543.752010365459,\\\"askPrice\\\":12644.505038561167,\\\"price\\\":12594.128524463313,\\\"previousPrice\\\":12594.128524463313,\\\"forecast\\\":0.5501444880994274,\\\"volatility\\\":0.0069,\\\"maxShares\\\":8900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0007272696458202535},{\\\"symbol\\\":\\\"SLRS\\\",\\\"organization\\\":\\\"Solaris Space Systems\\\",\\\"observedMinPrice\\\":23320.019945821612,\\\"observedMaxPrice\\\":26055.460609995385,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":25566.897508467257,\\\"askPrice\\\":26031.281116088252,\\\"price\\\":25799.089312277756,\\\"previousPrice\\\":25799.089312277756,\\\"forecast\\\":0.5896409169959079,\\\"volatility\\\":0.0078000000000000005,\\\"maxShares\\\":6700000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0013867390614151947},{\\\"symbol\\\":\\\"GPH\\\",\\\"organization\\\":\\\"Global Pharmaceuticals\\\",\\\"observedMinPrice\\\":10317.187997004265,\\\"observedMaxPrice\\\":11850.80615239312,\\\"longShares\\\":11600000,\\\"longPrice\\\":10399.7255009803,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":10234.65049302823,\\\"askPrice\\\":10399.7255009803,\\\"price\\\":10317.187997004265,\\\"previousPrice\\\":10317.187997004265,\\\"forecast\\\":0.6109178769406622,\\\"volatility\\\":0.0063,\\\"maxShares\\\":11600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0014289548918664761},{\\\"symbol\\\":\\\"NVMD\\\",\\\"organization\\\":\\\"Nova Medical\\\",\\\"observedMinPrice\\\":19384.1780367587,\\\"observedMaxPrice\\\":21609.221646076287,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":20623.58985387058,\\\"askPrice\\\":21082.3552500133,\\\"price\\\":20852.97255194194,\\\"previousPrice\\\":20852.97255194194,\\\"forecast\\\":0.44432464486428247,\\\"volatility\\\":0.0078000000000000005,\\\"maxShares\\\":6500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0008397027996979422},{\\\"symbol\\\":\\\"WDS\\\",\\\"organization\\\":\\\"Watchdog Security\\\",\\\"observedMinPrice\\\":6413.825131122122,\\\"observedMaxPrice\\\":8770.740155028405,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":6688.411416148102,\\\"askPrice\\\":6755.631631385771,\\\"price\\\":6722.021523766936,\\\"previousPrice\\\":6722.021523766936,\\\"forecast\\\":0.4421065358039274,\\\"volatility\\\":0.0246,\\\"maxShares\\\":11400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0009158207110854086},{\\\"symbol\\\":\\\"LXO\\\",\\\"organization\\\":\\\"LexoCorp\\\",\\\"observedMinPrice\\\":6552.189642423024,\\\"observedMaxPrice\\\":7510.236141343688,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":7273.297459919023,\\\"askPrice\\\":7435.089718885876,\\\"price\\\":7354.19358940245,\\\"previousPrice\\\":7354.19358940245,\\\"forecast\\\":0.5607131550323635,\\\"volatility\\\":0.0124,\\\"maxShares\\\":7600000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0015116929028387224},{\\\"symbol\\\":\\\"RHOC\\\",\\\"organization\\\":\\\"Rho Construction\\\",\\\"observedMinPrice\\\":6076.871212606066,\\\"observedMaxPrice\\\":6396.324547688774,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":6184.785860996675,\\\"askPrice\\\":6259.45128386585,\\\"price\\\":6222.118572431263,\\\"previousPrice\\\":6222.118572431263,\\\"forecast\\\":0.5192058592045842,\\\"volatility\\\":0.0064,\\\"maxShares\\\":5900000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00016828796851176266},{\\\"symbol\\\":\\\"APHE\\\",\\\"organization\\\":\\\"Alpha Enterprises\\\",\\\"observedMinPrice\\\":5201.4247369946825,\\\"observedMaxPrice\\\":6248.348188321425,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":5218.009984740046,\\\"askPrice\\\":5312.787159034012,\\\"price\\\":5265.398571887029,\\\"previousPrice\\\":5265.398571887029,\\\"forecast\\\":0.48572454040436297,\\\"volatility\\\":0.0183,\\\"maxShares\\\":8300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0039618043996671225},{\\\"symbol\\\":\\\"SYSC\\\",\\\"organization\\\":\\\"SysCore Securities\\\",\\\"observedMinPrice\\\":3302.236711695202,\\\"observedMaxPrice\\\":4147.930676730783,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":3370.3020621480728,\\\"askPrice\\\":3438.3889724944984,\\\"price\\\":3404.3455173212856,\\\"previousPrice\\\":3404.3455173212856,\\\"forecast\\\":0.5567490917935679,\\\"volatility\\\":0.015700000000000002,\\\"maxShares\\\":10800000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0007895197804460975},{\\\"symbol\\\":\\\"CTK\\\",\\\"organization\\\":\\\"CompuTek\\\",\\\"observedMinPrice\\\":3704.80739685694,\\\"observedMaxPrice\\\":4169.31794143416,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":3680.653837266769,\\\"askPrice\\\":3732.5462377921817,\\\"price\\\":3706.6000375294757,\\\"previousPrice\\\":3706.6000375294757,\\\"forecast\\\":0.5520713202921371,\\\"volatility\\\":0.009399999999999999,\\\"maxShares\\\":9500000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0007118421935277737},{\\\"symbol\\\":\\\"NTLK\\\",\\\"organization\\\":\\\"NetLink Technologies\\\",\\\"observedMinPrice\\\":3849.4806217057585,\\\"observedMaxPrice\\\":4716.745892134906,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":4473.104438815881,\\\"askPrice\\\":4545.251284603233,\\\"price\\\":4509.177861709557,\\\"previousPrice\\\":4509.177861709557,\\\"forecast\\\":0.44794668836270013,\\\"volatility\\\":0.0265,\\\"maxShares\\\":2400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0027084675089409805},{\\\"symbol\\\":\\\"OMGA\\\",\\\"organization\\\":\\\"Omega Software\\\",\\\"observedMinPrice\\\":4849.943409196514,\\\"observedMaxPrice\\\":5438.75673518384,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":4947.494105959546,\\\"askPrice\\\":5047.443481837516,\\\"price\\\":4997.468793898531,\\\"previousPrice\\\":4997.468793898531,\\\"forecast\\\":0.522769520458445,\\\"volatility\\\":0.009899999999999999,\\\"maxShares\\\":2200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.00037233443974026025},{\\\"symbol\\\":\\\"FNS\\\",\\\"organization\\\":\\\"FoodNStuff\\\",\\\"observedMinPrice\\\":3708.280798391361,\\\"observedMaxPrice\\\":3898.1333607141723,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":3674.9062712058385,\\\"askPrice\\\":3741.6553255768827,\\\"price\\\":3708.280798391361,\\\"previousPrice\\\":3708.280798391361,\\\"forecast\\\":0.5145513739318696,\\\"volatility\\\":0.0074,\\\"maxShares\\\":2400000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0002980944846789475},{\\\"symbol\\\":\\\"JGN\\\",\\\"organization\\\":\\\"Joe's Guns\\\",\\\"observedMinPrice\\\":627.1438291482704,\\\"observedMaxPrice\\\":798.6904691858825,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":628.9145227363101,\\\"askPrice\\\":641.6198666299729,\\\"price\\\":635.2671946831415,\\\"previousPrice\\\":635.2671946831415,\\\"forecast\\\":0.47517725990041987,\\\"volatility\\\":0.0311,\\\"maxShares\\\":13000000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0033237429881936282},{\\\"symbol\\\":\\\"SGC\\\",\\\"organization\\\":\\\"Sigma Cosmetics\\\",\\\"observedMinPrice\\\":2018.692345692119,\\\"observedMaxPrice\\\":2436.7619016884696,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":2357.556635864349,\\\"askPrice\\\":2409.9997561768014,\\\"price\\\":2383.7781960205753,\\\"previousPrice\\\":2383.7781960205753,\\\"forecast\\\":0.4575859288853907,\\\"volatility\\\":0.021400000000000002,\\\"maxShares\\\":2800000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.000411118771652415},{\\\"symbol\\\":\\\"CTYS\\\",\\\"organization\\\":\\\"Catalyst Ventures\\\",\\\"observedMinPrice\\\":1159.1352999940295,\\\"observedMaxPrice\\\":1367.414009512483,\\\"longShares\\\":15200000,\\\"longPrice\\\":1189.3575885668017,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":1330.5762549761885,\\\"askPrice\\\":1368.3613818923482,\\\"price\\\":1349.4688184342683,\\\"previousPrice\\\":1349.4688184342683,\\\"forecast\\\":0.6339287520010766,\\\"volatility\\\":0.0128,\\\"maxShares\\\":15200000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.003964534425976645},{\\\"symbol\\\":\\\"MDYN\\\",\\\"organization\\\":\\\"Microdyne Technologies\\\",\\\"observedMinPrice\\\":16635.53687050065,\\\"observedMaxPrice\\\":17916.712738983417,\\\"longShares\\\":0,\\\"longPrice\\\":0,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":17820.736462817833,\\\"askPrice\\\":17999.839341841125,\\\"price\\\":17910.28790232948,\\\"previousPrice\\\":17910.28790232948,\\\"forecast\\\":0.42045087354515187,\\\"volatility\\\":0.006999999999999999,\\\"maxShares\\\":4100000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.0010915062563074769},{\\\"symbol\\\":\\\"TITN\\\",\\\"organization\\\":\\\"Titan Laboratories\\\",\\\"observedMinPrice\\\":14444.553785356951,\\\"observedMaxPrice\\\":15946.582972432236,\\\"longShares\\\":5300000,\\\"longPrice\\\":14791.116350260887,\\\"shortShares\\\":0,\\\"shortPrice\\\":0,\\\"bidPrice\\\":14556.336725653571,\\\"askPrice\\\":14791.116350260887,\\\"price\\\":14673.726537957229,\\\"previousPrice\\\":14673.726537957229,\\\"forecast\\\":0.6128045814585638,\\\"volatility\\\":0.0066,\\\"maxShares\\\":5300000,\\\"profit\\\":-200000,\\\"cost\\\":0,\\\"profitPotential\\\":0.001480032444247953}]\"}}],[\"budget.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"budget.txt\",\"text\":\"10000\"}}],[\"Stock/log.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Stock/log.txt\",\"text\":\"buying 19.866m shares of BLD for 227.156b\\nbuying 5.069m shares of OMTK for 205.168b\\nbuying 2.463m shares of FSIG for 183.750b\\nbuying 6.648m shares of KGI for 165.302b\\nbuying 2.759m shares of FLCM for 148.408b\\nbuying 4.071m shares of UNV for 134.880b\\nbuying 4.352m shares of GPH for 121.229b\\nbuying 3.916m shares of MGCP for 108.308b\\nselling 0.000 shares of OMTK for -2.752b\\nselling 0.000 shares of UNV for 11.597m\\nbuying 41.400m shares of CTYS for 13.803b\\nselling 0.000 shares of GPH for 2.679b\\nselling 0.000 shares of CTYS for 909.031m\\nbuying 3.100m shares of NTLK for 4.208b\\nbuying 7.766m shares of ECP for 135.524b\\nselling 0.000 shares of KGI for 34.352b\\nselling 0.000 shares of FLCM for 64.320b\\nbuying 6.028m shares of GPH for 164.360b\\nselling 0.000 shares of NTLK for 909.549m\\nselling 0.000 shares of ECP for 11.406b\\nselling 0.000 shares of FSIG for 87.940b\\nbuying 6.200m shares of UNV for 183.275b\\nbuying 12.300m shares of FLCM for 767.387b\\nbuying 5.900m shares of FSIG for 470.949b\\nselling 0.000 shares of UNV for 13.621b\\nbuying 3.800m shares of TITN for 73.031b\\nselling 0.000 shares of BLD for 104.634b\\nselling 0.000 shares of GPH for 41.768b\\nselling 0.000 shares of TITN for 1.953b\\nbuying 41.400m shares of CTYS for 13.948b\\nbuying 21.200m shares of ECP for 301.952b\\nselling 0.000 shares of MGCP for 51.056b\\nselling 0.000 shares of FLCM for 465.251b\\nbuying 15.700m shares of MGCP for 596.244b\\nbuying 8.600m shares of OMTK for 233.990b\\nbuying 3.800m shares of TITN for 75.317b\\nselling 0.000 shares of ECP for 26.367b\\nselling 0.000 shares of MGCP for 3.372b\\nselling 0.000 shares of OMTK for 20.360b\\nselling 0.000 shares of FSIG for 356.619b\\nselling 0.000 shares of TITN for 7.239b\\nbuying 24.100m shares of BLD for 455.349b\\nbuying 16.500m shares of CLRK for 204.498b\\nbuying 3.800m shares of TITN for 73.476b\\nbuying 15.700m shares of MGCP for 497.342b\\nselling 0.000 shares of CTYS for 14.528b\\nselling 0.000 shares of TITN for 1.608b\\nbuying 21.200m shares of ECP for 269.250b\\nbuying 5.900m shares of FSIG for 432.250b\\nbuying 3.800m shares of TITN for 73.174b\\nbuying 8.600m shares of OMTK for 177.521b\\nselling 0.000 shares of ECP for 37.532b\\nselling 0.000 shares of MGCP for 60.397b\\nselling 0.000 shares of BLD for 73.694b\\nselling 0.000 shares of CLRK for 47.206b\\nselling 0.000 shares of FSIG for 86.039b\\nbuying 21.200m shares of ECP for 285.117b\\nbuying 15.700m shares of MGCP for 523.897b\\nselling 0.000 shares of OMTK for 12.707b\\nbuying 6.500m shares of GPH for 220.375b\\nselling 0.000 shares of ECP for 20.335b\\nselling 0.000 shares of MGCP for 21.670b\\nbuying 5.900m shares of FSIG for 424.499b\\nbuying 9.600m shares of APHE for 74.060b\\nbuying 15.700m shares of MGCP for 525.979b\\nbuying 12.300m shares of FLCM for 428.869b\\nbuying 15.600m shares of KGI for 498.347b\\nbuying 8.600m shares of OMTK for 167.505b\\nselling 0.000 shares of FSIG for 113.500b\\nselling 0.000 shares of KGI for -2.344b\\nselling 0.000 shares of FLCM for 79.689b\\nselling 0.000 shares of GPH for 16.313b\\nselling 0.000 shares of TITN for 32.703b\\nbuying 17.800m shares of RHOC for 44.450b\\nselling 0.000 shares of MGCP for 22.481b\\nbuying 12.300m shares of FLCM for 452.386b\\nbuying 6.500m shares of GPH for 215.590b\\nselling 0.000 shares of APHE for 30.808b\\nbuying 21.200m shares of ECP for 298.707b\\nbuying 15.700m shares of MGCP for 564.319b\\nselling 0.000 shares of OMTK for 15.490b\\nbuying 5.900m shares of FSIG for 429.595b\\nselling 0.000 shares of FLCM for 46.467b\\nbuying 6.200m shares of UNV for 170.397b\\nselling 0.000 shares of GPH for 2.782b\\nselling 0.000 shares of RHOC for 3.048b\\nselling 0.000 shares of UNV for -4.942b\\nbuying 6.500m shares of GPH for 201.375b\\nselling 0.000 shares of MGCP for 41.605b\\nselling 0.000 shares of FSIG for 121.328b\\nselling 0.000 shares of GPH for 18.517b\\nbuying 17.800m shares of RHOC for 44.686b\\nselling 0.000 shares of ECP for 62.465b\\nbuying 5.900m shares of FSIG for 305.227b\\nbuying 6.500m shares of GPH for 180.301b\\nselling 0.000 shares of FSIG for 14.361b\\nselling 0.000 shares of GPH for 4.900b\\nbuying 8.600m shares of OMTK for 159.747b\\nbuying 29.800m shares of DCOMM for 190.103b\\nselling 0.000 shares of DCOMM for 746.733m\\nbuying 15.700m shares of MGCP for 495.160b\\nselling 0.000 shares of OMTK for 5.315b\\nbuying 5.900m shares of FSIG for 251.807b\\nselling 0.000 shares of FSIG for 50.291b\\nbuying 41.400m shares of CTYS for 39.896b\\nbuying 5.900m shares of FSIG for 282.582b\\nselling 0.000 shares of CTYS for -79.736m\\nbuying 21.200m shares of ECP for 304.723b\\nselling 0.000 shares of MGCP for 27.748b\\nselling 0.000 shares of FSIG for 24.314b\\nselling 0.000 shares of ECP for 2.522b\\nbuying 15.700m shares of MGCP for 552.975b\\nbuying 3.100m shares of NTLK for 4.319b\\nbuying 5.900m shares of FSIG for 245.868b\\nselling 0.000 shares of RHOC for 13.624b\\nselling 0.000 shares of NTLK for 145.256m\\nbuying 13.700m shares of WDS for 74.515b\\nbuying 6.200m shares of UNV for 194.069b\\nselling 0.000 shares of FSIG for 1.891m\\nbuying 15.600m shares of KGI for 291.374b\\nselling 0.000 shares of UNV for 3.501b\\nbuying 17.800m shares of RHOC for 51.071b\\nbuying 3.100m shares of NTLK for 3.809b\\nselling 0.000 shares of TITN for 1.797m\\nbuying 5.900m shares of FSIG for 275.958b\\nbuying 12.300m shares of FLCM for 412.966b\\nselling 0.000 shares of NTLK for 164.090m\\nselling 0.000 shares of FSIG for 25.216b\\nbuying 3.100m shares of NTLK for 3.809b\\nbuying 6.500m shares of GPH for 154.510b\\nbuying 5.900m shares of FSIG for 283.297b\\nselling 0.000 shares of KGI for 12.250b\\nselling 0.000 shares of FLCM for 36.791b\\nselling 0.000 shares of GPH for -669.879m\\nselling 0.000 shares of RHOC for 11.255b\\nbuying 3.800m shares of TITN for 75.981b\\nselling 0.000 shares of FSIG for 19.225b\\nbuying 6.200m shares of UNV for 217.231b\\nbuying 17.800m shares of RHOC for 56.061b\\nselling 0.000 shares of TITN for 6.815b\\nbuying 41.400m shares of CTYS for 38.700b\\nbuying 5.900m shares of FSIG for 237.235b\\nbuying 15.700m shares of MGCP for 649.554b\\nselling 0.000 shares of MGCP for -8.239b\\nselling 0.000 shares of NTLK for 28.155b\\nselling 0.000 shares of CTYS for 2.295b\\nbuying 3.800m shares of TITN for 73.386b\\nbuying 21.200m shares of ECP for 253.738b\\nselling 0.000 shares of UNV for 30.142b\\nbuying 3.100m shares of NTLK for 21.413b\\nselling 0.000 shares of ECP for 7.928b\\nselling 0.000 shares of FSIG for 120.635b\\nselling 0.000 shares of NTLK for 1.407b\\nbuying 24.100m shares of BLD for 412.971b\\nbuying 16.500m shares of CLRK for 168.870b\\nbuying 5.900m shares of FSIG for 318.002b\\nselling 0.000 shares of BLD for 20.756b\\nbuying 8.900m shares of LXO for 123.552b\\nselling 0.000 shares of RHOC for 13.317b\\nbuying 12.300m shares of FLCM for 387.968b\\nselling 0.000 shares of CLRK for 1.868b\\nselling 0.000 shares of FSIG for 56.110b\\nselling 0.000 shares of LXO for 12.752b\\nbuying 15.700m shares of MGCP for 587.058b\\nbuying 5.900m shares of FSIG for 373.435b\\nbuying 17.800m shares of RHOC for 66.633b\\nbuying 21.200m shares of ECP for 227.039b\\nselling 0.000 shares of FLCM for 96.159b\\nselling 0.000 shares of RHOC for 3.788b\\nselling 0.000 shares of TITN for 18.322b\\nbuying 8.600m shares of OMTK for 109.240b\\nselling 0.000 shares of ECP for 7.655b\\nselling 0.000 shares of MGCP for 36.869b\\nselling 0.000 shares of FSIG for 111.598b\\nbuying 3.800m shares of TITN for 86.819b\\nbuying 6.500m shares of GPH for 155.134b\\nbuying 17.800m shares of RHOC for 64.821b\\nbuying 3.100m shares of NTLK for 1.585b\\nselling 0.000 shares of TITN for 6.957b\\nselling 0.000 shares of OMTK for 9.417b\\nbuying 5.900m shares of FSIG for 419.833b\\nselling 0.000 shares of GPH for 4.351b\\nbuying 6.500m shares of GPH for 151.204b\\nbuying 41.400m shares of CTYS for 32.921b\\nbuying 6.200m shares of UNV for 275.770b\\nbuying 15.700m shares of MGCP for 614.380b\\nselling 0.000 shares of NTLK for 4.191b\\nselling 0.000 shares of FSIG for 198.741b\\nselling 0.000 shares of UNV for 37.334b\\nbuying 5.900m shares of FSIG for 584.842b\\nselling 0.000 shares of GPH for 50.973b\\nselling 0.000 shares of RHOC for 10.281b\\nselling 0.000 shares of CTYS for 12.621b\\nbuying 6.500m shares of GPH for 189.931b\\nbuying 3.100m shares of NTLK for 1.117b\\nbuying 3.800m shares of TITN for 88.315b\\nbuying 21.200m shares of ECP for 232.183b\\nbuying 17.800m shares of RHOC for 73.500b\\nbuying 86.363k shares of ECP for 1.894b\\nbuying 57.178k shares of MGCP for 1.709b\\nbuying 41.785k shares of OMTK for 1.551b\\nbuying 59.479k shares of KGI for 1.407b\\nbuying 39.123k shares of FLCM for 1.268b\\nbuying 57.053k shares of UNV for 1.172b\\nselling 0.000 shares of ECP for 130.255m\\nselling 0.000 shares of UNV for -3.632m\\nbuying 15.000m shares of BLD for 314.068b\\nbuying 15.900m shares of CLRK for 257.755b\\nselling 0.000 shares of OMTK for 150.546m\\nbuying 5.200m shares of FSIG for 290.387b\\nselling 0.000 shares of KGI for 77.687m\\nbuying 38.000m shares of CTYS for 18.066b\\nselling 0.000 shares of MGCP for 440.615m\\nselling 0.000 shares of BLD for 8.343b\\nselling 0.000 shares of CLRK for 14.975b\\nbuying 9.700m shares of OMTK for 358.692b\\nbuying 14.900m shares of KGI for 356.234b\\nselling 0.000 shares of FLCM for 380.954m\\nbuying 24.200m shares of ECP for 472.272b\\nbuying 17.300m shares of MGCP for 610.403b\\nselling 0.000 shares of OMTK for 28.379b\\nselling 0.000 shares of FSIG for 67.639b\\nbuying 13.500m shares of FLCM for 524.576b\\nbuying 8.400m shares of UNV for 149.149b\\nselling 0.000 shares of CTYS for 1.875b\\nselling 0.000 shares of MGCP for 54.910b\\nselling 0.000 shares of KGI for 9.630b\\nselling 0.000 shares of ECP for 53.318b\\nselling 0.000 shares of FLCM for 43.759b\\nbuying 3.700m shares of TITN for 67.420b\\nbuying 5.200m shares of FSIG for 267.277b\\nbuying 13.500m shares of FLCM for 490.982b\\nselling 0.000 shares of FSIG for 18.438b\\nbuying 5.200m shares of FSIG for 239.582b\\nselling 0.000 shares of FLCM for 237.330b\\nselling 0.000 shares of TITN for 9.037b\\nbuying 10.200m shares of DCOMM for 167.532b\\nbuying 24.200m shares of ECP for 419.175b\\nbuying 17.300m shares of MGCP for 489.175b\\nselling 0.000 shares of DCOMM for 13.252b\\nbuying 15.000m shares of BLD for 343.102b\\nbuying 9.700m shares of OMTK for 298.117b\\nbuying 3.700m shares of TITN for 70.355b\\nselling 0.000 shares of ECP for 33.135b\\nselling 0.000 shares of MGCP for 61.440b\\nselling 0.000 shares of UNV for 37.815b\\nselling 0.000 shares of TITN for 3.905b\\nbuying 10.200m shares of DCOMM for 162.715b\\nselling 0.000 shares of BLD for -1.402b\\nselling 0.000 shares of OMTK for 10.567b\\nbuying 13.500m shares of FLCM for 376.612b\\nselling 0.000 shares of DCOMM for -1.086b\\nbuying 17.300m shares of MGCP for 514.154b\\nselling 0.000 shares of MGCP for 2.550b\\nselling 0.000 shares of FLCM for 34.971b\\nbuying 3.700m shares of TITN for 68.030b\\nbuying 8.700m shares of APHE for 63.424b\\nbuying 13.500m shares of FLCM for 370.819b\\nselling 0.000 shares of APHE for 11.107b\\nselling 0.000 shares of FSIG for 263.867b\\nbuying 38.000m shares of CTYS for 17.076b\\nbuying 5.200m shares of FSIG for 476.488b\\nselling 0.000 shares of FLCM for 79.317b\\nbuying 14.900m shares of KGI for 268.506b\\nselling 0.000 shares of FSIG for 72.193b\\nselling 0.000 shares of KGI for 15.684b\\nbuying 13.500m shares of FLCM for 383.181b\\nbuying 8.400m shares of UNV for 179.721b\\nbuying 9.400m shares of GPH for 168.246b\\nbuying 5.200m shares of FSIG for 454.385b\\nselling 0.000 shares of UNV for -6.398b\\nbuying 8.700m shares of APHE for 60.653b\\nselling 0.000 shares of CTYS for 4.339b\\nbuying 77.378k shares of ECP for 2.027b\\nbuying 54.074k shares of MGCP for 1.820b\\nbuying 114.239k shares of BLD for 1.637b\\nbuying 101.285k shares of CLRK for 1.490b\\nbuying 37.191k shares of OMTK for 1.337b\\nbuying 18.036k shares of FSIG for 1.232b\\nbuying 53.379k shares of KGI for 1.123b\\nbuying 31.748k shares of FLCM for 1.038b\\nbuying 51.359k shares of UNV for 979.475m\\nbuying 66.808k shares of GPH for 931.636m\\nbuying 511.090k shares of CTYS for 912.932m\\nbuying 51.267k shares of TITN for 888.146m\\nbuying 986.703k shares of APHE for 5.368b\\nselling 0.000 shares of MGCP for 22.833m\\nselling 0.000 shares of BLD for -10.131m\\nselling 0.000 shares of FSIG for 23.065m\\nselling 0.000 shares of FLCM for 25.393m\\nselling 0.000 shares of UNV for 3.435m\\nselling 0.000 shares of TITN for 19.953m\\nselling 0.000 shares of ECP for 111.553m\\nbuying 3.292m shares of MGCP for 105.084b\\nbuying 7.085m shares of BLD for 94.345b\\nselling 0.000 shares of GPH for 33.336m\\nselling 0.000 shares of APHE for 1.699b\\nbuying 5.000m shares of TITN for 85.559b\\nbuying 71.260k shares of ECP for 1.456b\\nbuying 53.094k shares of MGCP for 1.324b\\nbuying 78.038k shares of BLD for 1.203b\\nbuying 70.285k shares of CLRK for 1.102b\\nbuying 24.686k shares of OMTK for 1.023b\\nbuying 12.416k shares of FSIG for 963.714m\\nbuying 50.967k shares of KGI for 919.288m\\nbuying 25.548k shares of FLCM for 892.439m\\nbuying 53.517k shares of DCOMM for 894.720m\\nbuying 51.438k shares of UNV for 882.702m\\nbuying 54.847k shares of GPH for 882.043m\\nbuying 827.909k shares of CTYS for 857.734m\\nbuying 31.642k shares of TITN for 742.044m\\nselling 0.000 shares of MGCP for -9.894m\\nselling 0.000 shares of FLCM for -4.439m\\nselling 0.000 shares of DCOMM for -15.683m\\nselling 0.000 shares of CTYS for -344.039k\\nbuying 27.400m shares of ECP for 482.642b\\nbuying 19.100m shares of MGCP for 479.361b\\nbuying 15.600m shares of BLD for 324.055b\\nbuying 12.400m shares of CLRK for 304.159b\\nbuying 9.700m shares of OMTK for 358.886b\\nbuying 5.400m shares of FSIG for 401.746b\\nbuying 17.471m shares of KGI for 368.395b\\nbuying 10.860m shares of FLCM for 334.589b\\nbuying 6.300m shares of GPH for 141.278b\\nbuying 8.200m shares of APHE for 49.106b\\nbuying 20.700m shares of CTYS for 20.401b\\nbuying 3.600m shares of TITN for 83.822b\\nbuying 8.600m shares of UNV for 179.359b\\nbuying 15.400m shares of DCOMM for 180.097b\\nselling 0.000 shares of MGCP for 33.925b\\nselling 0.000 shares of BLD for 18.782b\\nselling 0.000 shares of FSIG for 57.058b\\nselling 0.000 shares of KGI for 8.322b\\nselling 0.000 shares of FLCM for 55.311b\\nselling 0.000 shares of DCOMM for 1.724b\\nselling 0.000 shares of CTYS for 2.959b\\nselling 0.000 shares of OMTK for 53.405b\\nselling 0.000 shares of GPH for 10.015b\\nselling 0.000 shares of APHE for 7.473b\\nselling 0.000 shares of TITN for 2.950b\\nselling 0.000 shares of ECP for 89.138b\\nselling 0.000 shares of CLRK for 63.580b\\nbuying 5.400m shares of FSIG for 374.215b\\nbuying 19.100m shares of MGCP for 436.107b\\nbuying 12.400m shares of CLRK for 363.840b\\nbuying 13.000m shares of FLCM for 339.804b\\nbuying 20.700m shares of CTYS for 16.415b\\nbuying 3.600m shares of TITN for 79.871b\\nbuying 9.700m shares of OMTK for 369.523b\\nselling 0.000 shares of MGCP for 27.503b\\nselling 0.000 shares of CLRK for 22.287b\\nselling 0.000 shares of OMTK for 3.344b\\nselling 0.000 shares of FSIG for 111.759b\\nselling 0.000 shares of FLCM for 53.933b\\nselling 0.000 shares of CTYS for 390.478m\\nselling 0.000 shares of TITN for 799.464m\\nbuying 27.400m shares of ECP for 471.113b\\nbuying 19.100m shares of MGCP for 465.884b\\nbuying 12.400m shares of CLRK for 383.894b\\nbuying 5.400m shares of FSIG for 467.400b\\nbuying 13.000m shares of FLCM for 341.848b\\nbuying 8.200m shares of APHE for 61.865b\\nbuying 3.600m shares of TITN for 79.546b\\nbuying 6.300m shares of GPH for 168.252b\\nbuying 13.000m shares of HLS for 165.880b\\nselling 0.000 shares of ECP for 38.882b\\nselling 0.000 shares of FSIG for 27.639b\\nselling 0.000 shares of FLCM for 40.223b\\nselling 0.000 shares of UNV for 37.494b\\nselling 0.000 shares of TITN for 5.216b\\nbuying 209.636k shares of ECP for 6.314b\\nbuying 399.908k shares of BLD for 5.666b\\nbuying 326.037k shares of CLRK for 5.116b\\nbuying 50.853k shares of FSIG for 4.637b\\nbuying 109.966k shares of FLCM for 4.131b\\nbuying 2.127m shares of CTYS for 3.774b\\nselling 0.000 shares of ECP for -43.162m\\nbuying 68.776k shares of UNV for 1.965b\\nbuying 97.504k shares of TITN for 1.772b\\nbuying 4.206m shares of ECP for 115.717b\\nbuying 4.560m shares of MGCP for 103.430b\\nbuying 3.254m shares of OMTK for 93.066b\\nselling 0.000 shares of FLCM for 786.576m\\nselling 0.000 shares of UNV for 164.269m\\nbuying 5.397m shares of APHE for 85.126b\\nselling 0.000 shares of CTYS for 310.574m\\nbuying 3.541m shares of KGI for 76.940b\\nselling 0.000 shares of BLD for 230.249m\\nselling 0.000 shares of KGI for -771.487m\\nbuying 3.938m shares of FLCM for 160.073b\\nbuying 19.200m shares of CTYS for 31.187b\\nselling 0.000 shares of MGCP for 18.215b\\nbuying 10.730m shares of BLD for 152.430b\\nselling 0.000 shares of FSIG for 1.629b\\nselling 0.000 shares of FLCM for 33.873b\\nbuying 6.000m shares of GPH for 143.465b\\nselling 0.000 shares of APHE for 27.885b\\nbuying 6.032m shares of MGCP for 153.558b\\nselling 0.000 shares of CLRK for 1.188b\\nselling 0.000 shares of OMTK for 7.998b\\nbuying 5.118m shares of UNV for 150.126b\\nselling 0.000 shares of GPH for 5.193b\\nselling 0.000 shares of CTYS for 5.043b\\nbuying 8.219m shares of CLRK for 153.637b\\nbuying 3.543m shares of FLCM for 138.119b\\nselling 0.000 shares of UNV for 1.339b\\nselling 0.000 shares of TITN for 639.054m\\nselling 0.000 shares of MGCP for 16.888b\\nselling 0.000 shares of BLD for 20.610b\\nbuying 4.486m shares of TITN for 108.359b\\nbuying 3.239m shares of OMTK for 94.979b\\nbuying 15.000m shares of HLS for 200.567b\\nselling 0.000 shares of ECP for 58.513b\\nbuying 22.100m shares of BLD for 355.962b\\nselling 0.000 shares of OMTK for 3.876b\\nselling 0.000 shares of FLCM for 29.455b\\nselling 0.000 shares of HLS for -1.738b\\nselling 0.000 shares of TITN for 3.829b\\nbuying 18.300m shares of ECP for 723.462b\\nselling 0.000 shares of CLRK for 43.530b\\nbuying 11.400m shares of FLCM for 455.466b\\nbuying 6.000m shares of GPH for 135.881b\\nbuying 4.900m shares of TITN for 119.407b\\nselling 0.000 shares of ECP for 41.121b\\nbuying 14.100m shares of MGCP for 340.080b\\nselling 0.000 shares of BLD for 20.556b\\nbuying 6.800m shares of FSIG for 308.255b\\nbuying 18.300m shares of ECP for 720.973b\\nselling 0.000 shares of FLCM for 96.830b\\nselling 0.000 shares of TITN for 6.551b\\nbuying 15.200m shares of KGI for 245.727b\\nbuying 1.492m shares of ECP for 42.939b\\nbuying 1.081m shares of MGCP for 38.628b\\nbuying 428.392k shares of FSIG for 34.750b\\nbuying 419.769k shares of FLCM for 31.449b\\nbuying 2.125m shares of DCOMM for 28.272b\\nbuying 2.248m shares of APHE for 25.468b\\nbuying 59.300m shares of CTYS for 20.353b\\nbuying 822.312k shares of KGI for 20.747b\\nselling 0.000 shares of APHE for 4.014b\\nselling 0.000 shares of CTYS for -32.279m\\nbuying 846.444k shares of TITN for 23.581b\\nselling 0.000 shares of ECP for 6.691b\\nbuying 878.058k shares of OMTK for 26.407b\\nselling 0.000 shares of FSIG for 9.545b\\nselling 0.000 shares of DCOMM for 3.045b\\nbuying 961.240k shares of GPH for 31.262b\\nselling 0.000 shares of TITN for 1.350b\\nselling 0.000 shares of MGCP for 7.698b\\nbuying 2.768m shares of BLD for 35.364b\\nbuying 1.363m shares of CLRK for 31.665b\\nselling 0.000 shares of OMTK for 464.839m\\nbuying 1.290m shares of UNV for 31.433b\\nselling 0.000 shares of GPH for 1.376b\\nbuying 3.431k shares of ECP for 98.731m\\nbuying 1.040k shares of MGCP for 42.167m\\nselling 0.000 shares of BLD for -183.819m\\nbuying 44.289k shares of FSIG for 3.535b\\nbuying 98.425k shares of GPH for 3.193b\\nbuying 109.548k shares of TITN for 2.860b\\nselling 0.000 shares of MGCP for 2.766m\\nbuying 18.300m shares of BLD for 222.399b\\nbuying 9.700m shares of OMTK for 259.906b\\nselling 0.000 shares of FSIG for 519.631m\\nselling 0.000 shares of KGI for 5.389b\\nselling 0.000 shares of FLCM for 37.627b\\nselling 0.000 shares of UNV for 760.983m\\nselling 0.000 shares of TITN for 348.375m\\nselling 0.000 shares of ECP for 17.268m\\nselling 0.000 shares of BLD for 10.275b\\nbuying 14.800m shares of KGI for 427.958b\\nbuying 3.700m shares of TITN for 103.180b\\nbuying 17.600m shares of ECP for 542.208b\\nbuying 15.000m shares of MGCP for 583.300b\\nselling 0.000 shares of CLRK for 5.830b\\nbuying 5.200m shares of FSIG for 343.143b\\nselling 0.000 shares of KGI for 22.923b\\nselling 0.000 shares of TITN for 8.461b\\nbuying 8.000m shares of APHE for 69.644b\\nselling 0.000 shares of OMTK for 57.165b\\nbuying 11.100m shares of FLCM for 1.303t\\nbuying 7.400m shares of UNV for 160.375b\\nselling 0.000 shares of GPH for 784.810m\\nselling 0.000 shares of APHE for 9.869b\\nbuying 3.700m shares of TITN for 109.193b\\nselling 0.000 shares of ECP for 115.278b\\nbuying 12.300m shares of CLRK for 282.533b\\nbuying 9.700m shares of OMTK for 298.442b\\nbuying 4.700m shares of GPH for 188.789b\\nselling 0.000 shares of MGCP for 158.244b\\nselling 0.000 shares of OMTK for 18.298b\\nselling 0.000 shares of FLCM for 554.176b\\nbuying 14.400m shares of DCOMM for 168.952b\\nbuying 15.000m shares of MGCP for 716.901b\\nselling 0.000 shares of FSIG for 148.932b\\nselling 0.000 shares of DCOMM for 11.508b\\nselling 0.000 shares of UNV for 1.551b\\nbuying 14.837m shares of ECP for 350.106b\\nbuying 10.396m shares of MGCP for 314.814b\\nbuying 11.061m shares of CLRK for 282.514b\\nbuying 2.423m shares of FSIG for 253.585b\\nbuying 6.889m shares of KGI for 229.957b\\nbuying 10.000m shares of UNV for 200.325b\\nbuying 6.900m shares of GPH for 183.191b\\nselling 0.000 shares of ECP for 569.826m\\nselling 0.000 shares of MGCP for 2.168b\\nbuying 15.014m shares of BLD for 234.971b\\nbuying 5.956m shares of FLCM for 209.554b\\nbuying 5.700m shares of SLRS for 161.192b\\nbuying 16.200m shares of MGCP for 467.108b\\nselling 0.000 shares of BLD for 14.442b\\nselling 0.000 shares of FSIG for 39.148b\\nselling 0.000 shares of UNV for 2.833b\\nselling 0.000 shares of GPH for 12.964b\\nbuying 32.600m shares of CTYS for 15.635b\\nbuying 3.700m shares of TITN for 82.303b\\nbuying 11.200m shares of APHE for 98.864b\\nselling 0.000 shares of MGCP for 10.867b\\nselling 0.000 shares of CLRK for 24.961b\\nbuying 10.800m shares of OMTK for 246.960b\\nselling 0.000 shares of KGI for 27.086b\\nselling 0.000 shares of FLCM for 75.208b\\nbuying 6.900m shares of GPH for 181.027b\\nselling 0.000 shares of APHE for 12.637b\\nselling 0.000 shares of CTYS for 477.783m\\nbuying 22.000m shares of ECP for 448.455b\\nbuying 16.200m shares of MGCP for 449.890b\\nbuying 20.800m shares of BLD for 302.629b\\nbuying 11.700m shares of FLCM for 461.615b\\nselling 0.000 shares of OMTK for 26.377b\\nselling 0.000 shares of TITN for 11.041b\\nbuying 7.200m shares of RHOC for 43.773b\\nselling 0.000 shares of MGCP for 41.186b\\nselling 0.000 shares of SLRS for 29.137b\\nbuying 3.700m shares of TITN for 90.268b\\nselling 0.000 shares of FLCM for 140.536b\\nselling 0.000 shares of GPH for 27.946b\\nselling 0.000 shares of ECP for 103.026b\\nselling 0.000 shares of BLD for 83.676b\\nbuying 5.800m shares of FSIG for 380.453b\\nselling 0.000 shares of TITN for 9.504b\\nbuying 3.700m shares of TITN for 107.501b\\nbuying 23.600m shares of DCOMM for 175.203b\\nselling 0.000 shares of RHOC for 17.225b\\nselling 0.000 shares of TITN for 3.980b\\nbuying 13.900m shares of KGI for 454.912b\\nbuying 6.900m shares of GPH for 178.584b\\nbuying 7.200m shares of RHOC for 55.628b\\nbuying 3.700m shares of TITN for 104.663b\\nselling 0.000 shares of FSIG for 275.912b\\nselling 0.000 shares of KGI for 69.725b\\nselling 0.000 shares of GPH for 22.100b\\nbuying 16.200m shares of MGCP for 370.245b\\nselling 0.000 shares of DCOMM for 25.151b\\nselling 0.000 shares of TITN for 5.712b\\nselling 0.000 shares of MGCP for 7.086b\\nbuying 12.900m shares of CLRK for 359.753b\\nselling 0.000 shares of RHOC for 18.293b\\nbuying 5.800m shares of FSIG for 426.148b\\nbuying 22.000m shares of ECP for 396.531b\\nselling 0.000 shares of CLRK for 23.771b\\nbuying 11.700m shares of FLCM for 238.062b\\nbuying 7.200m shares of RHOC for 60.170b\\nselling 0.000 shares of ECP for 30.116b\\nselling 0.000 shares of FLCM for 14.378b\\nbuying 22.000m shares of ECP for 416.409b\\nselling 0.000 shares of FSIG for 274.324b\\nbuying 11.700m shares of FLCM for 242.301b\\nselling 0.000 shares of RHOC for 10.529b\\nbuying 3.700m shares of TITN for 102.626b\\nbuying 17.300m shares of ECP for 543.227b\\nbuying 10.500m shares of OMTK for 472.672b\\nbuying 7.200m shares of FSIG for 706.164b\\nbuying 12.500m shares of FLCM for 630.902b\\nbuying 5.600m shares of GPH for 160.016b\\nbuying 6.000m shares of APHE for 76.819b\\nbuying 14.400m shares of CTYS for 23.997b\\nbuying 23.600m shares of KGI for 428.588b\\nbuying 14.700m shares of BLD for 283.234b\\nbuying 18.200m shares of CLRK for 303.722b\\nselling 0.000 shares of FSIG for 31.748b\\nselling 0.000 shares of KGI for -3.026b\\nselling 0.000 shares of FLCM for 10.488b\\nbuying 20.600m shares of DCOMM for 173.888b\\nbuying 9.200m shares of HLS for 142.586b\\nselling 0.000 shares of CTYS for -909.252m\\nbuying 3.600m shares of TITN for 81.480b\\nbuying 15.200m shares of MGCP for 440.105b\\nselling 0.000 shares of APHE for -728.517m\\nselling 0.000 shares of TITN for 7.466b\\nselling 0.000 shares of OMTK for 59.422b\\nselling 0.000 shares of GPH for 31.040b\\nselling 0.000 shares of BLD for 46.291b\\nbuying 10.500m shares of OMTK for 544.419b\\nbuying 12.500m shares of FLCM for 475.029b\\nselling 0.000 shares of DCOMM for 29.517b\\nbuying 3.600m shares of TITN for 77.988b\\nselling 0.000 shares of MGCP for 93.672b\\nselling 0.000 shares of CLRK for 71.626b\\nselling 0.000 shares of OMTK for 55.033b\\nselling 0.000 shares of TITN for 1.151b\\nbuying 15.200m shares of MGCP for 511.385b\\nbuying 7.200m shares of FSIG for 333.876b\\nselling 0.000 shares of FLCM for 179.110b\\nbuying 14.400m shares of CTYS for 16.650b\\nselling 0.000 shares of ECP for 279.416b\\nselling 0.000 shares of MGCP for 42.898b\\nbuying 12.500m shares of FLCM for 562.627b\\nselling 0.000 shares of CTYS for 1.289b\\nbuying 3.600m shares of TITN for 62.477b\\nbuying 14.700m shares of BLD for 231.623b\\nbuying 10.500m shares of OMTK for 544.351b\\nselling 0.000 shares of TITN for 2.281b\\nbuying 6.000m shares of APHE for 100.821b\\nselling 0.000 shares of OMTK for -10.412b\\nselling 0.000 shares of FSIG for 204.388b\\nselling 0.000 shares of HLS for 56.587b\\nbuying 3.600m shares of TITN for 63.556b\\nbuying 15.200m shares of MGCP for 477.164b\\nselling 0.000 shares of BLD for 43.536b\\nselling 0.000 shares of FLCM for 233.368b\\nselling 0.000 shares of APHE for 7.353b\\nselling 0.000 shares of TITN for 3.171b\\nbuying 17.300m shares of ECP for 689.888b\\nbuying 3.600m shares of TITN for 62.030b\\nselling 0.000 shares of MGCP for 30.387b\\nbuying 7.200m shares of FSIG for 389.759b\\nbuying 12.500m shares of FLCM for 562.076b\\nselling 0.000 shares of TITN for 6.102b\\nbuying 7.900m shares of UNV for 236.953b\\nselling 0.000 shares of FSIG for 117.961b\\nbuying 3.600m shares of TITN for 59.933b\\nselling 0.000 shares of ECP for 140.325b\\nbuying 7.200m shares of FSIG for 488.635b\\nselling 0.000 shares of FLCM for 288.305b\\nselling 0.000 shares of UNV for 13.139b\\nselling 0.000 shares of TITN for 1.968b\\nbuying 6.000m shares of APHE for 82.010b\\nbuying 17.300m shares of ECP for 782.560b\\nselling 0.000 shares of FSIG for 48.863b\\nselling 0.000 shares of APHE for -4.235b\\nbuying 3.600m shares of TITN for 60.603b\\nselling 0.000 shares of ECP for 38.599b\\nbuying 14.700m shares of BLD for 298.155b\\nbuying 7.200m shares of FSIG for 493.818b\\nbuying 12.500m shares of FLCM for 644.322b\\nselling 0.000 shares of TITN for -1.712b\\nbuying 17.300m shares of ECP for 779.380b\\nselling 0.000 shares of BLD for 19.303b\\nbuying 15.200m shares of MGCP for 530.033b\\nselling 0.000 shares of ECP for 86.464b\\nselling 0.000 shares of MGCP for 32.233b\\nselling 0.000 shares of FSIG for 183.605b\\nbuying 7.200m shares of FSIG for 603.754b\\nselling 0.000 shares of FLCM for 450.844b\\nbuying 3.600m shares of TITN for 48.560b\\nbuying 5.600m shares of GPH for 140.598b\\nbuying 51.005k shares of ECP for 1.124b\\nbuying 31.260k shares of MGCP for 1.046b\\nbuying 67.518k shares of BLD for 980.041m\\nbuying 39.989k shares of CLRK for 925.491m\\nbuying 26.036k shares of OMTK for 903.952m\\nbuying 11.065k shares of FSIG for 883.451m\\nbuying 48.060k shares of KGI for 889.844m\\nbuying 24.841k shares of FLCM for 888.440m\\nbuying 36.007k shares of UNV for 856.472m\\nbuying 62.621k shares of GPH for 782.769m\\nbuying 90.373k shares of APHE for 617.366m\\nbuying 569.460k shares of CTYS for 401.195m\\nbuying 8.947k shares of TITN for 214.290m\\nselling 0.000 shares of ECP for 26.056m\\nselling 0.000 shares of MGCP for 18.529m\\nselling 0.000 shares of BLD for -5.866m\\nselling 0.000 shares of CLRK for 33.045m\\nselling 0.000 shares of OMTK for 39.902m\\nselling 0.000 shares of FSIG for 67.463m\\nselling 0.000 shares of GPH for 2.145m\\nselling 0.000 shares of APHE for -7.285m\\nselling 0.000 shares of CTYS for 4.322m\\nbuying 7.600m shares of APHE for 45.309b\\nbuying 17.400m shares of DCOMM for 174.840b\\nbuying 14.900m shares of MGCP for 448.088b\\nbuying 22.900m shares of BLD for 296.110b\\nbuying 13.900m shares of CLRK for 311.744b\\nbuying 11.200m shares of OMTK for 366.474b\\nselling 0.000 shares of KGI for 52.653m\\nselling 0.000 shares of APHE for 4.083b\\nbuying 23.000m shares of ECP for 430.721b\\nselling 0.000 shares of BLD for 24.482b\\nselling 0.000 shares of CLRK for 31.855b\\nbuying 5.200m shares of FSIG for 313.849b\\nbuying 22.300m shares of KGI for 437.953b\\nselling 0.000 shares of FLCM for 491.310m\\nselling 0.000 shares of DCOMM for 8.640b\\nbuying 11.500m shares of GPH for 128.672b\\nselling 0.000 shares of TITN for 28.562m\\nselling 0.000 shares of MGCP for 63.140b\\nselling 0.000 shares of KGI for 38.222b\\nselling 0.000 shares of UNV for 136.014m\\nselling 0.000 shares of GPH for 800.510m\\nbuying 31.500m shares of CTYS for 13.519b\\nbuying 3.600m shares of TITN for 95.714b\\nbuying 13.900m shares of CLRK for 309.905b\\nbuying 7.800m shares of UNV for 202.947b\\nselling 0.000 shares of TITN for 2.996b\\nbuying 14.900m shares of MGCP for 495.638b\\nselling 0.000 shares of CLRK for 5.523b\\nselling 0.000 shares of FSIG for 86.787b\\nselling 0.000 shares of CTYS for 608.285m\\nbuying 3.600m shares of TITN for 91.745b\\nbuying 69.283k shares of ECP for 1.270b\\nbuying 33.811k shares of MGCP for 1.169b\\nbuying 53.598k shares of BLD for 1.074b\\nbuying 56.204k shares of CLRK for 1.003b\\nbuying 29.283k shares of OMTK for 941.375m\\nbuying 12.285k shares of FSIG for 916.864m\\nbuying 36.335k shares of KGI for 886.916m\\nbuying 22.548k shares of FLCM for 897.221m\\nbuying 50.502k shares of DCOMM for 890.877m\\nbuying 45.517k shares of GPH for 881.716m\\nbuying 524.906k shares of CTYS for 821.998m\\nbuying 30.175k shares of TITN for 684.138m\\nselling 0.000 shares of CLRK for -6.833m\\nselling 0.000 shares of DCOMM for -5.977m\\nselling 0.000 shares of TITN for -4.532m\\nselling 0.000 shares of ECP for 74.185m\\nselling 0.000 shares of MGCP for 27.304m\\nselling 0.000 shares of OMTK for 51.999m\\nselling 0.000 shares of FSIG for 130.841m\\nselling 0.000 shares of FLCM for 178.052m\\nselling 0.000 shares of GPH for 27.590m\\nselling 0.000 shares of CTYS for 123.371m\\nbuying 86.156k shares of TITN for 1.856b\\nbuying 11.741m shares of ECP for 273.678b\\nbuying 13.767m shares of BLD for 245.543b\\nbuying 2.971m shares of FSIG for 220.351b\\nbuying 5.100m shares of GPH for 149.313b\\nbuying 17.500m shares of CTYS for 21.500b\\nselling 0.000 shares of ECP for 1.439b\\nbuying 9.100m shares of OMTK for 336.172b\\nselling 0.000 shares of FSIG for 5.493b\\nbuying 21.100m shares of KGI for 369.389b\\nbuying 10.800m shares of UNV for 173.444b\\nselling 0.000 shares of GPH for 459.086m\\nbuying 6.000m shares of TITN for 80.017b\\nbuying 27.600m shares of ECP for 483.435b\\nbuying 14.700m shares of MGCP for 483.059b\\nbuying 16.200m shares of BLD for 318.346b\\nbuying 18.700m shares of CLRK for 302.344b\\nbuying 9.400m shares of OMTK for 363.977b\\nbuying 7.300m shares of FSIG for 402.723b\\nbuying 13.600m shares of FLCM for 405.760b\\nbuying 11.500m shares of DCOMM for 180.414b\\nbuying 5.800m shares of GPH for 140.605b\\nbuying 15.300m shares of CTYS for 20.192b\\nbuying 3.600m shares of TITN for 85.142b\\nbuying 15.300m shares of KGI for 383.525b\\nbuying 10.700m shares of UNV for 180.124b\\nselling 0.000 shares of ECP for 16.539b\\nselling 0.000 shares of BLD for 13.299b\\nselling 0.000 shares of GPH for 8.219b\\nbuying 27.600m shares of ECP for 482.655b\\nselling 0.000 shares of CLRK for 41.109b\\nselling 0.000 shares of DCOMM for 9.722b\\nbuying 5.800m shares of GPH for 148.387b\\nselling 0.000 shares of OMTK for 38.457b\\nselling 0.000 shares of FSIG for 232.104b\\nselling 0.000 shares of TITN for 11.398b\\nbuying 11.495m shares of MGCP for 367.928b\\nbuying 8.131m shares of OMTK for 331.576b\\nbuying 8.700m shares of GPH for 142.645b\\nbuying 19.100m shares of CTYS for 23.244b\\nbuying 4.000m shares of TITN for 84.489b\\nbuying 6.542m shares of MGCP for 233.307b\\nbuying 5.771m shares of OMTK for 209.416b\\nselling 0.000 shares of MGCP for 5.152b\\nbuying 18.100m shares of BLD for 310.397b\\nbuying 12.400m shares of FLCM for 384.078b\\nbuying 15.200m shares of CTYS for 18.078b\\nbuying 14.600m shares of CLRK for 277.555b\\nselling 0.000 shares of OMTK for 28.814b\\nbuying 12.200m shares of DCOMM for 174.279b\\nbuying 10.800m shares of UNV for 176.938b\\nbuying 11.600m shares of GPH for 120.637b\\nbuying 5.300m shares of TITN for 78.393b\\n\"}}],[\"CodingContracts/types.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"CodingContracts/types.txt\",\"text\":\"[\\\"Find Largest Prime Factor\\\",\\\"Subarray with Maximum Sum\\\",\\\"Total Ways to Sum\\\",\\\"Total Ways to Sum II\\\",\\\"Spiralize Matrix\\\",\\\"Array Jumping Game\\\",\\\"Array Jumping Game II\\\",\\\"Merge Overlapping Intervals\\\",\\\"Generate IP Addresses\\\",\\\"Algorithmic Stock Trader I\\\",\\\"Algorithmic Stock Trader II\\\",\\\"Algorithmic Stock Trader III\\\",\\\"Algorithmic Stock Trader IV\\\",\\\"Minimum Path Sum in a Triangle\\\",\\\"Unique Paths in a Grid I\\\",\\\"Unique Paths in a Grid II\\\",\\\"Shortest Path in a Grid\\\",\\\"Sanitize Parentheses in Expression\\\",\\\"Find All Valid Math Expressions\\\",\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"Proper 2-Coloring of a Graph\\\",\\\"Compression I: RLE Compression\\\",\\\"Compression II: LZ Decompression\\\",\\\"Compression III: LZ Compression\\\",\\\"Encryption I: Caesar Cipher\\\",\\\"Encryption II: Vigenère Cipher\\\"]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hackingDeamon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5943114.777599993,\"onlineMoneyMade\":3959889787.462035,\"onlineRunningTime\":3440.2099999990623,\"ramUsage\":20.55,\"server\":\"home\",\"scriptKey\":\"hackingDeamon.js*[]\",\"title\":\"hackingDeamon.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"Corporation/teaParty.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3439.2099999990633,\"ramUsage\":72.6,\"server\":\"home\",\"scriptKey\":\"Corporation/teaParty.js*[]\",\"title\":\"Corporation/teaParty.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"50.1.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11144338406.2,\"moneyMax\":55721692031,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"44.3.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9049650083.800001,\"moneyMax\":45248250419,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1173,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"47.6.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":5009005676.6,\"moneyMax\":25045028383,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":79,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"3.9.2.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":2341713848.4,\"moneyMax\":11708569242,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1058,\"serverGrowth\":76,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"99.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5638867341.200001,\"moneyMax\":28194336706,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1209,\"serverGrowth\":79,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"0.1.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":4365931827,\"moneyMax\":21829659135,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1152,\"serverGrowth\":61,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"17.3.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":2792406936.2000003,\"moneyMax\":13962034681,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1088,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"60.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":4111349377.4,\"moneyMax\":20556746887,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":84,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"42.6.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5023516427.2,\"moneyMax\":25117582136,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1136,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"40.0.5.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":322573634,\"moneyMax\":1612868170,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":84,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"24.5.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1113,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"61.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":232593212.20000002,\"moneyMax\":1162966061,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1039,\"serverGrowth\":75,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"74.1.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":184245631.4,\"moneyMax\":921228157,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":51,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"58.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":172482268.60000002,\"moneyMax\":862411343,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":945,\"serverGrowth\":52,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"81.8.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":119244561.80000001,\"moneyMax\":596222809,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"72.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":159522569.20000002,\"moneyMax\":797612846,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":65,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"61.5.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":183914128.4,\"moneyMax\":919570642,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":93,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"81.7.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":229378362.20000002,\"moneyMax\":1146891811,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":854,\"serverGrowth\":80,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"0.8.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"stormtech\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":159185913.20000002,\"moneyMax\":795929566,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":820,\"serverGrowth\":75,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"25.3.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":102005614.80000001,\"moneyMax\":510028074,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":90,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"39.8.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":167195966.60000002,\"moneyMax\":835979833,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"10.3.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":158075656.8,\"moneyMax\":790378284,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":865,\"serverGrowth\":85,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"56.5.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":213529120,\"moneyMax\":1067645600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":876,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"97.8.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":188456658.20000002,\"moneyMax\":942283291,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":878,\"serverGrowth\":60,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"94.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":186682270,\"moneyMax\":933411350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":69,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"27.2.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":166530690,\"moneyMax\":832653450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"85.5.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":175872676.60000002,\"moneyMax\":879363383,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":799,\"serverGrowth\":70,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"11.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":275281277.40000004,\"moneyMax\":1376406387,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":831,\"serverGrowth\":55,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"57.7.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":324271951,\"moneyMax\":1621359755,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":88,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"67.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":235251945,\"moneyMax\":1176259725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":837,\"serverGrowth\":82,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"59.1.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":272309651.2,\"moneyMax\":1361548256,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":74,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"5.6.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":206357068.20000002,\"moneyMax\":1031785341,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":78,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"80.1.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":141347650.6,\"moneyMax\":706738253,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":676,\"serverGrowth\":64,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"67.5.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":136639475.4,\"moneyMax\":683197377,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":517,\"serverGrowth\":48,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"5.2.6.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":126074115.4,\"moneyMax\":630370577,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":570,\"serverGrowth\":52,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"87.9.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":61820013.400000006,\"moneyMax\":309100067,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":421,\"serverGrowth\":45,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"76.1.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":36344876,\"moneyMax\":181724380,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":385,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"35.4.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":164854383.20000002,\"moneyMax\":824271916,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":745,\"serverGrowth\":84,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"12.1.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":66239842.2,\"moneyMax\":331199211,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":51,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"10.9.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":81169650,\"moneyMax\":405848250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":568,\"serverGrowth\":64,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"82.6.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":94031479.2,\"moneyMax\":470157396,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":417,\"serverGrowth\":26,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"90.2.6.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":193851601,\"moneyMax\":193851601,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":294,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":36,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"36.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"computek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"computek\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":46649606,\"moneyMax\":233248030,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":330,\"serverGrowth\":62,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.3.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":421,\"serverGrowth\":63,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"75.6.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"johnson-ortho\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"johnson-ortho\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":16337040.200000001,\"moneyMax\":81685201,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":285,\"serverGrowth\":64,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"37.9.7.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"8.1.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.452,\"minDifficulty\":3,\"moneyAvailable\":399606,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"3.5.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.4960000000000004,\"minDifficulty\":3,\"moneyAvailable\":1037625.892786874,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"44.1.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"53.3.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"0.8.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"21.8.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"88.6.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"84.6.1.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"83.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.116,\"minDifficulty\":5,\"moneyAvailable\":3797304.68786808,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":4,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"9.4.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"11.3.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"12.8.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":13653353.600000001,\"moneyMax\":68266768,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":220,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"75.2.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"crush-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"crush-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":8390868.6,\"moneyMax\":41954343,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":253,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"60.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"25.1.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":30,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"86.7.7.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":55,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"26.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":691,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"64.3.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"0.4.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":4,\"requiredHackingSkill\":346,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":14,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"20.1.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":202,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":18,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"65.8.4.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":511,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"26.8.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":4,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"20.8.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"91.3.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"98.7.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack\",\"httpPortOpen\":true,\"ip\":\"4.2.2.2\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"ramUsage\":1.7,\"server\":\"daemon-hack\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1233,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"ramUsage\":1.7,\"server\":\"daemon-hack\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"ramUsage\":1.7,\"server\":\"daemon-hack\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}}]}},\"daemon-grow\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow\",\"httpPortOpen\":true,\"ip\":\"27.9.0.6\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.75,\"server\":\"daemon-grow\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":4405,\"temporary\":false}}]}},\"daemon-grow-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-0\",\"httpPortOpen\":true,\"ip\":\"85.0.3.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.41000000000021,\"ramUsage\":1.75,\"server\":\"daemon-grow-0\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2280,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"ramUsage\":1.75,\"server\":\"daemon-grow-0\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}}]}},\"daemon-grow-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-1\",\"httpPortOpen\":true,\"ip\":\"48.2.7.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-1\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"ramUsage\":1.75,\"server\":\"daemon-grow-1\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"ramUsage\":1.75,\"server\":\"daemon-grow-1\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}}]}},\"daemon-weak\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-weak\",\"httpPortOpen\":true,\"ip\":\"71.2.2.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-weak\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-weak\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-weak\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.21000000000021,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":133,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":55,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.010000000000204,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"ramUsage\":1.75,\"server\":\"daemon-weak\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}}]}},\"daemon-grow-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-2\",\"httpPortOpen\":true,\"ip\":\"88.2.0.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-2\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"ramUsage\":1.75,\"server\":\"daemon-grow-2\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"ramUsage\":1.75,\"server\":\"daemon-grow-2\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}}]}},\"daemon-grow-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-3\",\"httpPortOpen\":true,\"ip\":\"7.1.8.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-3\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-4\",\"httpPortOpen\":true,\"ip\":\"87.9.2.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-4\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-0\",\"httpPortOpen\":true,\"ip\":\"75.6.9.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-5\",\"httpPortOpen\":true,\"ip\":\"80.6.3.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-5\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-grow-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-grow-6\",\"httpPortOpen\":true,\"ip\":\"7.4.8.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-grow-6\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-grow-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-grow-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"ramUsage\":1.75,\"server\":\"daemon-grow-6\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",67411.55475425866],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"ramUsage\":1.75,\"server\":\"daemon-grow-6\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\",67411.55475425866]\",\"title\":\"grow.js the-hub 67411.55475425866\",\"threads\":2278,\"temporary\":false}}]}},\"daemon-hack-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-1\",\"httpPortOpen\":true,\"ip\":\"12.7.8.1\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-1\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-2\",\"httpPortOpen\":true,\"ip\":\"16.1.8.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-2\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-3\",\"httpPortOpen\":true,\"ip\":\"9.6.3.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-3\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-4\",\"httpPortOpen\":true,\"ip\":\"45.9.5.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-4\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-weak-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-weak-0\",\"httpPortOpen\":true,\"ip\":\"92.6.7.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-weak-0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-weak-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-weak-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"ramUsage\":1.75,\"server\":\"daemon-weak-0\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":128,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",100,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"ramUsage\":1.75,\"server\":\"daemon-weak-0\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",100,false]\",\"title\":\"weaken.js the-hub 100 false\",\"threads\":183,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",0,false],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"ramUsage\":1.75,\"server\":\"daemon-weak-0\",\"scriptKey\":\"weaken.js*[\\\"the-hub\\\",0,false]\",\"title\":\"weaken.js the-hub 0 false\",\"threads\":50,\"temporary\":false}}]}},\"daemon-hack-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-5\",\"httpPortOpen\":true,\"ip\":\"69.4.4.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-5\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-6\",\"httpPortOpen\":true,\"ip\":\"81.3.5.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-6\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-7\",\"httpPortOpen\":true,\"ip\":\"49.9.6.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-7\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-8\",\"httpPortOpen\":true,\"ip\":\"65.5.1.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-8\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-8\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-9\",\"httpPortOpen\":true,\"ip\":\"12.4.4.5\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-9\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-9\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-10\",\"httpPortOpen\":true,\"ip\":\"81.0.1.9\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-10\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"daemon-hack-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-11\",\"httpPortOpen\":true,\"ip\":\"79.5.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-11\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.8100000000002,\"ramUsage\":1.7,\"server\":\"daemon-hack-11\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.6100000000002,\"ramUsage\":1.7,\"server\":\"daemon-hack-11\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.410000000000196,\"ramUsage\":1.7,\"server\":\"daemon-hack-11\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}}]}},\"daemon-hack-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-12\",\"httpPortOpen\":true,\"ip\":\"81.8.7.5\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-12\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.21000000000019,\"ramUsage\":1.7,\"server\":\"daemon-hack-12\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":51.01000000000019,\"ramUsage\":1.7,\"server\":\"daemon-hack-12\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1229,\"temporary\":false}}]}},\"daemon-hack-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"daemon-hack-13\",\"httpPortOpen\":true,\"ip\":\"0.3.5.8\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[HACK] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[HACK] Second argument must be a number\\\");\\n  await ns.hack(ns.args[0], { additionalMsec: ns.args[1] });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0hBQ0tdIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbSEFDS10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5oYWNrKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsd0NBQXdDO0FBQ2hHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUseUNBQXlDO0FBQ2pHLFFBQU0sR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQzVEOyIsIm5hbWVzIjpbXX0=\",\"filename\":\"hack.js\",\"server\":\"daemon-hack-13\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[GROW] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[GROW] Second argument must be a number\\\");\\n  await ns.grow(ns.args[0], { additionalMsec: ns.args[1], stock: true });\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3cudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTlMgfSBmcm9tIFwiQG5zXCI7XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYWluKG5zOiBOUykge1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzBdICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW0dST1ddIEZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmdcIik7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMV0gIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbR1JPV10gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcbiAgICBhd2FpdCBucy5ncm93KG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0sIHN0b2NrOiB0cnVlIH0pO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6IkFBQ0Esc0JBQXNCLEtBQUssSUFBUTtBQUMvQixNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHdDQUF3QztBQUNoRyxNQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTTtBQUFVLFVBQU0sSUFBSSxVQUFVLHlDQUF5QztBQUNqRyxRQUFNLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxLQUFLLENBQUM7QUFDekU7IiwibmFtZXMiOltdfQ==\",\"filename\":\"grow.js\",\"server\":\"daemon-hack-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n  if (typeof ns.args[0] !== \\\"string\\\")\\n    throw new TypeError(\\\"[WEAKEN] First argument must be a string\\\");\\n  if (typeof ns.args[1] !== \\\"number\\\")\\n    throw new TypeError(\\\"[WEAKEN] Second argument must be a number\\\");\\n  await ns.weaken(ns.args[0], { additionalMsec: ns.args[1] });\\n  const port = ns.getPortHandle(2);\\n  const data = port.peek();\\n  if (ns.args[2] === true || data === ns.pid) {\\n    port.clear();\\n    ns.atExit(() => {\\n      port.write(ns.pid);\\n    });\\n  }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYWtlbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOUyB9IGZyb20gXCJAbnNcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1haW4obnM6IE5TKSB7XHJcbiAgICBpZiAodHlwZW9mIG5zLmFyZ3NbMF0gIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbV0VBS0VOXSBGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBucy5hcmdzWzFdICE9PSBcIm51bWJlclwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiW1dFQUtFTl0gU2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7XHJcblxyXG4gICAgYXdhaXQgbnMud2Vha2VuKG5zLmFyZ3NbMF0sIHsgYWRkaXRpb25hbE1zZWM6IG5zLmFyZ3NbMV0gfSk7XHJcblxyXG4gICAgY29uc3QgcG9ydCA9IG5zLmdldFBvcnRIYW5kbGUoMik7XHJcbiAgICBjb25zdCBkYXRhID0gcG9ydC5wZWVrKCk7XHJcbiAgICAvLyBucy50cHJpbnQoZGF0YSArIFwiIHwgXCIgKyBucy5waWQpO1xyXG5cclxuICAgIGlmIChucy5hcmdzWzJdID09PSB0cnVlIHx8IGRhdGEgPT09IG5zLnBpZCkge1xyXG4gICAgICAgIHBvcnQuY2xlYXIoKTtcclxuICAgICAgICBucy5hdEV4aXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBwb3J0LndyaXRlKG5zLnBpZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiQUFDQSxzQkFBc0IsS0FBSyxJQUFRO0FBQy9CLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMENBQTBDO0FBQ2xHLE1BQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNO0FBQVUsVUFBTSxJQUFJLFVBQVUsMkNBQTJDO0FBRW5HLFFBQU0sR0FBRyxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBRTFELFFBQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQztBQUMvQixRQUFNLE9BQU8sS0FBSyxLQUFLO0FBR3ZCLE1BQUksR0FBRyxLQUFLLENBQUMsTUFBTSxRQUFRLFNBQVMsR0FBRyxLQUFLO0FBQ3hDLFNBQUssTUFBTTtBQUNYLE9BQUcsT0FBTyxNQUFNO0FBQ1osV0FBSyxNQUFNLEdBQUcsR0FBRztBQUFBLElBQ3JCLENBQUM7QUFBQSxFQUNMO0FBQ0o7IiwibmFtZXMiOltdfQ==\",\"filename\":\"weaken.js\",\"server\":\"daemon-hack-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":4,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",252555.83032846983],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"ramUsage\":1.7,\"server\":\"daemon-hack-13\",\"scriptKey\":\"hack.js*[\\\"the-hub\\\",252555.83032846983]\",\"title\":\"hack.js the-hub 252555.83032846983\",\"threads\":1820,\"temporary\":false}}]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":101496.32939716923}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":56174.10205538462}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":234058.9164228923}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":224076.0475844923}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":148371.65749168542}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":127757.87404799598}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":50254.51068799598}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":27.7076800000003}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":27.814453333333635}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":27.761066666666967}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":101489.71799465503}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":2,\"discovery\":\"known\",\"playerReputation\":117845.94333864568}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":3,\"discovery\":\"known\",\"playerReputation\":118214.57267197882}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":2,\"discovery\":\"known\",\"playerReputation\":347845.1433404825}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":1,\"discovery\":\"known\",\"playerReputation\":50257.55372799599}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":949.9782840842918,\"lastPrice\":952.7036992636362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":false,\"otlkMag\":22.97000798107511,\"otlkMagForecast\":27.3996703472137,\"cap\":125573835,\"spreadPerc\":0.4,\"shareTxForMovement\":78728,\"shareTxUntilMovement\":78728,\"totalShares\":92900000,\"maxShares\":18600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":564874.3339831211,\"lastPrice\":563108.5380696697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.47,\"b\":false,\"otlkMag\":20.877397520050476,\"otlkMagForecast\":29.23023252235448,\"cap\":439896611,\"spreadPerc\":0.2,\"shareTxForMovement\":79531,\"shareTxUntilMovement\":79531,\"totalShares\":79700000,\"maxShares\":15900000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20710.609289783653,\"lastPrice\":20608.858871766315,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":10.107779742618046,\"otlkMagForecast\":62.720058884368825,\"cap\":15148641,\"spreadPerc\":0.4,\"shareTxForMovement\":88356,\"shareTxUntilMovement\":88356,\"totalShares\":127800000,\"maxShares\":25600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":19022.002660252172,\"lastPrice\":19107.034500459104,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":17.574771249369366,\"otlkMagForecast\":31.353974937052932,\"cap\":437943230,\"spreadPerc\":0.2,\"shareTxForMovement\":55855,\"shareTxUntilMovement\":55855,\"totalShares\":68500000,\"maxShares\":13700000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":3337.1042308045794,\"lastPrice\":3352.4669962337807,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":13.826226365388512,\"otlkMagForecast\":35.6396677319306,\"cap\":261744354,\"spreadPerc\":0.1,\"shareTxForMovement\":53076,\"shareTxUntilMovement\":53076,\"totalShares\":44000000,\"maxShares\":8800000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":2562.9779834240508,\"lastPrice\":2544.473584536199,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.09,\"b\":false,\"otlkMag\":17.25274351764928,\"otlkMagForecast\":31.07031383106195,\"cap\":468142738,\"spreadPerc\":0.1,\"shareTxForMovement\":39317,\"shareTxUntilMovement\":39317,\"totalShares\":35600000,\"maxShares\":7100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":3904.7056988829822,\"lastPrice\":3883.717114635513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.81,\"b\":false,\"otlkMag\":15.31822817919291,\"otlkMagForecast\":34.97985274356597,\"cap\":121417077,\"spreadPerc\":0.7,\"shareTxForMovement\":87986,\"shareTxUntilMovement\":87986,\"totalShares\":97100000,\"maxShares\":19400000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":3457.3327220241626,\"lastPrice\":3428.9642995622216,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":9.445585736146985,\"otlkMagForecast\":59.38589308642261,\"cap\":596079710,\"spreadPerc\":0.1,\"shareTxForMovement\":49578,\"shareTxUntilMovement\":49578,\"totalShares\":67300000,\"maxShares\":13500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":11091.516873738718,\"lastPrice\":11155.89832082582,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.87,\"b\":false,\"otlkMag\":7.150966676912563,\"otlkMagForecast\":41.618453425770475,\"cap\":92639531,\"spreadPerc\":0.4,\"shareTxForMovement\":64600,\"shareTxUntilMovement\":64600,\"totalShares\":57800000,\"maxShares\":11600000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":6667.529429865463,\"lastPrice\":6695.110249483212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":6.396697174901955,\"otlkMagForecast\":42.223597600480154,\"cap\":9600523,\"spreadPerc\":0.2,\"shareTxForMovement\":104435,\"shareTxUntilMovement\":104435,\"totalShares\":97100000,\"maxShares\":19400000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":17423.61001351168,\"lastPrice\":17493.35932571256,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":7.438734047495084,\"otlkMagForecast\":57.299920679661554,\"cap\":140891969,\"spreadPerc\":0.6,\"shareTxForMovement\":62726,\"shareTxUntilMovement\":62726,\"totalShares\":56900000,\"maxShares\":11400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":19510.274308268763,\"lastPrice\":19407.978478288056,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":8.220943067152444,\"otlkMagForecast\":58.95741020298703,\"cap\":150948336,\"spreadPerc\":1,\"shareTxForMovement\":104685,\"shareTxUntilMovement\":104685,\"totalShares\":78900000,\"maxShares\":15800000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":5989.037318010087,\"lastPrice\":6017.008163637262,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":13.853154966459096,\"otlkMagForecast\":61.698005573786205,\"cap\":234206925,\"spreadPerc\":0.3,\"shareTxForMovement\":43417,\"shareTxUntilMovement\":43417,\"totalShares\":59000000,\"maxShares\":11800000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":24372.915933635504,\"lastPrice\":24465.60593388881,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":true,\"otlkMag\":8.424993548910642,\"otlkMagForecast\":58.02216536085902,\"cap\":303024994,\"spreadPerc\":0.8,\"shareTxForMovement\":55835,\"shareTxUntilMovement\":55835,\"totalShares\":54400000,\"maxShares\":10900000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":6044.576912889705,\"lastPrice\":6068.774256717559,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":10.345556742359822,\"otlkMagForecast\":40.84199229725459,\"cap\":53055038,\"spreadPerc\":0.3,\"shareTxForMovement\":44598,\"shareTxUntilMovement\":44598,\"totalShares\":74300000,\"maxShares\":14900000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":18462.688269493567,\"lastPrice\":18379.303162326665,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":7.1420361220142485,\"otlkMagForecast\":57.87172407675258,\"cap\":68813350,\"spreadPerc\":0.9,\"shareTxForMovement\":61992,\"shareTxUntilMovement\":61992,\"totalShares\":44500000,\"maxShares\":8900000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":55539.69174660132,\"lastPrice\":55277.83731440217,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":6.863490874135185,\"otlkMagForecast\":57.34496580487511,\"cap\":35596718,\"spreadPerc\":0.4,\"shareTxForMovement\":56113,\"shareTxUntilMovement\":56113,\"totalShares\":33500000,\"maxShares\":6700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":52094.32301274259,\"lastPrice\":51900.40893284433,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.56,\"b\":true,\"otlkMag\":10.505999648121637,\"otlkMagForecast\":60.96964033885257,\"cap\":317955698,\"spreadPerc\":0.9,\"shareTxForMovement\":88573,\"shareTxUntilMovement\":88573,\"totalShares\":35100000,\"maxShares\":7000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":53215.2426671301,\"lastPrice\":53477.97789279039,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.413817034488998,\"otlkMagForecast\":53.930172872479844,\"cap\":117306057,\"spreadPerc\":0.4,\"shareTxForMovement\":101871,\"shareTxUntilMovement\":101871,\"totalShares\":22500000,\"maxShares\":4500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1.9318873636726723,\"lastPrice\":1.9000678622109755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.51,\"b\":false,\"otlkMag\":5.828023633672153,\"otlkMagForecast\":47.98915685232463,\"cap\":69880898,\"spreadPerc\":0.5,\"shareTxForMovement\":51086,\"shareTxUntilMovement\":51086,\"totalShares\":110200000,\"maxShares\":22000000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":40805.49793754829,\"lastPrice\":40470.67693611904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.24,\"b\":true,\"otlkMag\":7.838036356281571,\"otlkMagForecast\":56.6244812828265,\"cap\":157385284,\"spreadPerc\":0.6,\"shareTxForMovement\":49593,\"shareTxUntilMovement\":49593,\"totalShares\":37700000,\"maxShares\":7500000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2962.762767113651,\"lastPrice\":2950.5575274081134,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":5.095873075155999,\"otlkMagForecast\":45.889929066553385,\"cap\":78620333,\"spreadPerc\":0.3,\"shareTxForMovement\":69416,\"shareTxUntilMovement\":69416,\"totalShares\":34900000,\"maxShares\":7000000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":96545726.83021891,\"lastPrice\":95243047.0291758,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.05,\"b\":false,\"otlkMag\":5.59826497196429,\"otlkMagForecast\":36.629919198986336,\"cap\":108723477,\"spreadPerc\":0.7,\"shareTxForMovement\":61338,\"shareTxUntilMovement\":61338,\"totalShares\":28500000,\"maxShares\":5700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":211792.5416843842,\"lastPrice\":214124.0938871621,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.65,\"b\":false,\"otlkMag\":5.164788813194323,\"otlkMagForecast\":47.55117160917782,\"cap\":28831262,\"spreadPerc\":0.9,\"shareTxForMovement\":52218,\"shareTxUntilMovement\":52218,\"totalShares\":52200000,\"maxShares\":10400000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":952.5918639828409,\"lastPrice\":947.2829031381467,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.84,\"b\":false,\"otlkMag\":5.5774895590854445,\"otlkMagForecast\":46.73342653410503,\"cap\":36556106,\"spreadPerc\":0.9,\"shareTxForMovement\":68837,\"shareTxUntilMovement\":68837,\"totalShares\":122000000,\"maxShares\":24400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":193.2630009748913,\"lastPrice\":197.64707797317504,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.4,\"b\":true,\"otlkMag\":5.573870064329699,\"otlkMagForecast\":56.91508243632697,\"cap\":15207729,\"spreadPerc\":1.4,\"shareTxForMovement\":48965,\"shareTxUntilMovement\":48965,\"totalShares\":12100000,\"maxShares\":2400000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2810.7194964630994,\"lastPrice\":2793.7573576239633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":5.228997978652546,\"otlkMagForecast\":45.27868541198935,\"cap\":26191738,\"spreadPerc\":1,\"shareTxForMovement\":48693,\"shareTxUntilMovement\":48693,\"totalShares\":21900000,\"maxShares\":4400000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":5488.714187469197,\"lastPrice\":5462.836403638121,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":3.218592623818323,\"otlkMagForecast\":46.34319784537117,\"cap\":3396169,\"spreadPerc\":1,\"shareTxForMovement\":131835,\"shareTxUntilMovement\":131835,\"totalShares\":21400000,\"maxShares\":4300000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":52.6655562325917,\"lastPrice\":53.28398528040389,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":true,\"otlkMag\":5.3138087461532715,\"otlkMagForecast\":53.118636979336316,\"cap\":36350386,\"spreadPerc\":1.4,\"shareTxForMovement\":66553,\"shareTxUntilMovement\":66553,\"totalShares\":11700000,\"maxShares\":2300000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":20264.87005410671,\"lastPrice\":19842.552857533832,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.19,\"b\":true,\"otlkMag\":10.271064456107823,\"otlkMagForecast\":62.73495487400407,\"cap\":20310364,\"spreadPerc\":1.2,\"shareTxForMovement\":28096,\"shareTxUntilMovement\":28096,\"totalShares\":28600000,\"maxShares\":5700000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":31.225236903440955,\"lastPrice\":30.86893488313547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.73,\"b\":true,\"otlkMag\":5.410085842754847,\"otlkMagForecast\":48.91187348195211,\"cap\":10945620,\"spreadPerc\":1.3,\"shareTxForMovement\":41261,\"shareTxUntilMovement\":41261,\"totalShares\":148100000,\"maxShares\":29600000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":19384.306871403252,\"lastPrice\":19281.391817899697,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":7.346443354778025,\"otlkMagForecast\":41.25309876280106,\"cap\":334059994,\"spreadPerc\":0.6,\"shareTxForMovement\":173887,\"shareTxUntilMovement\":173887,\"totalShares\":13100000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":4866.659479498645,\"lastPrice\":4850.478488201259,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.5,\"b\":true,\"otlkMag\":11.116323994493346,\"otlkMagForecast\":62.457707399415554,\"cap\":369466776,\"spreadPerc\":0.2,\"shareTxForMovement\":158851,\"shareTxUntilMovement\":158851,\"totalShares\":25300000,\"maxShares\":5100000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":1169286,\"lastUpdate\":1710169062340,\"ticksUntilCycle\":68}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"GoTraditionalStyle\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":200,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiAddress\":\"localhost\",\"RemoteFileApiPort\":12525,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"TailRenderInterval\":850,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\",\"maplocation\":\"#ffffff\",\"bnlvl0\":\"#ffff00\",\"bnlvl1\":\"#ff0000\",\"bnlvl2\":\"#48d1cc\",\"bnlvl3\":\"#0000ff\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":5,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"38","AllGangsSave":"","LastExportBonus":"1710169065676","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}","GoSave":"{\"previousGame\":{\"ai\":\"Netburners\",\"board\":[\"..X..\",\"..XX.\",\"XXX.X\",\"X..X.\",\"X.X.X\"],\"previousPlayer\":null},\"currentGame\":{\"ai\":\"Netburners\",\"board\":[\"..X..\",\"..XX.\",\"XXX.X\",\"X..X.\",\"X.X.X\"],\"previousBoard\":[\"OOX..\",\"OO.X.\",\"XXX.X\",\"X..X.\",\"X.X.X\"],\"previousPlayer\":null,\"cheatCount\":0,\"passCount\":2},\"stats\":{\"Netburners\":{\"favor\":0,\"highestWinStreak\":7,\"losses\":0,\"nodes\":277,\"wins\":7,\"oldWinStreak\":6,\"winStreak\":7,\"nodePower\":267.75},\"Slum Snakes\":{\"favor\":0,\"highestWinStreak\":3,\"losses\":0,\"nodes\":90,\"wins\":3,\"oldWinStreak\":2,\"winStreak\":3,\"nodePower\":129},\"The Black Hand\":{\"favor\":0,\"highestWinStreak\":0,\"losses\":2,\"nodes\":0,\"wins\":0,\"oldWinStreak\":-1,\"winStreak\":-2,\"nodePower\":0}}}"}}